{
    "AMQPChannel": {
        "description": "", 
        "name": "AMQPChannel", 
        "overview": "public void commitTransaction ( void )", 
        "parameters": [], 
        "path": "php/class.amqpchannel", 
        "type": "AMQP"
    }, 
    "AMQPChannel::__construct": {
        "description": "Creates an AMQPChannel instance representing a channel on the given connection.", 
        "name": "AMQPChannel::__construct", 
        "overview": "AMQPChannel::__construct ( AMQPConnection $amqp_connection )", 
        "parameters": [
            {
                "descr": "A instance of AMQPConnection with an active connection to a broker.", 
                "name": "amqp_connection"
            }
        ], 
        "path": "php/amqpchannel.construct", 
        "type": "AMQP"
    }, 
    "AMQPChannel::commitTransaction": {
        "description": "Commit an existing transaction. AMQPChannel::startTransaction() must be called prior to this.", 
        "name": "AMQPChannel::commitTransaction", 
        "overview": "public void AMQPChannel::commitTransaction ( void )", 
        "parameters": [], 
        "path": "php/amqpchannel.committransaction", 
        "type": "AMQP"
    }, 
    "AMQPChannel::isConnected": {
        "description": "Indicates whether the channel is connected.", 
        "name": "AMQPChannel::isConnected", 
        "overview": "public void AMQPChannel::isConnected ( void )", 
        "parameters": [], 
        "path": "php/amqpchannel.isconnected", 
        "type": "AMQP"
    }, 
    "AMQPChannel::qos": {
        "description": "Specify the amount of data to prefetch in terms of window size (octets) or number of messages from a queue during a AMQPQueue::consume() or AMQPQueue::get() method call. The client will prefetch data up to size octets or count messages from the server, whichever limit is hit first.", 
        "name": "AMQPChannel::qos", 
        "overview": "public void AMQPChannel::qos ( int $size , int $count )", 
        "parameters": [
            {
                "descr": "The window size, in octets, to prefetch.", 
                "name": "size"
            }, 
            {
                "descr": "The number of messages to prefetch.", 
                "name": "count"
            }
        ], 
        "path": "php/amqpchannel.qos", 
        "type": "AMQP"
    }, 
    "AMQPChannel::rollbackTransaction": {
        "description": "Rollback an existing transaction. AMQPChannel::startTransaction() must be called prior to this.", 
        "name": "AMQPChannel::rollbackTransaction", 
        "overview": "public void AMQPChannel::rollbackTransaction ( void )", 
        "parameters": [], 
        "path": "php/amqpchannel.rollbacktransaction", 
        "type": "AMQP"
    }, 
    "AMQPChannel::setPrefetchCount": {
        "description": "Set the number of messages to prefetch from the broker during a call to AMQPQueue::consume() or AMQPQueue::get(). Any call to this method will automatically set the prefetch window size to 0, meaning that the prefetch window size setting will be ignored.", 
        "name": "AMQPChannel::setPrefetchCount", 
        "overview": "public void AMQPChannel::setPrefetchCount ( int $count )", 
        "parameters": [
            {
                "descr": "The number of messages to prefetch.", 
                "name": "count"
            }
        ], 
        "path": "php/amqpchannel.setprefetchcount", 
        "type": "AMQP"
    }, 
    "AMQPChannel::setPrefetchSize": {
        "description": "Set the prefetch window size, in octets, during a call to AMQPQueue::consume() or AMQPQueue::get(). Any call to this method will automatically set the prefetch message count to 0, meaning that the prefetch message count setting will be ignored.", 
        "name": "AMQPChannel::setPrefetchSize", 
        "overview": "public void AMQPChannel::setPrefetchSize ( int $size )", 
        "parameters": [
            {
                "descr": "The window size, in octets, to prefetch.", 
                "name": "size"
            }
        ], 
        "path": "php/amqpchannel.setprefetchsize", 
        "type": "AMQP"
    }, 
    "AMQPChannel::startTransaction": {
        "description": "Start a transaction. This method must be called on the given channel prior to calling AMQPChannel::commitTransaction() or AMQPChannel::rollbackTransaction().", 
        "name": "AMQPChannel::startTransaction", 
        "overview": "public void AMQPChannel::startTransaction ( void )", 
        "parameters": [], 
        "path": "php/amqpchannel.starttransaction", 
        "type": "AMQP"
    }, 
    "AMQPConnection": {
        "description": "", 
        "name": "AMQPConnection", 
        "overview": "public bool connect ( void )", 
        "parameters": [], 
        "path": "php/class.amqpconnection", 
        "type": "AMQP"
    }, 
    "AMQPConnection::__construct": {
        "description": "Creates an AMQPConnection instance representing a connection to an AMQP broker.", 
        "name": "AMQPConnection::__construct", 
        "overview": "public AMQPConnection::__construct ([ array $credentials = array() ] )", 
        "parameters": [
            {
                "descr": "The credentials is an optional array of credential information for connecting to the AMQP broker. ", 
                "name": "credentials"
            }
        ], 
        "path": "php/amqpconnection.construct", 
        "type": "AMQP"
    }, 
    "AMQPConnection::connect": {
        "description": "This method will initiate a connection with the AMQP broker.", 
        "name": "AMQPConnection::connect", 
        "overview": "public bool AMQPConnection::connect ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.connect", 
        "type": "AMQP"
    }, 
    "AMQPConnection::disconnect": {
        "description": "This method will close an open connection with the AMQP broker.", 
        "name": "AMQPConnection::disconnect", 
        "overview": "public bool AMQPConnection::disconnect ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.disconnect", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getHost": {
        "description": "Get the value of the configured host.", 
        "name": "AMQPConnection::getHost", 
        "overview": "public string AMQPConnection::getHost ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.gethost", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getLogin": {
        "description": "Get the configured login.", 
        "name": "AMQPConnection::getLogin", 
        "overview": "public string AMQPConnection::getLogin ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.getlogin", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getPassword": {
        "description": "Get the configured password.", 
        "name": "AMQPConnection::getPassword", 
        "overview": "public string AMQPConnection::getPassword ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.getpassword", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getPort": {
        "description": "Return the port configured for this AMQPConnection object.", 
        "name": "AMQPConnection::getPort", 
        "overview": "public int AMQPConnection::getPort ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.getport", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getTimeout": {
        "description": "Get the current timeout setting for this instance of an AMQPConnection object.", 
        "name": "AMQPConnection::getTimeout", 
        "overview": "public int AMQPConnection::getTimeout ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.gettimeout", 
        "type": "AMQP"
    }, 
    "AMQPConnection::getVhost": {
        "description": "Get the configured vhost.", 
        "name": "AMQPConnection::getVhost", 
        "overview": "public string AMQPConnection::getVhost ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.getvhost", 
        "type": "AMQP"
    }, 
    "AMQPConnection::isConnected": {
        "description": "This method will check whether the connection to the AMQP broker is still valid. It does so by checking the return status of the last command.", 
        "name": "AMQPConnection::isConnected", 
        "overview": "public bool AMQPConnection::isConnected ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.isconnected", 
        "type": "AMQP"
    }, 
    "AMQPConnection::reconnect": {
        "description": "This method will close any open connections and initiate a new connection with the AMQP broker.", 
        "name": "AMQPConnection::reconnect", 
        "overview": "public bool AMQPConnection::reconnect ( void )", 
        "parameters": [], 
        "path": "php/amqpconnection.reconnect", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setHost": {
        "description": "This method will set the hostname used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setHost", 
        "overview": "public bool AMQPConnection::setHost ( string $host )", 
        "parameters": [
            {
                "descr": "The hostname of the AMQP broker.", 
                "name": "host"
            }
        ], 
        "path": "php/amqpconnection.sethost", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setLogin": {
        "description": "This method will set the login string used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setLogin", 
        "overview": "public bool AMQPConnection::setLogin ( string $login )", 
        "parameters": [
            {
                "descr": "The login string used to authenticate with the AMQP broker.", 
                "name": "login"
            }
        ], 
        "path": "php/amqpconnection.setlogin", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setPassword": {
        "description": "This method will set the password string used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setPassword", 
        "overview": "public bool AMQPConnection::setPassword ( string $password )", 
        "parameters": [
            {
                "descr": "The password string used to authenticate with the AMQP broker.", 
                "name": "password"
            }
        ], 
        "path": "php/amqpconnection.setpassword", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setPort": {
        "description": "This method will set the port used to connect to the AMQP broker.", 
        "name": "AMQPConnection::setPort", 
        "overview": "public bool AMQPConnection::setPort ( int $port )", 
        "parameters": [
            {
                "descr": "The port used to connect to the AMQP broker.", 
                "name": "port"
            }
        ], 
        "path": "php/amqpconnection.setport", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setTimeout": {
        "description": "Set the amount of time, in seconds, after which this instance of an AMQPConnection object times out a request to the broker. Setting this value will override the default value specified by the amqp.timeout INI setting. To specify a timeout of 500ms, simply pass in 0.5.", 
        "name": "AMQPConnection::setTimeout", 
        "overview": "public bool AMQPConnection::setTimeout ( float $timeout )", 
        "parameters": [
            {
                "descr": "The timeout used to connect to the AMQP broker.", 
                "name": "timeout"
            }
        ], 
        "path": "php/amqpconnection.settimeout", 
        "type": "AMQP"
    }, 
    "AMQPConnection::setVhost": {
        "description": "Sets the virtual host to which to connect on the AMQP broker.", 
        "name": "AMQPConnection::setVhost", 
        "overview": "public bool AMQPConnection::setVhost ( string $vhost )", 
        "parameters": [
            {
                "descr": "The virtual host to use on the AMQP broker.", 
                "name": "host"
            }
        ], 
        "path": "php/amqpconnection.setvhost", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope": {
        "description": "", 
        "name": "AMQPEnvelope", 
        "overview": "public string getAppId ( void )", 
        "parameters": [], 
        "path": "php/class.amqpenvelope", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getAppId": {
        "description": "Get the application id of the message.", 
        "name": "AMQPEnvelope::getAppId", 
        "overview": "public string AMQPEnvelope::getAppId ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getappid", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getBody": {
        "description": "Get the body of the message.", 
        "name": "AMQPEnvelope::getBody", 
        "overview": "public string AMQPEnvelope::getBody ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getbody", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getContentEncoding": {
        "description": "Get the content encoding of the message.", 
        "name": "AMQPEnvelope::getContentEncoding", 
        "overview": "public string AMQPEnvelope::getContentEncoding ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getcontentencoding", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getContentType": {
        "description": "Get the content type of the message.", 
        "name": "AMQPEnvelope::getContentType", 
        "overview": "public string AMQPEnvelope::getContentType ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getcontenttype", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getCorrelationId": {
        "description": "Get the correlation id of the message.", 
        "name": "AMQPEnvelope::getCorrelationId", 
        "overview": "public string AMQPEnvelope::getCorrelationId ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getcorrelationid", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getDeliveryTag": {
        "description": "Get the delivery tag of the message.", 
        "name": "AMQPEnvelope::getDeliveryTag", 
        "overview": "public string AMQPEnvelope::getDeliveryTag ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getdeliverytag", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getExchange": {
        "description": "Get the exchange name on which the message was published.", 
        "name": "AMQPEnvelope::getExchange", 
        "overview": "public string AMQPEnvelope::getExchange ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getexchange", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getExpiration": {
        "description": "Get the expiration of the message.", 
        "name": "AMQPEnvelope::getExpiration", 
        "overview": "public string AMQPEnvelope::getExpiration ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getexpiration", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getHeader": {
        "description": "Get the header value for a specific header key.", 
        "name": "AMQPEnvelope::getHeader", 
        "overview": "public string AMQPEnvelope::getHeader ( string $header_key )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getheader", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getHeaders": {
        "description": "Get the headers of the message.", 
        "name": "AMQPEnvelope::getHeaders", 
        "overview": "public array AMQPEnvelope::getHeaders ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getheaders", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getMessageId": {
        "description": "Get the message id of the message.", 
        "name": "AMQPEnvelope::getMessageId", 
        "overview": "public string AMQPEnvelope::getMessageId ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getmessageid", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getPriority": {
        "description": "Get the priority of the message.", 
        "name": "AMQPEnvelope::getPriority", 
        "overview": "public string AMQPEnvelope::getPriority ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getpriority", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getReplyTo": {
        "description": "Get the reply to of the message.", 
        "name": "AMQPEnvelope::getReplyTo", 
        "overview": "public string AMQPEnvelope::getReplyTo ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getreplyto", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getRoutingKey": {
        "description": "Get the routing key of the message.", 
        "name": "AMQPEnvelope::getRoutingKey", 
        "overview": "public string AMQPEnvelope::getRoutingKey ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getroutingkey", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getTimeStamp": {
        "description": "Get the timestamp of the message.", 
        "name": "AMQPEnvelope::getTimeStamp", 
        "overview": "public string AMQPEnvelope::getTimeStamp ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.gettimestamp", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getType": {
        "description": "Get the type of the message.", 
        "name": "AMQPEnvelope::getType", 
        "overview": "public string AMQPEnvelope::getType ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.gettype", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::getUserId": {
        "description": "Get the user id of the message.", 
        "name": "AMQPEnvelope::getUserId", 
        "overview": "public string AMQPEnvelope::getUserId ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.getuserid", 
        "type": "AMQP"
    }, 
    "AMQPEnvelope::isRedelivery": {
        "description": "Whether this is a redelivery of a message. If this message has been delivered and AMQPEnvelope::nack() was called, the message will be put back on the queue to be redelivered, at which point the message will always return TRUE when this method is called.", 
        "name": "AMQPEnvelope::isRedelivery", 
        "overview": "public bool AMQPEnvelope::isRedelivery ( void )", 
        "parameters": [], 
        "path": "php/amqpenvelope.isredelivery", 
        "type": "AMQP"
    }, 
    "AMQPExchange": {
        "description": "", 
        "name": "AMQPExchange", 
        "overview": "public bool bind ( string $destination_exchange_name , string $source_exchange_name , string $routing_key )", 
        "parameters": [], 
        "path": "php/class.amqpexchange", 
        "type": "AMQP"
    }, 
    "AMQPExchange::__construct": {
        "description": "Returns a new instance of an AMQPExchange object, associated with the given AMQPChannel object.", 
        "name": "AMQPExchange::__construct", 
        "overview": "public AMQPExchange::__construct ( AMQPChannel $amqp_channel )", 
        "parameters": [
            {
                "descr": "A valid AMQPChannel object, connected to a broker.", 
                "name": "AMQPChannel"
            }
        ], 
        "path": "php/amqpexchange.construct", 
        "type": "AMQP"
    }, 
    "AMQPExchange::bind": {
        "description": "Bind an exchange to another exchange using the specified routing key.", 
        "name": "AMQPExchange::bind", 
        "overview": "public bool AMQPExchange::bind ( string $destination_exchange_name , string $source_exchange_name , string $routing_key )", 
        "parameters": [
            {
                "descr": "The name of the destination exchange in the binding.", 
                "name": "destination_exchange_name"
            }, 
            {
                "descr": "The name of the source exchange in the binding.", 
                "name": "source_exchange_name"
            }, 
            {
                "descr": "The routing key to use as a binding.", 
                "name": "routing_key"
            }
        ], 
        "path": "php/amqpexchange.bind", 
        "type": "AMQP"
    }, 
    "AMQPExchange::declare": {
        "description": "Declare a new exchange on the broker.", 
        "name": "AMQPExchange::declare", 
        "overview": "public int AMQPExchange::declare ( void )", 
        "parameters": [], 
        "path": "php/amqpexchange.declare", 
        "type": "AMQP"
    }, 
    "AMQPExchange::delete": {
        "description": "Delete and exchange from the broker.", 
        "name": "AMQPExchange::delete", 
        "overview": "public bool AMQPExchange::delete ([ int $flags = AMQP_NOPARAM ] )", 
        "parameters": [
            {
                "descr": "Optionally AMQP_IFUNUSED can be specified to indicate the exchange should not be deleted until no clients are connected to it.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpexchange.delete", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getArgument": {
        "description": "Get the argument associated with the given key.", 
        "name": "AMQPExchange::getArgument", 
        "overview": "public mixed AMQPExchange::getArgument ( string $key )", 
        "parameters": [
            {
                "descr": "The key to look up.", 
                "name": "key"
            }
        ], 
        "path": "php/amqpexchange.getargument", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getArguments": {
        "description": "Get all arguments as an array of key/value pairs that are currently set on the given exchange.", 
        "name": "AMQPExchange::getArguments", 
        "overview": "public array AMQPExchange::getArguments ( void )", 
        "parameters": [], 
        "path": "php/amqpexchange.getarguments", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getFlags": {
        "description": "Get all the flags currently set on the given exchange.", 
        "name": "AMQPExchange::getFlags", 
        "overview": "public int AMQPExchange::getFlags ( void )", 
        "parameters": [], 
        "path": "php/amqpexchange.getflags", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getName": {
        "description": "Get the configured name.", 
        "name": "AMQPExchange::getName", 
        "overview": "public string AMQPExchange::getName ( void )", 
        "parameters": [], 
        "path": "php/amqpexchange.getname", 
        "type": "AMQP"
    }, 
    "AMQPExchange::getType": {
        "description": "Get the configured type.", 
        "name": "AMQPExchange::getType", 
        "overview": "public string AMQPExchange::getType ( void )", 
        "parameters": [], 
        "path": "php/amqpexchange.gettype", 
        "type": "AMQP"
    }, 
    "AMQPExchange::publish": {
        "description": "Publish a message to the exchange represented by the AMQPExchange object.", 
        "name": "AMQPExchange::publish", 
        "overview": "public bool AMQPExchange::publish ( string $message , string $routing_key [, int $flags = AMQP_NOPARAM [, array $attributes = array() ]] )", 
        "parameters": [
            {
                "descr": "The message to publish.", 
                "name": "message"
            }, 
            {
                "descr": "The routing key to which to publish.", 
                "name": "routing_key"
            }, 
            {
                "descr": "One or more of AMQP_MANDATORY and AMQP_IMMEDIATE.", 
                "name": "flags"
            }, 
            {
                "descr": "Supported indexes key Description Default value content_type   text/plain content_encoding   NULL message_id   NULL user_id   NULL app_id   NULL delivery_mode   NULL priority   NULL timestamp   NULL expiration time in milliseconds NULL type   NULL reply_to   NULL headers custom attributes to pass along with message array", 
                "name": "attributes"
            }
        ], 
        "path": "php/amqpexchange.publish", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setArgument": {
        "description": "Set the key to the given value.", 
        "name": "AMQPExchange::setArgument", 
        "overview": "public void AMQPExchange::setArgument ( string $key , mixed $value )", 
        "parameters": [
            {
                "descr": "The key to set.", 
                "name": "key"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }
        ], 
        "path": "php/amqpexchange.setargument", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setArguments": {
        "description": "Set all arguments on the given exchange. All other argument settings will be wiped.", 
        "name": "AMQPExchange::setArguments", 
        "overview": "public void AMQPExchange::setArguments ( array $arguments )", 
        "parameters": [
            {
                "descr": "An array of key/value pairs of arguments.", 
                "name": "arguments"
            }
        ], 
        "path": "php/amqpexchange.setarguments", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setFlags": {
        "description": "Set the flags on an exchange.", 
        "name": "AMQPExchange::setFlags", 
        "overview": "public void AMQPExchange::setFlags ( int $flags )", 
        "parameters": [
            {
                "descr": "A bitmask of flags. This call currently only considers the following flags: AMQP_DURABLE, AMQP_PASSIVE.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpexchange.setflags", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setName": {
        "description": "Set the name of the exchange.", 
        "name": "AMQPExchange::setName", 
        "overview": "public void AMQPExchange::setName ( string $exchange_name )", 
        "parameters": [
            {
                "descr": "The name of the exchange to set as string.", 
                "name": "exchange_name"
            }
        ], 
        "path": "php/amqpexchange.setname", 
        "type": "AMQP"
    }, 
    "AMQPExchange::setType": {
        "description": "Set the type of the exchange. This can be any of AMQP_EX_TYPE_DIRECT, AMQP_EX_TYPE_FANOUT, AMQP_EX_TYPE_HEADER or AMQP_EX_TYPE_TOPIC.", 
        "name": "AMQPExchange::setType", 
        "overview": "public string AMQPExchange::setType ( string $exchange_type )", 
        "parameters": [
            {
                "descr": "The type of exchange as a string.", 
                "name": "exchange_type"
            }
        ], 
        "path": "php/amqpexchange.settype", 
        "type": "AMQP"
    }, 
    "AMQPQueue": {
        "description": "", 
        "name": "AMQPQueue", 
        "overview": "public bool ack ( int $delivery_tag [, int $flags = AMQP_NOPARAM ] )", 
        "parameters": [], 
        "path": "php/class.amqpqueue", 
        "type": "AMQP"
    }, 
    "AMQPQueue::__construct": {
        "description": "Creates an AMQPQueue instance representing an AMQP queue on the broker.", 
        "name": "AMQPQueue::__construct", 
        "overview": "public AMQPQueue::__construct ( AMQPChannel $amqp_channel )", 
        "parameters": [], 
        "path": "php/amqpqueue.construct", 
        "type": "AMQP"
    }, 
    "AMQPQueue::ack": {
        "description": "This method allows the acknowledgement of a message that is retrieved without the AMQP_AUTOACK flag through AMQPQueue::get() or AMQPQueue::consume()", 
        "name": "AMQPQueue::ack", 
        "overview": "public bool AMQPQueue::ack ( int $delivery_tag [, int $flags = AMQP_NOPARAM ] )", 
        "parameters": [
            {
                "descr": "The message delivery tag of which to acknowledge receipt.", 
                "name": "delivery_tag"
            }, 
            {
                "descr": "The only valid flag that can be passed is AMQP_MULTIPLE.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.ack", 
        "type": "AMQP"
    }, 
    "AMQPQueue::bind": {
        "description": "The bind method will bind the given queue to the specified routing key on the given exchange.", 
        "name": "AMQPQueue::bind", 
        "overview": "public bool AMQPQueue::bind ( string $exchange_name , string $routing_key )", 
        "parameters": [
            {
                "descr": "The exchange name on which to bind.", 
                "name": "exchange_name"
            }, 
            {
                "descr": "The routing key to which to bind.", 
                "name": "routing_key"
            }
        ], 
        "path": "php/amqpqueue.bind", 
        "type": "AMQP"
    }, 
    "AMQPQueue::cancel": {
        "description": "Cancel a queue that is already bound to an exchange and routing key.", 
        "name": "AMQPQueue::cancel", 
        "overview": "public bool AMQPQueue::cancel ([ string $consumer_tag = \"\" ] )", 
        "parameters": [
            {
                "descr": "The queue name to cancel, if the queue object is not already representative of a queue.", 
                "name": "consumer_tag"
            }
        ], 
        "path": "php/amqpqueue.cancel", 
        "type": "AMQP"
    }, 
    "AMQPQueue::consume": {
        "description": "Blocking function that will retrieve the next message from the queue as it becomes available and will pass it off to the callback.", 
        "name": "AMQPQueue::consume", 
        "overview": "public void AMQPQueue::consume ( callable $callback [, int $flags = AMQP_NOPARAM ] )", 
        "parameters": [
            {
                "descr": "A callback function to which the consumed message will be passed. ", 
                "name": "callback"
            }, 
            {
                "descr": "A bitmask of any of the flags: AMQP_NOACK.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.consume", 
        "type": "AMQP"
    }, 
    "AMQPQueue::declare": {
        "description": "Declare a new queue on the broker.", 
        "name": "AMQPQueue::declare", 
        "overview": "public int AMQPQueue::declare ( void )", 
        "parameters": [], 
        "path": "php/amqpqueue.declare", 
        "type": "AMQP"
    }, 
    "AMQPQueue::delete": {
        "description": "Delete a queue from the broker, including its entire contents of unread or unacknowledged messages.", 
        "name": "AMQPQueue::delete", 
        "overview": "publicbool AMQPQueue::delete ( void )", 
        "parameters": [], 
        "path": "php/amqpqueue.delete", 
        "type": "AMQP"
    }, 
    "AMQPQueue::get": {
        "description": "Retrieve the next available message from the queue. If no messages are present in the queue, this function will return FALSE immediately. This is a non blocking alternative to the AMQPQueue::consume() method.", 
        "name": "AMQPQueue::get", 
        "overview": "public mixed AMQPQueue::get ([ int $flags = ini_get(\"amqp.auto_ack\") ] )", 
        "parameters": [
            {
                "descr": "A bitmask of supported flags for the method call. ", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.get", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getArgument": {
        "description": "Get the argument associated with the given key.", 
        "name": "AMQPQueue::getArgument", 
        "overview": "public mixed AMQPQueue::getArgument ( string $key )", 
        "parameters": [
            {
                "descr": "The key to look up.", 
                "name": "key"
            }
        ], 
        "path": "php/amqpqueue.getargument", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getArguments": {
        "description": "Get all arguments as an array of key/value pairs that are currently set on the given queue.", 
        "name": "AMQPQueue::getArguments", 
        "overview": "public array AMQPQueue::getArguments ( void )", 
        "parameters": [], 
        "path": "php/amqpqueue.getarguments", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getFlags": {
        "description": "Get all the flags currently set on the given queue.", 
        "name": "AMQPQueue::getFlags", 
        "overview": "public int AMQPQueue::getFlags ( void )", 
        "parameters": [], 
        "path": "php/amqpqueue.getflags", 
        "type": "AMQP"
    }, 
    "AMQPQueue::getName": {
        "description": "Get the configured name.", 
        "name": "AMQPQueue::getName", 
        "overview": "public string AMQPQueue::getName ( void )", 
        "parameters": [], 
        "path": "php/amqpqueue.getname", 
        "type": "AMQP"
    }, 
    "AMQPQueue::nack": {
        "description": "Mark the message identified by delivery_tag as explicitly not acknowledged. This method can only be called on messages that have not yet been acknowledged, meaning that messages retrieved with by AMQPQueue::consume() and AMQPQueue::get() and using the AMQP_AUTOACK flag are not eligible.", 
        "name": "AMQPQueue::nack", 
        "overview": "public void AMQPQueue::nack ( string $delivery_tag [, string $flags = AMQP_NOPARAM ] )", 
        "parameters": [
            {
                "descr": "The delivery tag by which to identify the message.", 
                "name": "delivery_tag"
            }, 
            {
                "descr": "A bitmask of flags.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.nack", 
        "type": "AMQP"
    }, 
    "AMQPQueue::purge": {
        "description": "Purge the contents of a queue.", 
        "name": "AMQPQueue::purge", 
        "overview": "public bool AMQPQueue::purge ( void )", 
        "parameters": [], 
        "path": "php/amqpqueue.purge", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setArgument": {
        "description": "Set the key to the given value.", 
        "name": "AMQPQueue::setArgument", 
        "overview": "public void AMQPQueue::setArgument ( string $key , mixed $value )", 
        "parameters": [
            {
                "descr": "The key to set.", 
                "name": "key"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }
        ], 
        "path": "php/amqpqueue.setargument", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setArguments": {
        "description": "Set all arguments on the given queue. All other argument settings will be wiped.", 
        "name": "AMQPQueue::setArguments", 
        "overview": "public void AMQPQueue::setArguments ( array $arguments )", 
        "parameters": [
            {
                "descr": "An array of key/value pairs of arguments.", 
                "name": "arguments"
            }
        ], 
        "path": "php/amqpqueue.setarguments", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setFlags": {
        "description": "Set the flags on the queue.", 
        "name": "AMQPQueue::setFlags", 
        "overview": "public void AMQPQueue::setFlags ( int $flags )", 
        "parameters": [
            {
                "descr": "A bitmask of flags. This call currently only supports a bitmask of the following flags: AMQP_DURABLE, AMQP_PASSIVE, AMQP_EXCLUSIVE, AMQP_AUTODELETE.", 
                "name": "flags"
            }
        ], 
        "path": "php/amqpqueue.setflags", 
        "type": "AMQP"
    }, 
    "AMQPQueue::setName": {
        "description": "Set the name of the queue", 
        "name": "AMQPQueue::setName", 
        "overview": "public void AMQPQueue::setName ( string $queue_name )", 
        "parameters": [
            {
                "descr": "The name of the queue as a string.", 
                "name": "queue_name"
            }
        ], 
        "path": "php/amqpqueue.setname", 
        "type": "AMQP"
    }, 
    "AMQPQueue::unbind": {
        "description": "Remove a routing key binding on an exchange from the given queue.", 
        "name": "AMQPQueue::unbind", 
        "overview": "public bool AMQPQueue::unbind ( string $exchange_name , string $routing_key )", 
        "parameters": [
            {
                "descr": "The name of the exchange on which the queue is bound.", 
                "name": "exchange_name"
            }, 
            {
                "descr": "The binding routing key used by the queue.", 
                "name": "routing_key"
            }
        ], 
        "path": "php/amqpqueue.unbind", 
        "type": "AMQP"
    }, 
    "APCIterator": {
        "description": "", 
        "name": "APCIterator", 
        "overview": "public __construct ( string $cache [, mixed $search = null [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )", 
        "parameters": [], 
        "path": "php/class.apciterator", 
        "type": "APC"
    }, 
    "APCIterator::__construct": {
        "description": "Constructs an APCIterator object.", 
        "name": "APCIterator::__construct", 
        "overview": "public APCIterator::__construct ( string $cache [, mixed $search = null [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )", 
        "parameters": [
            {
                "descr": "The cache type, which will be user or file.", 
                "name": "cache"
            }, 
            {
                "descr": "A PCRE regular expression that matches against APC key names, either as a string for a single regular expression, or as an array of regular expressions. ", 
                "name": "search"
            }, 
            {
                "descr": "The desired format, as configured with one or more of the APC_ITER_* constants.", 
                "name": "format"
            }, 
            {
                "descr": "The chunk size. Must be a value greater than 0. ", 
                "name": "chunk_size"
            }, 
            {
                "descr": "The type to list. Either pass in APC_LIST_ACTIVE or APC_LIST_DELETED.", 
                "name": "list"
            }
        ], 
        "path": "php/apciterator.construct", 
        "type": "APC"
    }, 
    "APCIterator::current": {
        "description": "Gets the current item from the APCIterator stack.", 
        "name": "APCIterator::current", 
        "overview": "public mixed APCIterator::current ( void )", 
        "parameters": [], 
        "path": "php/apciterator.current", 
        "type": "APC"
    }, 
    "APCIterator::getTotalCount": {
        "description": "Get the total count.", 
        "name": "APCIterator::getTotalCount", 
        "overview": "public int APCIterator::getTotalCount ( void )", 
        "parameters": [], 
        "path": "php/apciterator.gettotalcount", 
        "type": "APC"
    }, 
    "APCIterator::getTotalHits": {
        "description": "Gets the total number of cache hits.", 
        "name": "APCIterator::getTotalHits", 
        "overview": "public int APCIterator::getTotalHits ( void )", 
        "parameters": [], 
        "path": "php/apciterator.gettotalhits", 
        "type": "APC"
    }, 
    "APCIterator::getTotalSize": {
        "description": "Gets the total cache size.", 
        "name": "APCIterator::getTotalSize", 
        "overview": "public int APCIterator::getTotalSize ( void )", 
        "parameters": [], 
        "path": "php/apciterator.gettotalsize", 
        "type": "APC"
    }, 
    "APCIterator::key": {
        "description": "Gets the current iterator key.", 
        "name": "APCIterator::key", 
        "overview": "public string APCIterator::key ( void )", 
        "parameters": [], 
        "path": "php/apciterator.key", 
        "type": "APC"
    }, 
    "APCIterator::next": {
        "description": "Moves the iterator pointer to the next element.", 
        "name": "APCIterator::next", 
        "overview": "public void APCIterator::next ( void )", 
        "parameters": [], 
        "path": "php/apciterator.next", 
        "type": "APC"
    }, 
    "APCIterator::rewind": {
        "description": "Rewinds back the iterator to the first element.", 
        "name": "APCIterator::rewind", 
        "overview": "public void APCIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/apciterator.rewind", 
        "type": "APC"
    }, 
    "APCIterator::valid": {
        "description": "Checks if the current iterator position is valid.", 
        "name": "APCIterator::valid", 
        "overview": "public void APCIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/apciterator.valid", 
        "type": "APC"
    }, 
    "AppendIterator": {
        "description": "", 
        "name": "AppendIterator", 
        "overview": "public void append ( Iterator $iterator )", 
        "parameters": [], 
        "path": "php/class.appenditerator", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::append": {
        "description": "Appends an iterator.", 
        "name": "AppendIterator::append", 
        "overview": "public void AppendIterator::append ( Iterator $iterator )", 
        "parameters": [
            {
                "descr": "The iterator to append.", 
                "name": "iterator"
            }
        ], 
        "path": "php/appenditerator.append", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::current": {
        "description": "Gets the current value.", 
        "name": "AppendIterator::current", 
        "overview": "public mixed AppendIterator::current ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.current", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::getArrayIterator": {
        "description": "This method gets the ArrayIterator that is used to store the iterators added with AppendIterator::append().", 
        "name": "AppendIterator::getArrayIterator", 
        "overview": "public void AppendIterator::getArrayIterator ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.getarrayiterator", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::getInnerIterator": {
        "description": "This method returns the current inner iterator.", 
        "name": "AppendIterator::getInnerIterator", 
        "overview": "public Iterator AppendIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.getinneriterator", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::getIteratorIndex": {
        "description": "Gets the index of the current inner iterator.", 
        "name": "AppendIterator::getIteratorIndex", 
        "overview": "public int AppendIterator::getIteratorIndex ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.getiteratorindex", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::key": {
        "description": "Get the current key.", 
        "name": "AppendIterator::key", 
        "overview": "public scalar AppendIterator::key ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.key", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::next": {
        "description": "Moves to the next element. If this means to another Iterator then it rewinds that Iterator.", 
        "name": "AppendIterator::next", 
        "overview": "public void AppendIterator::next ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.next", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::rewind": {
        "description": "Rewind to the first element of the first inner Iterator.", 
        "name": "AppendIterator::rewind", 
        "overview": "public void AppendIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "AppendIterator::valid": {
        "description": "Checks validity of the current element.", 
        "name": "AppendIterator::valid", 
        "overview": "public bool AppendIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/appenditerator.valid", 
        "type": "SPL/Iterators"
    }, 
    "ArrayAccess (interface": {
        "description": "", 
        "name": "ArrayAccess (interface", 
        "overview": "abstract public boolean offsetExists ( mixed $offset )", 
        "parameters": [], 
        "path": "php/class.arrayaccess", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetExists": {
        "description": "Whether or not an offset exists.", 
        "name": "ArrayAccess::offsetExists", 
        "overview": "abstract public boolean ArrayAccess::offsetExists ( mixed $offset )", 
        "parameters": [
            {
                "descr": "An offset to check for.", 
                "name": "offset"
            }
        ], 
        "path": "php/arrayaccess.offsetexists", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetGet": {
        "description": "Returns the value at specified offset.", 
        "name": "ArrayAccess::offsetGet", 
        "overview": "abstract public mixed ArrayAccess::offsetGet ( mixed $offset )", 
        "parameters": [
            {
                "descr": "The offset to retrieve.", 
                "name": "offset"
            }
        ], 
        "path": "php/arrayaccess.offsetget", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetSet": {
        "description": "Assigns a value to the specified offset.", 
        "name": "ArrayAccess::offsetSet", 
        "overview": "abstract public void ArrayAccess::offsetSet ( mixed $offset , mixed $value )", 
        "parameters": [
            {
                "descr": "The offset to assign the value to.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }
        ], 
        "path": "php/arrayaccess.offsetset", 
        "type": "Classes and Functions"
    }, 
    "ArrayAccess::offsetUnset": {
        "description": "Unsets an offset.", 
        "name": "ArrayAccess::offsetUnset", 
        "overview": "abstract public void ArrayAccess::offsetUnset ( mixed $offset )", 
        "parameters": [
            {
                "descr": "The offset to unset.", 
                "name": "offset"
            }
        ], 
        "path": "php/arrayaccess.offsetunset", 
        "type": "Classes and Functions"
    }, 
    "ArrayIterator": {
        "description": "", 
        "name": "ArrayIterator", 
        "overview": "public void append ( mixed $value )", 
        "parameters": [], 
        "path": "php/class.arrayiterator", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::__construct": {
        "description": "Constructs an ArrayIterator object.", 
        "name": "ArrayIterator::__construct", 
        "overview": "public ArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]] )", 
        "parameters": [
            {
                "descr": "The array or object to be iterated on.", 
                "name": "array"
            }, 
            {
                "descr": "Flags to control the behaviour of the ArrayIterator object. ", 
                "name": "flags"
            }
        ], 
        "path": "php/arrayiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::append": {
        "description": "Appends value as the last element.", 
        "name": "ArrayIterator::append", 
        "overview": "public void ArrayIterator::append ( mixed $value )", 
        "parameters": [
            {
                "descr": "The value to append.", 
                "name": "value"
            }
        ], 
        "path": "php/arrayiterator.append", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::asort": {
        "description": "Sorts an array by values.", 
        "name": "ArrayIterator::asort", 
        "overview": "public void ArrayIterator::asort ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.asort", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::count": {
        "description": "Gets the number of elements in the array, or the number of public properties in the object.", 
        "name": "ArrayIterator::count", 
        "overview": "public int ArrayIterator::count ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.count", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::current": {
        "description": "Get the current array entry.", 
        "name": "ArrayIterator::current", 
        "overview": "public mixed ArrayIterator::current ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.current", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::getArrayCopy": {
        "description": "Get a copy of an array.", 
        "name": "ArrayIterator::getArrayCopy", 
        "overview": "public array ArrayIterator::getArrayCopy ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.getarraycopy", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::getFlags": {
        "description": "Get the current flags.", 
        "name": "ArrayIterator::getFlags", 
        "overview": "public void ArrayIterator::getFlags ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.getflags", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::key": {
        "description": "This function returns the current array key", 
        "name": "ArrayIterator::key", 
        "overview": "public mixed ArrayIterator::key ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.key", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::ksort": {
        "description": "Sorts an array by the keys.", 
        "name": "ArrayIterator::ksort", 
        "overview": "public void ArrayIterator::ksort ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.ksort", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::natcasesort": {
        "description": "Sort the entries by values using a case insensitive \"natural order\" algorithm.", 
        "name": "ArrayIterator::natcasesort", 
        "overview": "public void ArrayIterator::natcasesort ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.natcasesort", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::natsort": {
        "description": "Sort the entries by values using \"natural order\" algorithm.", 
        "name": "ArrayIterator::natsort", 
        "overview": "public void ArrayIterator::natsort ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.natsort", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::next": {
        "description": "The iterator to the next entry.", 
        "name": "ArrayIterator::next", 
        "overview": "public void ArrayIterator::next ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetExists": {
        "description": "Checks if the offset exists.", 
        "name": "ArrayIterator::offsetExists", 
        "overview": "public void ArrayIterator::offsetExists ( string $index )", 
        "parameters": [
            {
                "descr": "The offset being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayiterator.offsetexists", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetGet": {
        "description": "Gets the value from the provided offset.", 
        "name": "ArrayIterator::offsetGet", 
        "overview": "public mixed ArrayIterator::offsetGet ( string $index )", 
        "parameters": [
            {
                "descr": "The offset to get the value from.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayiterator.offsetget", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetSet": {
        "description": "Sets a value for a given offset.", 
        "name": "ArrayIterator::offsetSet", 
        "overview": "public void ArrayIterator::offsetSet ( string $index , string $newval )", 
        "parameters": [
            {
                "descr": "The index to set for.", 
                "name": "index"
            }, 
            {
                "descr": "The new value to store at the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/arrayiterator.offsetset", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::offsetUnset": {
        "description": "Unsets a value for an offset.", 
        "name": "ArrayIterator::offsetUnset", 
        "overview": "public void ArrayIterator::offsetUnset ( string $index )", 
        "parameters": [
            {
                "descr": "The offset to unset.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayiterator.offsetunset", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::rewind": {
        "description": "This rewinds the iterator to the beginning.", 
        "name": "ArrayIterator::rewind", 
        "overview": "public void ArrayIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::seek": {
        "description": "", 
        "name": "ArrayIterator::seek", 
        "overview": "public void ArrayIterator::seek ( int $position )", 
        "parameters": [
            {
                "descr": "The position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/arrayiterator.seek", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::serialize": {
        "description": "Serialize.", 
        "name": "ArrayIterator::serialize", 
        "overview": "public string ArrayIterator::serialize ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.serialize", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::setFlags": {
        "description": "Sets behaviour flags.", 
        "name": "ArrayIterator::setFlags", 
        "overview": "public void ArrayIterator::setFlags ( string $flags )", 
        "parameters": [
            {
                "descr": "A bitmask as follows:  0 = Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.). ", 
                "name": "flags"
            }
        ], 
        "path": "php/arrayiterator.setflags", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::uasort": {
        "description": "Sort the entries by values using user defined function.", 
        "name": "ArrayIterator::uasort", 
        "overview": "public void ArrayIterator::uasort ( string $cmp_function )", 
        "parameters": [
            {
                "descr": "The compare function used for the sort.", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayiterator.uasort", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::uksort": {
        "description": "Sort the entries by key using user defined function.", 
        "name": "ArrayIterator::uksort", 
        "overview": "public void ArrayIterator::uksort ( string $cmp_function )", 
        "parameters": [
            {
                "descr": "The compare function used for the sort.", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayiterator.uksort", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::unserialize": {
        "description": "Unserialize.", 
        "name": "ArrayIterator::unserialize", 
        "overview": "public string ArrayIterator::unserialize ( string $serialized )", 
        "parameters": [
            {
                "descr": "The serialized ArrayIterator object to be unserialized.", 
                "name": "serialized"
            }
        ], 
        "path": "php/arrayiterator.unserialize", 
        "type": "SPL/Iterators"
    }, 
    "ArrayIterator::valid": {
        "description": "Checks if the array contains any more entries.", 
        "name": "ArrayIterator::valid", 
        "overview": "public bool ArrayIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/arrayiterator.valid", 
        "type": "SPL/Iterators"
    }, 
    "ArrayObject": {
        "description": "", 
        "name": "ArrayObject", 
        "overview": "public void append ( mixed $value )", 
        "parameters": [], 
        "path": "php/class.arrayobject", 
        "type": "SPL"
    }, 
    "ArrayObject::append": {
        "description": "Appends a new value as the last element.", 
        "name": "ArrayObject::append", 
        "overview": "public void ArrayObject::append ( mixed $value )", 
        "parameters": [
            {
                "descr": "The value being appended.", 
                "name": "value"
            }
        ], 
        "path": "php/arrayobject.append", 
        "type": "SPL"
    }, 
    "ArrayObject::asort": {
        "description": "Sorts the entries such that the keys maintain their correlation with the entries they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.", 
        "name": "ArrayObject::asort", 
        "overview": "public void ArrayObject::asort ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.asort", 
        "type": "SPL"
    }, 
    "ArrayObject::count": {
        "description": "Get the number of public properties in the ArrayObject.", 
        "name": "ArrayObject::count", 
        "overview": "public int ArrayObject::count ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.count", 
        "type": "SPL"
    }, 
    "ArrayObject::exchangeArray": {
        "description": "Exchange the current array with another array or object.", 
        "name": "ArrayObject::exchangeArray", 
        "overview": "public array ArrayObject::exchangeArray ( mixed $input )", 
        "parameters": [
            {
                "descr": "The new array or object to exchange with the current array.", 
                "name": "input"
            }
        ], 
        "path": "php/arrayobject.exchangearray", 
        "type": "SPL"
    }, 
    "ArrayObject::getArrayCopy": {
        "description": "Exports the ArrayObject to an array.", 
        "name": "ArrayObject::getArrayCopy", 
        "overview": "public array ArrayObject::getArrayCopy ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.getarraycopy", 
        "type": "SPL"
    }, 
    "ArrayObject::getFlags": {
        "description": "Gets the behavior flags of the ArrayObject. See the ArrayObject::setFlags method for a list of the available flags.", 
        "name": "ArrayObject::getFlags", 
        "overview": "public int ArrayObject::getFlags ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.getflags", 
        "type": "SPL"
    }, 
    "ArrayObject::getIterator": {
        "description": "Create a new iterator from an ArrayObject instance.", 
        "name": "ArrayObject::getIterator", 
        "overview": "public ArrayIterator ArrayObject::getIterator ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.getiterator", 
        "type": "SPL"
    }, 
    "ArrayObject::getIteratorClass": {
        "description": "Gets the class name of the array iterator that is used by ArrayObject::getIterator().", 
        "name": "ArrayObject::getIteratorClass", 
        "overview": "public string ArrayObject::getIteratorClass ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.getiteratorclass", 
        "type": "SPL"
    }, 
    "ArrayObject::ksort": {
        "description": "Sorts the entries by key, maintaining key to entry correlations. This is useful mainly for associative arrays.", 
        "name": "ArrayObject::ksort", 
        "overview": "public void ArrayObject::ksort ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.ksort", 
        "type": "SPL"
    }, 
    "ArrayObject::natcasesort": {
        "description": "This method is a case insensitive version of ArrayObject::natsort.", 
        "name": "ArrayObject::natcasesort", 
        "overview": "public void ArrayObject::natcasesort ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.natcasesort", 
        "type": "SPL"
    }, 
    "ArrayObject::natsort": {
        "description": "This method implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a \"natural ordering\". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in ArrayObject::asort) method can be seen in the example below.", 
        "name": "ArrayObject::natsort", 
        "overview": "public void ArrayObject::natsort ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.natsort", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetExists": {
        "description": "", 
        "name": "ArrayObject::offsetExists", 
        "overview": "public bool ArrayObject::offsetExists ( mixed $index )", 
        "parameters": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayobject.offsetexists", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetGet": {
        "description": "", 
        "name": "ArrayObject::offsetGet", 
        "overview": "public mixed ArrayObject::offsetGet ( mixed $index )", 
        "parameters": [
            {
                "descr": "The index with the value.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayobject.offsetget", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetSet": {
        "description": "Sets the value at the specified index to newval.", 
        "name": "ArrayObject::offsetSet", 
        "overview": "public void ArrayObject::offsetSet ( mixed $index , mixed $newval )", 
        "parameters": [
            {
                "descr": "The index being set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/arrayobject.offsetset", 
        "type": "SPL"
    }, 
    "ArrayObject::offsetUnset": {
        "description": "Unsets the value at the specified index.", 
        "name": "ArrayObject::offsetUnset", 
        "overview": "public void ArrayObject::offsetUnset ( mixed $index )", 
        "parameters": [
            {
                "descr": "The index being unset.", 
                "name": "index"
            }
        ], 
        "path": "php/arrayobject.offsetunset", 
        "type": "SPL"
    }, 
    "ArrayObject::serialize": {
        "description": "Serializes an ArrayObject.", 
        "name": "ArrayObject::serialize", 
        "overview": "public void ArrayObject::serialize ( void )", 
        "parameters": [], 
        "path": "php/arrayobject.serialize", 
        "type": "SPL"
    }, 
    "ArrayObject::setFlags": {
        "description": "Set the flags that change the behavior of the ArrayObject.", 
        "name": "ArrayObject::setFlags", 
        "overview": "public void ArrayObject::setFlags ( int $flags )", 
        "parameters": [
            {
                "descr": "The new ArrayObject behavior. It takes on either a bitmask, or named constants. ", 
                "name": "flags"
            }
        ], 
        "path": "php/arrayobject.setflags", 
        "type": "SPL"
    }, 
    "ArrayObject::setIteratorClass": {
        "description": "Sets the classname of the array iterator that is used by ArrayObject::getIterator().", 
        "name": "ArrayObject::setIteratorClass", 
        "overview": "public void ArrayObject::setIteratorClass ( string $iterator_class )", 
        "parameters": [
            {
                "descr": "The classname of the array iterator to use when iterating over this object.", 
                "name": "iterator_class"
            }
        ], 
        "path": "php/arrayobject.setiteratorclass", 
        "type": "SPL"
    }, 
    "ArrayObject::uasort": {
        "description": "This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function.", 
        "name": "ArrayObject::uasort", 
        "overview": "public void ArrayObject::uasort ( callable $cmp_function )", 
        "parameters": [
            {
                "descr": "Function cmp_function should accept two parameters which will be filled by pairs of entries. ", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayobject.uasort", 
        "type": "SPL"
    }, 
    "ArrayObject::uksort": {
        "description": "This function sorts the keys of the entries using a user-supplied comparison function. The key to entry correlations will be maintained.", 
        "name": "ArrayObject::uksort", 
        "overview": "public void ArrayObject::uksort ( callable $cmp_function )", 
        "parameters": [
            {
                "descr": "The callback comparison function. ", 
                "name": "cmp_function"
            }
        ], 
        "path": "php/arrayobject.uksort", 
        "type": "SPL"
    }, 
    "ArrayObject::unserialize": {
        "description": "Unserializes a serialized ArrayObject.", 
        "name": "ArrayObject::unserialize", 
        "overview": "public void ArrayObject::unserialize ( string $serialized )", 
        "parameters": [
            {
                "descr": "The serialized ArrayObject.", 
                "name": "serialized"
            }
        ], 
        "path": "php/arrayobject.unserialize", 
        "type": "SPL"
    }, 
    "BadFunctionCallException": {
        "description": "", 
        "name": "BadFunctionCallException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.badfunctioncallexception", 
        "type": "SPL/Exceptions"
    }, 
    "BadMethodCallException": {
        "description": "", 
        "name": "BadMethodCallException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.badmethodcallexception", 
        "type": "SPL/Exceptions"
    }, 
    "CURLFile": {
        "description": "", 
        "name": "CURLFile", 
        "overview": "public __construct ( string $filename [, string $mimetype [, string $postname ]] )", 
        "parameters": [], 
        "path": "php/class.curlfile", 
        "type": "cURL"
    }, 
    "CURLFile::__construct": {
        "description": "Creates a CURLFile object, used to upload a file with CURLOPT_POSTFIELDS.", 
        "name": "CURLFile::__construct", 
        "overview": "public CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )", 
        "parameters": [
            {
                "descr": "Path to the file which will be uploaded.", 
                "name": "filename"
            }, 
            {
                "descr": "Mimetype of the file.", 
                "name": "mimetype"
            }, 
            {
                "descr": "Name of the file.", 
                "name": "postname"
            }
        ], 
        "path": "php/curlfile.construct", 
        "type": "cURL"
    }, 
    "CURLFile::__wakeup": {
        "description": "", 
        "name": "CURLFile::__wakeup", 
        "overview": "public void CURLFile::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/curlfile.wakeup", 
        "type": "cURL"
    }, 
    "CURLFile::getFilename": {
        "description": "", 
        "name": "CURLFile::getFilename", 
        "overview": "public string CURLFile::getFilename ( void )", 
        "parameters": [], 
        "path": "php/curlfile.getfilename", 
        "type": "cURL"
    }, 
    "CURLFile::getMimeType": {
        "description": "", 
        "name": "CURLFile::getMimeType", 
        "overview": "public string CURLFile::getMimeType ( void )", 
        "parameters": [], 
        "path": "php/curlfile.getmimetype", 
        "type": "cURL"
    }, 
    "CURLFile::getPostFilename": {
        "description": "", 
        "name": "CURLFile::getPostFilename", 
        "overview": "public string CURLFile::getPostFilename ( void )", 
        "parameters": [], 
        "path": "php/curlfile.getpostfilename", 
        "type": "cURL"
    }, 
    "CURLFile::setMimeType": {
        "description": "", 
        "name": "CURLFile::setMimeType", 
        "overview": "public void CURLFile::setMimeType ( string $mime )", 
        "parameters": [], 
        "path": "php/curlfile.setmimetype", 
        "type": "cURL"
    }, 
    "CURLFile::setPostFilename": {
        "description": "", 
        "name": "CURLFile::setPostFilename", 
        "overview": "public void CURLFile::setPostFilename ( string $postname )", 
        "parameters": [], 
        "path": "php/curlfile.setpostfilename", 
        "type": "cURL"
    }, 
    "CachingIterator": {
        "description": "", 
        "name": "CachingIterator", 
        "overview": "public __construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "parameters": [], 
        "path": "php/class.cachingiterator", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::__construct": {
        "description": "", 
        "name": "CachingIterator::__construct", 
        "overview": "public CachingIterator::__construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "parameters": [
            {
                "descr": "Iterator to cache", 
                "name": "iterator"
            }, 
            {
                "descr": "Bitmask of flags.", 
                "name": "flags"
            }
        ], 
        "path": "php/cachingiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::__toString": {
        "description": "", 
        "name": "CachingIterator::__toString", 
        "overview": "public void CachingIterator::__toString ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.tostring", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::count": {
        "description": "", 
        "name": "CachingIterator::count", 
        "overview": "public int CachingIterator::count ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.count", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::current": {
        "description": "", 
        "name": "CachingIterator::current", 
        "overview": "public void CachingIterator::current ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.current", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::getCache": {
        "description": "", 
        "name": "CachingIterator::getCache", 
        "overview": "public void CachingIterator::getCache ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.getcache", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::getFlags": {
        "description": "", 
        "name": "CachingIterator::getFlags", 
        "overview": "public void CachingIterator::getFlags ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.getflags", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::getInnerIterator": {
        "description": "", 
        "name": "CachingIterator::getInnerIterator", 
        "overview": "public Iterator CachingIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.getinneriterator", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::hasNext": {
        "description": "", 
        "name": "CachingIterator::hasNext", 
        "overview": "public void CachingIterator::hasNext ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.hasnext", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::key": {
        "description": "", 
        "name": "CachingIterator::key", 
        "overview": "public scalar CachingIterator::key ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.key", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::next": {
        "description": "", 
        "name": "CachingIterator::next", 
        "overview": "public void CachingIterator::next ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetExists": {
        "description": "", 
        "name": "CachingIterator::offsetExists", 
        "overview": "public void CachingIterator::offsetExists ( string $index )", 
        "parameters": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/cachingiterator.offsetexists", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetGet": {
        "description": "", 
        "name": "CachingIterator::offsetGet", 
        "overview": "public void CachingIterator::offsetGet ( string $index )", 
        "parameters": [
            {
                "descr": "Description...", 
                "name": "index"
            }
        ], 
        "path": "php/cachingiterator.offsetget", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetSet": {
        "description": "", 
        "name": "CachingIterator::offsetSet", 
        "overview": "public void CachingIterator::offsetSet ( string $index , string $newval )", 
        "parameters": [
            {
                "descr": "The index of the element to be set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/cachingiterator.offsetset", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::offsetUnset": {
        "description": "", 
        "name": "CachingIterator::offsetUnset", 
        "overview": "public void CachingIterator::offsetUnset ( string $index )", 
        "parameters": [
            {
                "descr": "The index of the element to be unset.", 
                "name": "index"
            }
        ], 
        "path": "php/cachingiterator.offsetunset", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::rewind": {
        "description": "", 
        "name": "CachingIterator::rewind", 
        "overview": "public void CachingIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::setFlags": {
        "description": "", 
        "name": "CachingIterator::setFlags", 
        "overview": "public void CachingIterator::setFlags ( bitmask $flags )", 
        "parameters": [
            {
                "descr": "Bitmask of the flags to set.", 
                "name": "flags"
            }
        ], 
        "path": "php/cachingiterator.setflags", 
        "type": "SPL/Iterators"
    }, 
    "CachingIterator::valid": {
        "description": "", 
        "name": "CachingIterator::valid", 
        "overview": "public void CachingIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/cachingiterator.valid", 
        "type": "SPL/Iterators"
    }, 
    "CallbackFilterIterator": {
        "description": "", 
        "name": "CallbackFilterIterator", 
        "overview": "public string accept ( void )", 
        "parameters": [], 
        "path": "php/class.callbackfilteriterator", 
        "type": "SPL/Iterators"
    }, 
    "CallbackFilterIterator::accept": {
        "description": "This method calls the callback with the current value, current key and the inner iterator.", 
        "name": "CallbackFilterIterator::accept", 
        "overview": "public string CallbackFilterIterator::accept ( void )", 
        "parameters": [], 
        "path": "php/callbackfilteriterator.accept", 
        "type": "SPL/Iterators"
    }, 
    "Closure": {
        "description": "", 
        "name": "Closure", 
        "overview": "private __construct ( void )", 
        "parameters": [], 
        "path": "php/class.closure", 
        "type": "Classes and Functions"
    }, 
    "Closure::__construct": {
        "description": "This method exists only to disallow instantiation of the Closure class. Objects of this class are created in the fashion described on the anonymous functions page.", 
        "name": "Closure::__construct", 
        "overview": "private Closure::__construct ( void )", 
        "parameters": [], 
        "path": "php/closure.construct", 
        "type": "Classes and Functions"
    }, 
    "Closure::bind": {
        "description": "This method is a static version of Closure::bindTo(). See the documentation of that method for more information.", 
        "name": "Closure::bind", 
        "overview": "public static Closure Closure::bind ( Closure $closure , object $newthis [, mixed $newscope  = 'static' ] )", 
        "parameters": [
            {
                "descr": "The anonymous functions to bind.", 
                "name": "closure"
            }, 
            {
                "descr": "The object to which the given anonymous function should be bound, or NULL for the closure to be unbound.", 
                "name": "newthis"
            }, 
            {
                "descr": "The class scope to which associate the closure is to be associated, or 'static' to keep the current one. ", 
                "name": "newscope"
            }
        ], 
        "path": "php/closure.bind", 
        "type": "Classes and Functions"
    }, 
    "Closure::bindTo": {
        "description": "Create and return a new anonymous function with the same body and bound variables as this one, but possibly with a different bound object and a new class scope.", 
        "name": "Closure::bindTo", 
        "overview": "public Closure Closure::bindTo ( object $newthis [, mixed $newscope  = 'static' ] )", 
        "parameters": [
            {
                "descr": "The object to which the given anonymous function should be bound, or NULL for the closure to be unbound.", 
                "name": "newthis"
            }, 
            {
                "descr": "The class scope to which associate the closure is to be associated, or 'static' to keep the current one. ", 
                "name": "newscope"
            }
        ], 
        "path": "php/closure.bindto", 
        "type": "Classes and Functions"
    }, 
    "Collator": {
        "description": "", 
        "name": "Collator", 
        "overview": "public bool asort ( array &$arr [, int $sort_flag ] )", 
        "parameters": [], 
        "path": "php/class.collator", 
        "type": "Internationalization"
    }, 
    "Collator::asort": {
        "description": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. Array elements will have sort order according to current locale rules.", 
        "name": "Collator::asort", 
        "overview": "public bool Collator::asort ( array &$arr [, int $sort_flag ] )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Array of strings to sort.", 
                "name": "arr"
            }, 
            {
                "descr": "Optional sorting type, one of the following:   Collator::SORT_REGULAR - compare items normally (don't change types)     Collator::SORT_NUMERIC - compare items numerically     Collator::SORT_STRING - compare items as strings    Default $sort_flag value is Collator::SORT_REGULAR. It is also used if an invalid $sort_flag value has been specified.", 
                "name": "sort_flag"
            }
        ], 
        "path": "php/collator.asort", 
        "type": "Internationalization"
    }, 
    "Collator::compare": {
        "description": "Compare two Unicode strings according to collation rules.", 
        "name": "Collator::compare", 
        "overview": "public int Collator::compare ( string $str1 , string $str2 )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "The first string to compare.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string to compare.", 
                "name": "str2"
            }
        ], 
        "path": "php/collator.compare", 
        "type": "Internationalization"
    }, 
    "Collator::create": {
        "description": "The strings will be compared using the options already specified.", 
        "name": "Collator::create", 
        "overview": "public static Collator Collator::create ( string $locale )", 
        "parameters": [
            {
                "descr": "The locale containing the required collation rules. ", 
                "name": "locale"
            }
        ], 
        "path": "php/collator.create", 
        "type": "Internationalization"
    }, 
    "Collator::getAttribute": {
        "description": "Get a value of an integer collator attribute.", 
        "name": "Collator::getAttribute", 
        "overview": "public int Collator::getAttribute ( int $attr )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Attribute to get value for.", 
                "name": "attr"
            }
        ], 
        "path": "php/collator.getattribute", 
        "type": "Internationalization"
    }, 
    "Collator::getErrorCode": {
        "description": "Procedural style", 
        "name": "Collator::getErrorCode", 
        "overview": "public int Collator::getErrorCode ( void )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }
        ], 
        "path": "php/collator.geterrorcode", 
        "type": "Internationalization"
    }, 
    "Collator::getErrorMessage": {
        "description": "Retrieves the message for the last error.", 
        "name": "Collator::getErrorMessage", 
        "overview": "public string Collator::getErrorMessage ( void )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }
        ], 
        "path": "php/collator.geterrormessage", 
        "type": "Internationalization"
    }, 
    "Collator::getLocale": {
        "description": "Get collector locale name.", 
        "name": "Collator::getLocale", 
        "overview": "public string Collator::getLocale ( int $type )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "You can choose between valid and actual locale ( Locale::VALID_LOCALE and Locale::ACTUAL_LOCALE, respectively).", 
                "name": "type"
            }
        ], 
        "path": "php/collator.getlocale", 
        "type": "Internationalization"
    }, 
    "Collator::getSortKey": {
        "description": "Return collation key for a string.", 
        "name": "Collator::getSortKey", 
        "overview": "public string Collator::getSortKey ( string $str )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "The string to produce the key from.", 
                "name": "str"
            }
        ], 
        "path": "php/collator.getsortkey", 
        "type": "Internationalization"
    }, 
    "Collator::getStrength": {
        "description": "Procedural style", 
        "name": "Collator::getStrength", 
        "overview": "public int Collator::getStrength ( void )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }
        ], 
        "path": "php/collator.getstrength", 
        "type": "Internationalization"
    }, 
    "Collator::setAttribute": {
        "description": "Procedural style", 
        "name": "Collator::setAttribute", 
        "overview": "public bool Collator::setAttribute ( int $attr , int $val )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Attribute.", 
                "name": "attr"
            }, 
            {
                "descr": "Attribute value.", 
                "name": "val"
            }
        ], 
        "path": "php/collator.setattribute", 
        "type": "Internationalization"
    }, 
    "Collator::setStrength": {
        "description": "The \u00bb ICU Collation Service supports many levels of comparison (named \"Levels\", but also known as \"Strengths\"). Having these categories enables ICU to sort strings precisely according to local conventions. However, by allowing the levels to be selectively employed, searching for a string in text can be performed with various matching conditions.", 
        "name": "Collator::setStrength", 
        "overview": "public bool Collator::setStrength ( int $strength )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Strength to set.  Possible values are:   Collator::PRIMARY     Collator::SECONDARY     Collator::TERTIARY     Collator::QUATERNARY     Collator::IDENTICAL     Collator::DEFAULT_STRENGTH", 
                "name": "strength"
            }
        ], 
        "path": "php/collator.setstrength", 
        "type": "Internationalization"
    }, 
    "Collator::sort": {
        "description": "This function sorts an array according to current locale rules.", 
        "name": "Collator::sort", 
        "overview": "public bool Collator::sort ( array &$arr [, int $sort_flag ] )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Array of strings to sort.", 
                "name": "arr"
            }, 
            {
                "descr": "Optional sorting type, one of the following:    Collator::SORT_REGULAR - compare items normally (don't change types)     Collator::SORT_NUMERIC - compare items numerically     Collator::SORT_STRING - compare items as strings    Default sorting type is Collator::SORT_REGULAR. It is also used if an invalid sort_flag value has been specified.", 
                "name": "sort_flag"
            }
        ], 
        "path": "php/collator.sort", 
        "type": "Internationalization"
    }, 
    "Collator::sortWithSortKeys": {
        "description": "Similar to collator_sort() but uses ICU sorting keys produced by ucol_getSortKey() to gain more speed on large arrays.", 
        "name": "Collator::sortWithSortKeys", 
        "overview": "public bool Collator::sortWithSortKeys ( array &$arr )", 
        "parameters": [
            {
                "descr": "Collator object.", 
                "name": "coll"
            }, 
            {
                "descr": "Array of strings to sort", 
                "name": "arr"
            }
        ], 
        "path": "php/collator.sortwithsortkeys", 
        "type": "Internationalization"
    }, 
    "Cond": {
        "description": "", 
        "name": "Cond", 
        "overview": "final public static boolean broadcast (  long $condition  )", 
        "parameters": [], 
        "path": "php/class.cond", 
        "type": "Process Control"
    }, 
    "Cond::broadcast": {
        "description": "Broadcast to all Threads blocking on a call to Cond::wait().", 
        "name": "Cond::broadcast", 
        "overview": "final public static boolean Cond::broadcast (  long $condition  )", 
        "parameters": [
            {
                "descr": "A handle to a Condition Variable returned by a previous call to Cond::create()", 
                "name": "condition"
            }
        ], 
        "path": "php/cond.broadcast", 
        "type": "Process Control"
    }, 
    "Cond::create": {
        "description": "Creates a new Condition Variable for the caller.", 
        "name": "Cond::create", 
        "overview": "final public static long Cond::create ( void )", 
        "parameters": [], 
        "path": "php/cond.create", 
        "type": "Process Control"
    }, 
    "Cond::destroy": {
        "description": "Destroying Condition Variable handles must be carried out explicitly by the programmer when they are finished with the Condition Variable. No Threads should be blocking on a call to Cond::wait() when the call to Cond::destroy() takes place.", 
        "name": "Cond::destroy", 
        "overview": "final public static boolean Cond::destroy (  long $condition  )", 
        "parameters": [
            {
                "descr": "A handle to a Condition Variable returned by a previous call to Cond::create()", 
                "name": "condition"
            }
        ], 
        "path": "php/cond.destroy", 
        "type": "Process Control"
    }, 
    "Cond::signal": {
        "description": "", 
        "name": "Cond::signal", 
        "overview": "final public static boolean Cond::signal (  long $condition  )", 
        "parameters": [
            {
                "descr": "A handle returned by a previous call to Cond::create()", 
                "name": "condition"
            }
        ], 
        "path": "php/cond.signal", 
        "type": "Process Control"
    }, 
    "Cond::wait": {
        "description": "Wait for a signal on a Condition Variable, optionally specifying a timeout to limit waiting time.", 
        "name": "Cond::wait", 
        "overview": "final public static boolean Cond::wait (  long $condition  ,  long $mutex  [,  long $timeout  ] )", 
        "parameters": [
            {
                "descr": "A handle returned by a previous call to Cond::create().", 
                "name": "condition"
            }, 
            {
                "descr": "A handle returned by a previous call to Mutex::create() and owned (locked) by the caller.", 
                "name": "mutex"
            }, 
            {
                "descr": "An optional timeout, in microseconds ( millionths of a second ).", 
                "name": "timeout"
            }
        ], 
        "path": "php/cond.wait", 
        "type": "Process Control"
    }, 
    "Countable (interface": {
        "description": "", 
        "name": "Countable (interface", 
        "overview": "abstract public int count ( void )", 
        "parameters": [], 
        "path": "php/class.countable", 
        "type": "SPL/Interfaces"
    }, 
    "Countable::count": {
        "description": "This method is executed when using the count() function on an object implementing Countable.", 
        "name": "Countable::count", 
        "overview": "abstract public int Countable::count ( void )", 
        "parameters": [], 
        "path": "php/countable.count", 
        "type": "SPL/Interfaces"
    }, 
    "DOMAttr": {
        "description": "", 
        "name": "DOMAttr", 
        "overview": "public __construct ( string $name [, string $value ] )", 
        "parameters": [], 
        "path": "php/class.domattr", 
        "type": "HTML"
    }, 
    "DOMAttr::__construct": {
        "description": "Creates a new DOMAttr object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writable node, use DOMDocument::createAttribute.", 
        "name": "DOMAttr::__construct", 
        "overview": "public DOMAttr::__construct ( string $name [, string $value ] )", 
        "parameters": [
            {
                "descr": "The tag name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }
        ], 
        "path": "php/domattr.construct", 
        "type": "HTML"
    }, 
    "DOMAttr::isId": {
        "description": "This function checks if the attribute is a defined ID.", 
        "name": "DOMAttr::isId", 
        "overview": "public bool DOMAttr::isId ( void )", 
        "parameters": [], 
        "path": "php/domattr.isid", 
        "type": "HTML"
    }, 
    "DOMCdataSection": {
        "description": "", 
        "name": "DOMCdataSection", 
        "overview": "public bool DOMText::isWhitespaceInElementContent ( void )", 
        "parameters": [], 
        "path": "php/class.domcdatasection", 
        "type": "HTML"
    }, 
    "DOMCharacterData": {
        "description": "", 
        "name": "DOMCharacterData", 
        "overview": "void appendData ( string $data )", 
        "parameters": [], 
        "path": "php/class.domcharacterdata", 
        "type": "HTML"
    }, 
    "DOMCharacterData::appendData": {
        "description": "Append the string data to the end of the character data of the node.", 
        "name": "DOMCharacterData::appendData", 
        "overview": "void DOMCharacterData::appendData ( string $data )", 
        "parameters": [
            {
                "descr": "The string to append.", 
                "name": "data"
            }
        ], 
        "path": "php/domcharacterdata.appenddata", 
        "type": "HTML"
    }, 
    "DOMCharacterData::deleteData": {
        "description": "Deletes count characters starting from position offset.", 
        "name": "DOMCharacterData::deleteData", 
        "overview": "void DOMCharacterData::deleteData ( int $offset , int $count )", 
        "parameters": [
            {
                "descr": "The offset from which to start removing.", 
                "name": "offset"
            }, 
            {
                "descr": "The number of characters to delete. ", 
                "name": "count"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data, or if count is negative.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.deletedata", 
        "type": "HTML"
    }, 
    "DOMCharacterData::insertData": {
        "description": "Inserts string data at position offset.", 
        "name": "DOMCharacterData::insertData", 
        "overview": "void DOMCharacterData::insertData ( int $offset , string $data )", 
        "parameters": [
            {
                "descr": "The character offset at which to insert.", 
                "name": "offset"
            }, 
            {
                "descr": "The string to insert.", 
                "name": "data"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.insertdata", 
        "type": "HTML"
    }, 
    "DOMCharacterData::replaceData": {
        "description": "Replace count characters starting from position offset with data.", 
        "name": "DOMCharacterData::replaceData", 
        "overview": "void DOMCharacterData::replaceData ( int $offset , int $count , string $data )", 
        "parameters": [
            {
                "descr": "The offset from which to start replacing.", 
                "name": "offset"
            }, 
            {
                "descr": "The number of characters to replace. ", 
                "name": "count"
            }, 
            {
                "descr": "The string with which the range must be replaced.", 
                "name": "data"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data, or if count is negative.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.replacedata", 
        "type": "HTML"
    }, 
    "DOMCharacterData::substringData": {
        "description": "Returns the specified substring.", 
        "name": "DOMCharacterData::substringData", 
        "overview": "string DOMCharacterData::substringData ( int $offset , int $count )", 
        "parameters": [
            {
                "descr": "Start offset of substring to extract.", 
                "name": "offset"
            }, 
            {
                "descr": "The number of characters to extract.", 
                "name": "count"
            }, 
            {
                "descr": "Raised if offset is negative or greater than the number of 16-bit units in data, or if count is negative.", 
                "name": "DOM_INDEX_SIZE_ERR"
            }
        ], 
        "path": "php/domcharacterdata.substringdata", 
        "type": "HTML"
    }, 
    "DOMComment": {
        "description": "", 
        "name": "DOMComment", 
        "overview": "public __construct ([ string $value ] )", 
        "parameters": [], 
        "path": "php/class.domcomment", 
        "type": "HTML"
    }, 
    "DOMComment::__construct": {
        "description": "Creates a new DOMComment object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createComment.", 
        "name": "DOMComment::__construct", 
        "overview": "public DOMComment::__construct ([ string $value ] )", 
        "parameters": [
            {
                "descr": "The value of the comment.", 
                "name": "value"
            }
        ], 
        "path": "php/domcomment.construct", 
        "type": "HTML"
    }, 
    "DOMDocument": {
        "description": "", 
        "name": "DOMDocument", 
        "overview": "public __construct ([ string $version [, string $encoding ]] )", 
        "parameters": [], 
        "path": "php/class.domdocument", 
        "type": "HTML"
    }, 
    "DOMDocument::__construct": {
        "description": "Creates a new DOMDocument object.", 
        "name": "DOMDocument::__construct", 
        "overview": "public DOMDocument::__construct ([ string $version [, string $encoding ]] )", 
        "parameters": [
            {
                "descr": "The version number of the document as part of the XML declaration.", 
                "name": "version"
            }, 
            {
                "descr": "The encoding of the document as part of the XML declaration.", 
                "name": "encoding"
            }
        ], 
        "path": "php/domdocument.construct", 
        "type": "HTML"
    }, 
    "DOMDocument::createAttribute": {
        "description": "This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createAttribute", 
        "overview": "public DOMAttr DOMDocument::createAttribute ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "Raised if name contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createattribute", 
        "type": "HTML"
    }, 
    "DOMDocument::createAttributeNS": {
        "description": "This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createAttributeNS", 
        "overview": "public DOMAttr DOMDocument::createAttributeNS ( string $namespaceURI , string $qualifiedName )", 
        "parameters": [
            {
                "descr": "The URI of the namespace.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The tag name and prefix of the attribute, as prefix:tagname.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "Raised if qualifiedName contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }, 
            {
                "descr": "Raised if qualifiedName is a malformed qualified name, or if qualifiedName has a prefix and namespaceURI is NULL.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domdocument.createattributens", 
        "type": "HTML"
    }, 
    "DOMDocument::createCDATASection": {
        "description": "This function creates a new instance of class DOMCDATASection. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createCDATASection", 
        "overview": "public DOMCDATASection DOMDocument::createCDATASection ( string $data )", 
        "parameters": [
            {
                "descr": "The content of the cdata.", 
                "name": "data"
            }
        ], 
        "path": "php/domdocument.createcdatasection", 
        "type": "HTML"
    }, 
    "DOMDocument::createComment": {
        "description": "This function creates a new instance of class DOMComment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createComment", 
        "overview": "public DOMComment DOMDocument::createComment ( string $data )", 
        "parameters": [
            {
                "descr": "The content of the comment.", 
                "name": "data"
            }
        ], 
        "path": "php/domdocument.createcomment", 
        "type": "HTML"
    }, 
    "DOMDocument::createDocumentFragment": {
        "description": "This function creates a new instance of class DOMDocumentFragment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createDocumentFragment", 
        "overview": "public DOMDocumentFragment DOMDocument::createDocumentFragment ( void )", 
        "parameters": [], 
        "path": "php/domdocument.createdocumentfragment", 
        "type": "HTML"
    }, 
    "DOMDocument::createElement": {
        "description": "This function creates a new instance of class DOMElement. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createElement", 
        "overview": "public DOMElement DOMDocument::createElement ( string $name [, string $value ] )", 
        "parameters": [
            {
                "descr": "The tag name of the element.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the element. By default, an empty element will be created. ", 
                "name": "value"
            }, 
            {
                "descr": "Raised if name contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createelement", 
        "type": "HTML"
    }, 
    "DOMDocument::createElementNS": {
        "description": "This function creates a new element node with an associated namespace. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createElementNS", 
        "overview": "public DOMElement DOMDocument::createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] )", 
        "parameters": [
            {
                "descr": "The URI of the namespace.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The qualified name of the element, as prefix:tagname.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The value of the element. By default, an empty element will be created. ", 
                "name": "value"
            }, 
            {
                "descr": "Raised if qualifiedName contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }, 
            {
                "descr": "Raised if qualifiedName is a maformed qualified name.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domdocument.createelementns", 
        "type": "HTML"
    }, 
    "DOMDocument::createEntityReference": {
        "description": "This function creates a new instance of class DOMEntityReference. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createEntityReference", 
        "overview": "public DOMEntityReference DOMDocument::createEntityReference ( string $name )", 
        "parameters": [
            {
                "descr": "The content of the entity reference, e.g. ", 
                "name": "name"
            }, 
            {
                "descr": "Raised if name contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createentityreference", 
        "type": "HTML"
    }, 
    "DOMDocument::createProcessingInstruction": {
        "description": "This function creates a new instance of class DOMProcessingInstruction. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createProcessingInstruction", 
        "overview": "public DOMProcessingInstruction DOMDocument::createProcessingInstruction ( string $target [, string $data ] )", 
        "parameters": [
            {
                "descr": "The target of the processing instruction.", 
                "name": "target"
            }, 
            {
                "descr": "The content of the processing instruction.", 
                "name": "data"
            }, 
            {
                "descr": "Raised if target contains an invalid character.", 
                "name": "DOM_INVALID_CHARACTER_ERR"
            }
        ], 
        "path": "php/domdocument.createprocessinginstruction", 
        "type": "HTML"
    }, 
    "DOMDocument::createTextNode": {
        "description": "This function creates a new instance of class DOMText. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().", 
        "name": "DOMDocument::createTextNode", 
        "overview": "public DOMText DOMDocument::createTextNode ( string $content )", 
        "parameters": [
            {
                "descr": "The content of the text.", 
                "name": "content"
            }
        ], 
        "path": "php/domdocument.createtextnode", 
        "type": "HTML"
    }, 
    "DOMDocument::getElementById": {
        "description": "This function is similar to DOMDocument::getElementsByTagName but searches for an element with a given id.", 
        "name": "DOMDocument::getElementById", 
        "overview": "public DOMElement DOMDocument::getElementById ( string $elementId )", 
        "parameters": [
            {
                "descr": "The unique id value for an element.", 
                "name": "elementId"
            }
        ], 
        "path": "php/domdocument.getelementbyid", 
        "type": "HTML"
    }, 
    "DOMDocument::getElementsByTagName": {
        "description": "This function returns a new instance of class DOMNodeList containing all the elements with a given local tag name.", 
        "name": "DOMDocument::getElementsByTagName", 
        "overview": "public DOMNodeList DOMDocument::getElementsByTagName ( string $name )", 
        "parameters": [
            {
                "descr": "The local name (without namespace) of the tag to match on. ", 
                "name": "name"
            }
        ], 
        "path": "php/domdocument.getelementsbytagname", 
        "type": "HTML"
    }, 
    "DOMDocument::getElementsByTagNameNS": {
        "description": "Returns a DOMNodeList of all elements with a given local name and a namespace URI.", 
        "name": "DOMDocument::getElementsByTagNameNS", 
        "overview": "public DOMNodeList DOMDocument::getElementsByTagNameNS ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI of the elements to match on. ", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the elements to match on. ", 
                "name": "localName"
            }
        ], 
        "path": "php/domdocument.getelementsbytagnamens", 
        "type": "HTML"
    }, 
    "DOMDocument::importNode": {
        "description": "This function returns a copy of the node to import and associates it with the current document.", 
        "name": "DOMDocument::importNode", 
        "overview": "public DOMNode DOMDocument::importNode ( DOMNode $importedNode [, bool $deep ] )", 
        "parameters": [
            {
                "descr": "The node to import.", 
                "name": "importedNode"
            }, 
            {
                "descr": "If set to TRUE, this method will recursively import the subtree under the importedNode. ", 
                "name": "deep"
            }
        ], 
        "path": "php/domdocument.importnode", 
        "type": "HTML"
    }, 
    "DOMDocument::load": {
        "description": "Loads an XML document from a file.", 
        "name": "DOMDocument::load", 
        "overview": "public mixed DOMDocument::load ( string $filename [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "The path to the XML document.", 
                "name": "filename"
            }, 
            {
                "descr": "Bitwise OR of the libxml option constants.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.load", 
        "type": "HTML"
    }, 
    "DOMDocument::loadHTML": {
        "description": "The function parses the HTML contained in the string source. Unlike loading XML, HTML does not have to be well-formed to load. This function may also be called statically to load and create a DOMDocument object. The static invocation may be used when no DOMDocument properties need to be set prior to loading.", 
        "name": "DOMDocument::loadHTML", 
        "overview": "public bool DOMDocument::loadHTML ( string $source [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "The HTML string.", 
                "name": "source"
            }, 
            {
                "descr": "Since PHP 5.4.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.loadhtml", 
        "type": "HTML"
    }, 
    "DOMDocument::loadHTMLFile": {
        "description": "The function parses the HTML document in the file named filename. Unlike loading XML, HTML does not have to be well-formed to load.", 
        "name": "DOMDocument::loadHTMLFile", 
        "overview": "public bool DOMDocument::loadHTMLFile ( string $filename [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "The path to the HTML file.", 
                "name": "filename"
            }, 
            {
                "descr": "Since PHP 5.4.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.loadhtmlfile", 
        "type": "HTML"
    }, 
    "DOMDocument::loadXML": {
        "description": "Loads an XML document from a string.", 
        "name": "DOMDocument::loadXML", 
        "overview": "public mixed DOMDocument::loadXML ( string $source [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "The string containing the XML.", 
                "name": "source"
            }, 
            {
                "descr": "Bitwise OR of the libxml option constants.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.loadxml", 
        "type": "HTML"
    }, 
    "DOMDocument::normalizeDocument": {
        "description": "This method acts as if you saved and then loaded the document, putting the document in a \"normal\" form.", 
        "name": "DOMDocument::normalizeDocument", 
        "overview": "public void DOMDocument::normalizeDocument ( void )", 
        "parameters": [], 
        "path": "php/domdocument.normalizedocument", 
        "type": "HTML"
    }, 
    "DOMDocument::registerNodeClass": {
        "description": "This method allows you to register your own extended DOM class to be used afterward by the PHP DOM extension.", 
        "name": "DOMDocument::registerNodeClass", 
        "overview": "public bool DOMDocument::registerNodeClass ( string $baseclass , string $extendedclass )", 
        "parameters": [
            {
                "descr": "The DOM class that you want to extend. ", 
                "name": "baseclass"
            }, 
            {
                "descr": "Your extended class name. If NULL is provided, any previously registered class extending baseclass will be removed.", 
                "name": "extendedclass"
            }
        ], 
        "path": "php/domdocument.registernodeclass", 
        "type": "HTML"
    }, 
    "DOMDocument::relaxNGValidate": {
        "description": "Performs \u00bb relaxNG validation on the document based on the given RNG schema.", 
        "name": "DOMDocument::relaxNGValidate", 
        "overview": "public bool DOMDocument::relaxNGValidate ( string $filename )", 
        "parameters": [
            {
                "descr": "The RNG file.", 
                "name": "filename"
            }
        ], 
        "path": "php/domdocument.relaxngvalidate", 
        "type": "HTML"
    }, 
    "DOMDocument::relaxNGValidateSource": {
        "description": "Performs \u00bb relaxNG validation on the document based on the given RNG source.", 
        "name": "DOMDocument::relaxNGValidateSource", 
        "overview": "public bool DOMDocument::relaxNGValidateSource ( string $source )", 
        "parameters": [
            {
                "descr": "A string containing the RNG schema.", 
                "name": "source"
            }
        ], 
        "path": "php/domdocument.relaxngvalidatesource", 
        "type": "HTML"
    }, 
    "DOMDocument::save": {
        "description": "Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::save", 
        "overview": "public int DOMDocument::save ( string $filename [, int $options ] )", 
        "parameters": [
            {
                "descr": "The path to the saved XML document.", 
                "name": "filename"
            }, 
            {
                "descr": "Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.save", 
        "type": "HTML"
    }, 
    "DOMDocument::saveHTML": {
        "description": "Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::saveHTML", 
        "overview": "public string DOMDocument::saveHTML ([ DOMNode $node = NULL ] )", 
        "parameters": [
            {
                "descr": "Optional parameter to output a subset of the document.", 
                "name": "node"
            }
        ], 
        "path": "php/domdocument.savehtml", 
        "type": "HTML"
    }, 
    "DOMDocument::saveHTMLFile": {
        "description": "Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::saveHTMLFile", 
        "overview": "public int DOMDocument::saveHTMLFile ( string $filename )", 
        "parameters": [
            {
                "descr": "The path to the saved HTML document.", 
                "name": "filename"
            }
        ], 
        "path": "php/domdocument.savehtmlfile", 
        "type": "HTML"
    }, 
    "DOMDocument::saveXML": {
        "description": "Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.", 
        "name": "DOMDocument::saveXML", 
        "overview": "public string DOMDocument::saveXML ([ DOMNode $node [, int $options ]] )", 
        "parameters": [
            {
                "descr": "Use this parameter to output only a specific node without XML declaration rather than the entire document.", 
                "name": "node"
            }, 
            {
                "descr": "Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.", 
                "name": "options"
            }, 
            {
                "descr": "Raised if node is from another document.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }
        ], 
        "path": "php/domdocument.savexml", 
        "type": "HTML"
    }, 
    "DOMDocument::schemaValidate": {
        "description": "Validates a document based on the given schema file.", 
        "name": "DOMDocument::schemaValidate", 
        "overview": "public bool DOMDocument::schemaValidate ( string $filename [, int $flags ] )", 
        "parameters": [
            {
                "descr": "The path to the schema.", 
                "name": "filename"
            }, 
            {
                "descr": "A bitmask of Libxml schema validation flags. ", 
                "name": "flags"
            }
        ], 
        "path": "php/domdocument.schemavalidate", 
        "type": "HTML"
    }, 
    "DOMDocument::schemaValidateSource": {
        "description": "Validates a document based on a schema defined in the given string.", 
        "name": "DOMDocument::schemaValidateSource", 
        "overview": "public bool DOMDocument::schemaValidateSource ( string $source [, int $flags ] )", 
        "parameters": [
            {
                "descr": "A string containing the schema.", 
                "name": "source"
            }, 
            {
                "descr": "A bitmask of Libxml schema validation flags. ", 
                "name": "flags"
            }
        ], 
        "path": "php/domdocument.schemavalidatesource", 
        "type": "HTML"
    }, 
    "DOMDocument::validate": {
        "description": "Validates the document based on its DTD.", 
        "name": "DOMDocument::validate", 
        "overview": "public bool DOMDocument::validate ( void )", 
        "parameters": [], 
        "path": "php/domdocument.validate", 
        "type": "HTML"
    }, 
    "DOMDocument::xinclude": {
        "description": "This method substitutes \u00bb XIncludes in a DOMDocument object.", 
        "name": "DOMDocument::xinclude", 
        "overview": "public int DOMDocument::xinclude ([ int $options ] )", 
        "parameters": [
            {
                "descr": "libxml parameters. Available since PHP 5.1.0 and Libxml 2.6.7.", 
                "name": "options"
            }
        ], 
        "path": "php/domdocument.xinclude", 
        "type": "HTML"
    }, 
    "DOMDocumentFragment": {
        "description": "", 
        "name": "DOMDocumentFragment", 
        "overview": "public bool appendXML ( string $data )", 
        "parameters": [], 
        "path": "php/class.domdocumentfragment", 
        "type": "HTML"
    }, 
    "DOMDocumentFragment::appendXML": {
        "description": "Appends raw XML data to a DOMDocumentFragment.", 
        "name": "DOMDocumentFragment::appendXML", 
        "overview": "public bool DOMDocumentFragment::appendXML ( string $data )", 
        "parameters": [
            {
                "descr": "XML to append.", 
                "name": "data"
            }
        ], 
        "path": "php/domdocumentfragment.appendxml", 
        "type": "HTML"
    }, 
    "DOMDocumentType": {
        "description": "", 
        "name": "DOMDocumentType", 
        "overview": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "parameters": [], 
        "path": "php/class.domdocumenttype", 
        "type": "HTML"
    }, 
    "DOMElement": {
        "description": "", 
        "name": "DOMElement", 
        "overview": "public __construct ( string $name [, string $value [, string $namespaceURI ]] )", 
        "parameters": [], 
        "path": "php/class.domelement", 
        "type": "HTML"
    }, 
    "DOMElement::__construct": {
        "description": "Creates a new DOMElement object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createElement or DOMDocument::createElementNS.", 
        "name": "DOMElement::__construct", 
        "overview": "public DOMElement::__construct ( string $name [, string $value [, string $namespaceURI ]] )", 
        "parameters": [
            {
                "descr": "The tag name of the element. When also passing in namespaceURI, the element name may take a prefix to be associated with the URI.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the element.", 
                "name": "value"
            }, 
            {
                "descr": "A namespace URI to create the element within a specific namespace.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domelement.construct", 
        "type": "HTML"
    }, 
    "DOMElement::getAttribute": {
        "description": "Gets the value of the attribute with name name for the current node.", 
        "name": "DOMElement::getAttribute", 
        "overview": "public string DOMElement::getAttribute ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.getattribute", 
        "type": "HTML"
    }, 
    "DOMElement::getAttributeNS": {
        "description": "Gets the value of the attribute in namespace namespaceURI with local name localName for the current node.", 
        "name": "DOMElement::getAttributeNS", 
        "overview": "public string DOMElement::getAttributeNS ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.getattributens", 
        "type": "HTML"
    }, 
    "DOMElement::getAttributeNode": {
        "description": "Returns the attribute node with name name for the current element.", 
        "name": "DOMElement::getAttributeNode", 
        "overview": "public DOMAttr DOMElement::getAttributeNode ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.getattributenode", 
        "type": "HTML"
    }, 
    "DOMElement::getAttributeNodeNS": {
        "description": "Returns the attribute node in namespace namespaceURI with local name localName for the current node.", 
        "name": "DOMElement::getAttributeNodeNS", 
        "overview": "public DOMAttr DOMElement::getAttributeNodeNS ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.getattributenodens", 
        "type": "HTML"
    }, 
    "DOMElement::getElementsByTagName": {
        "description": "This function returns a new instance of the class DOMNodeList of all descendant elements with a given tag name, in the order in which they are encountered in a preorder traversal of this element tree.", 
        "name": "DOMElement::getElementsByTagName", 
        "overview": "public DOMNodeList DOMElement::getElementsByTagName ( string $name )", 
        "parameters": [
            {
                "descr": "The tag name. Use * to return all elements within the element tree.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.getelementsbytagname", 
        "type": "HTML"
    }, 
    "DOMElement::getElementsByTagNameNS": {
        "description": "This function fetch all the descendant elements with a given localName and namespaceURI.", 
        "name": "DOMElement::getElementsByTagNameNS", 
        "overview": "public DOMNodeList DOMElement::getElementsByTagNameNS ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name. Use * to return all elements within the element tree.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.getelementsbytagnamens", 
        "type": "HTML"
    }, 
    "DOMElement::hasAttribute": {
        "description": "Indicates whether attribute named name exists as a member of the element.", 
        "name": "DOMElement::hasAttribute", 
        "overview": "public bool DOMElement::hasAttribute ( string $name )", 
        "parameters": [
            {
                "descr": "The attribute name.", 
                "name": "name"
            }
        ], 
        "path": "php/domelement.hasattribute", 
        "type": "HTML"
    }, 
    "DOMElement::hasAttributeNS": {
        "description": "Indicates whether attribute in namespace namespaceURI named localName exists as a member of the element.", 
        "name": "DOMElement::hasAttributeNS", 
        "overview": "public bool DOMElement::hasAttributeNS ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }
        ], 
        "path": "php/domelement.hasattributens", 
        "type": "HTML"
    }, 
    "DOMElement::removeAttribute": {
        "description": "Removes attribute named name from the element.", 
        "name": "DOMElement::removeAttribute", 
        "overview": "public bool DOMElement::removeAttribute ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.removeattribute", 
        "type": "HTML"
    }, 
    "DOMElement::removeAttributeNS": {
        "description": "Removes attribute is namespace namespaceURI named localName from the element.", 
        "name": "DOMElement::removeAttributeNS", 
        "overview": "public bool DOMElement::removeAttributeNS ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name.", 
                "name": "localName"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.removeattributens", 
        "type": "HTML"
    }, 
    "DOMElement::removeAttributeNode": {
        "description": "Removes attribute oldnode from the element.", 
        "name": "DOMElement::removeAttributeNode", 
        "overview": "public bool DOMElement::removeAttributeNode ( DOMAttr $oldnode )", 
        "parameters": [
            {
                "descr": "The attribute node.", 
                "name": "oldnode"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if oldnode is not an attribute of the element.", 
                "name": "DOM_NOT_FOUND_ERROR"
            }
        ], 
        "path": "php/domelement.removeattributenode", 
        "type": "HTML"
    }, 
    "DOMElement::setAttribute": {
        "description": "Sets an attribute with name name to the given value. If the attribute does not exist, it will be created.", 
        "name": "DOMElement::setAttribute", 
        "overview": "public DOMAttr DOMElement::setAttribute ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.setattribute", 
        "type": "HTML"
    }, 
    "DOMElement::setAttributeNS": {
        "description": "Sets an attribute with namespace namespaceURI and name name to the given value. If the attribute does not exist, it will be created.", 
        "name": "DOMElement::setAttributeNS", 
        "overview": "public void DOMElement::setAttributeNS ( string $namespaceURI , string $qualifiedName , string $value )", 
        "parameters": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The qualified name of the attribute, as prefix:tagname.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if qualifiedName is a malformed qualified name, or if qualifiedName has a prefix and namespaceURI is NULL.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domelement.setattributens", 
        "type": "HTML"
    }, 
    "DOMElement::setAttributeNode": {
        "description": "Adds new attribute node attr to element.", 
        "name": "DOMElement::setAttributeNode", 
        "overview": "public DOMAttr DOMElement::setAttributeNode ( DOMAttr $attr )", 
        "parameters": [
            {
                "descr": "The attribute node.", 
                "name": "attr"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.setattributenode", 
        "type": "HTML"
    }, 
    "DOMElement::setAttributeNodeNS": {
        "description": "Adds new attribute node attr to element.", 
        "name": "DOMElement::setAttributeNodeNS", 
        "overview": "public DOMAttr DOMElement::setAttributeNodeNS ( DOMAttr $attr )", 
        "parameters": [
            {
                "descr": "The attribute node.", 
                "name": "attr"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }
        ], 
        "path": "php/domelement.setattributenodens", 
        "type": "HTML"
    }, 
    "DOMElement::setIdAttribute": {
        "description": "Declares the attribute name to be of type ID.", 
        "name": "DOMElement::setIdAttribute", 
        "overview": "public void DOMElement::setIdAttribute ( string $name , bool $isId )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "Set it to TRUE if you want name to be of type ID, FALSE otherwise.", 
                "name": "isId"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if name is not an attribute of this element.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domelement.setidattribute", 
        "type": "HTML"
    }, 
    "DOMElement::setIdAttributeNS": {
        "description": "Declares the attribute specified by localName and namespaceURI to be of type ID.", 
        "name": "DOMElement::setIdAttributeNS", 
        "overview": "public void DOMElement::setIdAttributeNS ( string $namespaceURI , string $localName , bool $isId )", 
        "parameters": [
            {
                "descr": "The namespace URI of the attribute.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the attribute, as prefix:tagname.", 
                "name": "localName"
            }, 
            {
                "descr": "Set it to TRUE if you want name to be of type ID, FALSE otherwise.", 
                "name": "isId"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if name is not an attribute of this element.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domelement.setidattributens", 
        "type": "HTML"
    }, 
    "DOMElement::setIdAttributeNode": {
        "description": "Declares the attribute specified by attr to be of type ID.", 
        "name": "DOMElement::setIdAttributeNode", 
        "overview": "public void DOMElement::setIdAttributeNode ( DOMAttr $attr , bool $isId )", 
        "parameters": [
            {
                "descr": "The attribute node.", 
                "name": "attr"
            }, 
            {
                "descr": "Set it to TRUE if you want name to be of type ID, FALSE otherwise.", 
                "name": "isId"
            }, 
            {
                "descr": "Raised if the node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if name is not an attribute of this element.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domelement.setidattributenode", 
        "type": "HTML"
    }, 
    "DOMEntity": {
        "description": "", 
        "name": "DOMEntity", 
        "overview": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "parameters": [], 
        "path": "php/class.domentity", 
        "type": "HTML"
    }, 
    "DOMEntityReference": {
        "description": "", 
        "name": "DOMEntityReference", 
        "overview": "public __construct ( string $name )", 
        "parameters": [], 
        "path": "php/class.domentityreference", 
        "type": "HTML"
    }, 
    "DOMEntityReference::__construct": {
        "description": "Creates a new DOMEntityReference object.", 
        "name": "DOMEntityReference::__construct", 
        "overview": "public DOMEntityReference::__construct ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the entity reference.", 
                "name": "name"
            }
        ], 
        "path": "php/domentityreference.construct", 
        "type": "HTML"
    }, 
    "DOMException": {
        "description": "", 
        "name": "DOMException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.domexception", 
        "type": "HTML"
    }, 
    "DOMImplementation": {
        "description": "", 
        "name": "DOMImplementation", 
        "overview": "__construct ( void )", 
        "parameters": [], 
        "path": "php/class.domimplementation", 
        "type": "HTML"
    }, 
    "DOMImplementation::__construct": {
        "description": "Creates a new DOMImplementation object.", 
        "name": "DOMImplementation::__construct", 
        "overview": "DOMImplementation::__construct ( void )", 
        "parameters": [], 
        "path": "php/domimplementation.construct", 
        "type": "HTML"
    }, 
    "DOMImplementation::createDocument": {
        "description": "Creates a DOMDocument object of the specified type with its document element.", 
        "name": "DOMImplementation::createDocument", 
        "overview": "public DOMDocument DOMImplementation::createDocument ([ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL ]]] )", 
        "parameters": [
            {
                "descr": "The namespace URI of the document element to create.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The qualified name of the document element to create.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The type of document to create or NULL.", 
                "name": "doctype"
            }, 
            {
                "descr": "Raised if doctype has already been used with a different document or was created from a different implementation.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }, 
            {
                "descr": "Raised if there is an error with the namespace, as determined by namespaceURI and qualifiedName.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domimplementation.createdocument", 
        "type": "HTML"
    }, 
    "DOMImplementation::createDocumentType": {
        "description": "Creates an empty DOMDocumentType object. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur.", 
        "name": "DOMImplementation::createDocumentType", 
        "overview": "public DOMDocumentType DOMImplementation::createDocumentType ([ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL ]]] )", 
        "parameters": [
            {
                "descr": "The qualified name of the document type to create.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The external subset public identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "The external subset system identifier.", 
                "name": "systemId"
            }, 
            {
                "descr": "Raised if there is an error with the namespace, as determined by qualifiedName.", 
                "name": "DOM_NAMESPACE_ERR"
            }
        ], 
        "path": "php/domimplementation.createdocumenttype", 
        "type": "HTML"
    }, 
    "DOMImplementation::hasFeature": {
        "description": "Test if the DOM implementation implements a specific feature.", 
        "name": "DOMImplementation::hasFeature", 
        "overview": "public bool DOMImplementation::hasFeature ( string $feature , string $version )", 
        "parameters": [
            {
                "descr": "The feature to test.", 
                "name": "feature"
            }, 
            {
                "descr": "The version number of the feature to test. ", 
                "name": "version"
            }
        ], 
        "path": "php/domimplementation.hasfeature", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap": {
        "description": "", 
        "name": "DOMNamedNodeMap", 
        "overview": "DOMNode getNamedItem ( string $name )", 
        "parameters": [], 
        "path": "php/class.domnamednodemap", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap::getNamedItem": {
        "description": "Retrieves a node specified by its nodeName.", 
        "name": "DOMNamedNodeMap::getNamedItem", 
        "overview": "DOMNode DOMNamedNodeMap::getNamedItem ( string $name )", 
        "parameters": [
            {
                "descr": "The nodeName of the node to retrieve.", 
                "name": "name"
            }
        ], 
        "path": "php/domnamednodemap.getnameditem", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap::getNamedItemNS": {
        "description": "Retrieves a node specified by localName and namespaceURI.", 
        "name": "DOMNamedNodeMap::getNamedItemNS", 
        "overview": "DOMNode DOMNamedNodeMap::getNamedItemNS ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI of the node to retrieve.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the node to retrieve.", 
                "name": "localName"
            }
        ], 
        "path": "php/domnamednodemap.getnameditemns", 
        "type": "HTML"
    }, 
    "DOMNamedNodeMap::item": {
        "description": "Retrieves a node specified by index within the DOMNamedNodeMap object.", 
        "name": "DOMNamedNodeMap::item", 
        "overview": "DOMNode DOMNamedNodeMap::item ( int $index )", 
        "parameters": [
            {
                "descr": "Index into this map.", 
                "name": "index"
            }
        ], 
        "path": "php/domnamednodemap.item", 
        "type": "HTML"
    }, 
    "DOMNode": {
        "description": "", 
        "name": "DOMNode", 
        "overview": "public DOMNode appendChild ( DOMNode $newnode )", 
        "parameters": [], 
        "path": "php/class.domnode", 
        "type": "HTML"
    }, 
    "DOMNode::C14N": {
        "description": "Canonicalize nodes to a string", 
        "name": "DOMNode::C14N", 
        "overview": "public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] )", 
        "parameters": [
            {
                "descr": "Enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes.", 
                "name": "exclusive"
            }, 
            {
                "descr": "Retain comments in output.", 
                "name": "with_comments"
            }, 
            {
                "descr": "An array of xpaths to filter the nodes by.", 
                "name": "xpath"
            }, 
            {
                "descr": "An array of namespace prefixes to filter the nodes by.", 
                "name": "ns_prefixes"
            }
        ], 
        "path": "php/domnode.c14n", 
        "type": "HTML"
    }, 
    "DOMNode::C14NFile": {
        "description": "Canonicalize nodes to a file.", 
        "name": "DOMNode::C14NFile", 
        "overview": "public int DOMNode::C14NFile ( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] )", 
        "parameters": [
            {
                "descr": "Path to write the output to.", 
                "name": "uri"
            }, 
            {
                "descr": "Enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes.", 
                "name": "exclusive"
            }, 
            {
                "descr": "Retain comments in output.", 
                "name": "with_comments"
            }, 
            {
                "descr": "An array of xpaths to filter the nodes by.", 
                "name": "xpath"
            }, 
            {
                "descr": "An array of namespace prefixes to filter the nodes by.", 
                "name": "ns_prefixes"
            }
        ], 
        "path": "php/domnode.c14nfile", 
        "type": "HTML"
    }, 
    "DOMNode::appendChild": {
        "description": "This function appends a child to an existing list of children or creates a new list of children. The child can be created with e.g. DOMDocument::createElement(), DOMDocument::createTextNode() etc. or simply by using any other node.", 
        "name": "DOMNode::appendChild", 
        "overview": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "parameters": [
            {
                "descr": "The appended child.", 
                "name": "newnode"
            }, 
            {
                "descr": "Raised if this node is readonly or if the previous parent of the node being inserted is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if this node is of a type that does not allow children of the type of the newnode node, or if the node to append is one of this node's ancestors or this node itself.", 
                "name": "DOM_HIERARCHY_REQUEST_ERR"
            }, 
            {
                "descr": "Raised if newnode was created from a different document than the one that created this node.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }
        ], 
        "path": "php/domnode.appendchild", 
        "type": "HTML"
    }, 
    "DOMNode::cloneNode": {
        "description": "Creates a copy of the node.", 
        "name": "DOMNode::cloneNode", 
        "overview": "public DOMNode DOMNode::cloneNode ([ bool $deep ] )", 
        "parameters": [
            {
                "descr": "Indicates whether to copy all descendant nodes. ", 
                "name": "deep"
            }
        ], 
        "path": "php/domnode.clonenode", 
        "type": "HTML"
    }, 
    "DOMNode::getLineNo": {
        "description": "Gets line number for where the node is defined.", 
        "name": "DOMNode::getLineNo", 
        "overview": "public int DOMNode::getLineNo ( void )", 
        "parameters": [], 
        "path": "php/domnode.getlineno", 
        "type": "HTML"
    }, 
    "DOMNode::getNodePath": {
        "description": "Gets an XPath location path for the node.", 
        "name": "DOMNode::getNodePath", 
        "overview": "public string DOMNode::getNodePath ( void )", 
        "parameters": [], 
        "path": "php/domnode.getnodepath", 
        "type": "HTML"
    }, 
    "DOMNode::hasAttributes": {
        "description": "This method checks if the node has attributes. The tested node has to be an XML_ELEMENT_NODE.", 
        "name": "DOMNode::hasAttributes", 
        "overview": "public bool DOMNode::hasAttributes ( void )", 
        "parameters": [], 
        "path": "php/domnode.hasattributes", 
        "type": "HTML"
    }, 
    "DOMNode::hasChildNodes": {
        "description": "This function checks if the node has children.", 
        "name": "DOMNode::hasChildNodes", 
        "overview": "public bool DOMNode::hasChildNodes ( void )", 
        "parameters": [], 
        "path": "php/domnode.haschildnodes", 
        "type": "HTML"
    }, 
    "DOMNode::insertBefore": {
        "description": "This function inserts a new node right before the reference node. If you plan to do further modifications on the appended child you must use the returned node.", 
        "name": "DOMNode::insertBefore", 
        "overview": "public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] )", 
        "parameters": [
            {
                "descr": "The new node.", 
                "name": "newnode"
            }, 
            {
                "descr": "The reference node. If not supplied, newnode is appended to the children.", 
                "name": "refnode"
            }, 
            {
                "descr": "Raised if this node is readonly or if the previous parent of the node being inserted is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if this node is of a type that does not allow children of the type of the newnode node, or if the node to append is one of this node's ancestors or this node itself.", 
                "name": "DOM_HIERARCHY_REQUEST_ERR"
            }, 
            {
                "descr": "Raised if newnode was created from a different document than the one that created this node.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }, 
            {
                "descr": "Raised if refnode is not a child of this node.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domnode.insertbefore", 
        "type": "HTML"
    }, 
    "DOMNode::isDefaultNamespace": {
        "description": "Tells whether namespaceURI is the default namespace.", 
        "name": "DOMNode::isDefaultNamespace", 
        "overview": "public bool DOMNode::isDefaultNamespace ( string $namespaceURI )", 
        "parameters": [
            {
                "descr": "The namespace URI to look for.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domnode.isdefaultnamespace", 
        "type": "HTML"
    }, 
    "DOMNode::isSameNode": {
        "description": "This function indicates if two nodes are the same node. The comparison is not based on content", 
        "name": "DOMNode::isSameNode", 
        "overview": "public bool DOMNode::isSameNode ( DOMNode $node )", 
        "parameters": [
            {
                "descr": "The compared node.", 
                "name": "node"
            }
        ], 
        "path": "php/domnode.issamenode", 
        "type": "HTML"
    }, 
    "DOMNode::isSupported": {
        "description": "Checks if the asked feature is supported for the specified version.", 
        "name": "DOMNode::isSupported", 
        "overview": "public bool DOMNode::isSupported ( string $feature , string $version )", 
        "parameters": [
            {
                "descr": "The feature to test. See the example of DOMImplementation::hasFeature() for a list of features.", 
                "name": "feature"
            }, 
            {
                "descr": "The version number of the feature to test.", 
                "name": "version"
            }
        ], 
        "path": "php/domnode.issupported", 
        "type": "HTML"
    }, 
    "DOMNode::lookupNamespaceURI": {
        "description": "Gets the namespace URI of the node based on the prefix.", 
        "name": "DOMNode::lookupNamespaceURI", 
        "overview": "public string DOMNode::lookupNamespaceURI ( string $prefix )", 
        "parameters": [
            {
                "descr": "The prefix of the namespace.", 
                "name": "prefix"
            }
        ], 
        "path": "php/domnode.lookupnamespaceuri", 
        "type": "HTML"
    }, 
    "DOMNode::lookupPrefix": {
        "description": "Gets the namespace prefix of the node based on the namespace URI.", 
        "name": "DOMNode::lookupPrefix", 
        "overview": "public string DOMNode::lookupPrefix ( string $namespaceURI )", 
        "parameters": [
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domnode.lookupprefix", 
        "type": "HTML"
    }, 
    "DOMNode::normalize": {
        "description": "Remove empty text nodes and merge adjacent text nodes in this node and all its children.", 
        "name": "DOMNode::normalize", 
        "overview": "public void DOMNode::normalize ( void )", 
        "parameters": [], 
        "path": "php/domnode.normalize", 
        "type": "HTML"
    }, 
    "DOMNode::removeChild": {
        "description": "This functions removes a child from a list of children.", 
        "name": "DOMNode::removeChild", 
        "overview": "public DOMNode DOMNode::removeChild ( DOMNode $oldnode )", 
        "parameters": [
            {
                "descr": "The removed child.", 
                "name": "oldnode"
            }, 
            {
                "descr": "Raised if this node is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if oldnode is not a child of this node.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domnode.removechild", 
        "type": "HTML"
    }, 
    "DOMNode::replaceChild": {
        "description": "This function replaces the child oldnode with the passed new node. If the new node is already a child it will not be added a second time. If the replacement succeeds the old node is returned.", 
        "name": "DOMNode::replaceChild", 
        "overview": "public DOMNode DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode )", 
        "parameters": [
            {
                "descr": "The new node. It must be a member of the target document, i.e. ", 
                "name": "newnode"
            }, 
            {
                "descr": "The old node.", 
                "name": "oldnode"
            }, 
            {
                "descr": "Raised if this node is readonly or if the previous parent of the node being inserted is readonly.", 
                "name": "DOM_NO_MODIFICATION_ALLOWED_ERR"
            }, 
            {
                "descr": "Raised if this node is of a type that does not allow children of the type of the newnode node, or if the node to put in is one of this node's ancestors or this node itself.", 
                "name": "DOM_HIERARCHY_REQUEST_ERR"
            }, 
            {
                "descr": "Raised if newnode was created from a different document than the one that created this node.", 
                "name": "DOM_WRONG_DOCUMENT_ERR"
            }, 
            {
                "descr": "Raised if oldnode is not a child of this node.", 
                "name": "DOM_NOT_FOUND"
            }
        ], 
        "path": "php/domnode.replacechild", 
        "type": "HTML"
    }, 
    "DOMNodeList": {
        "description": "", 
        "name": "DOMNodeList", 
        "overview": "DOMNode DOMNodelist::item ( int $index )", 
        "parameters": [], 
        "path": "php/class.domnodelist", 
        "type": "HTML"
    }, 
    "DOMNodelist::item": {
        "description": "Retrieves a node specified by index within the DOMNodeList object.", 
        "name": "DOMNodelist::item", 
        "overview": "DOMNode DOMNodelist::item ( int $index )", 
        "parameters": [
            {
                "descr": "Index of the node into the collection.", 
                "name": "index"
            }
        ], 
        "path": "php/domnodelist.item", 
        "type": "HTML"
    }, 
    "DOMNotation": {
        "description": "", 
        "name": "DOMNotation", 
        "overview": "public DOMNode DOMNode::appendChild ( DOMNode $newnode )", 
        "parameters": [], 
        "path": "php/class.domnotation", 
        "type": "HTML"
    }, 
    "DOMProcessingInstruction": {
        "description": "", 
        "name": "DOMProcessingInstruction", 
        "overview": "public __construct ( string $name [, string $value ] )", 
        "parameters": [], 
        "path": "php/class.domprocessinginstruction", 
        "type": "HTML"
    }, 
    "DOMProcessingInstruction::__construct": {
        "description": "Creates a new DOMProcessingInstruction object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createProcessingInstruction.", 
        "name": "DOMProcessingInstruction::__construct", 
        "overview": "public DOMProcessingInstruction::__construct ( string $name [, string $value ] )", 
        "parameters": [
            {
                "descr": "The tag name of the processing instruction.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the processing instruction.", 
                "name": "value"
            }
        ], 
        "path": "php/domprocessinginstruction.construct", 
        "type": "HTML"
    }, 
    "DOMText": {
        "description": "", 
        "name": "DOMText", 
        "overview": "public bool isWhitespaceInElementContent ( void )", 
        "parameters": [], 
        "path": "php/class.domtext", 
        "type": "HTML"
    }, 
    "DOMText::isWhitespaceInElementContent": {
        "description": "Indicates whether this text node contains only whitespace or it is empty. The text node is determined to contain whitespace in element content during the load of the document.", 
        "name": "DOMText::isWhitespaceInElementContent", 
        "overview": "public bool DOMText::isWhitespaceInElementContent ( void )", 
        "parameters": [], 
        "path": "php/domtext.iswhitespaceinelementcontent", 
        "type": "HTML"
    }, 
    "DOMText::splitText": {
        "description": "Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings.", 
        "name": "DOMText::splitText", 
        "overview": "public DOMText DOMText::splitText ( int $offset )", 
        "parameters": [
            {
                "descr": "The offset at which to split, starting from 0.", 
                "name": "offset"
            }
        ], 
        "path": "php/domtext.splittext", 
        "type": "HTML"
    }, 
    "DOMXPath": {
        "description": "", 
        "name": "DOMXPath", 
        "overview": "public __construct ( DOMDocument $doc )", 
        "parameters": [], 
        "path": "php/class.domxpath", 
        "type": "HTML"
    }, 
    "DOMXPath::__construct": {
        "description": "Creates a new DOMXPath object.", 
        "name": "DOMXPath::__construct", 
        "overview": "public DOMXPath::__construct ( DOMDocument $doc )", 
        "parameters": [
            {
                "descr": "The DOMDocument associated with the DOMXPath.", 
                "name": "doc"
            }
        ], 
        "path": "php/domxpath.construct", 
        "type": "HTML"
    }, 
    "DOMXPath::evaluate": {
        "description": "Executes the given XPath expression and returns a typed result if possible.", 
        "name": "DOMXPath::evaluate", 
        "overview": "public mixed DOMXPath::evaluate ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]] )", 
        "parameters": [
            {
                "descr": "The XPath expression to execute.", 
                "name": "expression"
            }, 
            {
                "descr": "The optional contextnode can be specified for doing relative XPath queries. ", 
                "name": "contextnode"
            }, 
            {
                "descr": "The optional registerNodeNS can be specified to disable automatic registration of the context node.", 
                "name": "registerNodeNS"
            }
        ], 
        "path": "php/domxpath.evaluate", 
        "type": "HTML"
    }, 
    "DOMXPath::query": {
        "description": "Executes the given XPath expression.", 
        "name": "DOMXPath::query", 
        "overview": "public DOMNodeList DOMXPath::query ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]] )", 
        "parameters": [
            {
                "descr": "The XPath expression to execute.", 
                "name": "expression"
            }, 
            {
                "descr": "The optional contextnode can be specified for doing relative XPath queries. ", 
                "name": "contextnode"
            }, 
            {
                "descr": "The optional registerNodeNS can be specified to disable automatic registration of the context node.", 
                "name": "registerNodeNS"
            }
        ], 
        "path": "php/domxpath.query", 
        "type": "HTML"
    }, 
    "DOMXPath::registerNamespace": {
        "description": "Registers the namespaceURI and prefix with the DOMXPath object.", 
        "name": "DOMXPath::registerNamespace", 
        "overview": "public bool DOMXPath::registerNamespace ( string $prefix , string $namespaceURI )", 
        "parameters": [
            {
                "descr": "The prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The URI of the namespace.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/domxpath.registernamespace", 
        "type": "HTML"
    }, 
    "DOMXPath::registerPhpFunctions": {
        "description": "This method enables the ability to use PHP functions within XPath expressions.", 
        "name": "DOMXPath::registerPhpFunctions", 
        "overview": "public void DOMXPath::registerPhpFunctions ([ mixed $restrict ] )", 
        "parameters": [
            {
                "descr": "Use this parameter to only allow certain functions to be called from XPath. ", 
                "name": "restrict"
            }
        ], 
        "path": "php/domxpath.registerphpfunctions", 
        "type": "HTML"
    }, 
    "DateInterval": {
        "description": "", 
        "name": "DateInterval", 
        "overview": "public static DateInterval createFromDateString ( string $time )", 
        "parameters": [], 
        "path": "php/class.dateinterval", 
        "type": "Date and Time"
    }, 
    "DateInterval::createFromDateString": {
        "description": "Uses the normal date parsers and sets up a DateInterval from the relative parts of the parsed string.", 
        "name": "DateInterval::createFromDateString", 
        "overview": "public static DateInterval DateInterval::createFromDateString ( string $time )", 
        "parameters": [
            {
                "descr": "A date with relative parts. Specifically, the relative formats supported by the parser used for strtotime() and DateTime will be used to construct the DateInterval.", 
                "name": "time"
            }
        ], 
        "path": "php/dateinterval.createfromdatestring", 
        "type": "Date and Time"
    }, 
    "DateInterval::format": {
        "description": "Formats the interval.", 
        "name": "DateInterval::format", 
        "overview": "public string DateInterval::format ( string $format )", 
        "parameters": [
            {
                "descr": "The following characters are recognized in the format parameter string. ", 
                "name": "format"
            }
        ], 
        "path": "php/dateinterval.format", 
        "type": "Date and Time"
    }, 
    "DateTime": {
        "description": "", 
        "name": "DateTime", 
        "overview": "public DateTime add ( DateInterval $interval )", 
        "parameters": [
            {
                "descr": "Atom (example: 2005-08-15T15:52:01+00:00)", 
                "name": "DATE_ATOM"
            }, 
            {
                "descr": "HTTP Cookies (example: Monday, 15-Aug-05 15:52:01 UTC)", 
                "name": "DATE_COOKIE"
            }, 
            {
                "descr": "ISO-8601 (example: 2005-08-15T15:52:01+0000)", 
                "name": "DATE_ISO8601"
            }, 
            {
                "descr": "RFC 822 (example: Mon, 15 Aug 05 15:52:01 +0000)", 
                "name": "DATE_RFC822"
            }, 
            {
                "descr": "RFC 850 (example: Monday, 15-Aug-05 15:52:01 UTC)", 
                "name": "DATE_RFC850"
            }, 
            {
                "descr": "RFC 1036 (example: Mon, 15 Aug 05 15:52:01 +0000)", 
                "name": "DATE_RFC1036"
            }, 
            {
                "descr": "RFC 1123 (example: Mon, 15 Aug 2005 15:52:01 +0000)", 
                "name": "DATE_RFC1123"
            }, 
            {
                "descr": "RFC 2822 (Mon, 15 Aug 2005 15:52:01 +0000)", 
                "name": "DATE_RFC2822"
            }, 
            {
                "descr": "Same as DATE_ATOM (since PHP 5.1.3)", 
                "name": "DATE_RFC3339"
            }, 
            {
                "descr": "RSS (Mon, 15 Aug 2005 15:52:01 +0000)", 
                "name": "DATE_RSS"
            }, 
            {
                "descr": "World Wide Web Consortium (example: 2005-08-15T15:52:01+00:00)", 
                "name": "DATE_W3C"
            }
        ], 
        "path": "php/class.datetime", 
        "type": "Date and Time"
    }, 
    "DateTime::__construct": {
        "description": "Returns new DateTime object.", 
        "name": "DateTime::__construct", 
        "overview": "DateTime date_create ([ string $time = \"now\" [, DateTimeZone $timezone = NULL ]] )", 
        "parameters": [
            {
                "descr": "A date/time string. Valid formats are explained in Date and Time Formats. ", 
                "name": "time"
            }, 
            {
                "descr": "A DateTimeZone object representing the timezone of $time. ", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetime.construct", 
        "type": "Date and Time"
    }, 
    "DateTime::__set_state": {
        "description": "The __set_state() handler.", 
        "name": "DateTime::__set_state", 
        "overview": "public static DateTime DateTime::__set_state ( array $array )", 
        "parameters": [
            {
                "descr": "Initialization array.", 
                "name": "array"
            }
        ], 
        "path": "php/datetime.set-state", 
        "type": "Date and Time"
    }, 
    "DateTime::__wakeup": {
        "description": "The __wakeup() handler.", 
        "name": "DateTime::__wakeup", 
        "overview": "public DateTime::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/datetime.wakeup", 
        "type": "Date and Time"
    }, 
    "DateTime::add": {
        "description": "Adds the specified DateInterval object to the specified DateTime object.", 
        "name": "DateTime::add", 
        "overview": "public DateTime DateTime::add ( DateInterval $interval )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A DateInterval object", 
                "name": "interval"
            }
        ], 
        "path": "php/datetime.add", 
        "type": "Date and Time"
    }, 
    "DateTime::createFromFormat": {
        "description": "Returns new DateTime object formatted according to the specified format.", 
        "name": "DateTime::createFromFormat", 
        "overview": "public static DateTime DateTime::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )", 
        "parameters": [
            {
                "descr": "The format that the passed in string should be in. ", 
                "name": "format"
            }, 
            {
                "descr": "String representing the time.", 
                "name": "time"
            }, 
            {
                "descr": "A DateTimeZone object representing the desired time zone. ", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetime.createfromformat", 
        "type": "Date and Time"
    }, 
    "DateTime::diff": {
        "description": "Returns the difference between two DateTimeInterface objects.", 
        "name": "DateTime::diff", 
        "overview": "public DateInterval DateTime::diff ( DateTimeInterface $datetime2 [, bool $absolute = false ] )", 
        "parameters": [
            {
                "descr": "The date to compare to.", 
                "name": "datetime"
            }, 
            {
                "descr": "Should the interval be forced to be positive?", 
                "name": "absolute"
            }
        ], 
        "path": "php/datetime.diff", 
        "type": "Date and Time"
    }, 
    "DateTime::format": {
        "description": "Returns date formatted according to given format.", 
        "name": "DateTime::format", 
        "overview": "public string DateTime::format ( string $format )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create()", 
                "name": "object"
            }, 
            {
                "descr": "Format accepted by date().", 
                "name": "format"
            }
        ], 
        "path": "php/datetime.format", 
        "type": "Date and Time"
    }, 
    "DateTime::getLastErrors": {
        "description": "Returns an array of warnings and errors found while parsing a date/time string.", 
        "name": "DateTime::getLastErrors", 
        "overview": "public static array DateTime::getLastErrors ( void )", 
        "parameters": [], 
        "path": "php/datetime.getlasterrors", 
        "type": "Date and Time"
    }, 
    "DateTime::getOffset": {
        "description": "Returns the timezone offset.", 
        "name": "DateTime::getOffset", 
        "overview": "public int DateTime::getOffset ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create()", 
                "name": "object"
            }
        ], 
        "path": "php/datetime.getoffset", 
        "type": "Date and Time"
    }, 
    "DateTime::getTimestamp": {
        "description": "Gets the Unix timestamp.", 
        "name": "DateTime::getTimestamp", 
        "overview": "public int DateTime::getTimestamp ( void )", 
        "parameters": [], 
        "path": "php/datetime.gettimestamp", 
        "type": "Date and Time"
    }, 
    "DateTime::getTimezone": {
        "description": "Return time zone relative to given DateTime.", 
        "name": "DateTime::getTimezone", 
        "overview": "public DateTimeZone DateTime::getTimezone ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create()", 
                "name": "object"
            }
        ], 
        "path": "php/datetime.gettimezone", 
        "type": "Date and Time"
    }, 
    "DateTime::modify": {
        "description": "Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by strtotime().", 
        "name": "DateTime::modify", 
        "overview": "public DateTime DateTime::modify ( string $modify )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A date/time string. Valid formats are explained in Date and Time Formats.", 
                "name": "modify"
            }
        ], 
        "path": "php/datetime.modify", 
        "type": "Date and Time"
    }, 
    "DateTime::setDate": {
        "description": "Resets the current date of the DateTime object to a different date.", 
        "name": "DateTime::setDate", 
        "overview": "public DateTime DateTime::setDate ( int $year , int $month , int $day )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Year of the date.", 
                "name": "year"
            }, 
            {
                "descr": "Month of the date.", 
                "name": "month"
            }, 
            {
                "descr": "Day of the date.", 
                "name": "day"
            }
        ], 
        "path": "php/datetime.setdate", 
        "type": "Date and Time"
    }, 
    "DateTime::setISODate": {
        "description": "Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.", 
        "name": "DateTime::setISODate", 
        "overview": "public DateTime DateTime::setISODate ( int $year , int $week [, int $day = 1 ] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Year of the date.", 
                "name": "year"
            }, 
            {
                "descr": "Week of the date.", 
                "name": "week"
            }, 
            {
                "descr": "Offset from the first day of the week.", 
                "name": "day"
            }
        ], 
        "path": "php/datetime.setisodate", 
        "type": "Date and Time"
    }, 
    "DateTime::setTime": {
        "description": "Resets the current time of the DateTime object to a different time.", 
        "name": "DateTime::setTime", 
        "overview": "public DateTime DateTime::setTime ( int $hour , int $minute [, int $second = 0 ] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Hour of the time.", 
                "name": "hour"
            }, 
            {
                "descr": "Minute of the time.", 
                "name": "minute"
            }, 
            {
                "descr": "Second of the time.", 
                "name": "second"
            }
        ], 
        "path": "php/datetime.settime", 
        "type": "Date and Time"
    }, 
    "DateTime::setTimestamp": {
        "description": "Sets the date and time based on an Unix timestamp.", 
        "name": "DateTime::setTimestamp", 
        "overview": "public DateTime DateTime::setTimestamp ( int $unixtimestamp )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "Unix timestamp representing the date.", 
                "name": "unixtimestamp"
            }
        ], 
        "path": "php/datetime.settimestamp", 
        "type": "Date and Time"
    }, 
    "DateTime::setTimezone": {
        "description": "Sets a new timezone for a DateTime object.", 
        "name": "DateTime::setTimezone", 
        "overview": "public DateTime DateTime::setTimezone ( DateTimeZone $timezone )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A DateTimeZone object representing the desired time zone.", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetime.settimezone", 
        "type": "Date and Time"
    }, 
    "DateTime::sub": {
        "description": "Subtracts the specified DateInterval object from the specified DateTime object.", 
        "name": "DateTime::sub", 
        "overview": "public DateTime DateTime::sub ( DateInterval $interval )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTime object returned by date_create(). ", 
                "name": "object"
            }, 
            {
                "descr": "A DateInterval object", 
                "name": "interval"
            }
        ], 
        "path": "php/datetime.sub", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable": {
        "description": "", 
        "name": "DateTimeImmutable", 
        "overview": "public DateTimeImmutable add ( DateInterval $interval )", 
        "parameters": [], 
        "path": "php/class.datetimeimmutable", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::__construct": {
        "description": "Like DateTime::__construct() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::__construct", 
        "overview": "DateTimeImmutable date_create_immutable ([ string $time = \"now\" [, DateTimeZone $timezone = NULL ]] )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.construct", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::__set_state": {
        "description": "Like DateTime::__set_state() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::__set_state", 
        "overview": "public static DateTimeImmutable DateTimeImmutable::__set_state ( array $array )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.set-state", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::add": {
        "description": "Like DateTime::add() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::add", 
        "overview": "public DateTimeImmutable DateTimeImmutable::add ( DateInterval $interval )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.add", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::createFromFormat": {
        "description": "Like DateTime::createFromFormat() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::createFromFormat", 
        "overview": "public static DateTimeImmutable DateTimeImmutable::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.createfromformat", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::getLastErrors": {
        "description": "Like DateTime::getLastErrors() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::getLastErrors", 
        "overview": "public static array DateTimeImmutable::getLastErrors ( void )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.getlasterrors", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::modify": {
        "description": "Like DateTime::modify() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::modify", 
        "overview": "public DateTimeImmutable DateTimeImmutable::modify ( string $modify )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.modify", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setDate": {
        "description": "Like DateTime::setDate() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setDate", 
        "overview": "public DateTimeImmutable DateTimeImmutable::setDate ( int $year , int $month , int $day )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.setdate", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setISODate": {
        "description": "Like DateTime::setISODate() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setISODate", 
        "overview": "public DateTimeImmutable DateTimeImmutable::setISODate ( int $year , int $week [, int $day = 1 ] )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.setisodate", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setTime": {
        "description": "Like DateTime::setTime() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setTime", 
        "overview": "public DateTimeImmutable DateTimeImmutable::setTime ( int $hour , int $minute [, int $second = 0 ] )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.settime", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setTimestamp": {
        "description": "Like DateTime::setTimestamp() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setTimestamp", 
        "overview": "public DateTimeImmutable DateTimeImmutable::setTimestamp ( int $unixtimestamp )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.settimestamp", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::setTimezone": {
        "description": "Like DateTime::setTimezone() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::setTimezone", 
        "overview": "public DateTimeImmutable DateTimeImmutable::setTimezone ( DateTimeZone $timezone )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.settimezone", 
        "type": "Date and Time"
    }, 
    "DateTimeImmutable::sub": {
        "description": "Like DateTime::sub() but works with DateTimeImmutable.", 
        "name": "DateTimeImmutable::sub", 
        "overview": "public DateTimeImmutable DateTimeImmutable::sub ( DateInterval $interval )", 
        "parameters": [], 
        "path": "php/datetimeimmutable.sub", 
        "type": "Date and Time"
    }, 
    "DateTimeInterface (interface": {
        "description": "", 
        "name": "DateTimeInterface (interface", 
        "overview": "public DateInterval diff ( DateTimeInterface $datetime2 [, bool $absolute = false ] )", 
        "parameters": [], 
        "path": "php/class.datetimeinterface", 
        "type": "Date and Time"
    }, 
    "DateTimeZone": {
        "description": "", 
        "name": "DateTimeZone", 
        "overview": "public array getLocation ( void )", 
        "parameters": [], 
        "path": "php/class.datetimezone", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::__construct": {
        "description": "Creates new DateTimeZone object.", 
        "name": "DateTimeZone::__construct", 
        "overview": "DateTimeZone timezone_open ( string $timezone )", 
        "parameters": [
            {
                "descr": "One of timezones.", 
                "name": "timezone"
            }
        ], 
        "path": "php/datetimezone.construct", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getLocation": {
        "description": "Returns location information for a timezone, including country code, latitude/longitude and comments.", 
        "name": "DateTimeZone::getLocation", 
        "overview": "public array DateTimeZone::getLocation ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTimeZone object returned by timezone_open()", 
                "name": "object"
            }
        ], 
        "path": "php/datetimezone.getlocation", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getName": {
        "description": "Returns the name of the timezone.", 
        "name": "DateTimeZone::getName", 
        "overview": "public string DateTimeZone::getName ( void )", 
        "parameters": [
            {
                "descr": "The DateTimeZone for which to get a name.", 
                "name": "object"
            }
        ], 
        "path": "php/datetimezone.getname", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getOffset": {
        "description": "This function returns the offset to GMT for the date/time specified in the datetime parameter. The GMT offset is calculated with the timezone information contained in the DateTimeZone object being used.", 
        "name": "DateTimeZone::getOffset", 
        "overview": "public int DateTimeZone::getOffset ( DateTime $datetime )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTimeZone object returned by timezone_open()", 
                "name": "object"
            }, 
            {
                "descr": "DateTime that contains the date/time to compute the offset from.", 
                "name": "datetime"
            }
        ], 
        "path": "php/datetimezone.getoffset", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::getTransitions": {
        "description": "Procedural style", 
        "name": "DateTimeZone::getTransitions", 
        "overview": "public array DateTimeZone::getTransitions ([ int $timestamp_begin [, int $timestamp_end ]] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A DateTimeZone object returned by timezone_open()", 
                "name": "object"
            }, 
            {
                "descr": "Begin timestamp.", 
                "name": "timestamp_begin"
            }, 
            {
                "descr": "End timestamp.", 
                "name": "timestamp_end"
            }
        ], 
        "path": "php/datetimezone.gettransitions", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::listAbbreviations": {
        "description": "Procedural style", 
        "name": "DateTimeZone::listAbbreviations", 
        "overview": "public static array DateTimeZone::listAbbreviations ( void )", 
        "parameters": [], 
        "path": "php/datetimezone.listabbreviations", 
        "type": "Date and Time"
    }, 
    "DateTimeZone::listIdentifiers": {
        "description": "Procedural style", 
        "name": "DateTimeZone::listIdentifiers", 
        "overview": "public static array DateTimeZone::listIdentifiers ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )", 
        "parameters": [
            {
                "descr": "One of DateTimeZone class constants.", 
                "name": "what"
            }, 
            {
                "descr": "A two-letter ISO 3166-1 compatible country code. ", 
                "name": "country"
            }
        ], 
        "path": "php/datetimezone.listidentifiers", 
        "type": "Date and Time"
    }, 
    "Directory": {
        "description": "", 
        "name": "Directory", 
        "overview": "public void close ([ resource $dir_handle ] )", 
        "parameters": [], 
        "path": "php/class.directory", 
        "type": "File System"
    }, 
    "Directory::close": {
        "description": "Same as closedir(), only    dir_handle defaults to $this.", 
        "name": "Directory::close", 
        "overview": "public void Directory::close ([ resource $dir_handle ] )", 
        "parameters": [], 
        "path": "php/directory.close", 
        "type": "File System"
    }, 
    "Directory::read": {
        "description": "Same as readdir(), only    dir_handle defaults to $this.", 
        "name": "Directory::read", 
        "overview": "public string Directory::read ([ resource $dir_handle ] )", 
        "parameters": [], 
        "path": "php/directory.read", 
        "type": "File System"
    }, 
    "Directory::rewind": {
        "description": "Same as rewinddir(), only    dir_handle defaults to $this.", 
        "name": "Directory::rewind", 
        "overview": "public void Directory::rewind ([ resource $dir_handle ] )", 
        "parameters": [], 
        "path": "php/directory.rewind", 
        "type": "File System"
    }, 
    "DirectoryIterator": {
        "description": "", 
        "name": "DirectoryIterator", 
        "overview": "public DirectoryIterator current ( void )", 
        "parameters": [], 
        "path": "php/class.directoryiterator", 
        "type": "File System"
    }, 
    "DirectoryIterator::__toString": {
        "description": "Get the file name of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::__toString", 
        "overview": "public string DirectoryIterator::__toString ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.tostring", 
        "type": "File System"
    }, 
    "DirectoryIterator::current": {
        "description": "Get the current DirectoryIterator item.", 
        "name": "DirectoryIterator::current", 
        "overview": "public DirectoryIterator DirectoryIterator::current ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.current", 
        "type": "File System"
    }, 
    "DirectoryIterator::getATime": {
        "description": "Get the last access time of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getATime", 
        "overview": "public int DirectoryIterator::getATime ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getatime", 
        "type": "File System"
    }, 
    "DirectoryIterator::getBasename": {
        "description": "Get the base name of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getBasename", 
        "overview": "public string DirectoryIterator::getBasename ([  string $suffix  ] )", 
        "parameters": [
            {
                "descr": "If the base name ends in suffix, this will be cut.", 
                "name": "suffix"
            }
        ], 
        "path": "php/directoryiterator.getbasename", 
        "type": "File System"
    }, 
    "DirectoryIterator::getCTime": {
        "description": "Get the inode change time for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getCTime", 
        "overview": "public int DirectoryIterator::getCTime ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getctime", 
        "type": "File System"
    }, 
    "DirectoryIterator::getExtension": {
        "description": "Retrieves the file extension.", 
        "name": "DirectoryIterator::getExtension", 
        "overview": "public string DirectoryIterator::getExtension ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getextension", 
        "type": "File System"
    }, 
    "DirectoryIterator::getFilename": {
        "description": "Get the file name of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getFilename", 
        "overview": "public string DirectoryIterator::getFilename ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getfilename", 
        "type": "File System"
    }, 
    "DirectoryIterator::getGroup": {
        "description": "Get the group id of the file.", 
        "name": "DirectoryIterator::getGroup", 
        "overview": "public int DirectoryIterator::getGroup ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getgroup", 
        "type": "File System"
    }, 
    "DirectoryIterator::getInode": {
        "description": "Get the inode number for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getInode", 
        "overview": "public int DirectoryIterator::getInode ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getinode", 
        "type": "File System"
    }, 
    "DirectoryIterator::getMTime": {
        "description": "Get the last modification time of the current DirectoryIterator item, as a Unix timestamp.", 
        "name": "DirectoryIterator::getMTime", 
        "overview": "public int DirectoryIterator::getMTime ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getmtime", 
        "type": "File System"
    }, 
    "DirectoryIterator::getOwner": {
        "description": "Get the owner of the current DirectoryIterator item, in numerical format.", 
        "name": "DirectoryIterator::getOwner", 
        "overview": "public int DirectoryIterator::getOwner ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getowner", 
        "type": "File System"
    }, 
    "DirectoryIterator::getPath": {
        "description": "Get the path to the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getPath", 
        "overview": "public string DirectoryIterator::getPath ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getpath", 
        "type": "File System"
    }, 
    "DirectoryIterator::getPathname": {
        "description": "Get the path and file name of the current file.", 
        "name": "DirectoryIterator::getPathname", 
        "overview": "public string DirectoryIterator::getPathname ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getpathname", 
        "type": "File System"
    }, 
    "DirectoryIterator::getPerms": {
        "description": "Get the permissions of the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getPerms", 
        "overview": "public int DirectoryIterator::getPerms ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getperms", 
        "type": "File System"
    }, 
    "DirectoryIterator::getSize": {
        "description": "Get the file size for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::getSize", 
        "overview": "public int DirectoryIterator::getSize ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.getsize", 
        "type": "File System"
    }, 
    "DirectoryIterator::getType": {
        "description": "Determines which file type the current DirectoryIterator item belongs to. One of file, link, or dir.", 
        "name": "DirectoryIterator::getType", 
        "overview": "public string DirectoryIterator::getType ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.gettype", 
        "type": "File System"
    }, 
    "DirectoryIterator::isDir": {
        "description": "Determines if the current DirectoryIterator item is a directory.", 
        "name": "DirectoryIterator::isDir", 
        "overview": "public bool DirectoryIterator::isDir ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.isdir", 
        "type": "File System"
    }, 
    "DirectoryIterator::isDot": {
        "description": "Determines if the current DirectoryIterator item is a directory and either . or ...", 
        "name": "DirectoryIterator::isDot", 
        "overview": "public bool DirectoryIterator::isDot ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.isdot", 
        "type": "File System"
    }, 
    "DirectoryIterator::isExecutable": {
        "description": "Determines if the current DirectoryIterator item is executable.", 
        "name": "DirectoryIterator::isExecutable", 
        "overview": "public bool DirectoryIterator::isExecutable ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.isexecutable", 
        "type": "File System"
    }, 
    "DirectoryIterator::isFile": {
        "description": "Determines if the current DirectoryIterator item is a regular file.", 
        "name": "DirectoryIterator::isFile", 
        "overview": "public bool DirectoryIterator::isFile ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.isfile", 
        "type": "File System"
    }, 
    "DirectoryIterator::isLink": {
        "description": "Determines if the current DirectoryIterator item is a symbolic link.", 
        "name": "DirectoryIterator::isLink", 
        "overview": "public bool DirectoryIterator::isLink ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.islink", 
        "type": "File System"
    }, 
    "DirectoryIterator::isReadable": {
        "description": "Determines if the current DirectoryIterator item is readable.", 
        "name": "DirectoryIterator::isReadable", 
        "overview": "public bool DirectoryIterator::isReadable ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.isreadable", 
        "type": "File System"
    }, 
    "DirectoryIterator::isWritable": {
        "description": "Determines if the current DirectoryIterator item is writable.", 
        "name": "DirectoryIterator::isWritable", 
        "overview": "public bool DirectoryIterator::isWritable ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.iswritable", 
        "type": "File System"
    }, 
    "DirectoryIterator::key": {
        "description": "Get the key for the current DirectoryIterator item.", 
        "name": "DirectoryIterator::key", 
        "overview": "public string DirectoryIterator::key ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.key", 
        "type": "File System"
    }, 
    "DirectoryIterator::next": {
        "description": "Move forward to the next DirectoryIterator item.", 
        "name": "DirectoryIterator::next", 
        "overview": "public void DirectoryIterator::next ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.next", 
        "type": "File System"
    }, 
    "DirectoryIterator::rewind": {
        "description": "Rewind the DirectoryIterator back to the start.", 
        "name": "DirectoryIterator::rewind", 
        "overview": "public void DirectoryIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.rewind", 
        "type": "File System"
    }, 
    "DirectoryIterator::seek": {
        "description": "Seek to a given position in the DirectoryIterator.", 
        "name": "DirectoryIterator::seek", 
        "overview": "public void DirectoryIterator::seek ( int $position )", 
        "parameters": [
            {
                "descr": "The zero-based numeric position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/directoryiterator.seek", 
        "type": "File System"
    }, 
    "DirectoryIterator::valid": {
        "description": "Check whether current DirectoryIterator position is a valid file.", 
        "name": "DirectoryIterator::valid", 
        "overview": "public bool DirectoryIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/directoryiterator.valid", 
        "type": "File System"
    }, 
    "DomainException": {
        "description": "", 
        "name": "DomainException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.domainexception", 
        "type": "SPL/Exceptions"
    }, 
    "EmptyIterator": {
        "description": "", 
        "name": "EmptyIterator", 
        "overview": "public void current ( void )", 
        "parameters": [], 
        "path": "php/class.emptyiterator", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::current": {
        "description": "This function must not be called. It throws an exception upon access.", 
        "name": "EmptyIterator::current", 
        "overview": "public void EmptyIterator::current ( void )", 
        "parameters": [], 
        "path": "php/emptyiterator.current", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::key": {
        "description": "This function must not be called. It throws an exception upon access.", 
        "name": "EmptyIterator::key", 
        "overview": "public void EmptyIterator::key ( void )", 
        "parameters": [], 
        "path": "php/emptyiterator.key", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::next": {
        "description": "No operation, nothing to do.", 
        "name": "EmptyIterator::next", 
        "overview": "public void EmptyIterator::next ( void )", 
        "parameters": [], 
        "path": "php/emptyiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::rewind": {
        "description": "No operation, nothing to do.", 
        "name": "EmptyIterator::rewind", 
        "overview": "public void EmptyIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/emptyiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "EmptyIterator::valid": {
        "description": "The EmptyIterator valid() method.", 
        "name": "EmptyIterator::valid", 
        "overview": "public void EmptyIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/emptyiterator.valid", 
        "type": "SPL/Iterators"
    }, 
    "ErrorException": {
        "description": "", 
        "name": "ErrorException", 
        "overview": "final public int getSeverity ( void )", 
        "parameters": [], 
        "path": "php/class.errorexception", 
        "type": "Errors"
    }, 
    "ErrorException::getSeverity": {
        "description": "Returns the severity of the exception.", 
        "name": "ErrorException::getSeverity", 
        "overview": "final public int ErrorException::getSeverity ( void )", 
        "parameters": [], 
        "path": "php/errorexception.getseverity", 
        "type": "Errors"
    }, 
    "Exception": {
        "description": "", 
        "name": "Exception", 
        "overview": "final public string getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.exception", 
        "type": "Errors"
    }, 
    "Exception::__clone": {
        "description": "Tries to clone the Exception, which results in Fatal error.", 
        "name": "Exception::__clone", 
        "overview": "final private void Exception::__clone ( void )", 
        "parameters": [], 
        "path": "php/exception.clone", 
        "type": "Errors"
    }, 
    "Exception::__toString": {
        "description": "Returns the string representation of the exception.", 
        "name": "Exception::__toString", 
        "overview": "public string Exception::__toString ( void )", 
        "parameters": [], 
        "path": "php/exception.tostring", 
        "type": "Errors"
    }, 
    "Exception::getCode": {
        "description": "Returns the Exception code.", 
        "name": "Exception::getCode", 
        "overview": "final public mixed Exception::getCode ( void )", 
        "parameters": [], 
        "path": "php/exception.getcode", 
        "type": "Errors"
    }, 
    "Exception::getFile": {
        "description": "Get the name of the file the exception was created.", 
        "name": "Exception::getFile", 
        "overview": "final public string Exception::getFile ( void )", 
        "parameters": [], 
        "path": "php/exception.getfile", 
        "type": "Errors"
    }, 
    "Exception::getLine": {
        "description": "Get line number where the exception was created.", 
        "name": "Exception::getLine", 
        "overview": "final public int Exception::getLine ( void )", 
        "parameters": [], 
        "path": "php/exception.getline", 
        "type": "Errors"
    }, 
    "Exception::getMessage": {
        "description": "Returns the Exception message.", 
        "name": "Exception::getMessage", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/exception.getmessage", 
        "type": "Errors"
    }, 
    "Exception::getPrevious": {
        "description": "Returns previous Exception (the third parameter of Exception::__construct()).", 
        "name": "Exception::getPrevious", 
        "overview": "final public Exception Exception::getPrevious ( void )", 
        "parameters": [], 
        "path": "php/exception.getprevious", 
        "type": "Errors"
    }, 
    "Exception::getTrace": {
        "description": "Returns the Exception stack trace.", 
        "name": "Exception::getTrace", 
        "overview": "final public array Exception::getTrace ( void )", 
        "parameters": [], 
        "path": "php/exception.gettrace", 
        "type": "Errors"
    }, 
    "Exception::getTraceAsString": {
        "description": "Returns the Exception stack trace as a string.", 
        "name": "Exception::getTraceAsString", 
        "overview": "final public string Exception::getTraceAsString ( void )", 
        "parameters": [], 
        "path": "php/exception.gettraceasstring", 
        "type": "Errors"
    }, 
    "FilesystemIterator": {
        "description": "", 
        "name": "FilesystemIterator", 
        "overview": "public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )", 
        "parameters": [], 
        "path": "php/class.filesystemiterator", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::__construct": {
        "description": "Constructs a new filesystem iterator from the path.", 
        "name": "FilesystemIterator::__construct", 
        "overview": "public FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )", 
        "parameters": [
            {
                "descr": "The path of the filesystem item to be iterated over.", 
                "name": "path"
            }, 
            {
                "descr": "Flags may be provided which will affect the behavior of some methods. ", 
                "name": "flags"
            }
        ], 
        "path": "php/filesystemiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::current": {
        "description": "Get file information of the current element.", 
        "name": "FilesystemIterator::current", 
        "overview": "public mixed FilesystemIterator::current ( void )", 
        "parameters": [], 
        "path": "php/filesystemiterator.current", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::getFlags": {
        "description": "Gets the handling flags, as set in FilesystemIterator::__construct() or FilesystemIterator::setFlags().", 
        "name": "FilesystemIterator::getFlags", 
        "overview": "public int FilesystemIterator::getFlags ( void )", 
        "parameters": [], 
        "path": "php/filesystemiterator.getflags", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::key": {
        "description": "", 
        "name": "FilesystemIterator::key", 
        "overview": "public string FilesystemIterator::key ( void )", 
        "parameters": [], 
        "path": "php/filesystemiterator.key", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::next": {
        "description": "Move to the next file.", 
        "name": "FilesystemIterator::next", 
        "overview": "public void FilesystemIterator::next ( void )", 
        "parameters": [], 
        "path": "php/filesystemiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::rewind": {
        "description": "Rewinds the directory back to the start.", 
        "name": "FilesystemIterator::rewind", 
        "overview": "public void FilesystemIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/filesystemiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "FilesystemIterator::setFlags": {
        "description": "Sets handling flags.", 
        "name": "FilesystemIterator::setFlags", 
        "overview": "public void FilesystemIterator::setFlags ([ int $flags ] )", 
        "parameters": [
            {
                "descr": "The handling flags to set. See the FilesystemIterator constants.", 
                "name": "flags"
            }
        ], 
        "path": "php/filesystemiterator.setflags", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator": {
        "description": "", 
        "name": "FilterIterator", 
        "overview": "public abstract bool accept ( void )", 
        "parameters": [], 
        "path": "php/class.filteriterator", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::__construct": {
        "description": "Constructs a new FilterIterator, which consists of a passed in iterator with filters applied to it.", 
        "name": "FilterIterator::__construct", 
        "overview": "public FilterIterator::__construct ( Iterator $iterator )", 
        "parameters": [
            {
                "descr": "The iterator that is being filtered.", 
                "name": "iterator"
            }
        ], 
        "path": "php/filteriterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::accept": {
        "description": "Returns whether the current element of the iterator is acceptable through this filter.", 
        "name": "FilterIterator::accept", 
        "overview": "public abstract bool FilterIterator::accept ( void )", 
        "parameters": [], 
        "path": "php/filteriterator.accept", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::current": {
        "description": "", 
        "name": "FilterIterator::current", 
        "overview": "public mixed FilterIterator::current ( void )", 
        "parameters": [], 
        "path": "php/filteriterator.current", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::getInnerIterator": {
        "description": "", 
        "name": "FilterIterator::getInnerIterator", 
        "overview": "public Iterator FilterIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/filteriterator.getinneriterator", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::key": {
        "description": "", 
        "name": "FilterIterator::key", 
        "overview": "public mixed FilterIterator::key ( void )", 
        "parameters": [], 
        "path": "php/filteriterator.key", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::next": {
        "description": "", 
        "name": "FilterIterator::next", 
        "overview": "public void FilterIterator::next ( void )", 
        "parameters": [], 
        "path": "php/filteriterator.next", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::rewind": {
        "description": "", 
        "name": "FilterIterator::rewind", 
        "overview": "public void FilterIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/filteriterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "FilterIterator::valid": {
        "description": "", 
        "name": "FilterIterator::valid", 
        "overview": "public bool FilterIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/filteriterator.valid", 
        "type": "SPL/Iterators"
    }, 
    "FrenchToJD": {
        "description": "Converts a date from the French Republican Calendar to a Julian Day Count.", 
        "name": "FrenchToJD", 
        "overview": "int frenchtojd ( int $month , int $day , int $year )", 
        "parameters": [
            {
                "descr": "The month as a number from 1 (for Vend\u00e9miaire) to 13 (for the period of 5-6 days at the end of each year)", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 30", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between 1 and 14", 
                "name": "year"
            }
        ], 
        "path": "php/function.frenchtojd", 
        "type": "Date and Time"
    }, 
    "GearmanClient": {
        "description": "", 
        "name": "GearmanClient", 
        "overview": "public bool addOptions ( int $options )", 
        "parameters": [], 
        "path": "php/class.gearmanclient", 
        "type": "Gearman"
    }, 
    "GearmanClient::__construct": {
        "description": "Creates a GearmanClient instance representing a client that connects to the job server and submits tasks to complete.", 
        "name": "GearmanClient::__construct", 
        "overview": "public GearmanClient::__construct ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.construct", 
        "type": "Gearman"
    }, 
    "GearmanClient::addOptions": {
        "description": "Adds one or more options to those already set.", 
        "name": "GearmanClient::addOptions", 
        "overview": "public bool GearmanClient::addOptions ( int $options )", 
        "parameters": [
            {
                "descr": "The options to add", 
                "name": "options"
            }
        ], 
        "path": "php/gearmanclient.addoptions", 
        "type": "Gearman"
    }, 
    "GearmanClient::addServer": {
        "description": "Adds a job server to a list of servers that can be used to run a task. No socket I/O happens here; the server is simply added to the list.", 
        "name": "GearmanClient::addServer", 
        "overview": "public bool GearmanClient::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )", 
        "parameters": [
            {
                "descr": "The job server host name.", 
                "name": "host"
            }, 
            {
                "descr": "The job server port.", 
                "name": "port"
            }
        ], 
        "path": "php/gearmanclient.addserver", 
        "type": "Gearman"
    }, 
    "GearmanClient::addServers": {
        "description": "Adds a list of job servers that can be used to run a task. No socket I/O happens here; the servers are simply added to the full list of servers.", 
        "name": "GearmanClient::addServers", 
        "overview": "public bool GearmanClient::addServers ([ string $servers = 127.0.0.1:4730 ] )", 
        "parameters": [
            {
                "descr": "A comma-separated list of servers, each server specified in the format 'host:port'.", 
                "name": "servers"
            }
        ], 
        "path": "php/gearmanclient.addservers", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTask": {
        "description": "Adds a task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Note that enough workers need to be available for the tasks to all run in parallel.", 
        "name": "GearmanClient::addTask", 
        "overview": "public GearmanTask GearmanClient::addTask ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtask", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskBackground": {
        "description": "Adds a background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work.", 
        "name": "GearmanClient::addTaskBackground", 
        "overview": "public GearmanTask GearmanClient::addTaskBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtaskbackground", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskHigh": {
        "description": "Adds a high priority task to be run in parallel with other tasks. Call this method for all the high priority tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.", 
        "name": "GearmanClient::addTaskHigh", 
        "overview": "public GearmanTask GearmanClient::addTaskHigh ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtaskhigh", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskHighBackground": {
        "description": "Adds a high priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.", 
        "name": "GearmanClient::addTaskHighBackground", 
        "overview": "public GearmanTask GearmanClient::addTaskHighBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtaskhighbackground", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskLow": {
        "description": "Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a low priority will be selected from the queue after those of normal or low priority.", 
        "name": "GearmanClient::addTaskLow", 
        "overview": "public GearmanTask GearmanClient::addTaskLow ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtasklow", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskLowBackground": {
        "description": "Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a low priority will be selected from the queue after those of normal or high priority.", 
        "name": "GearmanClient::addTaskLowBackground", 
        "overview": "public GearmanTask GearmanClient::addTaskLowBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "Application context to associate with a task", 
                "name": "context"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.addtasklowbackground", 
        "type": "Gearman"
    }, 
    "GearmanClient::addTaskStatus": {
        "description": "Used to request status information from the Gearman server, which will call the specified status callback (set using GearmanClient::setStatusCallback()).", 
        "name": "GearmanClient::addTaskStatus", 
        "overview": "public GearmanTask GearmanClient::addTaskStatus ( string $job_handle [, string &$context ] )", 
        "parameters": [
            {
                "descr": "The job handle for the task to get status for", 
                "name": "job_handle"
            }, 
            {
                "descr": "Data to be passed to the status callback, generally a reference to an array or object", 
                "name": "context"
            }
        ], 
        "path": "php/gearmanclient.addtaskstatus", 
        "type": "Gearman"
    }, 
    "GearmanClient::clearCallbacks": {
        "description": "Clears all the task callback functions that have previously been set.", 
        "name": "GearmanClient::clearCallbacks", 
        "overview": "public bool GearmanClient::clearCallbacks ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.clearcallbacks", 
        "type": "Gearman"
    }, 
    "GearmanClient::clone": {
        "description": "Creates a copy of a GearmanClient object.", 
        "name": "GearmanClient::clone", 
        "overview": "public GearmanClient GearmanClient::clone ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.clone", 
        "type": "Gearman"
    }, 
    "GearmanClient::context": {
        "description": "Get the application context previously set with GearmanClient::setContext().", 
        "name": "GearmanClient::context", 
        "overview": "public string GearmanClient::context ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.context", 
        "type": "Gearman"
    }, 
    "GearmanClient::data": {
        "description": "Get the application data previously set with GearmanClient::setData().", 
        "name": "GearmanClient::data", 
        "overview": "public string GearmanClient::data ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.data", 
        "type": "Gearman"
    }, 
    "GearmanClient::do": {
        "description": "The GearmanClient::do() method is deprecated as of pecl/gearman 1.0.0. Use GearmanClient::doNormal().", 
        "name": "GearmanClient::do", 
        "overview": "public string GearmanClient::do ( string $function_name , string $workload [, string $unique ] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.do", 
        "type": "Gearman"
    }, 
    "GearmanClient::doBackground": {
        "description": "Runs a task in the background, returning a job handle which can be used to get the status of the running task.", 
        "name": "GearmanClient::doBackground", 
        "overview": "public string GearmanClient::doBackground ( string $function_name , string $workload [, string $unique ] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dobackground", 
        "type": "Gearman"
    }, 
    "GearmanClient::doHigh": {
        "description": "Runs a single high priority task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result. High priority tasks will get precedence over normal and low priority tasks in the job queue.", 
        "name": "GearmanClient::doHigh", 
        "overview": "public string GearmanClient::doHigh ( string $function_name , string $workload [, string $unique ] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dohigh", 
        "type": "Gearman"
    }, 
    "GearmanClient::doHighBackground": {
        "description": "Runs a high priority task in the background, returning a job handle which can be used to get the status of the running task. High priority tasks take precedence over normal and low priority tasks in the job queue.", 
        "name": "GearmanClient::doHighBackground", 
        "overview": "public string GearmanClient::doHighBackground ( string $function_name , string $workload [, string $unique ] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dohighbackground", 
        "type": "Gearman"
    }, 
    "GearmanClient::doJobHandle": {
        "description": "Gets that job handle for a running task. This should be used between repeated GearmanClient::doNormal() calls. The job handle can then be used to get information on the task.", 
        "name": "GearmanClient::doJobHandle", 
        "overview": "public string GearmanClient::doJobHandle ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.dojobhandle", 
        "type": "Gearman"
    }, 
    "GearmanClient::doLow": {
        "description": "Runs a single low priority task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result. Normal and high priority tasks will get precedence over low priority tasks in the job queue.", 
        "name": "GearmanClient::doLow", 
        "overview": "public string GearmanClient::doLow ( string $function_name , string $workload [, string $unique ] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dolow", 
        "type": "Gearman"
    }, 
    "GearmanClient::doLowBackground": {
        "description": "Runs a low priority task in the background, returning a job handle which can be used to get the status of the running task. Normal and high priority tasks take precedence over low priority tasks in the job queue.", 
        "name": "GearmanClient::doLowBackground", 
        "overview": "public string GearmanClient::doLowBackground ( string $function_name , string $workload [, string $unique ] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.dolowbackground", 
        "type": "Gearman"
    }, 
    "GearmanClient::doNormal": {
        "description": "Runs a single task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result.", 
        "name": "GearmanClient::doNormal", 
        "overview": "public string GearmanClient::doNormal ( string $function_name , string $workload [, string $unique ] )", 
        "parameters": [
            {
                "descr": "A registered function the worker is to execute", 
                "name": "function_name"
            }, 
            {
                "descr": "Serialized data to be processed", 
                "name": "workload"
            }, 
            {
                "descr": "A unique ID used to identify a particular task", 
                "name": "unique"
            }
        ], 
        "path": "php/gearmanclient.donormal", 
        "type": "Gearman"
    }, 
    "GearmanClient::doStatus": {
        "description": "Returns the status for the running task. This should be used between repeated GearmanClient::doNormal() calls.", 
        "name": "GearmanClient::doStatus", 
        "overview": "public array GearmanClient::doStatus ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.dostatus", 
        "type": "Gearman"
    }, 
    "GearmanClient::echo": {
        "description": "The GearmanClient::echo() method is deprecated as of pecl/gearman 1.0.0. Use GearmanClient::ping().", 
        "name": "GearmanClient::echo", 
        "overview": "public bool GearmanClient::echo ( string $workload )", 
        "parameters": [
            {
                "descr": "Some arbitrary serialized data to be echo back", 
                "name": "workload"
            }
        ], 
        "path": "php/gearmanclient.echo", 
        "type": "Gearman"
    }, 
    "GearmanClient::error": {
        "description": "Returns an error string for the last error encountered.", 
        "name": "GearmanClient::error", 
        "overview": "public string GearmanClient::error ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.error", 
        "type": "Gearman"
    }, 
    "GearmanClient::getErrno": {
        "description": "Value of errno in the case of a GEARMAN_ERRNO return value.", 
        "name": "GearmanClient::getErrno", 
        "overview": "public int GearmanClient::getErrno ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.geterrno", 
        "type": "Gearman"
    }, 
    "GearmanClient::jobStatus": {
        "description": "Gets the status for a background job given a job handle. The status information will specify whether the job is known, whether the job is currently running, and the percentage completion.", 
        "name": "GearmanClient::jobStatus", 
        "overview": "public array GearmanClient::jobStatus ( string $job_handle )", 
        "parameters": [
            {
                "descr": "The job handle assigned by the Gearman server", 
                "name": "job_handle"
            }
        ], 
        "path": "php/gearmanclient.jobstatus", 
        "type": "Gearman"
    }, 
    "GearmanClient::ping": {
        "description": "Sends some arbitrary data to all job servers to see if they echo it back. The data sent is not used or processed in any other way. Primarily used for testing and debugging.", 
        "name": "GearmanClient::ping", 
        "overview": "public bool GearmanClient::ping ( string $workload )", 
        "parameters": [
            {
                "descr": "Some arbitrary serialized data to be echo back", 
                "name": "workload"
            }
        ], 
        "path": "php/gearmanclient.ping", 
        "type": "Gearman"
    }, 
    "GearmanClient::removeOptions": {
        "description": "Removes (unsets) one or more options.", 
        "name": "GearmanClient::removeOptions", 
        "overview": "public bool GearmanClient::removeOptions ( int $options )", 
        "parameters": [
            {
                "descr": "The options to be removed (unset)", 
                "name": "options"
            }
        ], 
        "path": "php/gearmanclient.removeoptions", 
        "type": "Gearman"
    }, 
    "GearmanClient::returnCode": {
        "description": "Returns the last Gearman return code.", 
        "name": "GearmanClient::returnCode", 
        "overview": "public int GearmanClient::returnCode ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.returncode", 
        "type": "Gearman"
    }, 
    "GearmanClient::runTasks": {
        "description": "For a set of tasks previously added with GearmanClient::addTask(), GearmanClient::addTaskHigh(), GearmanClient::addTaskLow(), GearmanClient::addTaskBackground(), GearmanClient::addTaskHighBackground(), or GearmanClient::addTaskLowBackground(), this call starts running the tasks in parallel.", 
        "name": "GearmanClient::runTasks", 
        "overview": "public bool GearmanClient::runTasks ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.runtasks", 
        "type": "Gearman"
    }, 
    "GearmanClient::setClientCallback": {
        "description": "Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setClientCallback", 
        "overview": "public void GearmanClient::setClientCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "A function or method to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setclientcallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setCompleteCallback": {
        "description": "Use to set a function to be called when a task is completed. The callback function should accept a single argument, a GearmanTask oject.", 
        "name": "GearmanClient::setCompleteCallback", 
        "overview": "public bool GearmanClient::setCompleteCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "A function to be called", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setcompletecallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setContext": {
        "description": "Sets an arbitrary string to provide application context that can later be retrieved by GearmanClient::context().", 
        "name": "GearmanClient::setContext", 
        "overview": "public bool GearmanClient::setContext ( string $context )", 
        "parameters": [
            {
                "descr": "Arbitrary context data", 
                "name": "context"
            }
        ], 
        "path": "php/gearmanclient.setcontext", 
        "type": "Gearman"
    }, 
    "GearmanClient::setCreatedCallback": {
        "description": "Sets a function to be called when a task is received and queued by the Gearman job server. The callback should accept a single argument, a GearmanClient oject.", 
        "name": "GearmanClient::setCreatedCallback", 
        "overview": "public bool GearmanClient::setCreatedCallback ( string $callback )", 
        "parameters": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setcreatedcallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setData": {
        "description": "Sets some arbitrary application data that can later be retrieved by GearmanClient::data().", 
        "name": "GearmanClient::setData", 
        "overview": "public bool GearmanClient::setData ( string $data )", 
        "parameters": [], 
        "path": "php/gearmanclient.setdata", 
        "type": "Gearman"
    }, 
    "GearmanClient::setDataCallback": {
        "description": "Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setDataCallback", 
        "overview": "public bool GearmanClient::setDataCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "A function or method to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setdatacallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setExceptionCallback": {
        "description": "Specifies a function to call when a worker for a task sends an exception.", 
        "name": "GearmanClient::setExceptionCallback", 
        "overview": "public bool GearmanClient::setExceptionCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "Function to call when the worker throws an exception", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setexceptioncallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setFailCallback": {
        "description": "Sets the callback function to be used when a task does not complete successfully. The function should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setFailCallback", 
        "overview": "public bool GearmanClient::setFailCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setfailcallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setOptions": {
        "description": "Sets one or more client options.", 
        "name": "GearmanClient::setOptions", 
        "overview": "public bool GearmanClient::setOptions ( int $options )", 
        "parameters": [
            {
                "descr": "The options to be set", 
                "name": "options"
            }
        ], 
        "path": "php/gearmanclient.setoptions", 
        "type": "Gearman"
    }, 
    "GearmanClient::setStatusCallback": {
        "description": "Sets a callback function used for getting updated status information from a worker. The function should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setStatusCallback", 
        "overview": "public bool GearmanClient::setStatusCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setstatuscallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setTimeout": {
        "description": "Sets the timeout for socket I/O activity.", 
        "name": "GearmanClient::setTimeout", 
        "overview": "public bool GearmanClient::setTimeout ( int $timeout )", 
        "parameters": [
            {
                "descr": "An interval of time in milliseconds", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanclient.settimeout", 
        "type": "Gearman"
    }, 
    "GearmanClient::setWarningCallback": {
        "description": "Sets a function to be called when a worker sends a warning. The callback should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setWarningCallback", 
        "overview": "public bool GearmanClient::setWarningCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setwarningcallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::setWorkloadCallback": {
        "description": "Sets a function to be called when a worker needs to send back data prior to job completion. A worker can do this when it needs to send updates, send partial results, or flush data during long running jobs. The callback should accept a single argument, a GearmanTask object.", 
        "name": "GearmanClient::setWorkloadCallback", 
        "overview": "public bool GearmanClient::setWorkloadCallback ( callable $callback )", 
        "parameters": [
            {
                "descr": "A function to call", 
                "name": "callback"
            }
        ], 
        "path": "php/gearmanclient.setworkloadcallback", 
        "type": "Gearman"
    }, 
    "GearmanClient::timeout": {
        "description": "Returns the timeout in milliseconds to wait for I/O activity.", 
        "name": "GearmanClient::timeout", 
        "overview": "public int GearmanClient::timeout ( void )", 
        "parameters": [], 
        "path": "php/gearmanclient.timeout", 
        "type": "Gearman"
    }, 
    "GearmanException": {
        "description": "", 
        "name": "GearmanException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.gearmanexception", 
        "type": "Gearman"
    }, 
    "GearmanJob": {
        "description": "", 
        "name": "GearmanJob", 
        "overview": "public bool complete ( string $result )", 
        "parameters": [], 
        "path": "php/class.gearmanjob", 
        "type": "Gearman"
    }, 
    "GearmanJob::__construct": {
        "description": "Creates a GearmanJob instance representing a job the worker is to complete.", 
        "name": "GearmanJob::__construct", 
        "overview": "public GearmanJob::__construct ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.construct", 
        "type": "Gearman"
    }, 
    "GearmanJob::complete": {
        "description": "Sends result data and the complete status update for this job.", 
        "name": "GearmanJob::complete", 
        "overview": "public bool GearmanJob::complete ( string $result )", 
        "parameters": [
            {
                "descr": "Serialized result data.", 
                "name": "result"
            }
        ], 
        "path": "php/gearmanjob.complete", 
        "type": "Gearman"
    }, 
    "GearmanJob::data": {
        "description": "Sends data to the job server (and any listening clients) for this job.", 
        "name": "GearmanJob::data", 
        "overview": "public bool GearmanJob::data ( string $data )", 
        "parameters": [
            {
                "descr": "Arbitrary serialized data.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmanjob.data", 
        "type": "Gearman"
    }, 
    "GearmanJob::exception": {
        "description": "Sends the supplied exception when this job is running.", 
        "name": "GearmanJob::exception", 
        "overview": "public bool GearmanJob::exception ( string $exception )", 
        "parameters": [
            {
                "descr": "An exception description.", 
                "name": "exception"
            }
        ], 
        "path": "php/gearmanjob.exception", 
        "type": "Gearman"
    }, 
    "GearmanJob::fail": {
        "description": "Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception).", 
        "name": "GearmanJob::fail", 
        "overview": "public bool GearmanJob::fail ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.fail", 
        "type": "Gearman"
    }, 
    "GearmanJob::functionName": {
        "description": "Returns the function name for this job. This is the function the work will execute to perform the job.", 
        "name": "GearmanJob::functionName", 
        "overview": "public string GearmanJob::functionName ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.functionname", 
        "type": "Gearman"
    }, 
    "GearmanJob::handle": {
        "description": "Returns the opaque job handle assigned by the job server.", 
        "name": "GearmanJob::handle", 
        "overview": "public string GearmanJob::handle ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.handle", 
        "type": "Gearman"
    }, 
    "GearmanJob::returnCode": {
        "description": "Returns the last return code issued by the job server.", 
        "name": "GearmanJob::returnCode", 
        "overview": "public int GearmanJob::returnCode ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.returncode", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendComplete": {
        "description": "Sends result data and the complete status update for this job.", 
        "name": "GearmanJob::sendComplete", 
        "overview": "public bool GearmanJob::sendComplete ( string $result )", 
        "parameters": [
            {
                "descr": "Serialized result data.", 
                "name": "result"
            }
        ], 
        "path": "php/gearmanjob.sendcomplete", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendData": {
        "description": "Sends data to the job server (and any listening clients) for this job.", 
        "name": "GearmanJob::sendData", 
        "overview": "public bool GearmanJob::sendData ( string $data )", 
        "parameters": [
            {
                "descr": "Arbitrary serialized data.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmanjob.senddata", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendException": {
        "description": "Sends the supplied exception when this job is running.", 
        "name": "GearmanJob::sendException", 
        "overview": "public bool GearmanJob::sendException ( string $exception )", 
        "parameters": [
            {
                "descr": "An exception description.", 
                "name": "exception"
            }
        ], 
        "path": "php/gearmanjob.sendexception", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendFail": {
        "description": "Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception).", 
        "name": "GearmanJob::sendFail", 
        "overview": "public bool GearmanJob::sendFail ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.sendfail", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendStatus": {
        "description": "Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed.", 
        "name": "GearmanJob::sendStatus", 
        "overview": "public bool GearmanJob::sendStatus ( int $numerator , int $denominator )", 
        "parameters": [
            {
                "descr": "The numerator of the precentage completed expressed as a fraction.", 
                "name": "numerator"
            }, 
            {
                "descr": "The denominator of the precentage completed expressed as a fraction.", 
                "name": "denominator"
            }
        ], 
        "path": "php/gearmanjob.sendstatus", 
        "type": "Gearman"
    }, 
    "GearmanJob::sendWarning": {
        "description": "Sends a warning for this job while it is running.", 
        "name": "GearmanJob::sendWarning", 
        "overview": "public bool GearmanJob::sendWarning ( string $warning )", 
        "parameters": [
            {
                "descr": "A warning message.", 
                "name": "warning"
            }
        ], 
        "path": "php/gearmanjob.sendwarning", 
        "type": "Gearman"
    }, 
    "GearmanJob::setReturn": {
        "description": "Sets the return value for this job, indicates how the job completed.", 
        "name": "GearmanJob::setReturn", 
        "overview": "public bool GearmanJob::setReturn ( int $gearman_return_t )", 
        "parameters": [
            {
                "descr": "A valid Gearman return value.", 
                "name": "gearman_return_t"
            }
        ], 
        "path": "php/gearmanjob.setreturn", 
        "type": "Gearman"
    }, 
    "GearmanJob::status": {
        "description": "Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed.", 
        "name": "GearmanJob::status", 
        "overview": "public bool GearmanJob::status ( int $numerator , int $denominator )", 
        "parameters": [
            {
                "descr": "The numerator of the precentage completed expressed as a fraction.", 
                "name": "numerator"
            }, 
            {
                "descr": "The denominator of the precentage completed expressed as a fraction.", 
                "name": "denominator"
            }
        ], 
        "path": "php/gearmanjob.status", 
        "type": "Gearman"
    }, 
    "GearmanJob::unique": {
        "description": "Returns the unique identifiter for this job. The identifier is assigned by the client.", 
        "name": "GearmanJob::unique", 
        "overview": "public string GearmanJob::unique ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.unique", 
        "type": "Gearman"
    }, 
    "GearmanJob::warning": {
        "description": "Sends a warning for this job while it is running.", 
        "name": "GearmanJob::warning", 
        "overview": "public bool GearmanJob::warning ( string $warning )", 
        "parameters": [
            {
                "descr": "A warning messages.", 
                "name": "warning"
            }
        ], 
        "path": "php/gearmanjob.warning", 
        "type": "Gearman"
    }, 
    "GearmanJob::workload": {
        "description": "Returns the workload for the job. This is serialized data that is to be processed by the worker.", 
        "name": "GearmanJob::workload", 
        "overview": "public string GearmanJob::workload ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.workload", 
        "type": "Gearman"
    }, 
    "GearmanJob::workloadSize": {
        "description": "Returns the size of the job's work load (the data the worker is to process) in bytes.", 
        "name": "GearmanJob::workloadSize", 
        "overview": "public int GearmanJob::workloadSize ( void )", 
        "parameters": [], 
        "path": "php/gearmanjob.workloadsize", 
        "type": "Gearman"
    }, 
    "GearmanTask": {
        "description": "", 
        "name": "GearmanTask", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.gearmantask", 
        "type": "Gearman"
    }, 
    "GearmanTask::__construct": {
        "description": "Creates a GearmanTask instance representing a task to be submitted to a job server.", 
        "name": "GearmanTask::__construct", 
        "overview": "public GearmanTask::__construct ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.construct", 
        "type": "Gearman"
    }, 
    "GearmanTask::create": {
        "description": "Returns a new GearmanTask object.", 
        "name": "GearmanTask::create", 
        "overview": "public GearmanTask GearmanTask::create ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.create", 
        "type": "Gearman"
    }, 
    "GearmanTask::data": {
        "description": "Returns data being returned for a task by a worker.", 
        "name": "GearmanTask::data", 
        "overview": "public string GearmanTask::data ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.data", 
        "type": "Gearman"
    }, 
    "GearmanTask::dataSize": {
        "description": "Returns the size of the data being returned for a task.", 
        "name": "GearmanTask::dataSize", 
        "overview": "public int GearmanTask::dataSize ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.datasize", 
        "type": "Gearman"
    }, 
    "GearmanTask::function": {
        "description": "Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls.", 
        "name": "GearmanTask::function", 
        "overview": "public string GearmanTask::function ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.function", 
        "type": "Gearman"
    }, 
    "GearmanTask::functionName": {
        "description": "Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls.", 
        "name": "GearmanTask::functionName", 
        "overview": "public string GearmanTask::functionName ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.functionname", 
        "type": "Gearman"
    }, 
    "GearmanTask::isKnown": {
        "description": "Gets the status information for whether or not this task is known to the job server.", 
        "name": "GearmanTask::isKnown", 
        "overview": "public bool GearmanTask::isKnown ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.isknown", 
        "type": "Gearman"
    }, 
    "GearmanTask::isRunning": {
        "description": "Indicates whether or not this task is currently running.", 
        "name": "GearmanTask::isRunning", 
        "overview": "public bool GearmanTask::isRunning ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.isrunning", 
        "type": "Gearman"
    }, 
    "GearmanTask::jobHandle": {
        "description": "Returns the job handle for this task.", 
        "name": "GearmanTask::jobHandle", 
        "overview": "public string GearmanTask::jobHandle ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.jobhandle", 
        "type": "Gearman"
    }, 
    "GearmanTask::recvData": {
        "description": "", 
        "name": "GearmanTask::recvData", 
        "overview": "public array GearmanTask::recvData ( int $data_len )", 
        "parameters": [
            {
                "descr": "Length of data to be read.", 
                "name": "data_len"
            }
        ], 
        "path": "php/gearmantask.recvdata", 
        "type": "Gearman"
    }, 
    "GearmanTask::returnCode": {
        "description": "Returns the last Gearman return code for this task.", 
        "name": "GearmanTask::returnCode", 
        "overview": "public int GearmanTask::returnCode ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.returncode", 
        "type": "Gearman"
    }, 
    "GearmanTask::sendData": {
        "description": "", 
        "name": "GearmanTask::sendData", 
        "overview": "public int GearmanTask::sendData ( string $data )", 
        "parameters": [
            {
                "descr": "Data to send to the worker.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmantask.senddata", 
        "type": "Gearman"
    }, 
    "GearmanTask::sendWorkload": {
        "description": "", 
        "name": "GearmanTask::sendWorkload", 
        "overview": "public int GearmanTask::sendWorkload ( string $data )", 
        "parameters": [
            {
                "descr": "Data to send to the worker.", 
                "name": "data"
            }
        ], 
        "path": "php/gearmantask.sendworkload", 
        "type": "Gearman"
    }, 
    "GearmanTask::taskDenominator": {
        "description": "Returns the denominator of the percentage of the task that is complete expressed as a fraction.", 
        "name": "GearmanTask::taskDenominator", 
        "overview": "public int GearmanTask::taskDenominator ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.taskdenominator", 
        "type": "Gearman"
    }, 
    "GearmanTask::taskNumerator": {
        "description": "Returns the numerator of the percentage of the task that is complete expressed as a fraction.", 
        "name": "GearmanTask::taskNumerator", 
        "overview": "public int GearmanTask::taskNumerator ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.tasknumerator", 
        "type": "Gearman"
    }, 
    "GearmanTask::unique": {
        "description": "Returns the unique identifier for this task. This is assigned by the GearmanClient, as opposed to the job handle which is set by the Gearman job server.", 
        "name": "GearmanTask::unique", 
        "overview": "public string GearmanTask::unique ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.unique", 
        "type": "Gearman"
    }, 
    "GearmanTask::uuid": {
        "description": "Returns the unique identifier for this task. This is assigned by the GearmanClient, as opposed to the job handle which is set by the Gearman job server.", 
        "name": "GearmanTask::uuid", 
        "overview": "public string GearmanTask::uuid ( void )", 
        "parameters": [], 
        "path": "php/gearmantask.uuid", 
        "type": "Gearman"
    }, 
    "GearmanWorker": {
        "description": "", 
        "name": "GearmanWorker", 
        "overview": "public bool addFunction ( string $function_name , callable $function [, mixed &$context [, int $timeout ]] )", 
        "parameters": [], 
        "path": "php/class.gearmanworker", 
        "type": "Gearman"
    }, 
    "GearmanWorker::__construct": {
        "description": "Creates a GearmanWorker instance representing a worker that connects to the job server and accepts tasks to run.", 
        "name": "GearmanWorker::__construct", 
        "overview": "public GearmanWorker::__construct ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.construct", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addFunction": {
        "description": "Registers a function name with the job server and specifies a callback corresponding to that function. Optionally specify extra application context data to be used when the callback is called and a timeout.", 
        "name": "GearmanWorker::addFunction", 
        "overview": "public bool GearmanWorker::addFunction ( string $function_name , callable $function [, mixed &$context [, int $timeout ]] )", 
        "parameters": [
            {
                "descr": "The name of a function to register with the job server", 
                "name": "function_name"
            }, 
            {
                "descr": "A callback that gets called when a job for the registered function name is submitted", 
                "name": "function"
            }, 
            {
                "descr": "A reference to arbitrary application context data that can be modified by the worker function", 
                "name": "context"
            }, 
            {
                "descr": "An interval of time in seconds", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanworker.addfunction", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addOptions": {
        "description": "Adds one or more options to the options previously set.", 
        "name": "GearmanWorker::addOptions", 
        "overview": "public bool GearmanWorker::addOptions ( int $option )", 
        "parameters": [
            {
                "descr": "The options to be added", 
                "name": "option"
            }
        ], 
        "path": "php/gearmanworker.addoptions", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addServer": {
        "description": "Adds a job server to this worker. This goes into a list of servers than can be used to run jobs. No socket I/O happens here.", 
        "name": "GearmanWorker::addServer", 
        "overview": "public bool GearmanWorker::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )", 
        "parameters": [
            {
                "descr": "The job server host name.", 
                "name": "host"
            }, 
            {
                "descr": "The job server port.", 
                "name": "port"
            }
        ], 
        "path": "php/gearmanworker.addserver", 
        "type": "Gearman"
    }, 
    "GearmanWorker::addServers": {
        "description": "Adds one or more job servers to this worker. These go into a list of servers that can be used to run jobs. No socket I/O happens here.", 
        "name": "GearmanWorker::addServers", 
        "overview": "public bool GearmanWorker::addServers ( string $servers = 127.0.0.1:4730 )", 
        "parameters": [
            {
                "descr": "A comma separated list of job servers in the format host:port. ", 
                "name": "servers"
            }
        ], 
        "path": "php/gearmanworker.addservers", 
        "type": "Gearman"
    }, 
    "GearmanWorker::clone": {
        "description": "Creates a copy of the worker.", 
        "name": "GearmanWorker::clone", 
        "overview": "public void GearmanWorker::clone ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.clone", 
        "type": "Gearman"
    }, 
    "GearmanWorker::echo": {
        "description": "Sends data to all job servers to see if they echo it back. This is a test function to see if job servers are responding properly.", 
        "name": "GearmanWorker::echo", 
        "overview": "public bool GearmanWorker::echo ( string $workload )", 
        "parameters": [
            {
                "descr": "Arbitrary serialized data", 
                "name": "workload"
            }
        ], 
        "path": "php/gearmanworker.echo", 
        "type": "Gearman"
    }, 
    "GearmanWorker::error": {
        "description": "Returns an error string for the last error encountered.", 
        "name": "GearmanWorker::error", 
        "overview": "public string GearmanWorker::error ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.error", 
        "type": "Gearman"
    }, 
    "GearmanWorker::getErrno": {
        "description": "Returns the value of errno in the case of a GEARMAN_ERRNO return value.", 
        "name": "GearmanWorker::getErrno", 
        "overview": "public int GearmanWorker::getErrno ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.geterrno", 
        "type": "Gearman"
    }, 
    "GearmanWorker::options": {
        "description": "Gets the options previously set for the worker.", 
        "name": "GearmanWorker::options", 
        "overview": "public int GearmanWorker::options ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.options", 
        "type": "Gearman"
    }, 
    "GearmanWorker::register": {
        "description": "Registers a function name with the job server with an optional timeout. The timeout specifies how many seconds the server will wait before marking a job as failed. If the timeout is set to zero, there is no timeout.", 
        "name": "GearmanWorker::register", 
        "overview": "public bool GearmanWorker::register ( string $function_name [, int $timeout ] )", 
        "parameters": [
            {
                "descr": "The name of a function to register with the job server", 
                "name": "function_name"
            }, 
            {
                "descr": "An interval of time in seconds", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanworker.register", 
        "type": "Gearman"
    }, 
    "GearmanWorker::removeOptions": {
        "description": "Removes (unsets) one or more worker options.", 
        "name": "GearmanWorker::removeOptions", 
        "overview": "public bool GearmanWorker::removeOptions ( int $option )", 
        "parameters": [
            {
                "descr": "The options to be removed (unset)", 
                "name": "option"
            }
        ], 
        "path": "php/gearmanworker.removeoptions", 
        "type": "Gearman"
    }, 
    "GearmanWorker::returnCode": {
        "description": "Returns the last Gearman return code.", 
        "name": "GearmanWorker::returnCode", 
        "overview": "public int GearmanWorker::returnCode ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.returncode", 
        "type": "Gearman"
    }, 
    "GearmanWorker::setId": {
        "description": "Assigns the worker an identifier.", 
        "name": "GearmanWorker::setId", 
        "overview": "public bool GearmanWorker::setId ( string $id )", 
        "parameters": [
            {
                "descr": "A string identifier.", 
                "name": "id"
            }
        ], 
        "path": "php/function.func-name", 
        "type": "Gearman"
    }, 
    "GearmanWorker::setOptions": {
        "description": "Sets one or more options to the supplied value.", 
        "name": "GearmanWorker::setOptions", 
        "overview": "public bool GearmanWorker::setOptions ( int $option )", 
        "parameters": [
            {
                "descr": "The options to be set", 
                "name": "option"
            }
        ], 
        "path": "php/gearmanworker.setoptions", 
        "type": "Gearman"
    }, 
    "GearmanWorker::setTimeout": {
        "description": "Sets the interval of time to wait for socket I/O activity.", 
        "name": "GearmanWorker::setTimeout", 
        "overview": "public bool GearmanWorker::setTimeout ( int $timeout )", 
        "parameters": [
            {
                "descr": "An interval of time in milliseconds. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/gearmanworker.settimeout", 
        "type": "Gearman"
    }, 
    "GearmanWorker::timeout": {
        "description": "Returns the current time to wait, in milliseconds, for socket I/O activity.", 
        "name": "GearmanWorker::timeout", 
        "overview": "public int GearmanWorker::timeout ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.timeout", 
        "type": "Gearman"
    }, 
    "GearmanWorker::unregister": {
        "description": "Unregisters a function name with the job servers ensuring that no more jobs (for that function) are sent to this worker.", 
        "name": "GearmanWorker::unregister", 
        "overview": "public bool GearmanWorker::unregister ( string $function_name )", 
        "parameters": [
            {
                "descr": "The name of a function to register with the job server", 
                "name": "function_name"
            }
        ], 
        "path": "php/gearmanworker.unregister", 
        "type": "Gearman"
    }, 
    "GearmanWorker::unregisterAll": {
        "description": "Unregisters all previously registered functions, ensuring that no more jobs are sent to this worker.", 
        "name": "GearmanWorker::unregisterAll", 
        "overview": "public bool GearmanWorker::unregisterAll ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.unregisterall", 
        "type": "Gearman"
    }, 
    "GearmanWorker::wait": {
        "description": "Causes the worker to wait for activity from one of the Gearman job servers when operating in non-blocking I/O mode. On failure, issues a E_WARNING with the last Gearman error encountered.", 
        "name": "GearmanWorker::wait", 
        "overview": "public bool GearmanWorker::wait ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.wait", 
        "type": "Gearman"
    }, 
    "GearmanWorker::work": {
        "description": "Waits for a job to be assigned and then calls the appropriate callback function. Issues an E_WARNING with the last Gearman error if the return code is not one of GEARMAN_SUCCESS, GEARMAN_IO_WAIT, or GEARMAN_WORK_FAIL.", 
        "name": "GearmanWorker::work", 
        "overview": "public bool GearmanWorker::work ( void )", 
        "parameters": [], 
        "path": "php/gearmanworker.work", 
        "type": "Gearman"
    }, 
    "Generator": {
        "description": "", 
        "name": "Generator", 
        "overview": "public mixed current ( void )", 
        "parameters": [], 
        "path": "php/class.generator", 
        "type": "Classes and Functions"
    }, 
    "Generator::__wakeup": {
        "description": "Throws an exception as generators can't be serialized.", 
        "name": "Generator::__wakeup", 
        "overview": "public void Generator::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/generator.wakeup", 
        "type": "Classes and Functions"
    }, 
    "Generator::current": {
        "description": "", 
        "name": "Generator::current", 
        "overview": "public mixed Generator::current ( void )", 
        "parameters": [], 
        "path": "php/generator.current", 
        "type": "Classes and Functions"
    }, 
    "Generator::key": {
        "description": "", 
        "name": "Generator::key", 
        "overview": "public mixed Generator::key ( void )", 
        "parameters": [], 
        "path": "php/generator.key", 
        "type": "Classes and Functions"
    }, 
    "Generator::next": {
        "description": "", 
        "name": "Generator::next", 
        "overview": "public void Generator::next ( void )", 
        "parameters": [], 
        "path": "php/generator.next", 
        "type": "Classes and Functions"
    }, 
    "Generator::rewind": {
        "description": "If iteration has already begun, this will throw an exception.", 
        "name": "Generator::rewind", 
        "overview": "public void Generator::rewind ( void )", 
        "parameters": [], 
        "path": "php/generator.rewind", 
        "type": "Classes and Functions"
    }, 
    "Generator::send": {
        "description": "Sends the given value to the generator as the result of the current yield expression and resumes execution of the generator.", 
        "name": "Generator::send", 
        "overview": "public mixed Generator::send ( mixed $value )", 
        "parameters": [
            {
                "descr": "Value to send into the generator. ", 
                "name": "value"
            }
        ], 
        "path": "php/generator.send", 
        "type": "Classes and Functions"
    }, 
    "Generator::throw": {
        "description": "Throws an exception into the generator and resumes execution of the generator. The behavior will be the same as if the current yield expression was replaced with a throw $exception statement.", 
        "name": "Generator::throw", 
        "overview": "public mixed Generator::throw ( Exception $exception )", 
        "parameters": [
            {
                "descr": "Exception to throw into the generator.", 
                "name": "exception"
            }
        ], 
        "path": "php/generator.throw", 
        "type": "Classes and Functions"
    }, 
    "Generator::valid": {
        "description": "", 
        "name": "Generator::valid", 
        "overview": "public bool Generator::valid ( void )", 
        "parameters": [], 
        "path": "php/generator.valid", 
        "type": "Classes and Functions"
    }, 
    "GlobIterator": {
        "description": "", 
        "name": "GlobIterator", 
        "overview": "public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "parameters": [], 
        "path": "php/class.globiterator", 
        "type": "SPL/Iterators"
    }, 
    "GlobIterator::__construct": {
        "description": "Constructs a new directory iterator from a glob expression.", 
        "name": "GlobIterator::__construct", 
        "overview": "public GlobIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "parameters": [
            {
                "descr": "The path of the directory.", 
                "name": "path"
            }, 
            {
                "descr": "Option flags, the flags may be a bitmask of the FilesystemIterator constants.", 
                "name": "flags"
            }
        ], 
        "path": "php/globiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "GlobIterator::count": {
        "description": "Gets the number of directories and files found by the glob expression.", 
        "name": "GlobIterator::count", 
        "overview": "public int GlobIterator::count ( void )", 
        "parameters": [], 
        "path": "php/globiterator.count", 
        "type": "SPL/Iterators"
    }, 
    "Gmagick": {
        "description": "", 
        "name": "Gmagick", 
        "overview": "public Gmagick addimage ( Gmagick $Gmagick )", 
        "parameters": [], 
        "path": "php/class.gmagick", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::__construct": {
        "description": "The Gmagick constructor.", 
        "name": "Gmagick::__construct", 
        "overview": "public Gmagick::__construct ([ string $filename ] )", 
        "parameters": [
            {
                "descr": "The path to an image to load or array of paths", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.construct", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::addimage": {
        "description": "Adds new image to Gmagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.", 
        "name": "Gmagick::addimage", 
        "overview": "public Gmagick Gmagick::addimage ( Gmagick $Gmagick )", 
        "parameters": [
            {
                "descr": "The source Gmagick object", 
                "name": "source"
            }
        ], 
        "path": "php/gmagick.addimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::addnoiseimage": {
        "description": "Adds random noise to the image.", 
        "name": "Gmagick::addnoiseimage", 
        "overview": "public Gmagick Gmagick::addnoiseimage ( int $NOISE )", 
        "parameters": [
            {
                "descr": "The type of the noise. Refer to this list of noise constants.", 
                "name": "noise_type"
            }
        ], 
        "path": "php/gmagick.addnoiseimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::annotateimage": {
        "description": "Annotates an image with text.", 
        "name": "Gmagick::annotateimage", 
        "overview": "public Gmagick Gmagick::annotateimage ( GmagickDraw $GmagickDraw , float $x , float $y , float $angle , string $text )", 
        "parameters": [
            {
                "descr": "The GmagickDraw object that contains settings for drawing the text", 
                "name": "GmagickDraw"
            }, 
            {
                "descr": "Horizontal offset in pixels to the left of text", 
                "name": "x"
            }, 
            {
                "descr": "Vertical offset in pixels to the baseline of text", 
                "name": "y"
            }, 
            {
                "descr": "The angle at which to write the text", 
                "name": "angle"
            }, 
            {
                "descr": "The string to draw", 
                "name": "text"
            }
        ], 
        "path": "php/gmagick.annotateimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::blurimage": {
        "description": "Adds blur filter to image.", 
        "name": "Gmagick::blurimage", 
        "overview": "public Gmagick Gmagick::blurimage ( float $radius , float $sigma [, int $channel ] )", 
        "parameters": [
            {
                "descr": "Blur radius", 
                "name": "radius"
            }, 
            {
                "descr": "Standard deviation", 
                "name": "sigma"
            }
        ], 
        "path": "php/gmagick.blurimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::borderimage": {
        "description": "Surrounds the image with a border of the color defined by the bordercolor GmagickPixel object or a color string.", 
        "name": "Gmagick::borderimage", 
        "overview": "public Gmagick Gmagick::borderimage ( GmagickPixel $color , int $width , int $height )", 
        "parameters": [
            {
                "descr": "GmagickPixel object or a string containing the border color", 
                "name": "color"
            }, 
            {
                "descr": "Border width", 
                "name": "width"
            }, 
            {
                "descr": "Border height", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.borderimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::charcoalimage": {
        "description": "Simulates a charcoal drawing.", 
        "name": "Gmagick::charcoalimage", 
        "overview": "public Gmagick Gmagick::charcoalimage ( float $radius , float $sigma )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels", 
                "name": "sigma"
            }
        ], 
        "path": "php/gmagick.charcoalimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::chopimage": {
        "description": "Removes a region of an image and collapses the image to occupy the removed portion.", 
        "name": "Gmagick::chopimage", 
        "overview": "public Gmagick Gmagick::chopimage ( int $width , int $height , int $x , int $y )", 
        "parameters": [
            {
                "descr": "Width of the chopped area", 
                "name": "width"
            }, 
            {
                "descr": "Height of the chopped area", 
                "name": "height"
            }, 
            {
                "descr": "X origo of the chopped area", 
                "name": "x"
            }, 
            {
                "descr": "Y origo of the chopped area", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.chopimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::clear": {
        "description": "Clears all resources associated to Gmagick object", 
        "name": "Gmagick::clear", 
        "overview": "public Gmagick Gmagick::clear ( void )", 
        "parameters": [], 
        "path": "php/gmagick.clear", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::commentimage": {
        "description": "Adds a comment to your image.", 
        "name": "Gmagick::commentimage", 
        "overview": "public Gmagick Gmagick::commentimage ( string $comment )", 
        "parameters": [
            {
                "descr": "The comment to add", 
                "name": "comment"
            }
        ], 
        "path": "php/gmagick.commentimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::compositeimage": {
        "description": "Composite one image onto another at the specified offset.", 
        "name": "Gmagick::compositeimage", 
        "overview": "public Gmagick Gmagick::compositeimage ( Gmagick $source , int $COMPOSE , int $x , int $y )", 
        "parameters": [
            {
                "descr": "Gmagick object which holds the composite image", 
                "name": "source"
            }, 
            {
                "descr": "Composite operator.", 
                "name": "compose"
            }, 
            {
                "descr": "The column offset of the composited image", 
                "name": "x"
            }, 
            {
                "descr": "The row offset of the composited image", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.compositeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::cropimage": {
        "description": "Extracts a region of the image.", 
        "name": "Gmagick::cropimage", 
        "overview": "public Gmagick Gmagick::cropimage (  int $width  ,  int $height  , int $x , int $y )", 
        "parameters": [
            {
                "descr": "The width of the crop", 
                "name": "width"
            }, 
            {
                "descr": "The height of the crop", 
                "name": "height"
            }, 
            {
                "descr": "The X coordinate of the cropped region's top left corner", 
                "name": "x"
            }, 
            {
                "descr": "The Y coordinate of the cropped region's top left corner", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.cropimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::cropthumbnailimage": {
        "description": "Creates a fixed size thumbnail by first scaling the image down and cropping a specified area from the center.", 
        "name": "Gmagick::cropthumbnailimage", 
        "overview": "public Gmagick Gmagick::cropthumbnailimage ( int $width , int $height )", 
        "parameters": [
            {
                "descr": "The width of the thumbnail", 
                "name": "width"
            }, 
            {
                "descr": "The Height of the thumbnail", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.cropthumbnailimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::current": {
        "description": "Returns reference to the current gmagick object with image pointer at the correct sequence.", 
        "name": "Gmagick::current", 
        "overview": "public Gmagick Gmagick::current ( void )", 
        "parameters": [], 
        "path": "php/gmagick.current", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::cyclecolormapimage": {
        "description": "Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.", 
        "name": "Gmagick::cyclecolormapimage", 
        "overview": "public Gmagick Gmagick::cyclecolormapimage ( int $displace )", 
        "parameters": [
            {
                "descr": "The amount to displace the colormap.", 
                "name": "displace"
            }
        ], 
        "path": "php/gmagick.cyclecolormapimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::deconstructimages": {
        "description": "Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.", 
        "name": "Gmagick::deconstructimages", 
        "overview": "public void Gmagick::deconstructimages ( void )", 
        "parameters": [], 
        "path": "php/gmagick.deconstructimages", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::despeckleimage": {
        "description": "Reduces the speckle noise in an image while preserving the edges of the original image.", 
        "name": "Gmagick::despeckleimage", 
        "overview": "public Gmagick Gmagick::despeckleimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.despeckleimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::destroy": {
        "description": "Destroys the Gmagick object and frees all resources associated with it", 
        "name": "Gmagick::destroy", 
        "overview": "public Gmagick Gmagick::destroy ( void )", 
        "parameters": [], 
        "path": "php/gmagick.destroy", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::drawimage": {
        "description": "Renders the GmagickDraw object on the current image", 
        "name": "Gmagick::drawimage", 
        "overview": "public Gmagick Gmagick::drawimage ( GmagickDraw $GmagickDraw )", 
        "parameters": [
            {
                "descr": "The drawing operations to render on the image.", 
                "name": "GmagickDraw"
            }
        ], 
        "path": "php/gmagick.drawimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::edgeimage": {
        "description": "Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.", 
        "name": "Gmagick::edgeimage", 
        "overview": "public Gmagick Gmagick::edgeimage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the operation.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.edgeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::embossimage": {
        "description": "Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.", 
        "name": "Gmagick::embossimage", 
        "overview": "public Gmagick Gmagick::embossimage ( float $radius , float $sigma )", 
        "parameters": [
            {
                "descr": "The radius of the effect", 
                "name": "radius"
            }, 
            {
                "descr": "The sigma of the effect", 
                "name": "sigma"
            }
        ], 
        "path": "php/gmagick.embossimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::enhanceimage": {
        "description": "Applies a digital filter that improves the quality of a noisy image.", 
        "name": "Gmagick::enhanceimage", 
        "overview": "public Gmagick Gmagick::enhanceimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.enhanceimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::equalizeimage": {
        "description": "Equalizes the image histogram.", 
        "name": "Gmagick::equalizeimage", 
        "overview": "public Gmagick Gmagick::equalizeimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.equalizeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::flipimage": {
        "description": "Creates a vertical mirror image by reflecting the pixels around the central x-axis.", 
        "name": "Gmagick::flipimage", 
        "overview": "public Gmagick Gmagick::flipimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.flipimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::flopimage": {
        "description": "Creates a horizontal mirror image by reflecting the pixels around the central y-axis.", 
        "name": "Gmagick::flopimage", 
        "overview": "public Gmagick Gmagick::flopimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.flopimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::frameimage": {
        "description": "Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.", 
        "name": "Gmagick::frameimage", 
        "overview": "public Gmagick Gmagick::frameimage ( GmagickPixel $color , int $width , int $height , int $inner_bevel , int $outer_bevel )", 
        "parameters": [
            {
                "descr": "GmagickPixel object or a float representing the matte color", 
                "name": "color"
            }, 
            {
                "descr": "The width of the border", 
                "name": "width"
            }, 
            {
                "descr": "The height of the border", 
                "name": "height"
            }, 
            {
                "descr": "The inner bevel width", 
                "name": "inner_bevel"
            }, 
            {
                "descr": "The outer bevel width", 
                "name": "outer_bevel"
            }
        ], 
        "path": "php/gmagick.frameimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::gammaimage": {
        "description": "Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.", 
        "name": "Gmagick::gammaimage", 
        "overview": "public Gmagick Gmagick::gammaimage ( float $gamma )", 
        "parameters": [
            {
                "descr": "The amount of gamma-correction.", 
                "name": "gamma"
            }
        ], 
        "path": "php/gmagick.gammaimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getcopyright": {
        "description": "Returns the GraphicsMagick API copyright as a string.", 
        "name": "Gmagick::getcopyright", 
        "overview": "public string Gmagick::getcopyright ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getcopyright", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getfilename": {
        "description": "Returns the filename associated with an image sequence.", 
        "name": "Gmagick::getfilename", 
        "overview": "public string Gmagick::getfilename ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getfilename", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagebackgroundcolor": {
        "description": "Returns the image background color.", 
        "name": "Gmagick::getimagebackgroundcolor", 
        "overview": "public void Gmagick::getimagebackgroundcolor ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagebackgroundcolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageblueprimary": {
        "description": "Returns the chromaticity blue primary point for the image.", 
        "name": "Gmagick::getimageblueprimary", 
        "overview": "public array Gmagick::getimageblueprimary ( void )", 
        "parameters": [
            {
                "descr": "The chromaticity blue primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The chromaticity blue primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.getimageblueprimary", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagebordercolor": {
        "description": "Returns the image border color.", 
        "name": "Gmagick::getimagebordercolor", 
        "overview": "public void Gmagick::getimagebordercolor ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagebordercolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagechanneldepth": {
        "description": "Gets the depth for a particular image channel.", 
        "name": "Gmagick::getimagechanneldepth", 
        "overview": "public int Gmagick::getimagechanneldepth ( int $channel_type )", 
        "parameters": [], 
        "path": "php/gmagick.getimagechanneldepth", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagecolors": {
        "description": "Returns the color of the specified colormap index.", 
        "name": "Gmagick::getimagecolors", 
        "overview": "public int Gmagick::getimagecolors ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagecolors", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagecolorspace": {
        "description": "Gets the image colorspace.", 
        "name": "Gmagick::getimagecolorspace", 
        "overview": "public int Gmagick::getimagecolorspace ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagecolorspace", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagecompose": {
        "description": "Returns the composite operator associated with the image.", 
        "name": "Gmagick::getimagecompose", 
        "overview": "public int Gmagick::getimagecompose ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagecompose", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagedelay": {
        "description": "Gets the image delay", 
        "name": "Gmagick::getimagedelay", 
        "overview": "public int Gmagick::getimagedelay ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagedelay", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagedepth": {
        "description": "Gets the depth of the image.", 
        "name": "Gmagick::getimagedepth", 
        "overview": "public int Gmagick::getimagedepth ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagedepth", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagedispose": {
        "description": "Gets the image disposal method", 
        "name": "Gmagick::getimagedispose", 
        "overview": "public int Gmagick::getimagedispose ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagedispose", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageextrema": {
        "description": "Returns an associative array with the keys \"min\" and \"max\". Throws an GmagickException on error.", 
        "name": "Gmagick::getimageextrema", 
        "overview": "public array Gmagick::getimageextrema ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageextrema", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagefilename": {
        "description": "Returns the filename of a particular image in a sequence", 
        "name": "Gmagick::getimagefilename", 
        "overview": "public string Gmagick::getimagefilename ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagefilename", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageformat": {
        "description": "Returns the format of a particular image in a sequence.", 
        "name": "Gmagick::getimageformat", 
        "overview": "public string Gmagick::getimageformat ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageformat", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagegamma": {
        "description": "Gets the image gamma", 
        "name": "Gmagick::getimagegamma", 
        "overview": "public float Gmagick::getimagegamma ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagegamma", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagegreenprimary": {
        "description": "Returns the chromaticity green primary point. Returns an array with the keys \"x\" and \"y\".", 
        "name": "Gmagick::getimagegreenprimary", 
        "overview": "public array Gmagick::getimagegreenprimary ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagegreenprimary", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageheight": {
        "description": "Returns the image height", 
        "name": "Gmagick::getimageheight", 
        "overview": "public int Gmagick::getimageheight ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageheight", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagehistogram": {
        "description": "Returns the image histogram as an array of GmagickPixel objects. Throw an GmagickException on error.", 
        "name": "Gmagick::getimagehistogram", 
        "overview": "public array Gmagick::getimagehistogram ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagehistogram", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageindex": {
        "description": "Returns the index of the current active image within the Gmagick object.", 
        "name": "Gmagick::getimageindex", 
        "overview": "public int Gmagick::getimageindex ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageindex", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageinterlacescheme": {
        "description": "Gets the image interlace scheme.", 
        "name": "Gmagick::getimageinterlacescheme", 
        "overview": "public int Gmagick::getimageinterlacescheme ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageinterlacescheme", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageiterations": {
        "description": "Gets the image iterations.", 
        "name": "Gmagick::getimageiterations", 
        "overview": "public int Gmagick::getimageiterations ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageiterations", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagematte": {
        "description": "Returns TRUE if the image has a matte channel otherwise false.", 
        "name": "Gmagick::getimagematte", 
        "overview": "public int Gmagick::getimagematte ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagematte", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagemattecolor": {
        "description": "Returns GmagickPixel object on success. Throw an GmagickException on error.", 
        "name": "Gmagick::getimagemattecolor", 
        "overview": "public void Gmagick::getimagemattecolor ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagemattecolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageprofile": {
        "description": "Returns the named image profile.", 
        "name": "Gmagick::getimageprofile", 
        "overview": "public string Gmagick::getimageprofile ( string $name )", 
        "parameters": [], 
        "path": "php/gmagick.getimageprofile", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageredprimary": {
        "description": "Returns the chromaticity red primary point as an array with the keys \"x\" and \"y\".", 
        "name": "Gmagick::getimageredprimary", 
        "overview": "public array Gmagick::getimageredprimary ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageredprimary", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagerenderingintent": {
        "description": "Gets the image rendering intent", 
        "name": "Gmagick::getimagerenderingintent", 
        "overview": "public int Gmagick::getimagerenderingintent ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagerenderingintent", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageresolution": {
        "description": "Returns the resolution as an array.", 
        "name": "Gmagick::getimageresolution", 
        "overview": "public array Gmagick::getimageresolution ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageresolution", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagescene": {
        "description": "Gets the image scene.", 
        "name": "Gmagick::getimagescene", 
        "overview": "public int Gmagick::getimagescene ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagescene", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagesignature": {
        "description": "Generates an SHA-256 message digest for the image pixel stream.", 
        "name": "Gmagick::getimagesignature", 
        "overview": "public string Gmagick::getimagesignature ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagesignature", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagetype": {
        "description": "Gets the potential image type.", 
        "name": "Gmagick::getimagetype", 
        "overview": "public int Gmagick::getimagetype ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagetype", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimageunits": {
        "description": "Gets the image units of resolution.", 
        "name": "Gmagick::getimageunits", 
        "overview": "public int Gmagick::getimageunits ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimageunits", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagewhitepoint": {
        "description": "Returns the chromaticity white point as an associative array with the keys \"x\" and \"y\".", 
        "name": "Gmagick::getimagewhitepoint", 
        "overview": "public array Gmagick::getimagewhitepoint ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagewhitepoint", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getimagewidth": {
        "description": "Returns the width of the image.", 
        "name": "Gmagick::getimagewidth", 
        "overview": "public int Gmagick::getimagewidth ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getimagewidth", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getpackagename": {
        "description": "Returns the GraphicsMagick package name.", 
        "name": "Gmagick::getpackagename", 
        "overview": "public string Gmagick::getpackagename ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getpackagename", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getquantumdepth": {
        "description": "Returns the Gmagick quantum depth as a string.", 
        "name": "Gmagick::getquantumdepth", 
        "overview": "public array Gmagick::getquantumdepth ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getquantumdepth", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getreleasedate": {
        "description": "Returns the GraphicsMagick release date as a string.", 
        "name": "Gmagick::getreleasedate", 
        "overview": "public string Gmagick::getreleasedate ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getreleasedate", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getsamplingfactors": {
        "description": "Gets the horizontal and vertical sampling factor.", 
        "name": "Gmagick::getsamplingfactors", 
        "overview": "public array Gmagick::getsamplingfactors ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getsamplingfactors", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getsize": {
        "description": "Returns the size associated with the Gmagick object as an array with the keys \"columns\" and \"rows\".", 
        "name": "Gmagick::getsize", 
        "overview": "public array Gmagick::getsize ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getsize", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::getversion": {
        "description": "Returns the GraphicsMagick API version as a string and as a number.", 
        "name": "Gmagick::getversion", 
        "overview": "public array Gmagick::getversion ( void )", 
        "parameters": [], 
        "path": "php/gmagick.getversion", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::hasnextimage": {
        "description": "Returns TRUE if the object has more images when traversing the list in the forward direction.", 
        "name": "Gmagick::hasnextimage", 
        "overview": "public mixed Gmagick::hasnextimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.hasnextimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::haspreviousimage": {
        "description": "Returns TRUE if the object has more images when traversing the list in the reverse direction", 
        "name": "Gmagick::haspreviousimage", 
        "overview": "public mixed Gmagick::haspreviousimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.haspreviousimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::implodeimage": {
        "description": "Creates a new image that is a copy of an existing one with the image pixels \"imploded\" by the specified percentage.", 
        "name": "Gmagick::implodeimage", 
        "overview": "public mixed Gmagick::implodeimage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the implode", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.implodeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::labelimage": {
        "description": "Adds a label to an image.", 
        "name": "Gmagick::labelimage", 
        "overview": "public mixed Gmagick::labelimage ( string $label )", 
        "parameters": [
            {
                "descr": "The label to add", 
                "name": "label"
            }
        ], 
        "path": "php/gmagick.labelimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::levelimage": {
        "description": "Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.", 
        "name": "Gmagick::levelimage", 
        "overview": "public mixed Gmagick::levelimage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "The image black point", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The gamma value", 
                "name": "gamma"
            }, 
            {
                "descr": "The image white point", 
                "name": "whitePoint"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.levelimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::magnifyimage": {
        "description": "Conveniently scales an image proportionally to twice its original size.", 
        "name": "Gmagick::magnifyimage", 
        "overview": "public mixed Gmagick::magnifyimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.magnifyimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::mapimage": {
        "description": "Replaces the colors of an image with the closest color from a reference image.", 
        "name": "Gmagick::mapimage", 
        "overview": "public Gmagick Gmagick::mapimage ( gmagick $gmagick , bool $dither )", 
        "parameters": [
            {
                "descr": "The reference image", 
                "name": "gmagick"
            }, 
            {
                "descr": "Set this integer value to something other than zero to dither the mapped image", 
                "name": "dither"
            }
        ], 
        "path": "php/gmagick.mapimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::medianfilterimage": {
        "description": "Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.", 
        "name": "Gmagick::medianfilterimage", 
        "overview": "public void Gmagick::medianfilterimage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the pixel neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.medianfilterimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::minifyimage": {
        "description": "A convenient method that scales an image proportionally to one-half its original size", 
        "name": "Gmagick::minifyimage", 
        "overview": "public void Gmagick::minifyimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.minifyimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::modulateimage": {
        "description": "Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.", 
        "name": "Gmagick::modulateimage", 
        "overview": "public void Gmagick::modulateimage ( float $brightness , float $saturation , float $hue )", 
        "parameters": [
            {
                "descr": "The percent change in brighness (-100 thru +100).", 
                "name": "brightness"
            }, 
            {
                "descr": "The percent change in saturation (-100 thru +100)", 
                "name": "saturation"
            }, 
            {
                "descr": "The percent change in hue (-100 thru +100)", 
                "name": "hue"
            }
        ], 
        "path": "php/gmagick.modulateimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::motionblurimage": {
        "description": "Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.", 
        "name": "Gmagick::motionblurimage", 
        "overview": "public void Gmagick::motionblurimage ( float $radius , float $sigma , float $angle )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel.", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Apply the effect along this angle.", 
                "name": "angle"
            }
        ], 
        "path": "php/gmagick.motionblurimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::newimage": {
        "description": "Creates a new image with the specified background color", 
        "name": "Gmagick::newimage", 
        "overview": "public void Gmagick::newimage ( int $width , int $height , string $background [, string $format ] )", 
        "parameters": [
            {
                "descr": "Width of the new image", 
                "name": "width"
            }, 
            {
                "descr": "Height of the new image", 
                "name": "height"
            }, 
            {
                "descr": "The background color used for this image (as float)", 
                "name": "background"
            }, 
            {
                "descr": "Image format.", 
                "name": "format"
            }
        ], 
        "path": "php/gmagick.newimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::nextimage": {
        "description": "Associates the next image in the image list with an Gmagick object.", 
        "name": "Gmagick::nextimage", 
        "overview": "public bool Gmagick::nextimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.nextimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::normalizeimage": {
        "description": "Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.", 
        "name": "Gmagick::normalizeimage", 
        "overview": "public void Gmagick::normalizeimage ([ int $channel ] )", 
        "parameters": [
            {
                "descr": "Identify which channel to normalize", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.normalizeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::oilpaintimage": {
        "description": "Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.", 
        "name": "Gmagick::oilpaintimage", 
        "overview": "public void Gmagick::oilpaintimage (  float $radius  )", 
        "parameters": [
            {
                "descr": "The radius of the circular neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.oilpaintimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::previousimage": {
        "description": "Assocates the previous image in an image list with the Gmagick object.", 
        "name": "Gmagick::previousimage", 
        "overview": "public bool Gmagick::previousimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.previousimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::profileimage": {
        "description": "Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.", 
        "name": "Gmagick::profileimage", 
        "overview": "public void Gmagick::profileimage ( string $name , string $profile )", 
        "parameters": [
            {
                "descr": "Name of profile to add or remove: ICC, IPTC, or generic profile.", 
                "name": "name"
            }, 
            {
                "descr": "The profile.", 
                "name": "profile"
            }
        ], 
        "path": "php/gmagick.profileimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::quantizeimage": {
        "description": "Analyzes the colors within a reference image and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.", 
        "name": "Gmagick::quantizeimage", 
        "overview": "public void Gmagick::quantizeimage ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError )", 
        "parameters": [
            {
                "descr": "The number of colors.", 
                "name": "numColors"
            }, 
            {
                "descr": "Perform color reduction in this colorspace, typically RGBColorspace.", 
                "name": "colorspace"
            }, 
            {
                "descr": "Normally, this integer value is zero or one. ", 
                "name": "treeDepth"
            }, 
            {
                "descr": "A value other than zero distributes the difference between an original image and the corresponding color reduced algorithm to neighboring pixels along a Hilbert curve.", 
                "name": "dither"
            }, 
            {
                "descr": "A value other than zero measures the difference between the original and quantized images. ", 
                "name": "measureError"
            }
        ], 
        "path": "php/gmagick.quantizeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::quantizeimages": {
        "description": "Analyzes the colors within a sequence of images and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.", 
        "name": "Gmagick::quantizeimages", 
        "overview": "public void Gmagick::quantizeimages ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError )", 
        "parameters": [
            {
                "descr": "The number of colors.", 
                "name": "numColors"
            }, 
            {
                "descr": "Perform color reduction in this colorspace, typically RGBColorspace.", 
                "name": "colorspace"
            }, 
            {
                "descr": "Normally, this integer value is zero or one. ", 
                "name": "treeDepth"
            }, 
            {
                "descr": "A value other than zero distributes the difference between an original image and the corresponding color reduced algorithm to neighboring pixels along a Hilbert curve.", 
                "name": "dither"
            }, 
            {
                "descr": "A value other than zero measures the difference between the original and quantized images. ", 
                "name": "measureError"
            }
        ], 
        "path": "php/gmagick.quantizeimages", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::queryfontmetrics": {
        "description": "MagickQueryFontMetrics() returns an array representing the font metrics.", 
        "name": "Gmagick::queryfontmetrics", 
        "overview": "public array Gmagick::queryfontmetrics ( GmagickDraw $draw , string $text )", 
        "parameters": [], 
        "path": "php/gmagick.queryfontmetrics", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::queryfonts": {
        "description": "Returns fonts supported by Gmagick.", 
        "name": "Gmagick::queryfonts", 
        "overview": "public array Gmagick::queryfonts ([ string $pattern = \"*\" ] )", 
        "parameters": [], 
        "path": "php/gmagick.queryfonts", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::queryformats": {
        "description": "Returns formats supported by Gmagick.", 
        "name": "Gmagick::queryformats", 
        "overview": "public array Gmagick::queryformats ([ string $pattern = \"*\" ] )", 
        "parameters": [
            {
                "descr": "Specifies a pointer to a text string containing a pattern.", 
                "name": "pattern"
            }
        ], 
        "path": "php/gmagick.queryformats", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::radialblurimage": {
        "description": "Radial blurs an image.", 
        "name": "Gmagick::radialblurimage", 
        "overview": "public void Gmagick::radialblurimage ( float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "The angle of the blur in degrees.", 
                "name": "angle"
            }, 
            {
                "descr": "Related channel", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.radialblurimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::raiseimage": {
        "description": "Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.", 
        "name": "Gmagick::raiseimage", 
        "overview": "public void Gmagick::raiseimage ( int $width , int $height , int $x , int $y , bool $raise )", 
        "parameters": [
            {
                "descr": "Width of the area to raise.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the area to raise.", 
                "name": "height"
            }, 
            {
                "descr": "X coordinate", 
                "name": "x"
            }, 
            {
                "descr": "Y coordinate", 
                "name": "y"
            }, 
            {
                "descr": "A value other than zero creates a 3-D raise effect, otherwise it has a lowered effect.", 
                "name": "raise"
            }
        ], 
        "path": "php/gmagick.raiseimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::read": {
        "description": "Reads image from filename.", 
        "name": "Gmagick::read", 
        "overview": "public void Gmagick::read ( string $filename )", 
        "parameters": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.read", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::readimage": {
        "description": "Reads image from filename.", 
        "name": "Gmagick::readimage", 
        "overview": "public void Gmagick::readimage ( string $filename )", 
        "parameters": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.readimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::readimageblob": {
        "description": "Reads image from a binary string.", 
        "name": "Gmagick::readimageblob", 
        "overview": "public void Gmagick::readimageblob ( string $imageContents [, string $filename ] )", 
        "parameters": [
            {
                "descr": "Content of image", 
                "name": "imageContents"
            }, 
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.readimageblob", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::readimagefile": {
        "description": "Reads an image or image sequence from an open file descriptor.", 
        "name": "Gmagick::readimagefile", 
        "overview": "public void Gmagick::readimagefile ( resource $fp [, string $filename ] )", 
        "parameters": [
            {
                "descr": "The file descriptor.", 
                "name": "fp"
            }
        ], 
        "path": "php/gmagick.readimagefile", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::reducenoiseimage": {
        "description": "Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Gmagick::reduceNoiseImage() selects a suitable radius for you.", 
        "name": "Gmagick::reducenoiseimage", 
        "overview": "public void Gmagick::reducenoiseimage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the pixel neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.reducenoiseimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::removeimage": {
        "description": "Removes an image from the image list.", 
        "name": "Gmagick::removeimage", 
        "overview": "public void Gmagick::removeimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.removeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::removeimageprofile": {
        "description": "Removes the named image profile and returns it.", 
        "name": "Gmagick::removeimageprofile", 
        "overview": "public string Gmagick::removeimageprofile ( string $name )", 
        "parameters": [
            {
                "descr": "Name of profile to return: ICC, IPTC, or generic profile.", 
                "name": "name"
            }
        ], 
        "path": "php/gmagick.removeimageprofile", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::resampleimage": {
        "description": "Resample image to desired resolution.", 
        "name": "Gmagick::resampleimage", 
        "overview": "public void Gmagick::resampleimage ( float $xResolution , float $yResolution , int $filter , float $blur )", 
        "parameters": [
            {
                "descr": "The new image x resolution.", 
                "name": "xResolution"
            }, 
            {
                "descr": "The new image y resolution.", 
                "name": "yResolution"
            }, 
            {
                "descr": "Image filter to use.", 
                "name": "filter"
            }, 
            {
                "descr": "The blur factor where larger than 1 is blurry, smaller than 1 is sharp.", 
                "name": "blur"
            }
        ], 
        "path": "php/gmagick.resampleimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::resizeimage": {
        "description": "Scales an image to the desired dimensions with a filter.", 
        "name": "Gmagick::resizeimage", 
        "overview": "public void Gmagick::resizeimage ( int $width , int $height , int $filter , float $blur [, bool $fit = false ] )", 
        "parameters": [
            {
                "descr": "The number of columns in the scaled image.", 
                "name": "width"
            }, 
            {
                "descr": "The number of rows in the scaled image.", 
                "name": "height"
            }, 
            {
                "descr": "Image filter to use.", 
                "name": "filter"
            }, 
            {
                "descr": "The blur factor where larger than 1 is blurry, lesser than 1 is sharp.", 
                "name": "blur"
            }
        ], 
        "path": "php/gmagick.resizeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::rollimage": {
        "description": "Offsets an image as defined by x and y.", 
        "name": "Gmagick::rollimage", 
        "overview": "public void Gmagick::rollimage ( int $x , int $y )", 
        "parameters": [
            {
                "descr": "The x offset.", 
                "name": "x"
            }, 
            {
                "descr": "The y offset.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.rollimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::rotateimage": {
        "description": "Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.", 
        "name": "Gmagick::rotateimage", 
        "overview": "public Gmagick Gmagick::rotateimage ( mixed $color , float $degrees )", 
        "parameters": [
            {
                "descr": "The background pixel.", 
                "name": "color"
            }, 
            {
                "descr": "The number of degrees to rotate the image.", 
                "name": "degrees"
            }
        ], 
        "path": "php/gmagick.rotateimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::scaleimage": {
        "description": "Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param.", 
        "name": "Gmagick::scaleimage", 
        "overview": "public Gmagick Gmagick::scaleimage ( int $width , int $height [, bool $fit = false ] )", 
        "parameters": [
            {
                "descr": "The number of columns in the scaled image.", 
                "name": "width"
            }, 
            {
                "descr": "The number of rows in the scaled image.", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.scaleimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::separateimagechannel": {
        "description": "Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.", 
        "name": "Gmagick::separateimagechannel", 
        "overview": "public Gmagick Gmagick::separateimagechannel ( int $channel )", 
        "parameters": [
            {
                "descr": "Identify which channel to extract: RedChannel, GreenChannel, BlueChannel, OpacityChannel, CyanChannel, MagentaChannel, YellowChannel, BlackChannel.", 
                "name": "channel"
            }
        ], 
        "path": "php/gmagick.separateimagechannel", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setfilename": {
        "description": "Sets the filename before you read or write an image file.", 
        "name": "Gmagick::setfilename", 
        "overview": "public Gmagick Gmagick::setfilename ( string $filename )", 
        "parameters": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.setfilename", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagebackgroundcolor": {
        "description": "Sets the image background color.", 
        "name": "Gmagick::setimagebackgroundcolor", 
        "overview": "public Gmagick Gmagick::setimagebackgroundcolor ( GmagickPixel $color )", 
        "parameters": [
            {
                "descr": "The background pixel wand.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagick.setimagebackgroundcolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageblueprimary": {
        "description": "Sets the image chromaticity blue primary point.", 
        "name": "Gmagick::setimageblueprimary", 
        "overview": "public Gmagick Gmagick::setimageblueprimary ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "The blue primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The blue primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimageblueprimary", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagebordercolor": {
        "description": "Sets the image border color.", 
        "name": "Gmagick::setimagebordercolor", 
        "overview": "public Gmagick Gmagick::setimagebordercolor ( GmagickPixel $color )", 
        "parameters": [
            {
                "descr": "The border pixel wand.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagick.setimagebordercolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagechanneldepth": {
        "description": "Sets the depth of a particular image channel.", 
        "name": "Gmagick::setimagechanneldepth", 
        "overview": "public Gmagick Gmagick::setimagechanneldepth ( int $channel , int $depth )", 
        "parameters": [
            {
                "descr": "Identify which channel to extract: RedChannel, GreenChannel, BlueChannel, OpacityChannel, CyanChannel, MagentaChannel, YellowChannel, BlackChannel.", 
                "name": "channel"
            }, 
            {
                "descr": "The image depth in bits.", 
                "name": "depth"
            }
        ], 
        "path": "php/gmagick.setimagechanneldepth", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagecolorspace": {
        "description": "Sets the image colorspace.", 
        "name": "Gmagick::setimagecolorspace", 
        "overview": "public Gmagick Gmagick::setimagecolorspace ( int $colorspace )", 
        "parameters": [
            {
                "descr": "The image colorspace: UndefinedColorspace, RGBColorspace, GRAYColorspace, TransparentColorspace, OHTAColorspace, XYZColorspace, YCbCrColorspace, YCCColorspace, YIQColorspace, YPbPrColorspace, YPbPrColorspace, YUVColorspace, CMYKColorspace, sRGBColorspace, HSLColorspace, or HWBColorspace.", 
                "name": "colorspace"
            }
        ], 
        "path": "php/gmagick.setimagecolorspace", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagecompose": {
        "description": "Sets the image composite operator.", 
        "name": "Gmagick::setimagecompose", 
        "overview": "public Gmagick Gmagick::setimagecompose ( int $composite )", 
        "parameters": [
            {
                "descr": "The image composite operator.", 
                "name": "composite"
            }
        ], 
        "path": "php/gmagick.setimagecompose", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagedelay": {
        "description": "Sets the image delay", 
        "name": "Gmagick::setimagedelay", 
        "overview": "public Gmagick Gmagick::setimagedelay ( int $delay )", 
        "parameters": [
            {
                "descr": "The image delay in 1/100th of a second.", 
                "name": "delay"
            }
        ], 
        "path": "php/gmagick.setimagedelay", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagedepth": {
        "description": "Sets the image depth", 
        "name": "Gmagick::setimagedepth", 
        "overview": "public Gmagick Gmagick::setimagedepth ( int $depth )", 
        "parameters": [
            {
                "descr": "The image depth in bits: 8, 16, or 32.", 
                "name": "depth"
            }
        ], 
        "path": "php/gmagick.setimagedepth", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagedispose": {
        "description": "Sets the image disposal method.", 
        "name": "Gmagick::setimagedispose", 
        "overview": "public Gmagick Gmagick::setimagedispose ( int $disposeType )", 
        "parameters": [
            {
                "descr": "The image disposal type.", 
                "name": "disposeType"
            }
        ], 
        "path": "php/gmagick.setimagedispose", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagefilename": {
        "description": "Sets the filename of a particular image in a sequence.", 
        "name": "Gmagick::setimagefilename", 
        "overview": "public Gmagick Gmagick::setimagefilename ( string $filename )", 
        "parameters": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.setimagefilename", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageformat": {
        "description": "Sets the format of a particular image in a sequence.", 
        "name": "Gmagick::setimageformat", 
        "overview": "public Gmagick Gmagick::setimageformat ( string $imageFormat )", 
        "parameters": [
            {
                "descr": "The image format.", 
                "name": "imageFormat"
            }
        ], 
        "path": "php/gmagick.setimageformat", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagegamma": {
        "description": "Sets the image gamma.", 
        "name": "Gmagick::setimagegamma", 
        "overview": "public Gmagick Gmagick::setimagegamma ( float $gamma )", 
        "parameters": [
            {
                "descr": "The image gamma.", 
                "name": "gamma"
            }
        ], 
        "path": "php/gmagick.setimagegamma", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagegreenprimary": {
        "description": "Sets the image chromaticity green primary point.", 
        "name": "Gmagick::setimagegreenprimary", 
        "overview": "public Gmagick Gmagick::setimagegreenprimary ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "The chromaticity green primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The chromaticity green primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimagegreenprimary", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageindex": {
        "description": "Set the iterator to the position in the image list specified with the index parameter.", 
        "name": "Gmagick::setimageindex", 
        "overview": "public Gmagick Gmagick::setimageindex ( int $index )", 
        "parameters": [
            {
                "descr": "The scene number.", 
                "name": "index"
            }
        ], 
        "path": "php/gmagick.setimageindex", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageinterlacescheme": {
        "description": "Sets the interlace scheme of the image.", 
        "name": "Gmagick::setimageinterlacescheme", 
        "overview": "public Gmagick Gmagick::setimageinterlacescheme ( int $interlace )", 
        "parameters": [
            {
                "descr": "The image interlace scheme: NoInterlace, LineInterlace, PlaneInterlace, PartitionInterlace.", 
                "name": "interlace"
            }
        ], 
        "path": "php/gmagick.setimageinterlacescheme", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageiterations": {
        "description": "Sets the image iterations.", 
        "name": "Gmagick::setimageiterations", 
        "overview": "public Gmagick Gmagick::setimageiterations ( int $iterations )", 
        "parameters": [
            {
                "descr": "The image delay in 1/100th of a second.", 
                "name": "iterations"
            }
        ], 
        "path": "php/gmagick.setimageiterations", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageprofile": {
        "description": "Adds a named profile to the Gmagick object. If a profile with the same name already exists, it is replaced. This method differs from the Gmagick::ProfileImage() method in that it does not apply any CMS color profiles.", 
        "name": "Gmagick::setimageprofile", 
        "overview": "public Gmagick Gmagick::setimageprofile ( string $name , string $profile )", 
        "parameters": [
            {
                "descr": "Name of profile to add or remove: ICC, IPTC, or generic profile.", 
                "name": "name"
            }, 
            {
                "descr": "The profile.", 
                "name": "profile"
            }
        ], 
        "path": "php/gmagick.setimageprofile", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageredprimary": {
        "description": "Sets the image chromaticity red primary point.", 
        "name": "Gmagick::setimageredprimary", 
        "overview": "public Gmagick Gmagick::setimageredprimary ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "The red primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The red primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimageredprimary", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagerenderingintent": {
        "description": "Sets the image rendering intent.", 
        "name": "Gmagick::setimagerenderingintent", 
        "overview": "public Gmagick Gmagick::setimagerenderingintent ( int $rendering_intent )", 
        "parameters": [
            {
                "descr": "The image rendering intent: UndefinedIntent, SaturationIntent, PerceptualIntent, AbsoluteIntent, or RelativeIntent.", 
                "name": "rendering_intent"
            }
        ], 
        "path": "php/gmagick.setimagerenderingintent", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageresolution": {
        "description": "Sets the image resolution.", 
        "name": "Gmagick::setimageresolution", 
        "overview": "public Gmagick Gmagick::setimageresolution ( float $xResolution , float $yResolution )", 
        "parameters": [
            {
                "descr": "The image x resolution.", 
                "name": "xResolution"
            }, 
            {
                "descr": "The image y resolution.", 
                "name": "yResolution"
            }
        ], 
        "path": "php/gmagick.setimageresolution", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagescene": {
        "description": "Sets the image scene.", 
        "name": "Gmagick::setimagescene", 
        "overview": "public Gmagick Gmagick::setimagescene ( int $scene )", 
        "parameters": [
            {
                "descr": "The image scene number.", 
                "name": "scene"
            }
        ], 
        "path": "php/gmagick.setimagescene", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagetype": {
        "description": "Sets the image type.", 
        "name": "Gmagick::setimagetype", 
        "overview": "public Gmagick Gmagick::setimagetype ( int $imgType )", 
        "parameters": [
            {
                "descr": "The image type: UndefinedType, BilevelType, GrayscaleType, GrayscaleMatteType, PaletteType, PaletteMatteType, TrueColorType, TrueColorMatteType, ColorSeparationType, ColorSeparationMatteType, or OptimizeType.", 
                "name": "imgType"
            }
        ], 
        "path": "php/gmagick.setimagetype", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimageunits": {
        "description": "Sets the image units of resolution.", 
        "name": "Gmagick::setimageunits", 
        "overview": "public Gmagick Gmagick::setimageunits ( int $resolution )", 
        "parameters": [
            {
                "descr": "The image units of resolution : Undefinedresolution, PixelsPerInchResolution, or PixelsPerCentimeterResolution.", 
                "name": "resolution"
            }
        ], 
        "path": "php/gmagick.setimageunits", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setimagewhitepoint": {
        "description": "Sets the image chromaticity white point.", 
        "name": "Gmagick::setimagewhitepoint", 
        "overview": "public Gmagick Gmagick::setimagewhitepoint ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "The white x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The white y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/gmagick.setimagewhitepoint", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setsamplingfactors": {
        "description": "Sets the image sampling factors.", 
        "name": "Gmagick::setsamplingfactors", 
        "overview": "public Gmagick Gmagick::setsamplingfactors ( array $factors )", 
        "parameters": [
            {
                "descr": "An array of doubles representing the sampling factor for each color component (in RGB order).", 
                "name": "factors"
            }
        ], 
        "path": "php/gmagick.setsamplingfactors", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::setsize": {
        "description": "Sets the size of the Gmagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.", 
        "name": "Gmagick::setsize", 
        "overview": "public Gmagick Gmagick::setsize ( int $columns , int $rows )", 
        "parameters": [
            {
                "descr": "The width in pixels.", 
                "name": "columns"
            }, 
            {
                "descr": "The height in pixels.", 
                "name": "rows"
            }
        ], 
        "path": "php/gmagick.setsize", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::shearimage": {
        "description": "Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.", 
        "name": "Gmagick::shearimage", 
        "overview": "public Gmagick Gmagick::shearimage ( mixed $color , float $xShear , float $yShear )", 
        "parameters": [
            {
                "descr": "The background pixel wand.", 
                "name": "color"
            }, 
            {
                "descr": "The number of degrees to shear the image.", 
                "name": "xShear"
            }, 
            {
                "descr": "The number of degrees to shear the image.", 
                "name": "yShear"
            }
        ], 
        "path": "php/gmagick.shearimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::solarizeimage": {
        "description": "Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.", 
        "name": "Gmagick::solarizeimage", 
        "overview": "public Gmagick Gmagick::solarizeimage ( int $threshold )", 
        "parameters": [
            {
                "descr": "Define the extent of the solarization.", 
                "name": "threshold"
            }
        ], 
        "path": "php/gmagick.solarizeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::spreadimage": {
        "description": "Special effects method that randomly displaces each pixel in a block defined by the radius parameter.", 
        "name": "Gmagick::spreadimage", 
        "overview": "public Gmagick Gmagick::spreadimage ( float $radius )", 
        "parameters": [
            {
                "descr": "Choose a random pixel in a neighborhood of this extent.", 
                "name": "radius"
            }
        ], 
        "path": "php/gmagick.spreadimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::stripimage": {
        "description": "Strips an image of all profiles and comments.", 
        "name": "Gmagick::stripimage", 
        "overview": "public Gmagick Gmagick::stripimage ( void )", 
        "parameters": [], 
        "path": "php/gmagick.stripimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::swirlimage": {
        "description": "Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.", 
        "name": "Gmagick::swirlimage", 
        "overview": "public Gmagick Gmagick::swirlimage ( float $degrees )", 
        "parameters": [
            {
                "descr": "Define the tightness of the swirling effect.", 
                "name": "degrees"
            }
        ], 
        "path": "php/gmagick.swirlimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::thumbnailimage": {
        "description": "Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.", 
        "name": "Gmagick::thumbnailimage", 
        "overview": "public Gmagick Gmagick::thumbnailimage ( int $width , int $height [, bool $fit = false ] )", 
        "parameters": [
            {
                "descr": "Image width", 
                "name": "width"
            }, 
            {
                "descr": "Image height", 
                "name": "height"
            }
        ], 
        "path": "php/gmagick.thumbnailimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::trimimage": {
        "description": "Remove edges that are the background color from the image.", 
        "name": "Gmagick::trimimage", 
        "overview": "public Gmagick Gmagick::trimimage ( float $fuzz )", 
        "parameters": [
            {
                "descr": "By default target must match a particular pixel color exactly. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/gmagick.trimimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::write": {
        "description": "Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Gmagick::ReadImage() or Gmagick::SetImageFilename().", 
        "name": "Gmagick::write", 
        "overview": "public void Gmagick::write ( string $filename )", 
        "parameters": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.write", 
        "type": "Image/GraphicsMagick"
    }, 
    "Gmagick::writeimage": {
        "description": "Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Gmagick::ReadImage() or Gmagick::SetImageFilename().", 
        "name": "Gmagick::writeimage", 
        "overview": "public Gmagick Gmagick::writeimage ( string $filename [, bool $all_frames = false ] )", 
        "parameters": [
            {
                "descr": "The image filename.", 
                "name": "filename"
            }
        ], 
        "path": "php/gmagick.writeimage", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw": {
        "description": "", 
        "name": "GmagickDraw", 
        "overview": "public GmagickDraw annotate ( float $x , float $y , string $text )", 
        "parameters": [], 
        "path": "php/class.gmagickdraw", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::annotate": {
        "description": "Draws text on the image.", 
        "name": "GmagickDraw::annotate", 
        "overview": "public GmagickDraw GmagickDraw::annotate ( float $x , float $y , string $text )", 
        "parameters": [
            {
                "descr": "x ordinate to left of text", 
                "name": "x"
            }, 
            {
                "descr": "y ordinate to text baseline", 
                "name": "y"
            }, 
            {
                "descr": "text to draw", 
                "name": "text"
            }
        ], 
        "path": "php/gmagickdraw.annotate", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::arc": {
        "description": "Draws an arc falling within a specified bounding rectangle on the image.", 
        "name": "GmagickDraw::arc", 
        "overview": "public GmagickDraw GmagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )", 
        "parameters": [
            {
                "descr": "starting x ordinate of bounding rectangle", 
                "name": "sx"
            }, 
            {
                "descr": "starting y ordinate of bounding rectangle", 
                "name": "sy"
            }, 
            {
                "descr": "ending x ordinate of bounding rectangle", 
                "name": "ex"
            }, 
            {
                "descr": "ending y ordinate of bounding rectangle", 
                "name": "ey"
            }, 
            {
                "descr": "starting degrees of rotation", 
                "name": "sd"
            }, 
            {
                "descr": "ending degrees of rotation", 
                "name": "ed"
            }
        ], 
        "path": "php/gmagickdraw.arc", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::bezier": {
        "description": "Draws a bezier curve through a set of points on the image.", 
        "name": "GmagickDraw::bezier", 
        "overview": "public GmagickDraw GmagickDraw::bezier ( array $coordinate_array )", 
        "parameters": [
            {
                "descr": "Coordinates array", 
                "name": "coordinate_array"
            }
        ], 
        "path": "php/gmagickdraw.bezier", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::ellipse": {
        "description": "Draws an ellipse on the image.", 
        "name": "GmagickDraw::ellipse", 
        "overview": "public GmagickDraw GmagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )", 
        "parameters": [
            {
                "descr": "origin x ordinate", 
                "name": "ox"
            }, 
            {
                "descr": "origin y ordinate", 
                "name": "oy"
            }, 
            {
                "descr": "radius in x", 
                "name": "rx"
            }, 
            {
                "descr": "radius in y", 
                "name": "ry"
            }, 
            {
                "descr": "starting rotation in degrees", 
                "name": "start"
            }, 
            {
                "descr": "ending rotation in degrees", 
                "name": "end"
            }
        ], 
        "path": "php/gmagickdraw.ellipse", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfillcolor": {
        "description": "Returns the fill color used for drawing filled objects.", 
        "name": "GmagickDraw::getfillcolor", 
        "overview": "public void GmagickDraw::getfillcolor ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getfillcolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfillopacity": {
        "description": "Returns the opacity used when drawing", 
        "name": "GmagickDraw::getfillopacity", 
        "overview": "public float GmagickDraw::getfillopacity ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getfillopacity", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfont": {
        "description": "Returns a string specifying the font used when annotating with text.", 
        "name": "GmagickDraw::getfont", 
        "overview": "public string GmagickDraw::getfont ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getfont", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfontsize": {
        "description": "Returns the font pointsize used when annotating with text.", 
        "name": "GmagickDraw::getfontsize", 
        "overview": "public float GmagickDraw::getfontsize ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getfontsize", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfontstyle": {
        "description": "Returns the font style used when annotating with text.", 
        "name": "GmagickDraw::getfontstyle", 
        "overview": "public int GmagickDraw::getfontstyle ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getfontstyle", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getfontweight": {
        "description": "Returns the font weight used when annotating with text.", 
        "name": "GmagickDraw::getfontweight", 
        "overview": "public int GmagickDraw::getfontweight ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getfontweight", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getstrokecolor": {
        "description": "Returns the color used for stroking object outlines.", 
        "name": "GmagickDraw::getstrokecolor", 
        "overview": "public void GmagickDraw::getstrokecolor ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getstrokecolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getstrokeopacity": {
        "description": "Returns the opacity of stroked object outlines.", 
        "name": "GmagickDraw::getstrokeopacity", 
        "overview": "public float GmagickDraw::getstrokeopacity ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getstrokeopacity", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::getstrokewidth": {
        "description": "Returns the width of the stroke used to draw object outlines.", 
        "name": "GmagickDraw::getstrokewidth", 
        "overview": "public float GmagickDraw::getstrokewidth ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.getstrokewidth", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::gettextdecoration": {
        "description": "Returns the decoration applied when annotating with text.", 
        "name": "GmagickDraw::gettextdecoration", 
        "overview": "public int GmagickDraw::gettextdecoration ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.gettextdecoration", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::gettextencoding": {
        "description": "Returns a string which specifies the code set used for text annotations.", 
        "name": "GmagickDraw::gettextencoding", 
        "overview": "public string GmagickDraw::gettextencoding ( void )", 
        "parameters": [], 
        "path": "php/gmagickdraw.gettextencoding", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::line": {
        "description": "Draws a line on the image using the current stroke color, stroke opacity, and stroke width.", 
        "name": "GmagickDraw::line", 
        "overview": "public GmagickDraw GmagickDraw::line ( float $sx , float $sy , float $ex , float $ey )", 
        "parameters": [
            {
                "descr": "starting x ordinate", 
                "name": "sx"
            }, 
            {
                "descr": "starting y ordinate", 
                "name": "sy"
            }, 
            {
                "descr": "ending x ordinate", 
                "name": "ex"
            }, 
            {
                "descr": "ending y ordinate", 
                "name": "ey"
            }
        ], 
        "path": "php/gmagickdraw.line", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::point": {
        "description": "Draws a point using the current stroke color and stroke thickness at the specified coordinates.", 
        "name": "GmagickDraw::point", 
        "overview": "public GmagickDraw GmagickDraw::point ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "target x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "target y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/gmagickdraw.point", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::polygon": {
        "description": "Draws a polygon using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.", 
        "name": "GmagickDraw::polygon", 
        "overview": "public GmagickDraw GmagickDraw::polygon ( array $coordinates )", 
        "parameters": [
            {
                "descr": "coordinate array", 
                "name": "coordinates"
            }
        ], 
        "path": "php/gmagickdraw.polygon", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::polyline": {
        "description": "Draws a polyline using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.", 
        "name": "GmagickDraw::polyline", 
        "overview": "public GmagickDraw GmagickDraw::polyline ( array $coordinate_array )", 
        "parameters": [
            {
                "descr": "The array of coordinates", 
                "name": "coordinate_array"
            }
        ], 
        "path": "php/gmagickdraw.polyline", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::rectangle": {
        "description": "Draws a rectangle given two coordinates and using the current stroke, stroke width, and fill settings.", 
        "name": "GmagickDraw::rectangle", 
        "overview": "public GmagickDraw GmagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )", 
        "parameters": [
            {
                "descr": "x ordinate of first coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "y ordinate of first coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "x ordinate of second coordinate", 
                "name": "x2"
            }, 
            {
                "descr": "y ordinate of second coordinate", 
                "name": "y2"
            }
        ], 
        "path": "php/gmagickdraw.rectangle", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::rotate": {
        "description": "Applies the specified rotation to the current coordinate space.", 
        "name": "GmagickDraw::rotate", 
        "overview": "public GmagickDraw GmagickDraw::rotate ( float $degrees )", 
        "parameters": [
            {
                "descr": "degrees of rotation", 
                "name": "degrees"
            }
        ], 
        "path": "php/gmagickdraw.rotate", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::roundrectangle": {
        "description": "Draws a rounded rectangle given two coordinates, x and y corner radiuses and using the current stroke, stroke width, and fill settings.", 
        "name": "GmagickDraw::roundrectangle", 
        "overview": "public GmagickDraw GmagickDraw::roundrectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )", 
        "parameters": [
            {
                "descr": "x ordinate of first coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "y ordinate of first coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "x ordinate of second coordinate", 
                "name": "x2"
            }, 
            {
                "descr": "y ordinate of second coordinate", 
                "name": "y2"
            }, 
            {
                "descr": "radius of corner in horizontal direction", 
                "name": "rx"
            }, 
            {
                "descr": "radius of corner in vertical direction", 
                "name": "ry"
            }
        ], 
        "path": "php/gmagickdraw.roundrectangle", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::scale": {
        "description": "Adjusts the scaling factor to apply in the horizontal and vertical directions to the current coordinate space.", 
        "name": "GmagickDraw::scale", 
        "overview": "public GmagickDraw GmagickDraw::scale ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "horizontal scale factor", 
                "name": "x"
            }, 
            {
                "descr": "vertical scale factor", 
                "name": "y"
            }
        ], 
        "path": "php/gmagickdraw.scale", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfillcolor": {
        "description": "Sets the fill color to be used for drawing filled objects.", 
        "name": "GmagickDraw::setfillcolor", 
        "overview": "public GmagickDraw GmagickDraw::setfillcolor ( string $color )", 
        "parameters": [
            {
                "descr": "GmagickPixel indicating color to use for filling.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickdraw.setfillcolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfillopacity": {
        "description": "Sets the opacity to use when drawing using the fill color or fill texture. Setting it to 1.0 will make fill full opaque.", 
        "name": "GmagickDraw::setfillopacity", 
        "overview": "public GmagickDraw GmagickDraw::setfillopacity ( float $fill_opacity )", 
        "parameters": [
            {
                "descr": "Fill opacity", 
                "name": "fill_opacity"
            }
        ], 
        "path": "php/gmagickdraw.setfillopacity", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfont": {
        "description": "Sets the fully-specified font to use when annotating with text", 
        "name": "GmagickDraw::setfont", 
        "overview": "public GmagickDraw GmagickDraw::setfont ( string $font )", 
        "parameters": [
            {
                "descr": "font name", 
                "name": "font"
            }
        ], 
        "path": "php/gmagickdraw.setfont", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfontsize": {
        "description": "Sets the font pointsize to use when annotating with text.", 
        "name": "GmagickDraw::setfontsize", 
        "overview": "public GmagickDraw GmagickDraw::setfontsize ( float $pointsize )", 
        "parameters": [
            {
                "descr": "Text pointsize", 
                "name": "pointsize"
            }
        ], 
        "path": "php/gmagickdraw.setfontsize", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfontstyle": {
        "description": "Sets the font style to use when annotating with text. The AnyStyle enumeration acts as a wild-card \"don't care\" option.", 
        "name": "GmagickDraw::setfontstyle", 
        "overview": "public GmagickDraw GmagickDraw::setfontstyle ( int $style )", 
        "parameters": [
            {
                "descr": "Font style (NormalStyle, ItalicStyle, ObliqueStyle, AnyStyle)", 
                "name": "style"
            }
        ], 
        "path": "php/gmagickdraw.setfontstyle", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setfontweight": {
        "description": "Sets the font weight to use when annotating with text.", 
        "name": "GmagickDraw::setfontweight", 
        "overview": "public GmagickDraw GmagickDraw::setfontweight ( int $weight )", 
        "parameters": [
            {
                "descr": "Font weight (valid range 100-900)", 
                "name": "weight"
            }
        ], 
        "path": "php/gmagickdraw.setfontweight", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setstrokecolor": {
        "description": "Sets the color used for stroking object outlines.", 
        "name": "GmagickDraw::setstrokecolor", 
        "overview": "public GmagickDraw GmagickDraw::setstrokecolor ( GmagickPixel $color )", 
        "parameters": [
            {
                "descr": "GmagickPixel representing the color for the stroke.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickdraw.setstrokecolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setstrokeopacity": {
        "description": "Specifies the opacity of stroked object outlines.", 
        "name": "GmagickDraw::setstrokeopacity", 
        "overview": "public GmagickDraw GmagickDraw::setstrokeopacity ( float $stroke_opacity )", 
        "parameters": [
            {
                "descr": "Stroke opacity. The value 1.0 is opaque.", 
                "name": "stroke_opacity"
            }
        ], 
        "path": "php/gmagickdraw.setstrokeopacity", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::setstrokewidth": {
        "description": "Sets the width of the stroke used to draw object outlines", 
        "name": "GmagickDraw::setstrokewidth", 
        "overview": "public GmagickDraw GmagickDraw::setstrokewidth ( float $width )", 
        "parameters": [
            {
                "descr": "Stroke width", 
                "name": "width"
            }
        ], 
        "path": "php/gmagickdraw.setstrokewidth", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::settextdecoration": {
        "description": "Specifies a decoration to be applied when annotating with text.", 
        "name": "GmagickDraw::settextdecoration", 
        "overview": "public GmagickDraw GmagickDraw::settextdecoration ( int $decoration )", 
        "parameters": [
            {
                "descr": "Text decoration. One of NoDecoration, UnderlineDecoration, OverlineDecoration, or LineThroughDecoration", 
                "name": "int"
            }
        ], 
        "path": "php/gmagickdraw.settextdecoration", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickDraw::settextencoding": {
        "description": "Specifies specifies the code set to use for text annotations. The only character encoding which may be specified at this time is \"UTF-8\" for representing Unicode as a sequence of bytes. Specify an empty string to set text encoding to the system's default. Successful text annotation using Unicode may require fonts designed to support Unicode.", 
        "name": "GmagickDraw::settextencoding", 
        "overview": "public GmagickDraw GmagickDraw::settextencoding ( string $encoding )", 
        "parameters": [
            {
                "descr": "Character string specifying text encoding", 
                "name": "encoding"
            }
        ], 
        "path": "php/gmagickdraw.settextencoding", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel": {
        "description": "", 
        "name": "GmagickPixel", 
        "overview": "public __construct ([ string $color ] )", 
        "parameters": [], 
        "path": "php/class.gmagickpixel", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::__construct": {
        "description": "Constructs an GmagickPixel object. If a color is specified, the object is constructed and then initialised with that color before being returned.", 
        "name": "GmagickPixel::__construct", 
        "overview": "public GmagickPixel::__construct ([ string $color ] )", 
        "parameters": [
            {
                "descr": "The optional color string to use as the initial value of this object.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickpixel.construct", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::getcolor": {
        "description": "Returns the color described by the GmagickPixel object, as an array. If the color has an opacity channel set, this is provided as a fourth value in the list.", 
        "name": "GmagickPixel::getcolor", 
        "overview": "public mixed GmagickPixel::getcolor ([ bool $as_array [, bool $normalize_array ]] )", 
        "parameters": [
            {
                "descr": "True to indicate return of array instead of string", 
                "name": "as_array"
            }, 
            {
                "descr": "Normalize the color values", 
                "name": "normalize_array"
            }
        ], 
        "path": "php/gmagickpixel.getcolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::getcolorcount": {
        "description": "Returns the color count associated with this color", 
        "name": "GmagickPixel::getcolorcount", 
        "overview": "public int GmagickPixel::getcolorcount ( void )", 
        "parameters": [], 
        "path": "php/gmagickpixel.getcolorcount", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::getcolorvalue": {
        "description": "Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.", 
        "name": "GmagickPixel::getcolorvalue", 
        "overview": "public float GmagickPixel::getcolorvalue ( int $color )", 
        "parameters": [
            {
                "descr": "The channel to check, specified as one of the Gmagick channel constants.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickpixel.getcolorvalue", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::setcolor": {
        "description": "Sets the color described by the GmagickPixel object, with a string (e.g. \"blue\", \"#0000ff\", \"rgb(0,0,255)\", \"cmyk(100,100,100,10)\", etc.).", 
        "name": "GmagickPixel::setcolor", 
        "overview": "public GmagickPixel GmagickPixel::setcolor ( string $color )", 
        "parameters": [
            {
                "descr": "The color definition to use in order to initialise the GmagickPixel object.", 
                "name": "color"
            }
        ], 
        "path": "php/gmagickpixel.setcolor", 
        "type": "Image/GraphicsMagick"
    }, 
    "GmagickPixel::setcolorvalue": {
        "description": "Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to a GmagickPixel object.", 
        "name": "GmagickPixel::setcolorvalue", 
        "overview": "public GmagickPixel GmagickPixel::setcolorvalue ( int $color , float $value )", 
        "parameters": [
            {
                "descr": "One of the Gmagick channel color constants.", 
                "name": "color"
            }, 
            {
                "descr": "The value to set this channel to, ranging from 0 to 1.", 
                "name": "value"
            }
        ], 
        "path": "php/gmagickpixel.setcolorvalue", 
        "type": "Image/GraphicsMagick"
    }, 
    "GregorianToJD": {
        "description": "Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.", 
        "name": "GregorianToJD", 
        "overview": "int gregoriantojd ( int $month , int $day , int $year )", 
        "parameters": [
            {
                "descr": "The month as a number from 1 (for January) to 12 (for December)", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 31", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between -4714 and 9999", 
                "name": "year"
            }
        ], 
        "path": "php/function.gregoriantojd", 
        "type": "Date and Time"
    }, 
    "HttpDeflateStream": {
        "description": "", 
        "name": "HttpDeflateStream", 
        "overview": "public __construct ([ int $flags = 0 ] )", 
        "parameters": [], 
        "path": "php/class.httpdeflatestream", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::__construct": {
        "description": "Creates a new HttpDeflateStream object instance.", 
        "name": "HttpDeflateStream::__construct", 
        "overview": "public HttpDeflateStream::__construct ([ int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }
        ], 
        "path": "php/httpdeflatestream.construct", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::factory": {
        "description": "Creates a new HttpDeflateStream object instance.", 
        "name": "HttpDeflateStream::factory", 
        "overview": "static public HttpDeflateStream HttpDeflateStream::factory ([ int $flags = 0 [, string $class_name = \"HttpDeflateStream\" ]] )", 
        "parameters": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }, 
            {
                "descr": "name of a subclass of HttpDeflateStream", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpdeflatestream.factory", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::finish": {
        "description": "Finalizes the deflate stream. The deflate stream can be reused after finalizing.", 
        "name": "HttpDeflateStream::finish", 
        "overview": "public string HttpDeflateStream::finish ([ string $data ] )", 
        "parameters": [
            {
                "descr": "data to deflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpdeflatestream.finish", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::flush": {
        "description": "Flushes the deflate stream.", 
        "name": "HttpDeflateStream::flush", 
        "overview": "public string HttpDeflateStream::flush ([ string $data ] )", 
        "parameters": [
            {
                "descr": "more data to deflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpdeflatestream.flush", 
        "type": "HTTP"
    }, 
    "HttpDeflateStream::update": {
        "description": "Passes more data through the deflate stream.", 
        "name": "HttpDeflateStream::update", 
        "overview": "public string HttpDeflateStream::update ( string $data )", 
        "parameters": [
            {
                "descr": "data to deflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpdeflatestream.update", 
        "type": "HTTP"
    }, 
    "HttpInflateStream": {
        "description": "", 
        "name": "HttpInflateStream", 
        "overview": "public __construct ([ int $flags = 0 ] )", 
        "parameters": [], 
        "path": "php/class.httpinflatestream", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::__construct": {
        "description": "Creates a new HttpInflateStream object instance.", 
        "name": "HttpInflateStream::__construct", 
        "overview": "public HttpInflateStream::__construct ([ int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }
        ], 
        "path": "php/httpinflatestream.construct", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::factory": {
        "description": "Creates a new HttpInflateStream object instance.", 
        "name": "HttpInflateStream::factory", 
        "overview": "public HttpInflateStream HttpInflateStream::factory ([ int $flags = 0 [, string $class_name = \"HttpInflateStream\" ]] )", 
        "parameters": [
            {
                "descr": "initialization flags", 
                "name": "flags"
            }, 
            {
                "descr": "name of a subclass of HttpInflateStream", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpinflatestream.factory", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::finish": {
        "description": "Finalizes the inflate stream. The inflate stream can be reused after finalizing.", 
        "name": "HttpInflateStream::finish", 
        "overview": "public string HttpInflateStream::finish ([ string $data ] )", 
        "parameters": [
            {
                "descr": "data to inflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpinflatestream.finish", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::flush": {
        "description": "Flushes the inflate stream.", 
        "name": "HttpInflateStream::flush", 
        "overview": "public string HttpInflateStream::flush ([ string $data ] )", 
        "parameters": [
            {
                "descr": "more data to inflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpinflatestream.flush", 
        "type": "HTTP"
    }, 
    "HttpInflateStream::update": {
        "description": "Passes more data through the inflate stream.", 
        "name": "HttpInflateStream::update", 
        "overview": "public string HttpInflateStream::update ( string $data )", 
        "parameters": [
            {
                "descr": "data to inflate", 
                "name": "data"
            }
        ], 
        "path": "php/httpinflatestream.update", 
        "type": "HTTP"
    }, 
    "HttpMessage": {
        "description": "", 
        "name": "HttpMessage", 
        "overview": "public void addHeaders ( array $headers [, bool $append = false ] )", 
        "parameters": [], 
        "path": "php/class.httpmessage", 
        "type": "HTTP"
    }, 
    "HttpMessage::__construct": {
        "description": "Instantiate a new HttpMessage object.", 
        "name": "HttpMessage::__construct", 
        "overview": "public HttpMessage::__construct ([ string $message ] )", 
        "parameters": [
            {
                "descr": "a single or several consecutive HTTP messages", 
                "name": "message"
            }
        ], 
        "path": "php/httpmessage.construct", 
        "type": "HTTP"
    }, 
    "HttpMessage::addHeaders": {
        "description": "Add headers. If append is true, headers with the same name will be separated, else overwritten.", 
        "name": "HttpMessage::addHeaders", 
        "overview": "public void HttpMessage::addHeaders ( array $headers [, bool $append = false ] )", 
        "parameters": [
            {
                "descr": "associative array containing the additional HTTP headers to add to the messages existing headers", 
                "name": "headers"
            }, 
            {
                "descr": "if true, and a header with the same name of one to add exists already, this respective header will be converted to an array containing both header values, otherwise it will be overwritten with the new header value", 
                "name": "append"
            }
        ], 
        "path": "php/httpmessage.addheaders", 
        "type": "HTTP"
    }, 
    "HttpMessage::detach": {
        "description": "Returns a clone of an HttpMessage object detached from any parent messages.", 
        "name": "HttpMessage::detach", 
        "overview": "public HttpMessage HttpMessage::detach ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.detach", 
        "type": "HTTP"
    }, 
    "HttpMessage::factory": {
        "description": "Create an HttpMessage object from a string.", 
        "name": "HttpMessage::factory", 
        "overview": "static public HttpMessage HttpMessage::factory ([ string $raw_message [, string $class_name = \"HttpMessage\" ]] )", 
        "parameters": [
            {
                "descr": "a single or several consecutive HTTP messages", 
                "name": "raw_message"
            }, 
            {
                "descr": "a class extending HttpMessage", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpmessage.factory", 
        "type": "HTTP"
    }, 
    "HttpMessage::fromEnv": {
        "description": "Create an HttpMessage object from script environment.", 
        "name": "HttpMessage::fromEnv", 
        "overview": "static public HttpMessage HttpMessage::fromEnv ( int $message_type [, string $class_name = \"HttpMessage\" ] )", 
        "parameters": [
            {
                "descr": "The message type. See HttpMessage type constants.", 
                "name": "message_type"
            }, 
            {
                "descr": "a class extending HttpMessage", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpmessage.fromenv", 
        "type": "HTTP"
    }, 
    "HttpMessage::fromString": {
        "description": "Create an HttpMessage object from a string.", 
        "name": "HttpMessage::fromString", 
        "overview": "static public HttpMessage HttpMessage::fromString ([ string $raw_message [, string $class_name = \"HttpMessage\" ]] )", 
        "parameters": [
            {
                "descr": "a single or several consecutive HTTP messages", 
                "name": "raw_message"
            }, 
            {
                "descr": "a class extending HttpMessage", 
                "name": "class_name"
            }
        ], 
        "path": "php/httpmessage.fromstring", 
        "type": "HTTP"
    }, 
    "HttpMessage::getBody": {
        "description": "Get the body of the parsed HttpMessage.", 
        "name": "HttpMessage::getBody", 
        "overview": "public string HttpMessage::getBody ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.getbody", 
        "type": "HTTP"
    }, 
    "HttpMessage::getHeader": {
        "description": "Get message header.", 
        "name": "HttpMessage::getHeader", 
        "overview": "public string HttpMessage::getHeader ( string $header )", 
        "parameters": [
            {
                "descr": "header name", 
                "name": "header"
            }
        ], 
        "path": "php/httpmessage.getheader", 
        "type": "HTTP"
    }, 
    "HttpMessage::getHeaders": {
        "description": "Get message headers.", 
        "name": "HttpMessage::getHeaders", 
        "overview": "public array HttpMessage::getHeaders ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.getheaders", 
        "type": "HTTP"
    }, 
    "HttpMessage::getHttpVersion": {
        "description": "Get the HTTP Protocol Version of the Message.", 
        "name": "HttpMessage::getHttpVersion", 
        "overview": "public string HttpMessage::getHttpVersion ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.gethttpversion", 
        "type": "HTTP"
    }, 
    "HttpMessage::getParentMessage": {
        "description": "Get parent Message.", 
        "name": "HttpMessage::getParentMessage", 
        "overview": "public HttpMessage HttpMessage::getParentMessage ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.getparentmessage", 
        "type": "HTTP"
    }, 
    "HttpMessage::getRequestMethod": {
        "description": "Get the Request Method of the Message.", 
        "name": "HttpMessage::getRequestMethod", 
        "overview": "public string HttpMessage::getRequestMethod ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.getrequestmethod", 
        "type": "HTTP"
    }, 
    "HttpMessage::getRequestUrl": {
        "description": "Get the Request URL of the Message.", 
        "name": "HttpMessage::getRequestUrl", 
        "overview": "public string HttpMessage::getRequestUrl ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.getrequesturl", 
        "type": "HTTP"
    }, 
    "HttpMessage::getResponseCode": {
        "description": "Get the Response Code of the Message.", 
        "name": "HttpMessage::getResponseCode", 
        "overview": "public int HttpMessage::getResponseCode ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.getresponsecode", 
        "type": "HTTP"
    }, 
    "HttpMessage::getResponseStatus": {
        "description": "Get the Response Status of the message (i.e. the string following the response code).", 
        "name": "HttpMessage::getResponseStatus", 
        "overview": "public string HttpMessage::getResponseStatus ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.getresponsestatus", 
        "type": "HTTP"
    }, 
    "HttpMessage::getType": {
        "description": "Get Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.", 
        "name": "HttpMessage::getType", 
        "overview": "public int HttpMessage::getType ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.gettype", 
        "type": "HTTP"
    }, 
    "HttpMessage::guessContentType": {
        "description": "Attempts to guess the content type of the message body through libmagic.", 
        "name": "HttpMessage::guessContentType", 
        "overview": "public string HttpMessage::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )", 
        "parameters": [
            {
                "descr": "the magic.mime database to use", 
                "name": "magic_file"
            }, 
            {
                "descr": "flags for libmagic", 
                "name": "magic_mode"
            }
        ], 
        "path": "php/httpmessage.guesscontenttype", 
        "type": "HTTP"
    }, 
    "HttpMessage::prepend": {
        "description": "Prepends message(s) to the HTTP message.", 
        "name": "HttpMessage::prepend", 
        "overview": "public void HttpMessage::prepend ( HttpMessage $message [, bool $top = true ] )", 
        "parameters": [
            {
                "descr": "HttpMessage object to prepend", 
                "name": "message"
            }, 
            {
                "descr": "whether to prepend to the top most or right this message", 
                "name": "top"
            }
        ], 
        "path": "php/httpmessage.prepend", 
        "type": "HTTP"
    }, 
    "HttpMessage::reverse": {
        "description": "Reorders the message chain in reverse order.", 
        "name": "HttpMessage::reverse", 
        "overview": "public HttpMessage HttpMessage::reverse ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.reverse", 
        "type": "HTTP"
    }, 
    "HttpMessage::send": {
        "description": "Send the Message according to its type as Response or Request.", 
        "name": "HttpMessage::send", 
        "overview": "public bool HttpMessage::send ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.send", 
        "type": "HTTP"
    }, 
    "HttpMessage::setBody": {
        "description": "Set the body of the HttpMessage.", 
        "name": "HttpMessage::setBody", 
        "overview": "public void HttpMessage::setBody ( string $body )", 
        "parameters": [
            {
                "descr": "the new body of the message", 
                "name": "body"
            }
        ], 
        "path": "php/httpmessage.setbody", 
        "type": "HTTP"
    }, 
    "HttpMessage::setHeaders": {
        "description": "Sets new headers.", 
        "name": "HttpMessage::setHeaders", 
        "overview": "public void HttpMessage::setHeaders ( array $headers )", 
        "parameters": [
            {
                "descr": "associative array containing the new HTTP headers, which will replace all previous HTTP headers of the message", 
                "name": "headers"
            }
        ], 
        "path": "php/httpmessage.setheaders", 
        "type": "HTTP"
    }, 
    "HttpMessage::setHttpVersion": {
        "description": "Set the HTTP Protocol version of the Message.", 
        "name": "HttpMessage::setHttpVersion", 
        "overview": "public bool HttpMessage::setHttpVersion ( string $version )", 
        "parameters": [
            {
                "descr": "the HTTP protocol version", 
                "name": "version"
            }
        ], 
        "path": "php/httpmessage.sethttpversion", 
        "type": "HTTP"
    }, 
    "HttpMessage::setRequestMethod": {
        "description": "Set the Request Method of the HTTP Message.", 
        "name": "HttpMessage::setRequestMethod", 
        "overview": "public bool HttpMessage::setRequestMethod ( string $method )", 
        "parameters": [
            {
                "descr": "the request method name", 
                "name": "method"
            }
        ], 
        "path": "php/httpmessage.setrequestmethod", 
        "type": "HTTP"
    }, 
    "HttpMessage::setRequestUrl": {
        "description": "Set the Request URL of the HTTP Message.", 
        "name": "HttpMessage::setRequestUrl", 
        "overview": "public bool HttpMessage::setRequestUrl ( string $url )", 
        "parameters": [
            {
                "descr": "the request URL", 
                "name": "url"
            }
        ], 
        "path": "php/httpmessage.setrequesturl", 
        "type": "HTTP"
    }, 
    "HttpMessage::setResponseCode": {
        "description": "Set the response code of an HTTP Response Message.", 
        "name": "HttpMessage::setResponseCode", 
        "overview": "public bool HttpMessage::setResponseCode ( int $code )", 
        "parameters": [
            {
                "descr": "HTTP response code", 
                "name": "code"
            }
        ], 
        "path": "php/httpmessage.setresponsecode", 
        "type": "HTTP"
    }, 
    "HttpMessage::setResponseStatus": {
        "description": "Set the Response Status of the HTTP message (i.e. the string following the response code).", 
        "name": "HttpMessage::setResponseStatus", 
        "overview": "public bool HttpMessage::setResponseStatus ( string $status )", 
        "parameters": [
            {
                "descr": "the response status text", 
                "name": "status"
            }
        ], 
        "path": "php/httpmessage.setresponsestatus", 
        "type": "HTTP"
    }, 
    "HttpMessage::setType": {
        "description": "Set Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.", 
        "name": "HttpMessage::setType", 
        "overview": "public void HttpMessage::setType ( int $type )", 
        "parameters": [
            {
                "descr": "the HttpMessage::TYPE_*", 
                "name": "type"
            }
        ], 
        "path": "php/httpmessage.settype", 
        "type": "HTTP"
    }, 
    "HttpMessage::toMessageTypeObject": {
        "description": "Creates an object regarding to the type of the message.", 
        "name": "HttpMessage::toMessageTypeObject", 
        "overview": "public HttpRequest|HttpResponse HttpMessage::toMessageTypeObject ( void )", 
        "parameters": [], 
        "path": "php/httpmessage.tomessagetypeobject", 
        "type": "HTTP"
    }, 
    "HttpMessage::toString": {
        "description": "Get the string representation of the Message.", 
        "name": "HttpMessage::toString", 
        "overview": "public string HttpMessage::toString ([ bool $include_parent = false ] )", 
        "parameters": [
            {
                "descr": "specifies whether the returned string should also contain any parent messages", 
                "name": "include_parent"
            }
        ], 
        "path": "php/httpmessage.tostring", 
        "type": "HTTP"
    }, 
    "HttpQueryString": {
        "description": "", 
        "name": "HttpQueryString", 
        "overview": "final public __construct ([ bool $global = true [, mixed $add ]] )", 
        "parameters": [], 
        "path": "php/class.httpquerystring", 
        "type": "HTTP"
    }, 
    "HttpQueryString::__construct": {
        "description": "Creates a new HttpQueryString object instance.", 
        "name": "HttpQueryString::__construct", 
        "overview": "final public HttpQueryString::__construct ([ bool $global = true [, mixed $add ]] )", 
        "parameters": [
            {
                "descr": "whether to operate on $_GET and $_SERVER['QUERY_STRING']", 
                "name": "global"
            }, 
            {
                "descr": "additional/initial query string parameters", 
                "name": "add"
            }
        ], 
        "path": "php/httpquerystring.construct", 
        "type": "HTTP"
    }, 
    "HttpQueryString::get": {
        "description": "Get (part of) the query string.", 
        "name": "HttpQueryString::get", 
        "overview": "public mixed HttpQueryString::get ([ string $key [, mixed $type = 0 [, mixed $defval = NULL [, bool $delete = false ]]]] )", 
        "parameters": [
            {
                "descr": "key of the query string param to retrieve", 
                "name": "key"
            }, 
            {
                "descr": "which variable type to enforce", 
                "name": "type"
            }, 
            {
                "descr": "default value if key does not exist", 
                "name": "defval"
            }, 
            {
                "descr": "whether to remove the key/value pair from the query string", 
                "name": "delete"
            }
        ], 
        "path": "php/httpquerystring.get", 
        "type": "HTTP"
    }, 
    "HttpQueryString::mod": {
        "description": "Copies the query string object and sets provided params at the clone.", 
        "name": "HttpQueryString::mod", 
        "overview": "public HttpQueryString HttpQueryString::mod ( mixed $params )", 
        "parameters": [
            {
                "descr": "query string params to add", 
                "name": "params"
            }
        ], 
        "path": "php/httpquerystring.mod", 
        "type": "HTTP"
    }, 
    "HttpQueryString::set": {
        "description": "Set query string entry/entries. NULL values will unset the variable.", 
        "name": "HttpQueryString::set", 
        "overview": "public string HttpQueryString::set ( mixed $params )", 
        "parameters": [
            {
                "descr": "query string params to add", 
                "name": "params"
            }
        ], 
        "path": "php/httpquerystring.set", 
        "type": "HTTP"
    }, 
    "HttpQueryString::singleton": {
        "description": "Get a single instance (differentiates between the global setting).", 
        "name": "HttpQueryString::singleton", 
        "overview": "static public HttpQueryString HttpQueryString::singleton ([ bool $global = true ] )", 
        "parameters": [
            {
                "descr": "whether to operate on $_GET and $_SERVER['QUERY_STRING']", 
                "name": "global"
            }
        ], 
        "path": "php/httpquerystring.singleton", 
        "type": "HTTP"
    }, 
    "HttpQueryString::toArray": {
        "description": "Get the query string represented as associative array.", 
        "name": "HttpQueryString::toArray", 
        "overview": "public array HttpQueryString::toArray ( void )", 
        "parameters": [], 
        "path": "php/httpquerystring.toarray", 
        "type": "HTTP"
    }, 
    "HttpQueryString::toString": {
        "description": "Get the query string.", 
        "name": "HttpQueryString::toString", 
        "overview": "public string HttpQueryString::toString ( void )", 
        "parameters": [], 
        "path": "php/httpquerystring.tostring", 
        "type": "HTTP"
    }, 
    "HttpQueryString::xlate": {
        "description": "Converts the query string from the source encoding ie to the target encoding oe.", 
        "name": "HttpQueryString::xlate", 
        "overview": "public bool HttpQueryString::xlate ( string $ie , string $oe )", 
        "parameters": [
            {
                "descr": "input encoding", 
                "name": "ie"
            }, 
            {
                "descr": "output encoding", 
                "name": "oe"
            }
        ], 
        "path": "php/httpquerystring.xlate", 
        "type": "HTTP"
    }, 
    "HttpRequest": {
        "description": "", 
        "name": "HttpRequest", 
        "overview": "public bool addCookies ( array $cookies )", 
        "parameters": [], 
        "path": "php/class.httprequest", 
        "type": "HTTP"
    }, 
    "HttpRequest::__construct": {
        "description": "Instantiate a new HttpRequest object.", 
        "name": "HttpRequest::__construct", 
        "overview": "public HttpRequest::__construct ([ string $url [, int $request_method = HTTP_METH_GET [, array $options ]]] )", 
        "parameters": [
            {
                "descr": "the target request url", 
                "name": "url"
            }, 
            {
                "descr": "the request method to use", 
                "name": "request_method"
            }, 
            {
                "descr": "an associative array with request options", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.construct", 
        "type": "HTTP"
    }, 
    "HttpRequest::addCookies": {
        "description": "Add custom cookies.", 
        "name": "HttpRequest::addCookies", 
        "overview": "public bool HttpRequest::addCookies ( array $cookies )", 
        "parameters": [
            {
                "descr": "an associative array containing any cookie name/value pairs to add", 
                "name": "cookies"
            }
        ], 
        "path": "php/httprequest.addcookies", 
        "type": "HTTP"
    }, 
    "HttpRequest::addHeaders": {
        "description": "Add request header name/value pairs.", 
        "name": "HttpRequest::addHeaders", 
        "overview": "public bool HttpRequest::addHeaders ( array $headers )", 
        "parameters": [
            {
                "descr": "an associative array as parameter containing additional header name/value pairs", 
                "name": "headers"
            }
        ], 
        "path": "php/httprequest.addheaders", 
        "type": "HTTP"
    }, 
    "HttpRequest::addPostFields": {
        "description": "Adds POST data entries, leaving previously set unchanged, unless a post entry with the same name already exists.", 
        "name": "HttpRequest::addPostFields", 
        "overview": "public bool HttpRequest::addPostFields ( array $post_data )", 
        "parameters": [
            {
                "descr": "an associative array as parameter containing the post fields", 
                "name": "post_data"
            }
        ], 
        "path": "php/httprequest.addpostfields", 
        "type": "HTTP"
    }, 
    "HttpRequest::addPostFile": {
        "description": "Add a file to the POST request, leaving previously set files unchanged.", 
        "name": "HttpRequest::addPostFile", 
        "overview": "public bool HttpRequest::addPostFile ( string $name , string $file [, string $content_type = \"application/x-octetstream\" ] )", 
        "parameters": [
            {
                "descr": "the form element name", 
                "name": "name"
            }, 
            {
                "descr": "the path to the file", 
                "name": "file"
            }, 
            {
                "descr": "the content type of the file", 
                "name": "content_type"
            }
        ], 
        "path": "php/httprequest.addpostfile", 
        "type": "HTTP"
    }, 
    "HttpRequest::addPutData": {
        "description": "Add PUT data, leaving previously set PUT data unchanged.", 
        "name": "HttpRequest::addPutData", 
        "overview": "public bool HttpRequest::addPutData ( string $put_data )", 
        "parameters": [
            {
                "descr": "the data to concatenate", 
                "name": "put_data"
            }
        ], 
        "path": "php/httprequest.addputdata", 
        "type": "HTTP"
    }, 
    "HttpRequest::addQueryData": {
        "description": "Add parameters to the query parameter list, leaving previously set unchanged.", 
        "name": "HttpRequest::addQueryData", 
        "overview": "public bool HttpRequest::addQueryData ( array $query_params )", 
        "parameters": [
            {
                "descr": "an associative array as parameter containing the query fields to add", 
                "name": "query_params"
            }
        ], 
        "path": "php/httprequest.addquerydata", 
        "type": "HTTP"
    }, 
    "HttpRequest::addRawPostData": {
        "description": "Add raw post data, leaving previously set raw post data unchanged.", 
        "name": "HttpRequest::addRawPostData", 
        "overview": "public bool HttpRequest::addRawPostData ( string $raw_post_data )", 
        "parameters": [
            {
                "descr": "the raw post data to concatenate", 
                "name": "raw_post_data"
            }
        ], 
        "path": "php/httprequest.addrawpostdata", 
        "type": "HTTP"
    }, 
    "HttpRequest::addSslOptions": {
        "description": "Set additional SSL options.", 
        "name": "HttpRequest::addSslOptions", 
        "overview": "public bool HttpRequest::addSslOptions ( array $options )", 
        "parameters": [
            {
                "descr": "an associative array as parameter containing additional SSL specific options", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.addssloptions", 
        "type": "HTTP"
    }, 
    "HttpRequest::clearHistory": {
        "description": "Clears all history messages.", 
        "name": "HttpRequest::clearHistory", 
        "overview": "public void HttpRequest::clearHistory ( void )", 
        "parameters": [], 
        "path": "php/httprequest.clearhistory", 
        "type": "HTTP"
    }, 
    "HttpRequest::enableCookies": {
        "description": "Enable automatic sending of received cookies.", 
        "name": "HttpRequest::enableCookies", 
        "overview": "public bool HttpRequest::enableCookies ( void )", 
        "parameters": [], 
        "path": "php/httprequest.enablecookies", 
        "type": "HTTP"
    }, 
    "HttpRequest::getContentType": {
        "description": "Get the previously set content type.", 
        "name": "HttpRequest::getContentType", 
        "overview": "public string HttpRequest::getContentType ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getcontenttype", 
        "type": "HTTP"
    }, 
    "HttpRequest::getCookies": {
        "description": "Get previously set cookies.", 
        "name": "HttpRequest::getCookies", 
        "overview": "public array HttpRequest::getCookies ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getcookies", 
        "type": "HTTP"
    }, 
    "HttpRequest::getHeaders": {
        "description": "Get previously set request headers.", 
        "name": "HttpRequest::getHeaders", 
        "overview": "public array HttpRequest::getHeaders ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getheaders", 
        "type": "HTTP"
    }, 
    "HttpRequest::getHistory": {
        "description": "Get all sent requests and received responses as an HttpMessage object.", 
        "name": "HttpRequest::getHistory", 
        "overview": "public HttpMessage HttpRequest::getHistory ( void )", 
        "parameters": [], 
        "path": "php/httprequest.gethistory", 
        "type": "HTTP"
    }, 
    "HttpRequest::getMethod": {
        "description": "Get the previously set request method.", 
        "name": "HttpRequest::getMethod", 
        "overview": "public int HttpRequest::getMethod ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getmethod", 
        "type": "HTTP"
    }, 
    "HttpRequest::getOptions": {
        "description": "Get currently set options.", 
        "name": "HttpRequest::getOptions", 
        "overview": "public array HttpRequest::getOptions ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getoptions", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPostFields": {
        "description": "Get previously set POST data.", 
        "name": "HttpRequest::getPostFields", 
        "overview": "public array HttpRequest::getPostFields ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getpostfields", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPostFiles": {
        "description": "Get all previously added POST files.", 
        "name": "HttpRequest::getPostFiles", 
        "overview": "public array HttpRequest::getPostFiles ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getpostfiles", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPutData": {
        "description": "Get previously set PUT data.", 
        "name": "HttpRequest::getPutData", 
        "overview": "public string HttpRequest::getPutData ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getputdata", 
        "type": "HTTP"
    }, 
    "HttpRequest::getPutFile": {
        "description": "Get previously set put file.", 
        "name": "HttpRequest::getPutFile", 
        "overview": "public string HttpRequest::getPutFile ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getputfile", 
        "type": "HTTP"
    }, 
    "HttpRequest::getQueryData": {
        "description": "Get the current query data in form of an urlencoded query string.", 
        "name": "HttpRequest::getQueryData", 
        "overview": "public string HttpRequest::getQueryData ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getquerydata", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRawPostData": {
        "description": "Get previously set raw post data.", 
        "name": "HttpRequest::getRawPostData", 
        "overview": "public string HttpRequest::getRawPostData ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getrawpostdata", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRawRequestMessage": {
        "description": "Get sent HTTP message.", 
        "name": "HttpRequest::getRawRequestMessage", 
        "overview": "public string HttpRequest::getRawRequestMessage ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getrawrequestmessage", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRawResponseMessage": {
        "description": "Get the entire HTTP response.", 
        "name": "HttpRequest::getRawResponseMessage", 
        "overview": "public string HttpRequest::getRawResponseMessage ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getrawresponsemessage", 
        "type": "HTTP"
    }, 
    "HttpRequest::getRequestMessage": {
        "description": "Get sent HTTP message.", 
        "name": "HttpRequest::getRequestMessage", 
        "overview": "public HttpMessage HttpRequest::getRequestMessage ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getrequestmessage", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseBody": {
        "description": "Get the response body after the request has been sent.", 
        "name": "HttpRequest::getResponseBody", 
        "overview": "public string HttpRequest::getResponseBody ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getresponsebody", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseCode": {
        "description": "Get the response code after the request has been sent.", 
        "name": "HttpRequest::getResponseCode", 
        "overview": "public int HttpRequest::getResponseCode ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getresponsecode", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseCookies": {
        "description": "Get response cookie(s) after the request has been sent.", 
        "name": "HttpRequest::getResponseCookies", 
        "overview": "public array HttpRequest::getResponseCookies ([ int $flags = 0 [, array $allowed_extras ]] )", 
        "parameters": [
            {
                "descr": "http_parse_cookie() flags", 
                "name": "flags"
            }, 
            {
                "descr": "allowed keys treated as extra information instead of cookie names", 
                "name": "allowed_extras"
            }
        ], 
        "path": "php/httprequest.getresponsecookies", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseData": {
        "description": "* Get all response data after the request has been sent.", 
        "name": "HttpRequest::getResponseData", 
        "overview": "public array HttpRequest::getResponseData ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getresponsedata", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseHeader": {
        "description": "Get response header(s) after the request has been sent.", 
        "name": "HttpRequest::getResponseHeader", 
        "overview": "public mixed HttpRequest::getResponseHeader ([ string $name ] )", 
        "parameters": [
            {
                "descr": "header to read; if empty, all response headers will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/httprequest.getresponseheader", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseInfo": {
        "description": "Get response info after the request has been sent.", 
        "name": "HttpRequest::getResponseInfo", 
        "overview": "public mixed HttpRequest::getResponseInfo ([ string $name ] )", 
        "parameters": [
            {
                "descr": "the info to read; if empty or omitted, an associative array containing all available info will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/httprequest.getresponseinfo", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseMessage": {
        "description": "Get the full response as HttpMessage object after the request has been sent.", 
        "name": "HttpRequest::getResponseMessage", 
        "overview": "public HttpMessage HttpRequest::getResponseMessage ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getresponsemessage", 
        "type": "HTTP"
    }, 
    "HttpRequest::getResponseStatus": {
        "description": "Get the response status (i.e. the string after the response code) after the message has been sent.", 
        "name": "HttpRequest::getResponseStatus", 
        "overview": "public string HttpRequest::getResponseStatus ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getresponsestatus", 
        "type": "HTTP"
    }, 
    "HttpRequest::getSslOptions": {
        "description": "Get previously set SSL options.", 
        "name": "HttpRequest::getSslOptions", 
        "overview": "public array HttpRequest::getSslOptions ( void )", 
        "parameters": [], 
        "path": "php/httprequest.getssloptions", 
        "type": "HTTP"
    }, 
    "HttpRequest::getUrl": {
        "description": "Get the previously set request URL.", 
        "name": "HttpRequest::getUrl", 
        "overview": "public string HttpRequest::getUrl ( void )", 
        "parameters": [], 
        "path": "php/httprequest.geturl", 
        "type": "HTTP"
    }, 
    "HttpRequest::resetCookies": {
        "description": "Reset all automatically received/sent cookies.", 
        "name": "HttpRequest::resetCookies", 
        "overview": "public bool HttpRequest::resetCookies ([ bool $session_only = false ] )", 
        "parameters": [
            {
                "descr": "whether only session cookies should be reset (needs libcurl >= v7.15.4, else libcurl >= v7.14.1)", 
                "name": "session_only"
            }
        ], 
        "path": "php/httprequest.resetcookies", 
        "type": "HTTP"
    }, 
    "HttpRequest::send": {
        "description": "Send the HTTP request.", 
        "name": "HttpRequest::send", 
        "overview": "public HttpMessage HttpRequest::send ( void )", 
        "parameters": [], 
        "path": "php/httprequest.send", 
        "type": "HTTP"
    }, 
    "HttpRequest::setBody": {
        "description": "Set request body to send, overwriting previously set request body.", 
        "name": "HttpRequest::setBody", 
        "overview": "bool HttpRequest::setBody ([ string $request_body_data ] )", 
        "parameters": [
            {
                "descr": "The request body to overwrite the existing request body with. ", 
                "name": "request_body_data"
            }
        ], 
        "path": "php/httprequest.setbody", 
        "type": "HTTP"
    }, 
    "HttpRequest::setContentType": {
        "description": "Set the content type the post request should have.", 
        "name": "HttpRequest::setContentType", 
        "overview": "public bool HttpRequest::setContentType ( string $content_type )", 
        "parameters": [
            {
                "descr": "the content type of the request (primary/secondary)", 
                "name": "content_type"
            }
        ], 
        "path": "php/httprequest.setcontenttype", 
        "type": "HTTP"
    }, 
    "HttpRequest::setCookies": {
        "description": "Set custom cookies.", 
        "name": "HttpRequest::setCookies", 
        "overview": "public bool HttpRequest::setCookies ([ array $cookies ] )", 
        "parameters": [
            {
                "descr": "an associative array as parameter containing cookie name/value pairs; if empty or omitted, all previously set cookies will be unset", 
                "name": "cookies"
            }
        ], 
        "path": "php/httprequest.setcookies", 
        "type": "HTTP"
    }, 
    "HttpRequest::setHeaders": {
        "description": "Set request header name/value pairs.", 
        "name": "HttpRequest::setHeaders", 
        "overview": "public bool HttpRequest::setHeaders ([ array $headers ] )", 
        "parameters": [
            {
                "descr": "an associative array as parameter containing header name/value pairs; if empty or omitted, all previously set headers will be unset", 
                "name": "headers"
            }
        ], 
        "path": "php/httprequest.setheaders", 
        "type": "HTTP"
    }, 
    "HttpRequest::setMethod": {
        "description": "Set the request method.", 
        "name": "HttpRequest::setMethod", 
        "overview": "public bool HttpRequest::setMethod ( int $request_method )", 
        "parameters": [
            {
                "descr": "the request method to use", 
                "name": "request_method"
            }
        ], 
        "path": "php/httprequest.setmethod", 
        "type": "HTTP"
    }, 
    "HttpRequest::setOptions": {
        "description": "Set the request options to use.", 
        "name": "HttpRequest::setOptions", 
        "overview": "public bool HttpRequest::setOptions ([ array $options ] )", 
        "parameters": [
            {
                "descr": "an associative array, which values will overwrite the currently set request options; if empty or omitted, the options of the HttpRequest object will be reset", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.setoptions", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPostFields": {
        "description": "Set the POST data entries, overwriting previously set POST data.", 
        "name": "HttpRequest::setPostFields", 
        "overview": "public bool HttpRequest::setPostFields ( array $post_data )", 
        "parameters": [
            {
                "descr": "an associative array containing the post fields; if empty, the post data will be unset", 
                "name": "post_data"
            }
        ], 
        "path": "php/httprequest.setpostfields", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPostFiles": {
        "description": "Set files to post, overwriting previously set post files.", 
        "name": "HttpRequest::setPostFiles", 
        "overview": "public bool HttpRequest::setPostFiles ( array $post_files )", 
        "parameters": [
            {
                "descr": "an array containing the files to post; if empty, the post files will be unset", 
                "name": "post_files"
            }
        ], 
        "path": "php/httprequest.setpostfiles", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPutData": {
        "description": "Set PUT data to send, overwriting previously set PUT data.", 
        "name": "HttpRequest::setPutData", 
        "overview": "public bool HttpRequest::setPutData ([ string $put_data ] )", 
        "parameters": [
            {
                "descr": "the data to upload", 
                "name": "put_data"
            }
        ], 
        "path": "php/httprequest.setputdata", 
        "type": "HTTP"
    }, 
    "HttpRequest::setPutFile": {
        "description": "Set file to put. Affects only PUT requests.", 
        "name": "HttpRequest::setPutFile", 
        "overview": "public bool HttpRequest::setPutFile ([ string $file = \"\" ] )", 
        "parameters": [
            {
                "descr": "the path to the file to send; if empty or omitted the put file will be unset", 
                "name": "file"
            }
        ], 
        "path": "php/httprequest.setputfile", 
        "type": "HTTP"
    }, 
    "HttpRequest::setQueryData": {
        "description": "Set the URL query parameters to use, overwriting previously set query parameters.", 
        "name": "HttpRequest::setQueryData", 
        "overview": "public bool HttpRequest::setQueryData ( mixed $query_data )", 
        "parameters": [
            {
                "descr": "a string or associative array parameter containing the pre-encoded query string or to be encoded query fields; if empty, the query data will be unset", 
                "name": "query_data"
            }
        ], 
        "path": "php/httprequest.setquerydata", 
        "type": "HTTP"
    }, 
    "HttpRequest::setRawPostData": {
        "description": "Set raw post data to send, overwriting previously set raw post data. Don't forget to specify a content type. Affects only POST and custom requests.", 
        "name": "HttpRequest::setRawPostData", 
        "overview": "public bool HttpRequest::setRawPostData ([ string $raw_post_data ] )", 
        "parameters": [
            {
                "descr": "raw post data", 
                "name": "raw_post_data"
            }
        ], 
        "path": "php/httprequest.setrawpostdata", 
        "type": "HTTP"
    }, 
    "HttpRequest::setSslOptions": {
        "description": "Set SSL options.", 
        "name": "HttpRequest::setSslOptions", 
        "overview": "public bool HttpRequest::setSslOptions ([ array $options ] )", 
        "parameters": [
            {
                "descr": "an associative array containing any SSL specific options; if empty or omitted, the SSL options will be reset", 
                "name": "options"
            }
        ], 
        "path": "php/httprequest.setssloptions", 
        "type": "HTTP"
    }, 
    "HttpRequest::setUrl": {
        "description": "Set the request URL.", 
        "name": "HttpRequest::setUrl", 
        "overview": "public bool HttpRequest::setUrl ( string $url )", 
        "parameters": [
            {
                "descr": "the request url", 
                "name": "url"
            }
        ], 
        "path": "php/httprequest.seturl", 
        "type": "HTTP"
    }, 
    "HttpRequestPool": {
        "description": "", 
        "name": "HttpRequestPool", 
        "overview": "public bool attach ( HttpRequest $request )", 
        "parameters": [], 
        "path": "php/class.httprequestpool", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::__construct": {
        "description": "Instantiate a new HttpRequestPool object. An HttpRequestPool is able to send several HttpRequests in parallel.", 
        "name": "HttpRequestPool::__construct", 
        "overview": "public HttpRequestPool::__construct ([ HttpRequest $request [, HttpRequest $... ]] )", 
        "parameters": [
            {
                "descr": "HttpRequest object to attach", 
                "name": "request"
            }
        ], 
        "path": "php/httprequestpool.construct", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::__destruct": {
        "description": "Clean up HttpRequestPool object.", 
        "name": "HttpRequestPool::__destruct", 
        "overview": "void HttpRequestPool::__destruct ( void )", 
        "parameters": [], 
        "path": "php/httprequestpool.destruct", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::attach": {
        "description": "Attach an HttpRequest object to this HttpRequestPool.", 
        "name": "HttpRequestPool::attach", 
        "overview": "public bool HttpRequestPool::attach ( HttpRequest $request )", 
        "parameters": [
            {
                "descr": "an HttpRequest object not already attached to any HttpRequestPool object", 
                "name": "request"
            }
        ], 
        "path": "php/httprequestpool.attach", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::detach": {
        "description": "Detach an HttpRequest object from this HttpRequestPool.", 
        "name": "HttpRequestPool::detach", 
        "overview": "bool HttpRequestPool::detach ( HttpRequest $request )", 
        "parameters": [
            {
                "descr": "an HttpRequest object attached to this HttpRequestPool object", 
                "name": "request"
            }
        ], 
        "path": "php/httprequestpool.detach", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::getAttachedRequests": {
        "description": "Get attached HttpRequest objects.", 
        "name": "HttpRequestPool::getAttachedRequests", 
        "overview": "array HttpRequestPool::getAttachedRequests ( void )", 
        "parameters": [], 
        "path": "php/httprequestpool.getattachedrequests", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::getFinishedRequests": {
        "description": "Get attached HttpRequest objects that already have finished their work.", 
        "name": "HttpRequestPool::getFinishedRequests", 
        "overview": "array HttpRequestPool::getFinishedRequests ( void )", 
        "parameters": [], 
        "path": "php/httprequestpool.getfinishedrequests", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::reset": {
        "description": "Detach all attached HttpRequest objects.", 
        "name": "HttpRequestPool::reset", 
        "overview": "void HttpRequestPool::reset ( void )", 
        "parameters": [], 
        "path": "php/httprequestpool.reset", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::send": {
        "description": "Send all attached HttpRequest objects in parallel.", 
        "name": "HttpRequestPool::send", 
        "overview": "bool HttpRequestPool::send ( void )", 
        "parameters": [], 
        "path": "php/httprequestpool.send", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::socketPerform": {
        "description": "Returns TRUE until each request has finished its transaction.", 
        "name": "HttpRequestPool::socketPerform", 
        "overview": "protected bool HttpRequestPool::socketPerform ( void )", 
        "parameters": [], 
        "path": "php/httprequestpool.socketperform", 
        "type": "HTTP"
    }, 
    "HttpRequestPool::socketSelect": {
        "description": "", 
        "name": "HttpRequestPool::socketSelect", 
        "overview": "protected bool HttpRequestPool::socketSelect ([ float $timeout = 0 ] )", 
        "parameters": [], 
        "path": "php/httprequestpool.socketselect", 
        "type": "HTTP"
    }, 
    "HttpResponse": {
        "description": "", 
        "name": "HttpResponse", 
        "overview": "static void capture ( void )", 
        "parameters": [], 
        "path": "php/class.httpresponse", 
        "type": "HTTP"
    }, 
    "HttpResponse::capture": {
        "description": "Capture script output.", 
        "name": "HttpResponse::capture", 
        "overview": "static void HttpResponse::capture ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.capture", 
        "type": "HTTP"
    }, 
    "HttpResponse::getBufferSize": {
        "description": "Get current buffer size.", 
        "name": "HttpResponse::getBufferSize", 
        "overview": "static int HttpResponse::getBufferSize ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getbuffersize", 
        "type": "HTTP"
    }, 
    "HttpResponse::getCache": {
        "description": "Get current caching setting.", 
        "name": "HttpResponse::getCache", 
        "overview": "static bool HttpResponse::getCache ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getcache", 
        "type": "HTTP"
    }, 
    "HttpResponse::getCacheControl": {
        "description": "Get current Cache-Control header setting.", 
        "name": "HttpResponse::getCacheControl", 
        "overview": "static string HttpResponse::getCacheControl ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getcachecontrol", 
        "type": "HTTP"
    }, 
    "HttpResponse::getContentDisposition": {
        "description": "Get current Content-Disposition setting.", 
        "name": "HttpResponse::getContentDisposition", 
        "overview": "static string HttpResponse::getContentDisposition ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getcontentdisposition", 
        "type": "HTTP"
    }, 
    "HttpResponse::getContentType": {
        "description": "Get current Content-Type header setting.", 
        "name": "HttpResponse::getContentType", 
        "overview": "static string HttpResponse::getContentType ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getcontenttype", 
        "type": "HTTP"
    }, 
    "HttpResponse::getData": {
        "description": "Get the previously set data to be sent.", 
        "name": "HttpResponse::getData", 
        "overview": "static string HttpResponse::getData ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getdata", 
        "type": "HTTP"
    }, 
    "HttpResponse::getETag": {
        "description": "Get calculated or previously set custom ETag.", 
        "name": "HttpResponse::getETag", 
        "overview": "static string HttpResponse::getETag ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getetag", 
        "type": "HTTP"
    }, 
    "HttpResponse::getFile": {
        "description": "Get the previously set file to be sent.", 
        "name": "HttpResponse::getFile", 
        "overview": "static string HttpResponse::getFile ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getfile", 
        "type": "HTTP"
    }, 
    "HttpResponse::getGzip": {
        "description": "Get current gzip'ing setting.", 
        "name": "HttpResponse::getGzip", 
        "overview": "static bool HttpResponse::getGzip ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getgzip", 
        "type": "HTTP"
    }, 
    "HttpResponse::getHeader": {
        "description": "Get header(s) about to be sent.", 
        "name": "HttpResponse::getHeader", 
        "overview": "static mixed HttpResponse::getHeader ([ string $name ] )", 
        "parameters": [
            {
                "descr": "specifies the name of the header to read; if empty or omitted, an associative array with all headers will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/httpresponse.getheader", 
        "type": "HTTP"
    }, 
    "HttpResponse::getLastModified": {
        "description": "Get calculated or previously set custom Last-Modified date.", 
        "name": "HttpResponse::getLastModified", 
        "overview": "static int HttpResponse::getLastModified ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getlastmodified", 
        "type": "HTTP"
    }, 
    "HttpResponse::getRequestBody": {
        "description": "This function is an alias of: http_get_request_body().", 
        "name": "HttpResponse::getRequestBody", 
        "overview": "static string HttpResponse::getRequestBody ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getrequestbody", 
        "type": "HTTP"
    }, 
    "HttpResponse::getRequestBodyStream": {
        "description": "This function is an alias of: http_get_request_body_stream().", 
        "name": "HttpResponse::getRequestBodyStream", 
        "overview": "static resource HttpResponse::getRequestBodyStream ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getrequestbodystream", 
        "type": "HTTP"
    }, 
    "HttpResponse::getRequestHeaders": {
        "description": "This function is an alias of: http_get_request_headers().", 
        "name": "HttpResponse::getRequestHeaders", 
        "overview": "static array HttpResponse::getRequestHeaders ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getrequestheaders", 
        "type": "HTTP"
    }, 
    "HttpResponse::getStream": {
        "description": "Get the previously set resource to be sent.", 
        "name": "HttpResponse::getStream", 
        "overview": "static resource HttpResponse::getStream ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getstream", 
        "type": "HTTP"
    }, 
    "HttpResponse::getThrottleDelay": {
        "description": "Get the current throttle delay.", 
        "name": "HttpResponse::getThrottleDelay", 
        "overview": "static float HttpResponse::getThrottleDelay ( void )", 
        "parameters": [], 
        "path": "php/httpresponse.getthrottledelay", 
        "type": "HTTP"
    }, 
    "HttpResponse::guessContentType": {
        "description": "Attempts to guess the content type of supplied payload through libmagic.", 
        "name": "HttpResponse::guessContentType", 
        "overview": "static string HttpResponse::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )", 
        "parameters": [
            {
                "descr": "specifies the magic.mime database to use", 
                "name": "magic_file"
            }, 
            {
                "descr": "flags for libmagic", 
                "name": "magic_mode"
            }
        ], 
        "path": "php/httpresponse.guesscontenttype", 
        "type": "HTTP"
    }, 
    "HttpResponse::redirect": {
        "description": "This function is an alias of: http_redirect().", 
        "name": "HttpResponse::redirect", 
        "overview": "static void HttpResponse::redirect ([ string $url [, array $params [, bool $session = false [, int $status ]]]] )", 
        "parameters": [], 
        "path": "php/httpresponse.redirect", 
        "type": "HTTP"
    }, 
    "HttpResponse::send": {
        "description": "Finally send the entity.", 
        "name": "HttpResponse::send", 
        "overview": "static bool HttpResponse::send ([ bool $clean_ob = true ] )", 
        "parameters": [
            {
                "descr": "whether to destroy all previously started output handlers and their buffers", 
                "name": "clean_ob"
            }
        ], 
        "path": "php/httpresponse.send", 
        "type": "HTTP"
    }, 
    "HttpResponse::setBufferSize": {
        "description": "Sets the send buffer size of the throttling mechanism.", 
        "name": "HttpResponse::setBufferSize", 
        "overview": "static bool HttpResponse::setBufferSize ( int $bytes )", 
        "parameters": [
            {
                "descr": "the chunk size in bytes", 
                "name": "bytes"
            }
        ], 
        "path": "php/httpresponse.setbuffersize", 
        "type": "HTTP"
    }, 
    "HttpResponse::setCache": {
        "description": "Whether it should be attempted to cache the entity.", 
        "name": "HttpResponse::setCache", 
        "overview": "static bool HttpResponse::setCache ( bool $cache )", 
        "parameters": [
            {
                "descr": "whether caching should be attempted", 
                "name": "cache"
            }
        ], 
        "path": "php/httpresponse.setcache", 
        "type": "HTTP"
    }, 
    "HttpResponse::setCacheControl": {
        "description": "Define a custom Cache-Control header, usually being private or public;", 
        "name": "HttpResponse::setCacheControl", 
        "overview": "static bool HttpResponse::setCacheControl ( string $control [, int $max_age = 0 [, bool $must_revalidate = true ]] )", 
        "parameters": [
            {
                "descr": "the primary cache control setting", 
                "name": "control"
            }, 
            {
                "descr": "the max-age in seconds, suggesting how long the cache entry is valid on the client side", 
                "name": "max_age"
            }, 
            {
                "descr": "whether the cached entity should be revalidated by the client for every request", 
                "name": "must_revalidate"
            }
        ], 
        "path": "php/httpresponse.setcachecontrol", 
        "type": "HTTP"
    }, 
    "HttpResponse::setContentDisposition": {
        "description": "Set the Content-Disposition. The Content-Disposition header is very useful if the data actually being sent came from a file or something similar, that should be \"saved\" by the client/user (i.e. by the browser's \"Save as...\" popup window).", 
        "name": "HttpResponse::setContentDisposition", 
        "overview": "static bool HttpResponse::setContentDisposition ( string $filename [, bool $inline = false ] )", 
        "parameters": [
            {
                "descr": "the file name the \"Save as...\" dialog should display", 
                "name": "filename"
            }, 
            {
                "descr": "if set to true and the user agent knows how to handle the content type, it will probably not cause the popup window to be shown", 
                "name": "inline"
            }
        ], 
        "path": "php/httpresponse.setcontentdisposition", 
        "type": "HTTP"
    }, 
    "HttpResponse::setContentType": {
        "description": "Set the Content-Type of the sent entity.", 
        "name": "HttpResponse::setContentType", 
        "overview": "static bool HttpResponse::setContentType ( string $content_type )", 
        "parameters": [
            {
                "descr": "the content type of the sent entity (primary/secondary)", 
                "name": "content_type"
            }
        ], 
        "path": "php/httpresponse.setcontenttype", 
        "type": "HTTP"
    }, 
    "HttpResponse::setData": {
        "description": "Set the data to be sent.", 
        "name": "HttpResponse::setData", 
        "overview": "static bool HttpResponse::setData ( mixed $data )", 
        "parameters": [
            {
                "descr": "data to send", 
                "name": "data"
            }
        ], 
        "path": "php/httpresponse.setdata", 
        "type": "HTTP"
    }, 
    "HttpResponse::setETag": {
        "description": "Set a custom ETag. Use this only if you know what you're doing.", 
        "name": "HttpResponse::setETag", 
        "overview": "static bool HttpResponse::setETag ( string $etag )", 
        "parameters": [
            {
                "descr": "unquoted string as parameter containing the ETag", 
                "name": "etag"
            }
        ], 
        "path": "php/httpresponse.setetag", 
        "type": "HTTP"
    }, 
    "HttpResponse::setFile": {
        "description": "Set the file to be sent.", 
        "name": "HttpResponse::setFile", 
        "overview": "static bool HttpResponse::setFile ( string $file )", 
        "parameters": [
            {
                "descr": "the path to the file to send", 
                "name": "file"
            }
        ], 
        "path": "php/httpresponse.setfile", 
        "type": "HTTP"
    }, 
    "HttpResponse::setGzip": {
        "description": "Enable on-thy-fly gzip'ing of the sent entity.", 
        "name": "HttpResponse::setGzip", 
        "overview": "static bool HttpResponse::setGzip ( bool $gzip )", 
        "parameters": [
            {
                "descr": "whether GZip compression should be enabled", 
                "name": "gzip"
            }
        ], 
        "path": "php/httpresponse.setgzip", 
        "type": "HTTP"
    }, 
    "HttpResponse::setHeader": {
        "description": "Send an HTTP header.", 
        "name": "HttpResponse::setHeader", 
        "overview": "static bool HttpResponse::setHeader ( string $name [, mixed $value [, bool $replace = true ]] )", 
        "parameters": [
            {
                "descr": "the name of the header", 
                "name": "name"
            }, 
            {
                "descr": "the value of the header; if not set, no header with this name will be sent", 
                "name": "value"
            }, 
            {
                "descr": "whether an existing header should be replaced", 
                "name": "replace"
            }
        ], 
        "path": "php/httpresponse.setheader", 
        "type": "HTTP"
    }, 
    "HttpResponse::setLastModified": {
        "description": "Set a custom Last-Modified date.", 
        "name": "HttpResponse::setLastModified", 
        "overview": "static bool HttpResponse::setLastModified ( int $timestamp )", 
        "parameters": [
            {
                "descr": "Unix timestamp representing the last modification time of the sent entity", 
                "name": "timestamp"
            }
        ], 
        "path": "php/httpresponse.setlastmodified", 
        "type": "HTTP"
    }, 
    "HttpResponse::setStream": {
        "description": "Set the resource to be sent.", 
        "name": "HttpResponse::setStream", 
        "overview": "static bool HttpResponse::setStream ( resource $stream )", 
        "parameters": [
            {
                "descr": "already opened stream from which the data to send will be read", 
                "name": "stream"
            }
        ], 
        "path": "php/httpresponse.setstream", 
        "type": "HTTP"
    }, 
    "HttpResponse::setThrottleDelay": {
        "description": "Sets the throttle delay.", 
        "name": "HttpResponse::setThrottleDelay", 
        "overview": "static bool HttpResponse::setThrottleDelay ( float $seconds )", 
        "parameters": [
            {
                "descr": "seconds to sleep after each chunk sent", 
                "name": "seconds"
            }
        ], 
        "path": "php/httpresponse.setthrottledelay", 
        "type": "HTTP"
    }, 
    "HttpResponse::status": {
        "description": "This function is an alias of: http_send_status().", 
        "name": "HttpResponse::status", 
        "overview": "static bool HttpResponse::status ( int $status )", 
        "parameters": [], 
        "path": "php/httpresponse.status", 
        "type": "HTTP"
    }, 
    "Imagick": {
        "description": "", 
        "name": "Imagick", 
        "overview": "bool adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [], 
        "path": "php/class.imagick", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::__construct": {
        "description": "Creates an Imagick instance for a specified image or set of images.", 
        "name": "Imagick::__construct", 
        "overview": "Imagick::__construct ( mixed $files )", 
        "parameters": [
            {
                "descr": "The path to an image to load or an array of paths. ", 
                "name": "files"
            }
        ], 
        "path": "php/imagick.construct", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveBlurImage": {
        "description": "Adds an adaptive blur filter to image. The intensity of an adaptive blur depends is dramatically decreased at edge of the image, whereas a standard blur is uniform across the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::adaptiveBlurImage", 
        "overview": "bool Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel. ", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.adaptiveblurimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveResizeImage": {
        "description": "Adaptively resize image with data-dependent triangulation. Avoids blurring across sharp color changes. Most useful when used to shrink images slightly to a slightly smaller \"web size\"; may not look good when a full-sized image is adaptively resized to a thumbnail. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::adaptiveResizeImage", 
        "overview": "bool Imagick::adaptiveResizeImage ( int $columns , int $rows [, bool $bestfit = false ] )", 
        "parameters": [
            {
                "descr": "The number of columns in the scaled image.", 
                "name": "columns"
            }, 
            {
                "descr": "The number of rows in the scaled image.", 
                "name": "rows"
            }, 
            {
                "descr": "Whether to fit the image inside a bounding box.", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.adaptiveresizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveSharpenImage": {
        "description": "Adaptively sharpen the image by sharpening more intensely near image edges and less intensely far from edges. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::adaptiveSharpenImage", 
        "overview": "bool Imagick::adaptiveSharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel. ", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.adaptivesharpenimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::adaptiveThresholdImage": {
        "description": "Selects an individual threshold for each pixel based on the range of intensity values in its local neighborhood. This allows for thresholding of an image whose global intensity histogram doesn't contain distinctive peaks.", 
        "name": "Imagick::adaptiveThresholdImage", 
        "overview": "bool Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset )", 
        "parameters": [
            {
                "descr": "Width of the local neighborhood.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the local neighborhood.", 
                "name": "height"
            }, 
            {
                "descr": "The mean offset", 
                "name": "offset"
            }
        ], 
        "path": "php/imagick.adaptivethresholdimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::addImage": {
        "description": "Adds new image to Imagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.", 
        "name": "Imagick::addImage", 
        "overview": "bool Imagick::addImage ( Imagick $source )", 
        "parameters": [
            {
                "descr": "The source Imagick object", 
                "name": "source"
            }
        ], 
        "path": "php/imagick.addimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::addNoiseImage": {
        "description": "Adds random noise to the image.", 
        "name": "Imagick::addNoiseImage", 
        "overview": "bool Imagick::addNoiseImage ( int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "The type of the noise. Refer to this list of noise constants.", 
                "name": "noise_type"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.addnoiseimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::affineTransformImage": {
        "description": "Transforms an image as dictated by the affine matrix.", 
        "name": "Imagick::affineTransformImage", 
        "overview": "bool Imagick::affineTransformImage ( ImagickDraw $matrix )", 
        "parameters": [
            {
                "descr": "The affine matrix", 
                "name": "matrix"
            }
        ], 
        "path": "php/imagick.affinetransformimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::animateImages": {
        "description": "This method animates the image onto a local or remote X server. This method is not available on Windows. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::animateImages", 
        "overview": "bool Imagick::animateImages ( string $x_server )", 
        "parameters": [
            {
                "descr": "X server address", 
                "name": "x_server"
            }
        ], 
        "path": "php/imagick.animateimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::annotateImage": {
        "description": "Annotates an image with text.", 
        "name": "Imagick::annotateImage", 
        "overview": "bool Imagick::annotateImage ( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text )", 
        "parameters": [
            {
                "descr": "The ImagickDraw object that contains settings for drawing the text", 
                "name": "draw_settings"
            }, 
            {
                "descr": "Horizontal offset in pixels to the left of text", 
                "name": "x"
            }, 
            {
                "descr": "Vertical offset in pixels to the baseline of text", 
                "name": "y"
            }, 
            {
                "descr": "The angle at which to write the text", 
                "name": "angle"
            }, 
            {
                "descr": "The string to draw", 
                "name": "text"
            }
        ], 
        "path": "php/imagick.annotateimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::appendImages": {
        "description": "Append a set of images into one larger image.", 
        "name": "Imagick::appendImages", 
        "overview": "Imagick Imagick::appendImages ( bool $stack = false )", 
        "parameters": [
            {
                "descr": "Whether to stack the images vertically. ", 
                "name": "stack"
            }
        ], 
        "path": "php/imagick.appendimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::averageImages": {
        "description": "Average a set of images.", 
        "name": "Imagick::averageImages", 
        "overview": "Imagick Imagick::averageImages ( void )", 
        "parameters": [], 
        "path": "php/imagick.averageimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::blackThresholdImage": {
        "description": "Is like Imagick::thresholdImage() but forces all pixels below the threshold into black while leaving all pixels above the threshold unchanged.", 
        "name": "Imagick::blackThresholdImage", 
        "overview": "bool Imagick::blackThresholdImage ( mixed $threshold )", 
        "parameters": [
            {
                "descr": "The threshold below which everything turns black", 
                "name": "threshold"
            }
        ], 
        "path": "php/imagick.blackthresholdimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::blurImage": {
        "description": "Adds blur filter to image. Optional third parameter to blur a specific channel.", 
        "name": "Imagick::blurImage", 
        "overview": "bool Imagick::blurImage ( float $radius , float $sigma [, int $channel ] )", 
        "parameters": [
            {
                "descr": "Blur radius", 
                "name": "radius"
            }, 
            {
                "descr": "Standard deviation", 
                "name": "sigma"
            }, 
            {
                "descr": "The Channeltype constant. When not supplied, all channels are blurred.", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.blurimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::borderImage": {
        "description": "Surrounds the image with a border of the color defined by the bordercolor ImagickPixel object.", 
        "name": "Imagick::borderImage", 
        "overview": "bool Imagick::borderImage ( mixed $bordercolor , int $width , int $height )", 
        "parameters": [
            {
                "descr": "ImagickPixel object or a string containing the border color", 
                "name": "bordercolor"
            }, 
            {
                "descr": "Border width", 
                "name": "width"
            }, 
            {
                "descr": "Border height", 
                "name": "height"
            }
        ], 
        "path": "php/imagick.borderimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::charcoalImage": {
        "description": "Simulates a charcoal drawing.", 
        "name": "Imagick::charcoalImage", 
        "overview": "bool Imagick::charcoalImage ( float $radius , float $sigma )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels", 
                "name": "sigma"
            }
        ], 
        "path": "php/imagick.charcoalimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::chopImage": {
        "description": "Removes a region of an image and collapses the image to occupy the removed portion.", 
        "name": "Imagick::chopImage", 
        "overview": "bool Imagick::chopImage ( int $width , int $height , int $x , int $y )", 
        "parameters": [
            {
                "descr": "Width of the chopped area", 
                "name": "width"
            }, 
            {
                "descr": "Height of the chopped area", 
                "name": "height"
            }, 
            {
                "descr": "X origo of the chopped area", 
                "name": "x"
            }, 
            {
                "descr": "Y origo of the chopped area", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.chopimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clear": {
        "description": "Clears all resources associated to Imagick object", 
        "name": "Imagick::clear", 
        "overview": "bool Imagick::clear ( void )", 
        "parameters": [], 
        "path": "php/imagick.clear", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clipImage": {
        "description": "Clips along the first path from the 8BIM profile, if present.", 
        "name": "Imagick::clipImage", 
        "overview": "bool Imagick::clipImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.clipimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clipPathImage": {
        "description": "Clips along the named paths from the 8BIM profile, if present. Later operations take effect inside the path. It may be a number if preceded with #, to work on a numbered path, e.g., \"#1\" to use the first path.", 
        "name": "Imagick::clipPathImage", 
        "overview": "bool Imagick::clipPathImage ( string $pathname , bool $inside )", 
        "parameters": [
            {
                "descr": "The name of the path", 
                "name": "pathname"
            }, 
            {
                "descr": "If TRUE later operations take effect inside clipping path. ", 
                "name": "inside"
            }
        ], 
        "path": "php/imagick.clippathimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clone": {
        "description": "Makes an exact copy of the Imagick object.", 
        "name": "Imagick::clone", 
        "overview": "Imagick Imagick::clone ( void )", 
        "parameters": [], 
        "path": "php/imagick.clone", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::clutImage": {
        "description": "Replaces colors in the image from a color lookup table. Optional second parameter to replace colors in a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::clutImage", 
        "overview": "bool Imagick::clutImage ( Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "Imagick object containing the color lookup table", 
                "name": "lookup_table"
            }, 
            {
                "descr": "The Channeltype constant. When not supplied, default channels are replaced.", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.clutimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::coalesceImages": {
        "description": "Composites a set of images while respecting any page offsets and disposal methods. GIF, MIFF, and MNG animation sequences typically start with an image background and each subsequent image varies in size and offset. Returns a new Imagick object where each image in the sequence is the same size as the first and composited with the next image in the sequence.", 
        "name": "Imagick::coalesceImages", 
        "overview": "Imagick Imagick::coalesceImages ( void )", 
        "parameters": [], 
        "path": "php/imagick.coalesceimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::colorFloodfillImage": {
        "description": "Changes the color value of any pixel that matches target and is an immediate neighbor.", 
        "name": "Imagick::colorFloodfillImage", 
        "overview": "bool Imagick::colorFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y )", 
        "parameters": [
            {
                "descr": "ImagickPixel object containing the fill color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color for the purposes of the floodfill.", 
                "name": "fuzz"
            }, 
            {
                "descr": "ImagickPixel object containing the border color", 
                "name": "bordercolor"
            }, 
            {
                "descr": "X start position of the floodfill", 
                "name": "x"
            }, 
            {
                "descr": "Y start position of the floodfill", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.colorfloodfillimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::colorizeImage": {
        "description": "Blends the fill color with each pixel in the image.", 
        "name": "Imagick::colorizeImage", 
        "overview": "bool Imagick::colorizeImage ( mixed $colorize , mixed $opacity )", 
        "parameters": [
            {
                "descr": "ImagickPixel object or a string containing the colorize color", 
                "name": "colorize"
            }, 
            {
                "descr": "ImagickPixel object or an float containing the opacity value. ", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagick.colorizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::combineImages": {
        "description": "Combines one or more images into a single image. The grayscale value of the pixels of each image in the sequence is assigned in order to the specified channels of the combined image. The typical ordering would be image 1 => Red, 2 => Green, 3 => Blue, etc.", 
        "name": "Imagick::combineImages", 
        "overview": "Imagick Imagick::combineImages ( int $channelType )", 
        "parameters": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channelType"
            }
        ], 
        "path": "php/imagick.combineimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::commentImage": {
        "description": "Adds a comment to your image.", 
        "name": "Imagick::commentImage", 
        "overview": "bool Imagick::commentImage ( string $comment )", 
        "parameters": [
            {
                "descr": "The comment to add", 
                "name": "comment"
            }
        ], 
        "path": "php/imagick.commentimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compareImageChannels": {
        "description": "Compares one or more images and returns the difference image.", 
        "name": "Imagick::compareImageChannels", 
        "overview": "array Imagick::compareImageChannels ( Imagick $image , int $channelType , int $metricType )", 
        "parameters": [
            {
                "descr": "Imagick object containing the image to compare.", 
                "name": "image"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channelType"
            }, 
            {
                "descr": "One of the metric type constants.", 
                "name": "metricType"
            }
        ], 
        "path": "php/imagick.compareimagechannels", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compareImageLayers": {
        "description": "Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::compareImageLayers", 
        "overview": "Imagick Imagick::compareImageLayers ( int $method )", 
        "parameters": [
            {
                "descr": "One of the layer method constants.", 
                "name": "method"
            }
        ], 
        "path": "php/imagick.compareimagelayers", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compareImages": {
        "description": "Returns an array containing a reconstructed image and the difference between images.", 
        "name": "Imagick::compareImages", 
        "overview": "array Imagick::compareImages ( Imagick $compare , int $metric )", 
        "parameters": [
            {
                "descr": "An image to compare to.", 
                "name": "compare"
            }, 
            {
                "descr": "Provide a valid metric type constant. ", 
                "name": "metric"
            }
        ], 
        "path": "php/imagick.compareimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::compositeImage": {
        "description": "Composite one image onto another at the specified offset.", 
        "name": "Imagick::compositeImage", 
        "overview": "bool Imagick::compositeImage ( Imagick $composite_object , int $composite , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "Imagick object which holds the composite image", 
                "name": "composite_object"
            }, 
            {
                "descr": "Composite operator. See Composite Operator Constants", 
                "name": "compose"
            }, 
            {
                "descr": "The column offset of the composited image", 
                "name": "x"
            }, 
            {
                "descr": "The row offset of the composited image", 
                "name": "y"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.compositeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::contrastImage": {
        "description": "Enhances the intensity differences between the lighter and darker elements of the image. Set sharpen to a value other than 0 to increase the image contrast otherwise the contrast is reduced.", 
        "name": "Imagick::contrastImage", 
        "overview": "bool Imagick::contrastImage ( bool $sharpen )", 
        "parameters": [
            {
                "descr": "The sharpen value", 
                "name": "sharpen"
            }
        ], 
        "path": "php/imagick.contrastimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::contrastStretchImage": {
        "description": "Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::contrastStretchImage", 
        "overview": "bool Imagick::contrastStretchImage ( float $black_point , float $white_point [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The black point.", 
                "name": "black_point"
            }, 
            {
                "descr": "The white point.", 
                "name": "white_point"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.contraststretchimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::convolveImage": {
        "description": "Applies a custom convolution kernel to the image.", 
        "name": "Imagick::convolveImage", 
        "overview": "bool Imagick::convolveImage ( array $kernel [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The convolution kernel", 
                "name": "kernel"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.convolveimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::cropImage": {
        "description": "Extracts a region of the image.", 
        "name": "Imagick::cropImage", 
        "overview": "bool Imagick::cropImage ( int $width , int $height , int $x , int $y )", 
        "parameters": [
            {
                "descr": "The width of the crop", 
                "name": "width"
            }, 
            {
                "descr": "The height of the crop", 
                "name": "height"
            }, 
            {
                "descr": "The X coordinate of the cropped region's top left corner", 
                "name": "x"
            }, 
            {
                "descr": "The Y coordinate of the cropped region's top left corner", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.cropimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::cropThumbnailImage": {
        "description": "Creates a fixed size thumbnail by first scaling the image up or down and cropping a specified area from the center.", 
        "name": "Imagick::cropThumbnailImage", 
        "overview": "bool Imagick::cropThumbnailImage ( int $width , int $height )", 
        "parameters": [
            {
                "descr": "The width of the thumbnail", 
                "name": "width"
            }, 
            {
                "descr": "The Height of the thumbnail", 
                "name": "height"
            }
        ], 
        "path": "php/imagick.cropthumbnailimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::current": {
        "description": "Returns reference to the current imagick object with image pointer at the correct sequence.", 
        "name": "Imagick::current", 
        "overview": "Imagick Imagick::current ( void )", 
        "parameters": [], 
        "path": "php/imagick.current", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::cycleColormapImage": {
        "description": "Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.", 
        "name": "Imagick::cycleColormapImage", 
        "overview": "bool Imagick::cycleColormapImage ( int $displace )", 
        "parameters": [
            {
                "descr": "The amount to displace the colormap.", 
                "name": "displace"
            }
        ], 
        "path": "php/imagick.cyclecolormapimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::decipherImage": {
        "description": "Deciphers image that has been enciphered before. The image must be enciphered using Imagick::encipherImage(). This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.", 
        "name": "Imagick::decipherImage", 
        "overview": "bool Imagick::decipherImage ( string $passphrase )", 
        "parameters": [
            {
                "descr": "The passphrase", 
                "name": "passphrase"
            }
        ], 
        "path": "php/imagick.decipherimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::deconstructImages": {
        "description": "Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.", 
        "name": "Imagick::deconstructImages", 
        "overview": "Imagick Imagick::deconstructImages ( void )", 
        "parameters": [], 
        "path": "php/imagick.deconstructimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::deleteImageArtifact": {
        "description": "Deletes an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::deleteImageArtifact", 
        "overview": "bool Imagick::deleteImageArtifact ( string $artifact )", 
        "parameters": [
            {
                "descr": "The name of the artifact to delete", 
                "name": "artifact"
            }
        ], 
        "path": "php/imagick.deleteimageartifact", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::deskewImage": {
        "description": "This method can be used to remove skew from for example scanned images where the paper was not properly placed on the scanning surface. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::deskewImage", 
        "overview": "public bool Imagick::deskewImage ( float $threshold )", 
        "parameters": [
            {
                "descr": "Deskew threshold", 
                "name": "threshold"
            }
        ], 
        "path": "php/imagick.deskewimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::despeckleImage": {
        "description": "Reduces the speckle noise in an image while preserving the edges of the original image.", 
        "name": "Imagick::despeckleImage", 
        "overview": "bool Imagick::despeckleImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.despeckleimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::destroy": {
        "description": "Destroys the Imagick object and frees all resources associated with it. This method is deprecated in favour of Imagick::clear.", 
        "name": "Imagick::destroy", 
        "overview": "bool Imagick::destroy ( void )", 
        "parameters": [], 
        "path": "php/imagick.destroy", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::displayImage": {
        "description": "This method displays an image on a X server.", 
        "name": "Imagick::displayImage", 
        "overview": "bool Imagick::displayImage ( string $servername )", 
        "parameters": [
            {
                "descr": "The X server name", 
                "name": "servername"
            }
        ], 
        "path": "php/imagick.displayimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::displayImages": {
        "description": "Displays an image or image sequence on a X server.", 
        "name": "Imagick::displayImages", 
        "overview": "bool Imagick::displayImages ( string $servername )", 
        "parameters": [
            {
                "descr": "The X server name", 
                "name": "servername"
            }
        ], 
        "path": "php/imagick.displayimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::distortImage": {
        "description": "Distorts an image using various distortion methods, by mapping color lookups of the source image to a new destination image usually of the same size as the source image, unless 'bestfit' is set to TRUE.", 
        "name": "Imagick::distortImage", 
        "overview": "bool Imagick::distortImage ( int $method , array $arguments , bool $bestfit )", 
        "parameters": [
            {
                "descr": "The method of image distortion. ", 
                "name": "method"
            }, 
            {
                "descr": "The arguments for this distortion method", 
                "name": "arguments"
            }, 
            {
                "descr": "Attempt to resize destination to fit distorted source", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.distortimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::drawImage": {
        "description": "Renders the ImagickDraw object on the current image.", 
        "name": "Imagick::drawImage", 
        "overview": "bool Imagick::drawImage ( ImagickDraw $draw )", 
        "parameters": [
            {
                "descr": "The drawing operations to render on the image.", 
                "name": "draw"
            }
        ], 
        "path": "php/imagick.drawimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::edgeImage": {
        "description": "Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.", 
        "name": "Imagick::edgeImage", 
        "overview": "bool Imagick::edgeImage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the operation.", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.edgeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::embossImage": {
        "description": "Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.", 
        "name": "Imagick::embossImage", 
        "overview": "bool Imagick::embossImage ( float $radius , float $sigma )", 
        "parameters": [
            {
                "descr": "The radius of the effect", 
                "name": "radius"
            }, 
            {
                "descr": "The sigma of the effect", 
                "name": "sigma"
            }
        ], 
        "path": "php/imagick.embossimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::encipherImage": {
        "description": "Converts plain pixels to enciphered pixels. The image is not readable until it has been deciphered using Imagick::decipherImage() This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.", 
        "name": "Imagick::encipherImage", 
        "overview": "bool Imagick::encipherImage ( string $passphrase )", 
        "parameters": [
            {
                "descr": "The passphrase", 
                "name": "passphrase"
            }
        ], 
        "path": "php/imagick.encipherimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::enhanceImage": {
        "description": "Applies a digital filter that improves the quality of a noisy image.", 
        "name": "Imagick::enhanceImage", 
        "overview": "bool Imagick::enhanceImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.enhanceimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::equalizeImage": {
        "description": "Equalizes the image histogram.", 
        "name": "Imagick::equalizeImage", 
        "overview": "bool Imagick::equalizeImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.equalizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::evaluateImage": {
        "description": "Applys an arithmetic, relational, or logical expression to an image. Use these operators to lighten or darken an image, to increase or decrease contrast in an image, or to produce the \"negative\" of an image.", 
        "name": "Imagick::evaluateImage", 
        "overview": "bool Imagick::evaluateImage ( int $op , float $constant [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The evaluation operator", 
                "name": "op"
            }, 
            {
                "descr": "The value of the operator", 
                "name": "constant"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.evaluateimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::exportImagePixels": {
        "description": "Exports image pixels into an array. The map defines the ordering of the exported pixels. The size of the returned array is width * height * strlen(map). This method is available if Imagick has been compiled against ImageMagick version 6.4.7 or newer.", 
        "name": "Imagick::exportImagePixels", 
        "overview": "public array Imagick::exportImagePixels ( int $x , int $y , int $width , int $height , string $map , int $STORAGE )", 
        "parameters": [
            {
                "descr": "X-coordinate of the exported area", 
                "name": "x"
            }, 
            {
                "descr": "Y-coordinate of the exported area", 
                "name": "y"
            }, 
            {
                "descr": "Width of the exported aread", 
                "name": "width"
            }, 
            {
                "descr": "Height of the exported area", 
                "name": "height"
            }, 
            {
                "descr": "Ordering of the exported pixels. ", 
                "name": "map"
            }, 
            {
                "descr": "Refer to this list of pixel type constants", 
                "name": "STORAGE"
            }
        ], 
        "path": "php/imagick.exportimagepixels", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::extentImage": {
        "description": "Comfortability method for setting image size. The method sets the image size and allows setting x,y coordinates where the new area begins. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.", 
        "name": "Imagick::extentImage", 
        "overview": "bool Imagick::extentImage ( int $width , int $height , int $x , int $y )", 
        "parameters": [
            {
                "descr": "The new width", 
                "name": "width"
            }, 
            {
                "descr": "The new height", 
                "name": "height"
            }, 
            {
                "descr": "X position for the new size", 
                "name": "x"
            }, 
            {
                "descr": "Y position for the new size", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.extentimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::flattenImages": {
        "description": "Merges a sequence of images. This is useful for combining Photoshop layers into a single image.", 
        "name": "Imagick::flattenImages", 
        "overview": "Imagick Imagick::flattenImages ( void )", 
        "parameters": [], 
        "path": "php/imagick.flattenimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::flipImage": {
        "description": "Creates a vertical mirror image by reflecting the pixels around the central x-axis.", 
        "name": "Imagick::flipImage", 
        "overview": "bool Imagick::flipImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.flipimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::floodFillPaintImage": {
        "description": "Changes the color value of any pixel that matches target and is an immediate neighbor. This method is a replacement for deprecated Imagick::paintFloodFillImage(). This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::floodFillPaintImage", 
        "overview": "bool Imagick::floodFillPaintImage ( mixed $fill , float $fuzz , mixed $target , int $x , int $y , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "ImagickPixel object or a string containing the fill color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color.", 
                "name": "fuzz"
            }, 
            {
                "descr": "ImagickPixel object or a string containing the target color to paint", 
                "name": "target"
            }, 
            {
                "descr": "X start position of the floodfill", 
                "name": "x"
            }, 
            {
                "descr": "Y start position of the floodfill", 
                "name": "y"
            }, 
            {
                "descr": "If TRUE paints any pixel that does not match the target color.", 
                "name": "invert"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.floodfillpaintimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::flopImage": {
        "description": "Creates a horizontal mirror image by reflecting the pixels around the central y-axis.", 
        "name": "Imagick::flopImage", 
        "overview": "bool Imagick::flopImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.flopimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::frameImage": {
        "description": "Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.", 
        "name": "Imagick::frameImage", 
        "overview": "bool Imagick::frameImage ( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel )", 
        "parameters": [
            {
                "descr": "ImagickPixel object or a string representing the matte color", 
                "name": "matte_color"
            }, 
            {
                "descr": "The width of the border", 
                "name": "width"
            }, 
            {
                "descr": "The height of the border", 
                "name": "height"
            }, 
            {
                "descr": "The inner bevel width", 
                "name": "inner_bevel"
            }, 
            {
                "descr": "The outer bevel width", 
                "name": "outer_bevel"
            }
        ], 
        "path": "php/imagick.frameimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::functionImage": {
        "description": "Applies an arithmetic, relational, or logical expression to an image. Use these operators to create lighter or darker versions of an image, to increase or decrease contrast in an image, or to negate the image colors. This method is available if Imagick has been compiled against ImageMagick version 6.4.9 or newer.", 
        "name": "Imagick::functionImage", 
        "overview": "public bool Imagick::functionImage ( int $function , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "Refer to this list of function constants", 
                "name": "function"
            }, 
            {
                "descr": "Array of arguments to pass to this function.", 
                "name": "arguments"
            }
        ], 
        "path": "php/imagick.functionimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::fxImage": {
        "description": "Evaluate expression for each pixel in the image. Consult \u00bb The Fx Special Effects Image Operator for more information.", 
        "name": "Imagick::fxImage", 
        "overview": "Imagick Imagick::fxImage ( string $expression [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The expression.", 
                "name": "expression"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.fximage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::gammaImage": {
        "description": "Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.", 
        "name": "Imagick::gammaImage", 
        "overview": "bool Imagick::gammaImage ( float $gamma [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The amount of gamma-correction.", 
                "name": "gamma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.gammaimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::gaussianBlurImage": {
        "description": "Blurs an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and selects a suitable radius for you.", 
        "name": "Imagick::gaussianBlurImage", 
        "overview": "bool Imagick::gaussianBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel.", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.gaussianblurimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getColorspace": {
        "description": "Gets the global colorspace value. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::getColorspace", 
        "overview": "int Imagick::getColorspace ( void )", 
        "parameters": [], 
        "path": "php/imagick.getcolorspace", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getCompression": {
        "description": "Gets the object compression type.", 
        "name": "Imagick::getCompression", 
        "overview": "int Imagick::getCompression ( void )", 
        "parameters": [], 
        "path": "php/imagick.getcompression", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getCompressionQuality": {
        "description": "Gets the object compression quality.", 
        "name": "Imagick::getCompressionQuality", 
        "overview": "int Imagick::getCompressionQuality ( void )", 
        "parameters": [], 
        "path": "php/imagick.getcompressionquality", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getCopyright": {
        "description": "Returns the ImageMagick API copyright as a string.", 
        "name": "Imagick::getCopyright", 
        "overview": "string Imagick::getCopyright ( void )", 
        "parameters": [], 
        "path": "php/imagick.getcopyright", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getFilename": {
        "description": "Returns the filename associated with an image sequence.", 
        "name": "Imagick::getFilename", 
        "overview": "string Imagick::getFilename ( void )", 
        "parameters": [], 
        "path": "php/imagick.getfilename", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getFont": {
        "description": "Returns the objects font property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::getFont", 
        "overview": "string Imagick::getFont ( void )", 
        "parameters": [], 
        "path": "php/imagick.getfont", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getFormat": {
        "description": "Returns the format of the Imagick object.", 
        "name": "Imagick::getFormat", 
        "overview": "string Imagick::getFormat ( void )", 
        "parameters": [], 
        "path": "php/imagick.getformat", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getGravity": {
        "description": "Gets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::getGravity", 
        "overview": "int Imagick::getGravity ( void )", 
        "parameters": [], 
        "path": "php/imagick.getgravity", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getHomeURL": {
        "description": "Returns the ImageMagick home URL.", 
        "name": "Imagick::getHomeURL", 
        "overview": "string Imagick::getHomeURL ( void )", 
        "parameters": [], 
        "path": "php/imagick.gethomeurl", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImage": {
        "description": "Returns a new Imagick object with the current image sequence.", 
        "name": "Imagick::getImage", 
        "overview": "Imagick Imagick::getImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageAlphaChannel": {
        "description": "Gets the image alpha channel value. The returned value is one of the alpha channel constants. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::getImageAlphaChannel", 
        "overview": "int Imagick::getImageAlphaChannel ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagealphachannel", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageArtifact": {
        "description": "Gets an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::getImageArtifact", 
        "overview": "string Imagick::getImageArtifact ( string $artifact )", 
        "parameters": [
            {
                "descr": "The name of the artifact", 
                "name": "artifact"
            }
        ], 
        "path": "php/imagick.getimageartifact", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBackgroundColor": {
        "description": "Returns the image background color.", 
        "name": "Imagick::getImageBackgroundColor", 
        "overview": "ImagickPixel Imagick::getImageBackgroundColor ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagebackgroundcolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBlob": {
        "description": "Implements direct to memory image formats. It returns the image sequence as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().", 
        "name": "Imagick::getImageBlob", 
        "overview": "string Imagick::getImageBlob ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageblob", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBluePrimary": {
        "description": "Returns the chromaticity blue primary point for the image.", 
        "name": "Imagick::getImageBluePrimary", 
        "overview": "array Imagick::getImageBluePrimary ( void )", 
        "parameters": [
            {
                "descr": "The chromaticity blue primary x-point.", 
                "name": "x"
            }, 
            {
                "descr": "The chromaticity blue primary y-point.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.getimageblueprimary", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageBorderColor": {
        "description": "Returns the image border color.", 
        "name": "Imagick::getImageBorderColor", 
        "overview": "ImagickPixel Imagick::getImageBorderColor ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagebordercolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelDepth": {
        "description": "Gets the depth for a particular image channel.", 
        "name": "Imagick::getImageChannelDepth", 
        "overview": "int Imagick::getImageChannelDepth ( int $channel )", 
        "parameters": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechanneldepth", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelDistortion": {
        "description": "Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metric.", 
        "name": "Imagick::getImageChannelDistortion", 
        "overview": "float Imagick::getImageChannelDistortion ( Imagick $reference , int $channel , int $metric )", 
        "parameters": [
            {
                "descr": "Imagick object to compare to.", 
                "name": "reference"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }, 
            {
                "descr": "One of the metric type constants.", 
                "name": "metric"
            }
        ], 
        "path": "php/imagick.getimagechanneldistortion", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelDistortions": {
        "description": "Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metrics This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.", 
        "name": "Imagick::getImageChannelDistortions", 
        "overview": "float Imagick::getImageChannelDistortions ( Imagick $reference , int $metric [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "Imagick object containing the reference image", 
                "name": "reference"
            }, 
            {
                "descr": "Refer to this list of metric type constants.", 
                "name": "metric"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechanneldistortions", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelExtrema": {
        "description": "Gets the extrema for one or more image channels. Return value is an associative array with the keys \"minima\" and \"maxima\".", 
        "name": "Imagick::getImageChannelExtrema", 
        "overview": "array Imagick::getImageChannelExtrema ( int $channel )", 
        "parameters": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelextrema", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelKurtosis": {
        "description": "Get the kurtosis and skewness of a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.4.9 or newer.", 
        "name": "Imagick::getImageChannelKurtosis", 
        "overview": "public array Imagick::getImageChannelKurtosis ([ int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelkurtosis", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelMean": {
        "description": "Gets the mean and standard deviation of one or more image channels. Return value is an associative array with the keys \"mean\" and \"standardDeviation\".", 
        "name": "Imagick::getImageChannelMean", 
        "overview": "array Imagick::getImageChannelMean ( int $channel )", 
        "parameters": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelmean", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelRange": {
        "description": "Gets the range for one or more image channels. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::getImageChannelRange", 
        "overview": "array Imagick::getImageChannelRange ( int $channel )", 
        "parameters": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.getimagechannelrange", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageChannelStatistics": {
        "description": "Returns statistics for each channel in the image. The statistics include the channel depth, its minima and maxima, the mean, and the standard deviation. You can access the red channel mean, for example, like this:", 
        "name": "Imagick::getImageChannelStatistics", 
        "overview": "array Imagick::getImageChannelStatistics ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagechannelstatistics", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageClipMask": {
        "description": "Returns the image clip mask. The clip mask is an Imagick object containing the clip mask. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::getImageClipMask", 
        "overview": "Imagick Imagick::getImageClipMask ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageclipmask", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageColormapColor": {
        "description": "Returns the color of the specified colormap index.", 
        "name": "Imagick::getImageColormapColor", 
        "overview": "ImagickPixel Imagick::getImageColormapColor ( int $index )", 
        "parameters": [
            {
                "descr": "The offset into the image colormap.", 
                "name": "index"
            }
        ], 
        "path": "php/imagick.getimagecolormapcolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageColors": {
        "description": "Gets the number of unique colors in the image.", 
        "name": "Imagick::getImageColors", 
        "overview": "int Imagick::getImageColors ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagecolors", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageColorspace": {
        "description": "Gets the image colorspace.", 
        "name": "Imagick::getImageColorspace", 
        "overview": "int Imagick::getImageColorspace ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagecolorspace", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageCompose": {
        "description": "Returns the composite operator associated with the image.", 
        "name": "Imagick::getImageCompose", 
        "overview": "int Imagick::getImageCompose ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagecompose", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageCompression": {
        "description": "Gets the current image's compression type.", 
        "name": "Imagick::getImageCompression", 
        "overview": "int Imagick::getImageCompression ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagecompression", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageCompressionQuality": {
        "description": "Gets the current image's compression quality", 
        "name": "Imagick::getImageCompressionQuality", 
        "overview": "int Imagick::getCompressionQuality ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagecompressionquality", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDelay": {
        "description": "Gets the image delay.", 
        "name": "Imagick::getImageDelay", 
        "overview": "int Imagick::getImageDelay ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagedelay", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDepth": {
        "description": "Gets the image depth.", 
        "name": "Imagick::getImageDepth", 
        "overview": "int Imagick::getImageDepth ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagedepth", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDispose": {
        "description": "Gets the image disposal method.", 
        "name": "Imagick::getImageDispose", 
        "overview": "int Imagick::getImageDispose ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagedispose", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageDistortion": {
        "description": "Compares an image to a reconstructed image and returns the specified distortion metric.", 
        "name": "Imagick::getImageDistortion", 
        "overview": "float Imagick::getImageDistortion ( MagickWand $reference , int $metric )", 
        "parameters": [
            {
                "descr": "Imagick object to compare to.", 
                "name": "reference"
            }, 
            {
                "descr": "One of the metric type constants.", 
                "name": "metric"
            }
        ], 
        "path": "php/imagick.getimagedistortion", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageExtrema": {
        "description": "Gets the extrema for the image. Returns an associative array with the keys \"min\" and \"max\".", 
        "name": "Imagick::getImageExtrema", 
        "overview": "array Imagick::getImageExtrema ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageextrema", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageFilename": {
        "description": "Returns the filename of a particular image in a sequence.", 
        "name": "Imagick::getImageFilename", 
        "overview": "string Imagick::getImageFilename ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagefilename", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageFormat": {
        "description": "Returns the format of a particular image in a sequence.", 
        "name": "Imagick::getImageFormat", 
        "overview": "string Imagick::getImageFormat ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageformat", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGamma": {
        "description": "Gets the image gamma.", 
        "name": "Imagick::getImageGamma", 
        "overview": "float Imagick::getImageGamma ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagegamma", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGeometry": {
        "description": "Returns the width and height as an associative array.", 
        "name": "Imagick::getImageGeometry", 
        "overview": "array Imagick::getImageGeometry ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagegeometry", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGravity": {
        "description": "Gets the current gravity value of the image. Unlike Imagick::getGravity(), this method returns the gravity defined for the current image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.", 
        "name": "Imagick::getImageGravity", 
        "overview": "int Imagick::getImageGravity ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagegravity", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageGreenPrimary": {
        "description": "Returns the chromaticity green primary point. Returns an array with the keys \"x\" and \"y\".", 
        "name": "Imagick::getImageGreenPrimary", 
        "overview": "array Imagick::getImageGreenPrimary ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagegreenprimary", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageHeight": {
        "description": "Returns the image height.", 
        "name": "Imagick::getImageHeight", 
        "overview": "int Imagick::getImageHeight ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageheight", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageHistogram": {
        "description": "Returns the image histogram as an array of ImagickPixel objects.", 
        "name": "Imagick::getImageHistogram", 
        "overview": "array Imagick::getImageHistogram ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagehistogram", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageIndex": {
        "description": "Returns the index of the current active image within the Imagick object. This method has been deprecated. See Imagick::getIteratorIndex().", 
        "name": "Imagick::getImageIndex", 
        "overview": "int Imagick::getImageIndex ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageindex", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageInterlaceScheme": {
        "description": "Gets the image interlace scheme.", 
        "name": "Imagick::getImageInterlaceScheme", 
        "overview": "int Imagick::getImageInterlaceScheme ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageinterlacescheme", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageInterpolateMethod": {
        "description": "Returns the interpolation method for the specified image. The method is one of the Imagick::INTERPOLATE_* constants.", 
        "name": "Imagick::getImageInterpolateMethod", 
        "overview": "int Imagick::getImageInterpolateMethod ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageinterpolatemethod", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageIterations": {
        "description": "Gets the image iterations.", 
        "name": "Imagick::getImageIterations", 
        "overview": "int Imagick::getImageIterations ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageiterations", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageLength": {
        "description": "Returns the image length in bytes", 
        "name": "Imagick::getImageLength", 
        "overview": "int Imagick::getImageLength ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagelength", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageMagickLicense": {
        "description": "Returns a string containing the ImageMagick license", 
        "name": "Imagick::getImageMagickLicense", 
        "overview": "string Imagick::getImageMagickLicense ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagemagicklicense", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageMatte": {
        "description": "Returns TRUE if the image has a matte channel otherwise false. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::getImageMatte", 
        "overview": "bool Imagick::getImageMatte ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagematte", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageMatteColor": {
        "description": "Returns the image matte color.", 
        "name": "Imagick::getImageMatteColor", 
        "overview": "ImagickPixel Imagick::getImageMatteColor ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagemattecolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageOrientation": {
        "description": "Gets the image orientation. The return value is one of the orientation constants.", 
        "name": "Imagick::getImageOrientation", 
        "overview": "int Imagick::getImageOrientation ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageorientation", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImagePage": {
        "description": "Returns the page geometry associated with the image in an array with the keys \"width\", \"height\", \"x\", and \"y\".", 
        "name": "Imagick::getImagePage", 
        "overview": "array Imagick::getImagePage ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagepage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImagePixelColor": {
        "description": "Returns the color of the specified pixel.", 
        "name": "Imagick::getImagePixelColor", 
        "overview": "ImagickPixel Imagick::getImagePixelColor ( int $x , int $y )", 
        "parameters": [
            {
                "descr": "The x-coordinate of the pixel", 
                "name": "x"
            }, 
            {
                "descr": "The y-coordinate of the pixel", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.getimagepixelcolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProfile": {
        "description": "Returns the named image profile.", 
        "name": "Imagick::getImageProfile", 
        "overview": "string Imagick::getImageProfile ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the profile to return.", 
                "name": "name"
            }
        ], 
        "path": "php/imagick.getimageprofile", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProfiles": {
        "description": "Returns all associated profiles that match the pattern. If TRUE is passed as second parameter only the profile names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::getImageProfiles", 
        "overview": "array Imagick::getImageProfiles ([ string $pattern = \"*\" [, bool $only_names = true ]] )", 
        "parameters": [
            {
                "descr": "The pattern for profile names.", 
                "name": "pattern"
            }, 
            {
                "descr": "Whether to return only profile names. ", 
                "name": "only_names"
            }
        ], 
        "path": "php/imagick.getimageprofiles", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProperties": {
        "description": "Returns all associated properties that match the pattern. If TRUE is passed as second parameter only the property names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::getImageProperties", 
        "overview": "array Imagick::getImageProperties ([ string $pattern = \"*\" [, bool $only_names = true ]] )", 
        "parameters": [
            {
                "descr": "The pattern for property names.", 
                "name": "pattern"
            }, 
            {
                "descr": "Whether to return only property names. ", 
                "name": "only_names"
            }
        ], 
        "path": "php/imagick.getimageproperties", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageProperty": {
        "description": "Returns the named image property. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.", 
        "name": "Imagick::getImageProperty", 
        "overview": "string Imagick::getImageProperty ( string $name )", 
        "parameters": [
            {
                "descr": "name of the property (for example Exif:DateTime)", 
                "name": "name"
            }
        ], 
        "path": "php/imagick.getimageproperty", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageRedPrimary": {
        "description": "Returns the chromaticity red primary point as an array with the keys \"x\" and \"y\".", 
        "name": "Imagick::getImageRedPrimary", 
        "overview": "array Imagick::getImageRedPrimary ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageredprimary", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageRegion": {
        "description": "Extracts a region of the image and returns it as a new Imagick object.", 
        "name": "Imagick::getImageRegion", 
        "overview": "Imagick Imagick::getImageRegion ( int $width , int $height , int $x , int $y )", 
        "parameters": [
            {
                "descr": "The width of the extracted region.", 
                "name": "width"
            }, 
            {
                "descr": "The height of the extracted region.", 
                "name": "height"
            }, 
            {
                "descr": "X-coordinate of the top-left corner of the extracted region.", 
                "name": "x"
            }, 
            {
                "descr": "Y-coordinate of the top-left corner of the extracted region.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.getimageregion", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageRenderingIntent": {
        "description": "Gets the image rendering intent.", 
        "name": "Imagick::getImageRenderingIntent", 
        "overview": "int Imagick::getImageRenderingIntent ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagerenderingintent", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageResolution": {
        "description": "Gets the image X and Y resolution.", 
        "name": "Imagick::getImageResolution", 
        "overview": "array Imagick::getImageResolution ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageresolution", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageScene": {
        "description": "Gets the image scene.", 
        "name": "Imagick::getImageScene", 
        "overview": "int Imagick::getImageScene ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagescene", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageSignature": {
        "description": "Generates an SHA-256 message digest for the image pixel stream.", 
        "name": "Imagick::getImageSignature", 
        "overview": "string Imagick::getImageSignature ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagesignature", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageSize": {
        "description": "Returns the image length in bytes. Deprecated in favour of Imagick::getImageLength()", 
        "name": "Imagick::getImageSize", 
        "overview": "int Imagick::getImageSize ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagesize", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageTicksPerSecond": {
        "description": "Gets the image ticks-per-second.", 
        "name": "Imagick::getImageTicksPerSecond", 
        "overview": "int Imagick::getImageTicksPerSecond ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagetickspersecond", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageTotalInkDensity": {
        "description": "Gets the image total ink density.", 
        "name": "Imagick::getImageTotalInkDensity", 
        "overview": "float Imagick::getImageTotalInkDensity ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagetotalinkdensity", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageType": {
        "description": "Gets the potential image type.", 
        "name": "Imagick::getImageType", 
        "overview": "int Imagick::getImageType ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagetype", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageUnits": {
        "description": "Gets the image units of resolution.", 
        "name": "Imagick::getImageUnits", 
        "overview": "int Imagick::getImageUnits ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimageunits", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageVirtualPixelMethod": {
        "description": "Returns the virtual pixel method for the specified image.", 
        "name": "Imagick::getImageVirtualPixelMethod", 
        "overview": "int Imagick::getImageVirtualPixelMethod ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagevirtualpixelmethod", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageWhitePoint": {
        "description": "Returns the chromaticity white point as an associative array with the keys \"x\" and \"y\".", 
        "name": "Imagick::getImageWhitePoint", 
        "overview": "array Imagick::getImageWhitePoint ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagewhitepoint", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImageWidth": {
        "description": "Returns the image width.", 
        "name": "Imagick::getImageWidth", 
        "overview": "int Imagick::getImageWidth ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagewidth", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getImagesBlob": {
        "description": "Implements direct to memory image formats. It returns all image sequences as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().", 
        "name": "Imagick::getImagesBlob", 
        "overview": "string Imagick::getImagesBlob ( void )", 
        "parameters": [], 
        "path": "php/imagick.getimagesblob", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getInterlaceScheme": {
        "description": "Gets the object interlace scheme.", 
        "name": "Imagick::getInterlaceScheme", 
        "overview": "int Imagick::getInterlaceScheme ( void )", 
        "parameters": [], 
        "path": "php/imagick.getinterlacescheme", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getIteratorIndex": {
        "description": "Returns the index of the current active image within the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::getIteratorIndex", 
        "overview": "int Imagick::getIteratorIndex ( void )", 
        "parameters": [], 
        "path": "php/imagick.getiteratorindex", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getNumberImages": {
        "description": "Returns the number of images associated with Imagick object.", 
        "name": "Imagick::getNumberImages", 
        "overview": "int Imagick::getNumberImages ( void )", 
        "parameters": [], 
        "path": "php/imagick.getnumberimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getOption": {
        "description": "Returns a value associated within the object for the specified key.", 
        "name": "Imagick::getOption", 
        "overview": "string Imagick::getOption ( string $key )", 
        "parameters": [
            {
                "descr": "The name of the option", 
                "name": "key"
            }
        ], 
        "path": "php/imagick.getoption", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPackageName": {
        "description": "Returns the ImageMagick package name.", 
        "name": "Imagick::getPackageName", 
        "overview": "string Imagick::getPackageName ( void )", 
        "parameters": [], 
        "path": "php/imagick.getpackagename", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPage": {
        "description": "Returns the page geometry associated with the Imagick object in an associative array with the keys \"width\", \"height\", \"x\", and \"y\".", 
        "name": "Imagick::getPage", 
        "overview": "array Imagick::getPage ( void )", 
        "parameters": [], 
        "path": "php/imagick.getpage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPixelIterator": {
        "description": "Returns a MagickPixelIterator.", 
        "name": "Imagick::getPixelIterator", 
        "overview": "ImagickPixelIterator Imagick::getPixelIterator ( void )", 
        "parameters": [], 
        "path": "php/imagick.getpixeliterator", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPixelRegionIterator": {
        "description": "Get an ImagickPixelIterator for an image section.", 
        "name": "Imagick::getPixelRegionIterator", 
        "overview": "ImagickPixelIterator Imagick::getPixelRegionIterator ( int $x , int $y , int $columns , int $rows )", 
        "parameters": [
            {
                "descr": "The x-coordinate of the region.", 
                "name": "x"
            }, 
            {
                "descr": "The y-coordinate of the region.", 
                "name": "y"
            }, 
            {
                "descr": "The width of the region.", 
                "name": "columns"
            }, 
            {
                "descr": "The height of the region.", 
                "name": "rows"
            }
        ], 
        "path": "php/imagick.getpixelregioniterator", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getPointSize": {
        "description": "Returns the objects point size property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::getPointSize", 
        "overview": "float Imagick::getPointSize ( void )", 
        "parameters": [], 
        "path": "php/imagick.getpointsize", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getQuantumDepth": {
        "description": "Returns the Imagick quantum depth as a string.", 
        "name": "Imagick::getQuantumDepth", 
        "overview": "array Imagick::getQuantumDepth ( void )", 
        "parameters": [], 
        "path": "php/imagick.getquantumdepth", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getQuantumRange": {
        "description": "Returns the Imagick quantum range as a string.", 
        "name": "Imagick::getQuantumRange", 
        "overview": "array Imagick::getQuantumRange ( void )", 
        "parameters": [], 
        "path": "php/imagick.getquantumrange", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getReleaseDate": {
        "description": "Returns the ImageMagick release date as a string.", 
        "name": "Imagick::getReleaseDate", 
        "overview": "string Imagick::getReleaseDate ( void )", 
        "parameters": [], 
        "path": "php/imagick.getreleasedate", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getResource": {
        "description": "Returns the specified resource's memory usage in megabytes.", 
        "name": "Imagick::getResource", 
        "overview": "int Imagick::getResource ( int $type )", 
        "parameters": [
            {
                "descr": "Refer to the list of resourcetype constants.", 
                "name": "type"
            }
        ], 
        "path": "php/imagick.getresource", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getResourceLimit": {
        "description": "Returns the specified resource limit.", 
        "name": "Imagick::getResourceLimit", 
        "overview": "int Imagick::getResourceLimit ( int $type )", 
        "parameters": [
            {
                "descr": "Refer to the list of resourcetype constants.", 
                "name": "type"
            }
        ], 
        "path": "php/imagick.getresourcelimit", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getSamplingFactors": {
        "description": "Gets the horizontal and vertical sampling factor.", 
        "name": "Imagick::getSamplingFactors", 
        "overview": "array Imagick::getSamplingFactors ( void )", 
        "parameters": [], 
        "path": "php/imagick.getsamplingfactors", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getSize": {
        "description": "Returns the size associated with the Imagick object as an array with the keys \"columns\" and \"rows\".", 
        "name": "Imagick::getSize", 
        "overview": "array Imagick::getSize ( void )", 
        "parameters": [], 
        "path": "php/imagick.getsize", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getSizeOffset": {
        "description": "Returns the size offset associated with the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::getSizeOffset", 
        "overview": "int Imagick::getSizeOffset ( void )", 
        "parameters": [], 
        "path": "php/imagick.getsizeoffset", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::getVersion": {
        "description": "Returns the ImageMagick API version as a string and as a number.", 
        "name": "Imagick::getVersion", 
        "overview": "array Imagick::getVersion ( void )", 
        "parameters": [], 
        "path": "php/imagick.getversion", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::haldClutImage": {
        "description": "Replaces colors in the image using a Hald lookup table. Hald images can be created using HALD color coder.", 
        "name": "Imagick::haldClutImage", 
        "overview": "public bool Imagick::haldClutImage ( Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "Imagick object containing the Hald lookup image.", 
                "name": "clut"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.haldclutimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::hasNextImage": {
        "description": "Returns TRUE if the object has more images when traversing the list in the forward direction.", 
        "name": "Imagick::hasNextImage", 
        "overview": "bool Imagick::hasNextImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.hasnextimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::hasPreviousImage": {
        "description": "Returns TRUE if the object has more images when traversing the list in the reverse direction", 
        "name": "Imagick::hasPreviousImage", 
        "overview": "bool Imagick::hasPreviousImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.haspreviousimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::identifyImage": {
        "description": "Identifies an image and returns the attributes. Attributes include the image width, height, size, and others.", 
        "name": "Imagick::identifyImage", 
        "overview": "array Imagick::identifyImage ([ bool $appendRawOutput = false ] )", 
        "parameters": [], 
        "path": "php/imagick.identifyimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::implodeImage": {
        "description": "Creates a new image that is a copy of an existing one with the image pixels \"imploded\" by the specified percentage.", 
        "name": "Imagick::implodeImage", 
        "overview": "bool Imagick::implodeImage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the implode", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.implodeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::importImagePixels": {
        "description": "Imports pixels from an array into an image. The map is usually 'RGB'. This method imposes the following constraints for the parameters: amount of pixels in the array must match width x height x length of the map. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::importImagePixels", 
        "overview": "public bool Imagick::importImagePixels ( int $x , int $y , int $width , int $height , string $map , int $storage , array $pixels )", 
        "parameters": [
            {
                "descr": "The image x position", 
                "name": "x"
            }, 
            {
                "descr": "The image y position", 
                "name": "y"
            }, 
            {
                "descr": "The image width", 
                "name": "width"
            }, 
            {
                "descr": "The image height", 
                "name": "height"
            }, 
            {
                "descr": "Map of pixel ordering as a string. ", 
                "name": "map"
            }, 
            {
                "descr": "The pixel storage method. Refer to this list of pixel constants.", 
                "name": "storage"
            }, 
            {
                "descr": "The array of pixels", 
                "name": "pixels"
            }
        ], 
        "path": "php/imagick.importimagepixels", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::labelImage": {
        "description": "Adds a label to an image.", 
        "name": "Imagick::labelImage", 
        "overview": "bool Imagick::labelImage ( string $label )", 
        "parameters": [
            {
                "descr": "The label to add", 
                "name": "label"
            }
        ], 
        "path": "php/imagick.labelimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::levelImage": {
        "description": "Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.", 
        "name": "Imagick::levelImage", 
        "overview": "bool Imagick::levelImage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The image black point", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The gamma value", 
                "name": "gamma"
            }, 
            {
                "descr": "The image white point", 
                "name": "whitePoint"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.levelimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::linearStretchImage": {
        "description": "Stretches with saturation the image intensity.", 
        "name": "Imagick::linearStretchImage", 
        "overview": "bool Imagick::linearStretchImage ( float $blackPoint , float $whitePoint )", 
        "parameters": [
            {
                "descr": "The image black point", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The image white point", 
                "name": "whitePoint"
            }
        ], 
        "path": "php/imagick.linearstretchimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::liquidRescaleImage": {
        "description": "This method scales the images using liquid rescaling method. This method is an implementation of a technique called seam carving. In order for this method to work as expected ImageMagick must be compiled with liblqr support. This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.", 
        "name": "Imagick::liquidRescaleImage", 
        "overview": "bool Imagick::liquidRescaleImage ( int $width , int $height , float $delta_x , float $rigidity )", 
        "parameters": [
            {
                "descr": "The width of the target size", 
                "name": "width"
            }, 
            {
                "descr": "The height of the target size", 
                "name": "height"
            }, 
            {
                "descr": "How much the seam can traverse on x-axis. ", 
                "name": "delta_x"
            }, 
            {
                "descr": "Introduces a bias for non-straight seams. ", 
                "name": "rigidity"
            }
        ], 
        "path": "php/imagick.liquidrescaleimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::magnifyImage": {
        "description": "Is a convenience method that scales an image proportionally to twice its original size.", 
        "name": "Imagick::magnifyImage", 
        "overview": "bool Imagick::magnifyImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.magnifyimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::mapImage": {
        "description": "", 
        "name": "Imagick::mapImage", 
        "overview": "bool Imagick::mapImage ( Imagick $map , bool $dither )", 
        "parameters": [], 
        "path": "php/imagick.mapimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::matteFloodfillImage": {
        "description": "Changes the transparency value of any pixel that matches target and is an immediate neighbor. If the method FillToBorderMethod is specified, the transparency value is changed for any neighbor pixel that does not match the bordercolor member of image.", 
        "name": "Imagick::matteFloodfillImage", 
        "overview": "bool Imagick::matteFloodfillImage ( float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y )", 
        "parameters": [
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "alpha"
            }, 
            {
                "descr": "The fuzz member of image defines how much tolerance is acceptable to consider two colors as the same.", 
                "name": "fuzz"
            }, 
            {
                "descr": "An ImagickPixel object or string representing the border color.", 
                "name": "bordercolor"
            }, 
            {
                "descr": "The starting x coordinate of the operation.", 
                "name": "x"
            }, 
            {
                "descr": "The starting y coordinate of the operation.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.mattefloodfillimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::medianFilterImage": {
        "description": "Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.", 
        "name": "Imagick::medianFilterImage", 
        "overview": "bool Imagick::medianFilterImage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the pixel neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.medianfilterimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::mergeImageLayers": {
        "description": "Merges image layers into one. This method is useful when working with image formats that use multiple layers such as PSD. The merging is controlled using the layer_method which defines how the layers are merged. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::mergeImageLayers", 
        "overview": "bool Imagick::mergeImageLayers ( int $layer_method )", 
        "parameters": [
            {
                "descr": "One of the Imagick::LAYERMETHOD_* constants", 
                "name": "layer_method"
            }
        ], 
        "path": "php/imagick.mergeimagelayers", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::minifyImage": {
        "description": "Is a convenience method that scales an image proportionally to one-half its original size", 
        "name": "Imagick::minifyImage", 
        "overview": "bool Imagick::minifyImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.minifyimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::modulateImage": {
        "description": "Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.", 
        "name": "Imagick::modulateImage", 
        "overview": "bool Imagick::modulateImage ( float $brightness , float $saturation , float $hue )", 
        "parameters": [], 
        "path": "php/imagick.modulateimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::montageImage": {
        "description": "Creates a composite image by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.", 
        "name": "Imagick::montageImage", 
        "overview": "Imagick Imagick::montageImage ( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame )", 
        "parameters": [
            {
                "descr": "The font name, size, and color are obtained from this object.", 
                "name": "draw"
            }, 
            {
                "descr": "The number of tiles per row and page (e.g. ", 
                "name": "tile_geometry"
            }, 
            {
                "descr": "Preferred image size and border size of each thumbnail (e.g. ", 
                "name": "thumbnail_geometry"
            }, 
            {
                "descr": "Thumbnail framing mode, see Montage Mode constants.", 
                "name": "mode"
            }, 
            {
                "descr": "Surround the image with an ornamental border (e.g. ", 
                "name": "frame"
            }
        ], 
        "path": "php/imagick.montageimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::morphImages": {
        "description": "Method morphs a set of images. Both the image pixels and size are linearly interpolated to give the appearance of a meta-morphosis from one image to the next.", 
        "name": "Imagick::morphImages", 
        "overview": "Imagick Imagick::morphImages ( int $number_frames )", 
        "parameters": [
            {
                "descr": "The number of in-between images to generate.", 
                "name": "number_frames"
            }
        ], 
        "path": "php/imagick.morphimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::mosaicImages": {
        "description": "Inlays an image sequence to form a single coherent picture. It returns a wand with each image in the sequence composited at the location defined by the page offset of the image.", 
        "name": "Imagick::mosaicImages", 
        "overview": "Imagick Imagick::mosaicImages ( void )", 
        "parameters": [], 
        "path": "php/imagick.mosaicimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::motionBlurImage": {
        "description": "Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.", 
        "name": "Imagick::motionBlurImage", 
        "overview": "bool Imagick::motionBlurImage ( float $radius , float $sigma , float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel.", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Apply the effect along this angle.", 
                "name": "angle"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.motionblurimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::negateImage": {
        "description": "Negates the colors in the reference image. The Grayscale option means that only grayscale values within the image are negated.", 
        "name": "Imagick::negateImage", 
        "overview": "bool Imagick::negateImage ( bool $gray [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "Whether to only negate grayscale pixels within the image.", 
                "name": "gray"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.negateimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::newImage": {
        "description": "Creates a new image and associates ImagickPixel value as background color", 
        "name": "Imagick::newImage", 
        "overview": "bool Imagick::newImage ( int $cols , int $rows , mixed $background [, string $format ] )", 
        "parameters": [
            {
                "descr": "Columns in the new image", 
                "name": "cols"
            }, 
            {
                "descr": "Rows in the new image", 
                "name": "rows"
            }, 
            {
                "descr": "The background color used for this image", 
                "name": "background"
            }, 
            {
                "descr": "Image format. This parameter was added in Imagick version 2.0.1.", 
                "name": "format"
            }
        ], 
        "path": "php/imagick.newimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::newPseudoImage": {
        "description": "Creates a new image using ImageMagick pseudo-formats.", 
        "name": "Imagick::newPseudoImage", 
        "overview": "bool Imagick::newPseudoImage ( int $columns , int $rows , string $pseudoString )", 
        "parameters": [
            {
                "descr": "columns in the new image", 
                "name": "columns"
            }, 
            {
                "descr": "rows in the new image", 
                "name": "rows"
            }, 
            {
                "descr": "string containing pseudo image definition.", 
                "name": "pseudoString"
            }
        ], 
        "path": "php/imagick.newpseudoimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::nextImage": {
        "description": "Associates the next image in the image list with an Imagick object.", 
        "name": "Imagick::nextImage", 
        "overview": "bool Imagick::nextImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.nextimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::normalizeImage": {
        "description": "Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.", 
        "name": "Imagick::normalizeImage", 
        "overview": "bool Imagick::normalizeImage ([ int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.normalizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::oilPaintImage": {
        "description": "Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.", 
        "name": "Imagick::oilPaintImage", 
        "overview": "bool Imagick::oilPaintImage ( float $radius )", 
        "parameters": [
            {
                "descr": "The radius of the circular neighborhood.", 
                "name": "radius"
            }
        ], 
        "path": "php/imagick.oilpaintimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::opaquePaintImage": {
        "description": "Changes any pixel that matches color with the color defined by fill. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::opaquePaintImage", 
        "overview": "bool Imagick::opaquePaintImage ( mixed $target , mixed $fill , float $fuzz , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "ImagickPixel object or a string containing the color to change", 
                "name": "target"
            }, 
            {
                "descr": "The replacement color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color.", 
                "name": "fuzz"
            }, 
            {
                "descr": "If TRUE paints any pixel that does not match the target color.", 
                "name": "invert"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.opaquepaintimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::optimizeImageLayers": {
        "description": "Compares each image the GIF disposed forms of the previous image in the sequence. From this it attempts to select the smallest cropped image to replace each frame, while preserving the results of the animation. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::optimizeImageLayers", 
        "overview": "bool Imagick::optimizeImageLayers ( void )", 
        "parameters": [], 
        "path": "php/imagick.optimizeimagelayers", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::orderedPosterizeImage": {
        "description": "Performs an ordered dither based on a number of pre-defined dithering threshold maps, but over multiple intensity levels, which can be different for different channels, according to the input arguments. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.", 
        "name": "Imagick::orderedPosterizeImage", 
        "overview": "bool Imagick::orderedPosterizeImage ( string $threshold_map [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "A string containing the name of the threshold dither map to use", 
                "name": "threshold_map"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.orderedposterizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::paintFloodfillImage": {
        "description": "Changes the color value of any pixel that matches target and is an immediate neighbor. As of ImageMagick 6.3.8 this method has been deprecated and Imagick::floodfillPaintImage() should be used instead.", 
        "name": "Imagick::paintFloodfillImage", 
        "overview": "bool Imagick::paintFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "ImagickPixel object or a string containing the fill color", 
                "name": "fill"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color for the purposes of the floodfill.", 
                "name": "fuzz"
            }, 
            {
                "descr": "ImagickPixel object or a string containing the border color", 
                "name": "bordercolor"
            }, 
            {
                "descr": "X start position of the floodfill", 
                "name": "x"
            }, 
            {
                "descr": "Y start position of the floodfill", 
                "name": "y"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.paintfloodfillimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::paintOpaqueImage": {
        "description": "Changes any pixel that matches color with the color defined by fill.", 
        "name": "Imagick::paintOpaqueImage", 
        "overview": "bool Imagick::paintOpaqueImage ( mixed $target , mixed $fill , float $fuzz [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "Change this target color to the fill color within the image. ", 
                "name": "target"
            }, 
            {
                "descr": "An ImagickPixel object or a string representing the fill color.", 
                "name": "fill"
            }, 
            {
                "descr": "The fuzz member of image defines how much tolerance is acceptable to consider two colors as the same.", 
                "name": "fuzz"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.paintopaqueimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::paintTransparentImage": {
        "description": "Changes any pixel that matches color with the color defined by fill.", 
        "name": "Imagick::paintTransparentImage", 
        "overview": "bool Imagick::paintTransparentImage ( mixed $target , float $alpha , float $fuzz )", 
        "parameters": [
            {
                "descr": "Change this target color to specified opacity value within the image.", 
                "name": "target"
            }, 
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "alpha"
            }, 
            {
                "descr": "The fuzz member of image defines how much tolerance is acceptable to consider two colors as the same.", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagick.painttransparentimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::pingImage": {
        "description": "This method can be used to query image width, height, size, and format without reading the whole image in to memory.", 
        "name": "Imagick::pingImage", 
        "overview": "bool Imagick::pingImage ( string $filename )", 
        "parameters": [
            {
                "descr": "The filename to read the information from.", 
                "name": "filename"
            }
        ], 
        "path": "php/imagick.pingimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::pingImageBlob": {
        "description": "This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::pingImageBlob", 
        "overview": "bool Imagick::pingImageBlob ( string $image )", 
        "parameters": [
            {
                "descr": "A string containing the image.", 
                "name": "image"
            }
        ], 
        "path": "php/imagick.pingimageblob", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::pingImageFile": {
        "description": "This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::pingImageFile", 
        "overview": "bool Imagick::pingImageFile ( resource $filehandle [, string $fileName ] )", 
        "parameters": [
            {
                "descr": "An open filehandle to the image.", 
                "name": "filehandle"
            }, 
            {
                "descr": "Optional filename for this image.", 
                "name": "fileName"
            }
        ], 
        "path": "php/imagick.pingimagefile", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::polaroidImage": {
        "description": "Simulates a Polaroid picture. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.", 
        "name": "Imagick::polaroidImage", 
        "overview": "bool Imagick::polaroidImage ( ImagickDraw $properties , float $angle )", 
        "parameters": [
            {
                "descr": "The polaroid properties", 
                "name": "properties"
            }, 
            {
                "descr": "The polaroid angle", 
                "name": "angle"
            }
        ], 
        "path": "php/imagick.polaroidimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::posterizeImage": {
        "description": "Reduces the image to a limited number of color level.", 
        "name": "Imagick::posterizeImage", 
        "overview": "bool Imagick::posterizeImage ( int $levels , bool $dither )", 
        "parameters": [], 
        "path": "php/imagick.posterizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::previewImages": {
        "description": "Tiles 9 thumbnails of the specified image with an image processing operation applied at varying strengths. This is helpful to quickly pin-point an appropriate parameter for an image processing operation.", 
        "name": "Imagick::previewImages", 
        "overview": "bool Imagick::previewImages ( int $preview )", 
        "parameters": [
            {
                "descr": "Preview type. See Preview type constants", 
                "name": "preview"
            }
        ], 
        "path": "php/imagick.previewimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::previousImage": {
        "description": "Assocates the previous image in an image list with the Imagick object.", 
        "name": "Imagick::previousImage", 
        "overview": "bool Imagick::previousImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.previousimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::profileImage": {
        "description": "Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.", 
        "name": "Imagick::profileImage", 
        "overview": "bool Imagick::profileImage ( string $name , string $profile )", 
        "parameters": [], 
        "path": "php/imagick.profileimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::quantizeImage": {
        "description": "", 
        "name": "Imagick::quantizeImage", 
        "overview": "bool Imagick::quantizeImage ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )", 
        "parameters": [], 
        "path": "php/imagick.quantizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::quantizeImages": {
        "description": "", 
        "name": "Imagick::quantizeImages", 
        "overview": "bool Imagick::quantizeImages ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )", 
        "parameters": [], 
        "path": "php/imagick.quantizeimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::queryFontMetrics": {
        "description": "Returns a multi-dimensional array representing the font metrics.", 
        "name": "Imagick::queryFontMetrics", 
        "overview": "array Imagick::queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] )", 
        "parameters": [
            {
                "descr": "ImagickDraw object containing font properties", 
                "name": "properties"
            }, 
            {
                "descr": "The text", 
                "name": "text"
            }, 
            {
                "descr": "Multiline parameter. If left empty it is autodetected", 
                "name": "multiline"
            }
        ], 
        "path": "php/imagick.queryfontmetrics", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::queryFonts": {
        "description": "Returns the configured fonts.", 
        "name": "Imagick::queryFonts", 
        "overview": "array Imagick::queryFonts ([ string $pattern = \"*\" ] )", 
        "parameters": [
            {
                "descr": "The query pattern", 
                "name": "pattern"
            }
        ], 
        "path": "php/imagick.queryfonts", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::queryFormats": {
        "description": "Returns formats supported by Imagick.", 
        "name": "Imagick::queryFormats", 
        "overview": "array Imagick::queryFormats ([ string $pattern = \"*\" ] )", 
        "parameters": [], 
        "path": "php/imagick.queryformats", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::radialBlurImage": {
        "description": "Radial blurs an image.", 
        "name": "Imagick::radialBlurImage", 
        "overview": "bool Imagick::radialBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [], 
        "path": "php/imagick.radialblurimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::raiseImage": {
        "description": "Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.", 
        "name": "Imagick::raiseImage", 
        "overview": "bool Imagick::raiseImage ( int $width , int $height , int $x , int $y , bool $raise )", 
        "parameters": [], 
        "path": "php/imagick.raiseimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::randomThresholdImage": {
        "description": "Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::randomThresholdImage", 
        "overview": "bool Imagick::randomThresholdImage ( float $low , float $high [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [
            {
                "descr": "The low point", 
                "name": "low"
            }, 
            {
                "descr": "The high point", 
                "name": "high"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "channel"
            }
        ], 
        "path": "php/imagick.randomthresholdimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::readImage": {
        "description": "Reads image from filename", 
        "name": "Imagick::readImage", 
        "overview": "bool Imagick::readImage ( string $filename )", 
        "parameters": [], 
        "path": "php/imagick.readimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::readImageBlob": {
        "description": "Reads image from a binary string", 
        "name": "Imagick::readImageBlob", 
        "overview": "bool Imagick::readImageBlob ( string $image [, string $filename ] )", 
        "parameters": [], 
        "path": "php/imagick.readimageblob", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::readImageFile": {
        "description": "Reads image from open filehandle", 
        "name": "Imagick::readImageFile", 
        "overview": "bool Imagick::readImageFile ( resource $filehandle [, string $fileName = null ] )", 
        "parameters": [], 
        "path": "php/imagick.readimagefile", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::recolorImage": {
        "description": "Translate, scale, shear, or rotate image colors. This method supports variable sized matrices but normally 5x5 matrix is used for RGBA and 6x6 is used for CMYK. The last row should contain the normalized values. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::recolorImage", 
        "overview": "bool Imagick::recolorImage ( array $matrix )", 
        "parameters": [
            {
                "descr": "The matrix containing the color values", 
                "name": "matrix"
            }
        ], 
        "path": "php/imagick.recolorimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::reduceNoiseImage": {
        "description": "Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Imagick::reduceNoiseImage() selects a suitable radius for you.", 
        "name": "Imagick::reduceNoiseImage", 
        "overview": "bool Imagick::reduceNoiseImage ( float $radius )", 
        "parameters": [], 
        "path": "php/imagick.reducenoiseimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::remapImage": {
        "description": "Replaces colors an image with those defined by replacement. The colors are replaced with the closest possible color. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::remapImage", 
        "overview": "public bool Imagick::remapImage ( Imagick $replacement , int $DITHER )", 
        "parameters": [
            {
                "descr": "An Imagick object containing the replacement colors", 
                "name": "replacement"
            }, 
            {
                "descr": "Refer to this list of dither method constants", 
                "name": "DITHER"
            }
        ], 
        "path": "php/imagick.remapimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::removeImage": {
        "description": "Removes an image from the image list.", 
        "name": "Imagick::removeImage", 
        "overview": "bool Imagick::removeImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.removeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::removeImageProfile": {
        "description": "Removes the named image profile and returns it.", 
        "name": "Imagick::removeImageProfile", 
        "overview": "string Imagick::removeImageProfile ( string $name )", 
        "parameters": [], 
        "path": "php/imagick.removeimageprofile", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::render": {
        "description": "Renders all preceding drawing commands.", 
        "name": "Imagick::render", 
        "overview": "bool Imagick::render ( void )", 
        "parameters": [], 
        "path": "php/imagick.render", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::resampleImage": {
        "description": "Resample image to desired resolution.", 
        "name": "Imagick::resampleImage", 
        "overview": "bool Imagick::resampleImage ( float $x_resolution , float $y_resolution , int $filter , float $blur )", 
        "parameters": [], 
        "path": "php/imagick.resampleimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::resetImagePage": {
        "description": "The page definition as a string. The string is in format WxH+x+y. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::resetImagePage", 
        "overview": "bool Imagick::resetImagePage ( string $page )", 
        "parameters": [
            {
                "descr": "The page definition. For example 7168x5147+0+0", 
                "name": "page"
            }
        ], 
        "path": "php/imagick.resetimagepage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::resizeImage": {
        "description": "Scales an image to the desired dimensions with a filter.", 
        "name": "Imagick::resizeImage", 
        "overview": "bool Imagick::resizeImage ( int $columns , int $rows , int $filter , float $blur [, bool $bestfit = false ] )", 
        "parameters": [
            {
                "descr": "Width of the image", 
                "name": "columns"
            }, 
            {
                "descr": "Height of the image", 
                "name": "rows"
            }, 
            {
                "descr": "Refer to the list of filter constants.", 
                "name": "filter"
            }, 
            {
                "descr": "The blur factor where > 1 is blurry, < 1 is sharp.", 
                "name": "blur"
            }, 
            {
                "descr": "Optional fit parameter.", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.resizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::rollImage": {
        "description": "Offsets an image as defined by x and y.", 
        "name": "Imagick::rollImage", 
        "overview": "bool Imagick::rollImage ( int $x , int $y )", 
        "parameters": [
            {
                "descr": "The X offset.", 
                "name": "x"
            }, 
            {
                "descr": "The Y offset.", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.rollimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::rotateImage": {
        "description": "Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.", 
        "name": "Imagick::rotateImage", 
        "overview": "bool Imagick::rotateImage ( mixed $background , float $degrees )", 
        "parameters": [
            {
                "descr": "The background color", 
                "name": "background"
            }, 
            {
                "descr": "The number of degrees to rotate the image", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagick.rotateimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::roundCorners": {
        "description": "Rounds image corners. The first two parameters control the amount of rounding and the three last parameters can be used to fine-tune the rounding process. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::roundCorners", 
        "overview": "bool Imagick::roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]] )", 
        "parameters": [
            {
                "descr": "x rounding", 
                "name": "x_rounding"
            }, 
            {
                "descr": "y rounding", 
                "name": "y_rounding"
            }, 
            {
                "descr": "stroke width", 
                "name": "stroke_width"
            }, 
            {
                "descr": "image displace", 
                "name": "displace"
            }, 
            {
                "descr": "size correction", 
                "name": "size_correction"
            }
        ], 
        "path": "php/imagick.roundcorners", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sampleImage": {
        "description": "Scales an image to the desired dimensions with pixel sampling. Unlike other scaling methods, this method does not introduce any additional color into the scaled image.", 
        "name": "Imagick::sampleImage", 
        "overview": "bool Imagick::sampleImage ( int $columns , int $rows )", 
        "parameters": [], 
        "path": "php/imagick.sampleimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::scaleImage": {
        "description": "Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param.", 
        "name": "Imagick::scaleImage", 
        "overview": "bool Imagick::scaleImage ( int $cols , int $rows [, bool $bestfit = false ] )", 
        "parameters": [], 
        "path": "php/imagick.scaleimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::segmentImage": {
        "description": "Analyses the image and identifies units that are similar. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::segmentImage", 
        "overview": "public bool Imagick::segmentImage ( int $COLORSPACE , float $cluster_threshold , float $smooth_threshold [, bool $verbose = false ] )", 
        "parameters": [
            {
                "descr": "One of the COLORSPACE constants.", 
                "name": "COLORSPACE"
            }, 
            {
                "descr": "A percentage describing minimum number of pixels contained in hexedra before it is considered valid.", 
                "name": "cluster_threshold"
            }, 
            {
                "descr": "Eliminates noise from the histogram.", 
                "name": "smooth_threshold"
            }, 
            {
                "descr": "Whether to output detailed information about recognised classes.", 
                "name": "verbose"
            }
        ], 
        "path": "php/imagick.segmentimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::separateImageChannel": {
        "description": "Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.", 
        "name": "Imagick::separateImageChannel", 
        "overview": "bool Imagick::separateImageChannel ( int $channel )", 
        "parameters": [], 
        "path": "php/imagick.separateimagechannel", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sepiaToneImage": {
        "description": "Applies a special effect to the image, similar to the effect achieved in a photo darkroom by sepia toning. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the sepia toning. A threshold of 80 is a good starting point for a reasonable tone.", 
        "name": "Imagick::sepiaToneImage", 
        "overview": "bool Imagick::sepiaToneImage ( float $threshold )", 
        "parameters": [], 
        "path": "php/imagick.sepiatoneimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setBackgroundColor": {
        "description": "Sets the object's default background color.", 
        "name": "Imagick::setBackgroundColor", 
        "overview": "bool Imagick::setBackgroundColor ( mixed $background )", 
        "parameters": [], 
        "path": "php/imagick.setbackgroundcolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setColorspace": {
        "description": "Sets the global colorspace value for the object. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::setColorspace", 
        "overview": "bool Imagick::setColorspace ( int $COLORSPACE )", 
        "parameters": [
            {
                "descr": "One of the COLORSPACE constants", 
                "name": "COLORSPACE"
            }
        ], 
        "path": "php/imagick.setcolorspace", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setCompression": {
        "description": "Sets the object's default compression type", 
        "name": "Imagick::setCompression", 
        "overview": "bool Imagick::setCompression ( int $compression )", 
        "parameters": [], 
        "path": "php/imagick.setcompression", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setCompressionQuality": {
        "description": "Sets the object's default compression quality.", 
        "name": "Imagick::setCompressionQuality", 
        "overview": "bool Imagick::setCompressionQuality ( int $quality )", 
        "parameters": [], 
        "path": "php/imagick.setcompressionquality", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFilename": {
        "description": "Sets the filename before you read or write an image file.", 
        "name": "Imagick::setFilename", 
        "overview": "bool Imagick::setFilename ( string $filename )", 
        "parameters": [], 
        "path": "php/imagick.setfilename", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFirstIterator": {
        "description": "Sets the Imagick iterator to the first image.", 
        "name": "Imagick::setFirstIterator", 
        "overview": "bool Imagick::setFirstIterator ( void )", 
        "parameters": [], 
        "path": "php/imagick.setfirstiterator", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFont": {
        "description": "Sets object's font property. This method can be used for example to set font for caption: pseudo-format. The font needs to be configured in ImageMagick confiration or a file by the name of font must exist. This method should not be confused with ImagickDraw::setFont() which sets the font for a specific ImagickDraw object. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::setFont", 
        "overview": "bool Imagick::setFont ( string $font )", 
        "parameters": [
            {
                "descr": "Font name or a filename", 
                "name": "font"
            }
        ], 
        "path": "php/imagick.setfont", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setFormat": {
        "description": "Sets the format of the Imagick object.", 
        "name": "Imagick::setFormat", 
        "overview": "bool Imagick::setFormat ( string $format )", 
        "parameters": [], 
        "path": "php/imagick.setformat", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setGravity": {
        "description": "Sets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.", 
        "name": "Imagick::setGravity", 
        "overview": "bool Imagick::setGravity ( int $gravity )", 
        "parameters": [
            {
                "descr": "The gravity property. Refer to the list of gravity constants.", 
                "name": "gravity"
            }
        ], 
        "path": "php/imagick.setgravity", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImage": {
        "description": "Replaces the current image sequence with the image from replace object.", 
        "name": "Imagick::setImage", 
        "overview": "bool Imagick::setImage ( Imagick $replace )", 
        "parameters": [
            {
                "descr": "The replace Imagick object", 
                "name": "replace"
            }
        ], 
        "path": "php/imagick.setimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageAlphaChannel": {
        "description": "Activate or deactivate image alpha channel. The mode is one of the Imagick::ALPHACHANNEL_* constants. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::setImageAlphaChannel", 
        "overview": "bool Imagick::setImageAlphaChannel ( int $mode )", 
        "parameters": [
            {
                "descr": "One of the Imagick::ALPHACHANNEL_* constants", 
                "name": "mode"
            }
        ], 
        "path": "php/imagick.setimagealphachannel", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageArtifact": {
        "description": "Associates an artifact with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.", 
        "name": "Imagick::setImageArtifact", 
        "overview": "bool Imagick::setImageArtifact ( string $artifact , string $value )", 
        "parameters": [
            {
                "descr": "The name of the artifact", 
                "name": "artifact"
            }, 
            {
                "descr": "The value of the artifact", 
                "name": "value"
            }
        ], 
        "path": "php/imagick.setimageartifact", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBackgroundColor": {
        "description": "Sets the image background color.", 
        "name": "Imagick::setImageBackgroundColor", 
        "overview": "bool Imagick::setImageBackgroundColor ( mixed $background )", 
        "parameters": [], 
        "path": "php/imagick.setimagebackgroundcolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBias": {
        "description": "Sets the image bias for any method that convolves an image (e.g. Imagick::ConvolveImage()).", 
        "name": "Imagick::setImageBias", 
        "overview": "bool Imagick::setImageBias ( float $bias )", 
        "parameters": [], 
        "path": "php/imagick.setimagebias", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBluePrimary": {
        "description": "Sets the image chromaticity blue primary point.", 
        "name": "Imagick::setImageBluePrimary", 
        "overview": "bool Imagick::setImageBluePrimary ( float $x , float $y )", 
        "parameters": [], 
        "path": "php/imagick.setimageblueprimary", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageBorderColor": {
        "description": "Sets the image border color.", 
        "name": "Imagick::setImageBorderColor", 
        "overview": "bool Imagick::setImageBorderColor ( mixed $border )", 
        "parameters": [
            {
                "descr": "The border color", 
                "name": "border"
            }
        ], 
        "path": "php/imagick.setimagebordercolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageChannelDepth": {
        "description": "Sets the depth of a particular image channel.", 
        "name": "Imagick::setImageChannelDepth", 
        "overview": "bool Imagick::setImageChannelDepth ( int $channel , int $depth )", 
        "parameters": [], 
        "path": "php/imagick.setimagechanneldepth", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageClipMask": {
        "description": "Sets image clip mask from another Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::setImageClipMask", 
        "overview": "bool Imagick::setImageClipMask ( Imagick $clip_mask )", 
        "parameters": [
            {
                "descr": "The Imagick object containing the clip mask", 
                "name": "clip_mask"
            }
        ], 
        "path": "php/imagick.setimageclipmask", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageColormapColor": {
        "description": "Sets the color of the specified colormap index.", 
        "name": "Imagick::setImageColormapColor", 
        "overview": "bool Imagick::setImageColormapColor ( int $index , ImagickPixel $color )", 
        "parameters": [], 
        "path": "php/imagick.setimagecolormapcolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageColorspace": {
        "description": "Sets the image colorspace.", 
        "name": "Imagick::setImageColorspace", 
        "overview": "bool Imagick::setImageColorspace ( int $colorspace )", 
        "parameters": [
            {
                "descr": "One of the COLORSPACE constants", 
                "name": "colorspace"
            }
        ], 
        "path": "php/imagick.setimagecolorspace", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageCompose": {
        "description": "Sets the image composite operator, useful for specifying how to composite the image thumbnail when using the Imagick::montageImage() method.", 
        "name": "Imagick::setImageCompose", 
        "overview": "bool Imagick::setImageCompose ( int $compose )", 
        "parameters": [], 
        "path": "php/imagick.setimagecompose", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageCompression": {
        "description": "", 
        "name": "Imagick::setImageCompression", 
        "overview": "bool Imagick::setImageCompression ( int $compression )", 
        "parameters": [
            {
                "descr": "One of the COMPRESSION constants", 
                "name": "compression"
            }
        ], 
        "path": "php/imagick.setimagecompression", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageCompressionQuality": {
        "description": "Sets the image compression quality.", 
        "name": "Imagick::setImageCompressionQuality", 
        "overview": "bool Imagick::setImageCompressionQuality ( int $quality )", 
        "parameters": [
            {
                "descr": "The image compression quality as an integer", 
                "name": "quality"
            }
        ], 
        "path": "php/imagick.setimagecompressionquality", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageDelay": {
        "description": "Sets the image delay. For an animated image this is the amount of time that this frame of the image should be displayed for, before displaying the next frame.", 
        "name": "Imagick::setImageDelay", 
        "overview": "bool Imagick::setImageDelay ( int $delay )", 
        "parameters": [
            {
                "descr": "The amount of time expressed in 'ticks' that the image should be displayed for. ", 
                "name": "delay"
            }
        ], 
        "path": "php/imagick.setimagedelay", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageDepth": {
        "description": "Sets the image depth.", 
        "name": "Imagick::setImageDepth", 
        "overview": "bool Imagick::setImageDepth ( int $depth )", 
        "parameters": [], 
        "path": "php/imagick.setimagedepth", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageDispose": {
        "description": "Sets the image disposal method.", 
        "name": "Imagick::setImageDispose", 
        "overview": "bool Imagick::setImageDispose ( int $dispose )", 
        "parameters": [], 
        "path": "php/imagick.setimagedispose", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageExtent": {
        "description": "Sets the image size (i.e. columns & rows).", 
        "name": "Imagick::setImageExtent", 
        "overview": "bool Imagick::setImageExtent ( int $columns , int $rows )", 
        "parameters": [], 
        "path": "php/imagick.setimageextent", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageFilename": {
        "description": "Sets the filename of a particular image in a sequence.", 
        "name": "Imagick::setImageFilename", 
        "overview": "bool Imagick::setImageFilename ( string $filename )", 
        "parameters": [], 
        "path": "php/imagick.setimagefilename", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageFormat": {
        "description": "Sets the format of a particular image in a sequence.", 
        "name": "Imagick::setImageFormat", 
        "overview": "bool Imagick::setImageFormat ( string $format )", 
        "parameters": [
            {
                "descr": "String presentation of the image format. ", 
                "name": "format"
            }
        ], 
        "path": "php/imagick.setimageformat", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageGamma": {
        "description": "Sets the image gamma.", 
        "name": "Imagick::setImageGamma", 
        "overview": "bool Imagick::setImageGamma ( float $gamma )", 
        "parameters": [], 
        "path": "php/imagick.setimagegamma", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageGravity": {
        "description": "Sets the gravity property for the current image. This method can be used to set the gravity property for a single image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.", 
        "name": "Imagick::setImageGravity", 
        "overview": "bool Imagick::setImageGravity ( int $gravity )", 
        "parameters": [
            {
                "descr": "The gravity property. Refer to the list of gravity constants.", 
                "name": "gravity"
            }
        ], 
        "path": "php/imagick.setimagegravity", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageGreenPrimary": {
        "description": "Sets the image chromaticity green primary point.", 
        "name": "Imagick::setImageGreenPrimary", 
        "overview": "bool Imagick::setImageGreenPrimary ( float $x , float $y )", 
        "parameters": [], 
        "path": "php/imagick.setimagegreenprimary", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageIndex": {
        "description": "Set the iterator to the position in the image list specified with the index parameter.", 
        "name": "Imagick::setImageIndex", 
        "overview": "bool Imagick::setImageIndex ( int $index )", 
        "parameters": [
            {
                "descr": "The position to set the iterator to", 
                "name": "index"
            }
        ], 
        "path": "php/imagick.setimageindex", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageInterlaceScheme": {
        "description": "Sets the image compression.", 
        "name": "Imagick::setImageInterlaceScheme", 
        "overview": "bool Imagick::setImageInterlaceScheme ( int $interlace_scheme )", 
        "parameters": [], 
        "path": "php/imagick.setimageinterlacescheme", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageInterpolateMethod": {
        "description": "Sets the image interpolate pixel method.", 
        "name": "Imagick::setImageInterpolateMethod", 
        "overview": "bool Imagick::setImageInterpolateMethod ( int $method )", 
        "parameters": [
            {
                "descr": "The method is one of the Imagick::INTERPOLATE_* constants", 
                "name": "method"
            }
        ], 
        "path": "php/imagick.setimageinterpolatemethod", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageIterations": {
        "description": "Sets the number of iterations an animated image is repeated.", 
        "name": "Imagick::setImageIterations", 
        "overview": "bool Imagick::setImageIterations ( int $iterations )", 
        "parameters": [
            {
                "descr": "The number of iterations the image should loop over. ", 
                "name": "iterations"
            }
        ], 
        "path": "php/imagick.setimageiterations", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageMatte": {
        "description": "Sets the image matte channel. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::setImageMatte", 
        "overview": "bool Imagick::setImageMatte ( bool $matte )", 
        "parameters": [
            {
                "descr": "True activates the matte channel and false disables it.", 
                "name": "matte"
            }
        ], 
        "path": "php/imagick.setimagematte", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageMatteColor": {
        "description": "Sets the image matte color.", 
        "name": "Imagick::setImageMatteColor", 
        "overview": "bool Imagick::setImageMatteColor ( mixed $matte )", 
        "parameters": [], 
        "path": "php/imagick.setimagemattecolor", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageOpacity": {
        "description": "Sets the image to the specified opacity level. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer. This method operates on all channels, which means that for example opacity value of 0.5 will set all transparent areas to partially opaque. To add transparency to areas that are not already transparent use Imagick::evaluateImage()", 
        "name": "Imagick::setImageOpacity", 
        "overview": "bool Imagick::setImageOpacity ( float $opacity )", 
        "parameters": [
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagick.setimageopacity", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageOrientation": {
        "description": "Sets the image orientation.", 
        "name": "Imagick::setImageOrientation", 
        "overview": "bool Imagick::setImageOrientation ( int $orientation )", 
        "parameters": [
            {
                "descr": "One of the orientation constants", 
                "name": "orientation"
            }
        ], 
        "path": "php/imagick.setimageorientation", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImagePage": {
        "description": "Sets the page geometry of the image.", 
        "name": "Imagick::setImagePage", 
        "overview": "bool Imagick::setImagePage ( int $width , int $height , int $x , int $y )", 
        "parameters": [], 
        "path": "php/imagick.setimagepage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageProfile": {
        "description": "Adds a named profile to the Imagick object. If a profile with the same name already exists, it is replaced. This method differs from the Imagick::ProfileImage() method in that it does not apply any CMS color profiles.", 
        "name": "Imagick::setImageProfile", 
        "overview": "bool Imagick::setImageProfile ( string $name , string $profile )", 
        "parameters": [], 
        "path": "php/imagick.setimageprofile", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageProperty": {
        "description": "Sets a named property to the image. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.", 
        "name": "Imagick::setImageProperty", 
        "overview": "bool Imagick::setImageProperty ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/imagick.setimageproperty", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageRedPrimary": {
        "description": "Sets the image chromaticity red primary point.", 
        "name": "Imagick::setImageRedPrimary", 
        "overview": "bool Imagick::setImageRedPrimary ( float $x , float $y )", 
        "parameters": [], 
        "path": "php/imagick.setimageredprimary", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageRenderingIntent": {
        "description": "Sets the image rendering intent.", 
        "name": "Imagick::setImageRenderingIntent", 
        "overview": "bool Imagick::setImageRenderingIntent ( int $rendering_intent )", 
        "parameters": [], 
        "path": "php/imagick.setimagerenderingintent", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageResolution": {
        "description": "Sets the image resolution.", 
        "name": "Imagick::setImageResolution", 
        "overview": "bool Imagick::setImageResolution ( float $x_resolution , float $y_resolution )", 
        "parameters": [], 
        "path": "php/imagick.setimageresolution", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageScene": {
        "description": "Sets the image scene.", 
        "name": "Imagick::setImageScene", 
        "overview": "bool Imagick::setImageScene ( int $scene )", 
        "parameters": [], 
        "path": "php/imagick.setimagescene", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageTicksPerSecond": {
        "description": "Adjust the amount of time that a frame of an animated image is displayed for.", 
        "name": "Imagick::setImageTicksPerSecond", 
        "overview": "bool Imagick::setImageTicksPerSecond ( int $ticks_per_second )", 
        "parameters": [
            {
                "descr": "The duration for which an image should be displayed expressed in ticks per second.", 
                "name": "ticks_per_second"
            }
        ], 
        "path": "php/imagick.setimagetickspersecond", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageType": {
        "description": "Sets the image type.", 
        "name": "Imagick::setImageType", 
        "overview": "bool Imagick::setImageType ( int $image_type )", 
        "parameters": [], 
        "path": "php/imagick.setimagetype", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageUnits": {
        "description": "Sets the image units of resolution.", 
        "name": "Imagick::setImageUnits", 
        "overview": "bool Imagick::setImageUnits ( int $units )", 
        "parameters": [], 
        "path": "php/imagick.setimageunits", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageVirtualPixelMethod": {
        "description": "Sets the image virtual pixel method.", 
        "name": "Imagick::setImageVirtualPixelMethod", 
        "overview": "bool Imagick::setImageVirtualPixelMethod ( int $method )", 
        "parameters": [], 
        "path": "php/imagick.setimagevirtualpixelmethod", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setImageWhitePoint": {
        "description": "Sets the image chromaticity white point.", 
        "name": "Imagick::setImageWhitePoint", 
        "overview": "bool Imagick::setImageWhitePoint ( float $x , float $y )", 
        "parameters": [], 
        "path": "php/imagick.setimagewhitepoint", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setInterlaceScheme": {
        "description": "Sets the image compression.", 
        "name": "Imagick::setInterlaceScheme", 
        "overview": "bool Imagick::setInterlaceScheme ( int $interlace_scheme )", 
        "parameters": [], 
        "path": "php/imagick.setinterlacescheme", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setIteratorIndex": {
        "description": "Set the iterator to the position in the image list specified with the index parameter. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::setIteratorIndex", 
        "overview": "bool Imagick::setIteratorIndex ( int $index )", 
        "parameters": [
            {
                "descr": "The position to set the iterator to", 
                "name": "index"
            }
        ], 
        "path": "php/imagick.setiteratorindex", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setLastIterator": {
        "description": "Sets the Imagick iterator to the last image.", 
        "name": "Imagick::setLastIterator", 
        "overview": "bool Imagick::setLastIterator ( void )", 
        "parameters": [], 
        "path": "php/imagick.setlastiterator", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setOption": {
        "description": "Associates one or more options with the wand.", 
        "name": "Imagick::setOption", 
        "overview": "bool Imagick::setOption ( string $key , string $value )", 
        "parameters": [], 
        "path": "php/imagick.setoption", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setPage": {
        "description": "Sets the page geometry of the Imagick object.", 
        "name": "Imagick::setPage", 
        "overview": "bool Imagick::setPage ( int $width , int $height , int $x , int $y )", 
        "parameters": [], 
        "path": "php/imagick.setpage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setPointSize": {
        "description": "Sets object's point size property. This method can be used for example to set font size for caption: pseudo-format. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.", 
        "name": "Imagick::setPointSize", 
        "overview": "bool Imagick::setPointSize ( float $point_size )", 
        "parameters": [
            {
                "descr": "Point size", 
                "name": "point_size"
            }
        ], 
        "path": "php/imagick.setpointsize", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setResolution": {
        "description": "Sets the image resolution.", 
        "name": "Imagick::setResolution", 
        "overview": "bool Imagick::setResolution ( float $x_resolution , float $y_resolution )", 
        "parameters": [
            {
                "descr": "The horizontal resolution.", 
                "name": "x_resolution"
            }, 
            {
                "descr": "The vertical resolution.", 
                "name": "y_resolution"
            }
        ], 
        "path": "php/imagick.setresolution", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setResourceLimit": {
        "description": "This method is used to modify the resource limits of the underlying ImageMagick library.", 
        "name": "Imagick::setResourceLimit", 
        "overview": "bool Imagick::setResourceLimit ( int $type , int $limit )", 
        "parameters": [
            {
                "descr": "Refer to the list of resourcetype constants.", 
                "name": "type"
            }, 
            {
                "descr": "The resource limit. The unit depends on the type of the resource being limited.", 
                "name": "limit"
            }
        ], 
        "path": "php/imagick.setresourcelimit", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setSamplingFactors": {
        "description": "Sets the image sampling factors.", 
        "name": "Imagick::setSamplingFactors", 
        "overview": "bool Imagick::setSamplingFactors ( array $factors )", 
        "parameters": [], 
        "path": "php/imagick.setsamplingfactors", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setSize": {
        "description": "Sets the size of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.", 
        "name": "Imagick::setSize", 
        "overview": "bool Imagick::setSize ( int $columns , int $rows )", 
        "parameters": [], 
        "path": "php/imagick.setsize", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setSizeOffset": {
        "description": "Sets the size and offset of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::setSizeOffset", 
        "overview": "bool Imagick::setSizeOffset ( int $columns , int $rows , int $offset )", 
        "parameters": [
            {
                "descr": "The width in pixels.", 
                "name": "columns"
            }, 
            {
                "descr": "The height in pixels.", 
                "name": "rows"
            }, 
            {
                "descr": "The image offset.", 
                "name": "offset"
            }
        ], 
        "path": "php/imagick.setsizeoffset", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::setType": {
        "description": "Sets the image type attribute.", 
        "name": "Imagick::setType", 
        "overview": "bool Imagick::setType ( int $image_type )", 
        "parameters": [], 
        "path": "php/imagick.settype", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shadeImage": {
        "description": "Shines a distant light on an image to create a three-dimensional effect. You control the positioning of the light with azimuth and elevation; azimuth is measured in degrees off the x axis and elevation is measured in pixels above the Z axis. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::shadeImage", 
        "overview": "bool Imagick::shadeImage ( bool $gray , float $azimuth , float $elevation )", 
        "parameters": [
            {
                "descr": "A value other than zero shades the intensity of each pixel.", 
                "name": "gray"
            }, 
            {
                "descr": "Defines the light source direction.", 
                "name": "azimuth"
            }, 
            {
                "descr": "Defines the light source direction.", 
                "name": "elevation"
            }
        ], 
        "path": "php/imagick.shadeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shadowImage": {
        "description": "Simulates an image shadow.", 
        "name": "Imagick::shadowImage", 
        "overview": "bool Imagick::shadowImage ( float $opacity , float $sigma , int $x , int $y )", 
        "parameters": [], 
        "path": "php/imagick.shadowimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sharpenImage": {
        "description": "Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and Imagick::sharpenImage() selects a suitable radius for you.", 
        "name": "Imagick::sharpenImage", 
        "overview": "bool Imagick::sharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [], 
        "path": "php/imagick.sharpenimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shaveImage": {
        "description": "Shaves pixels from the image edges. It allocates the memory necessary for the new Image structure and returns a pointer to the new image.", 
        "name": "Imagick::shaveImage", 
        "overview": "bool Imagick::shaveImage ( int $columns , int $rows )", 
        "parameters": [], 
        "path": "php/imagick.shaveimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::shearImage": {
        "description": "Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.", 
        "name": "Imagick::shearImage", 
        "overview": "bool Imagick::shearImage ( mixed $background , float $x_shear , float $y_shear )", 
        "parameters": [
            {
                "descr": "The background color", 
                "name": "background"
            }, 
            {
                "descr": "The number of degrees to shear on the x axis", 
                "name": "x_shear"
            }, 
            {
                "descr": "The number of degrees to shear on the y axis", 
                "name": "y_shear"
            }
        ], 
        "path": "php/imagick.shearimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sigmoidalContrastImage": {
        "description": "Adjusts the contrast of an image with a non-linear sigmoidal contrast algorithm. Increase the contrast of the image using a sigmoidal transfer function without saturating highlights or shadows. Contrast indicates how much to increase the contrast (0 is none; 3 is typical; 20 is pushing it); mid-point indicates where midtones fall in the resultant image (0 is white; 50 is middle-gray; 100 is black). Set sharpen to TRUE to increase the image contrast otherwise the contrast is reduced.", 
        "name": "Imagick::sigmoidalContrastImage", 
        "overview": "bool Imagick::sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [], 
        "path": "php/imagick.sigmoidalcontrastimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sketchImage": {
        "description": "Simulates a pencil sketch. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::sketchImage() selects a suitable radius for you. Angle gives the angle of the blurring motion. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::sketchImage", 
        "overview": "bool Imagick::sketchImage ( float $radius , float $sigma , float $angle )", 
        "parameters": [
            {
                "descr": "The radius of the Gaussian, in pixels, not counting the center pixel", 
                "name": "radius"
            }, 
            {
                "descr": "The standard deviation of the Gaussian, in pixels.", 
                "name": "sigma"
            }, 
            {
                "descr": "Apply the effect along this angle.", 
                "name": "angle"
            }
        ], 
        "path": "php/imagick.sketchimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::solarizeImage": {
        "description": "Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.", 
        "name": "Imagick::solarizeImage", 
        "overview": "bool Imagick::solarizeImage ( int $threshold )", 
        "parameters": [], 
        "path": "php/imagick.solarizeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::sparseColorImage": {
        "description": "Given the arguments array containing numeric values this method interpolates the colors found at those coordinates across the whole image using sparse_method. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.", 
        "name": "Imagick::sparseColorImage", 
        "overview": "public bool Imagick::sparseColorImage ( int $SPARSE_METHOD , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "Refer to this list of sparse method constants", 
                "name": "SPARSE_METHOD"
            }, 
            {
                "descr": "An array containing the coordinates. ", 
                "name": "arguments"
            }, 
            {
                "descr": "Provide any channel constant that is valid for your channel mode. ", 
                "name": "CHANNEL"
            }
        ], 
        "path": "php/imagick.sparsecolorimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::spliceImage": {
        "description": "Splices a solid color into the image.", 
        "name": "Imagick::spliceImage", 
        "overview": "bool Imagick::spliceImage ( int $width , int $height , int $x , int $y )", 
        "parameters": [], 
        "path": "php/imagick.spliceimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::spreadImage": {
        "description": "Special effects method that randomly displaces each pixel in a block defined by the radius parameter.", 
        "name": "Imagick::spreadImage", 
        "overview": "bool Imagick::spreadImage ( float $radius )", 
        "parameters": [], 
        "path": "php/imagick.spreadimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::steganoImage": {
        "description": "Hides a digital watermark within the image. Recover the hidden watermark later to prove that the authenticity of an image. Offset defines the start position within the image to hide the watermark.", 
        "name": "Imagick::steganoImage", 
        "overview": "Imagick Imagick::steganoImage ( Imagick $watermark_wand , int $offset )", 
        "parameters": [], 
        "path": "php/imagick.steganoimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::stereoImage": {
        "description": "Composites two images and produces a single image that is the composite of a left and right image of a stereo pair.", 
        "name": "Imagick::stereoImage", 
        "overview": "bool Imagick::stereoImage ( Imagick $offset_wand )", 
        "parameters": [], 
        "path": "php/imagick.stereoimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::stripImage": {
        "description": "Strips an image of all profiles and comments.", 
        "name": "Imagick::stripImage", 
        "overview": "bool Imagick::stripImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.stripimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::swirlImage": {
        "description": "Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.", 
        "name": "Imagick::swirlImage", 
        "overview": "bool Imagick::swirlImage ( float $degrees )", 
        "parameters": [], 
        "path": "php/imagick.swirlimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::textureImage": {
        "description": "Repeatedly tiles the texture image across and down the image canvas.", 
        "name": "Imagick::textureImage", 
        "overview": "bool Imagick::textureImage ( Imagick $texture_wand )", 
        "parameters": [], 
        "path": "php/imagick.textureimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::thresholdImage": {
        "description": "Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image.", 
        "name": "Imagick::thresholdImage", 
        "overview": "bool Imagick::thresholdImage ( float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [], 
        "path": "php/imagick.thresholdimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::thumbnailImage": {
        "description": "Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.", 
        "name": "Imagick::thumbnailImage", 
        "overview": "bool Imagick::thumbnailImage ( int $columns , int $rows [, bool $bestfit = false [, bool $fill = false ]] )", 
        "parameters": [
            {
                "descr": "Image width", 
                "name": "columns"
            }, 
            {
                "descr": "Image height", 
                "name": "rows"
            }, 
            {
                "descr": "Whether to force maximum values", 
                "name": "bestfit"
            }
        ], 
        "path": "php/imagick.thumbnailimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::tintImage": {
        "description": "Applies a color vector to each pixel in the image. The length of the vector is 0 for black and white and at its maximum for the midtones. The vector weighing function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).", 
        "name": "Imagick::tintImage", 
        "overview": "bool Imagick::tintImage ( mixed $tint , mixed $opacity )", 
        "parameters": [], 
        "path": "php/imagick.tintimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transformImage": {
        "description": "A convenience method for setting crop size and the image geometry from strings. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::transformImage", 
        "overview": "Imagick Imagick::transformImage ( string $crop , string $geometry )", 
        "parameters": [
            {
                "descr": "A crop geometry string. This geometry defines a subregion of the image to crop.", 
                "name": "crop"
            }, 
            {
                "descr": "An image geometry string. This geometry defines the final size of the image.", 
                "name": "geometry"
            }
        ], 
        "path": "php/imagick.transformimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transparentPaintImage": {
        "description": "Paints pixels matching the target color transparent. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.", 
        "name": "Imagick::transparentPaintImage", 
        "overview": "bool Imagick::transparentPaintImage ( mixed $target , float $alpha , float $fuzz , bool $invert )", 
        "parameters": [
            {
                "descr": "The target color to paint", 
                "name": "target"
            }, 
            {
                "descr": "The level of transparency: 1.0 is fully opaque and 0.0 is fully transparent.", 
                "name": "alpha"
            }, 
            {
                "descr": "The amount of fuzz. For example, set fuzz to 10 and the color red at intensities of 100 and 102 respectively are now interpreted as the same color.", 
                "name": "fuzz"
            }, 
            {
                "descr": "If TRUE paints any pixel that does not match the target color.", 
                "name": "invert"
            }
        ], 
        "path": "php/imagick.transparentpaintimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transposeImage": {
        "description": "Creates a vertical mirror image by reflecting the pixels around the central x-axis while rotating them 90-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::transposeImage", 
        "overview": "bool Imagick::transposeImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.transposeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::transverseImage": {
        "description": "Creates a horizontal mirror image by reflecting the pixels around the central y-axis while rotating them 270-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::transverseImage", 
        "overview": "bool Imagick::transverseImage ( void )", 
        "parameters": [], 
        "path": "php/imagick.transverseimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::trimImage": {
        "description": "Remove edges that are the background color from the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::trimImage", 
        "overview": "bool Imagick::trimImage ( float $fuzz )", 
        "parameters": [
            {
                "descr": "By default target must match a particular pixel color exactly. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagick.trimimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::uniqueImageColors": {
        "description": "Discards all but one of any pixel color. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::uniqueImageColors", 
        "overview": "bool Imagick::uniqueImageColors ( void )", 
        "parameters": [], 
        "path": "php/imagick.uniqueimagecolors", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::unsharpMaskImage": {
        "description": "Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::UnsharpMaskImage() selects a suitable radius for you.", 
        "name": "Imagick::unsharpMaskImage", 
        "overview": "bool Imagick::unsharpMaskImage ( float $radius , float $sigma , float $amount , float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )", 
        "parameters": [], 
        "path": "php/imagick.unsharpmaskimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::valid": {
        "description": "Checks if the current item is valid.", 
        "name": "Imagick::valid", 
        "overview": "bool Imagick::valid ( void )", 
        "parameters": [], 
        "path": "php/imagick.valid", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::vignetteImage": {
        "description": "Softens the edges of the image in vignette style. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::vignetteImage", 
        "overview": "bool Imagick::vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y )", 
        "parameters": [
            {
                "descr": "The black point.", 
                "name": "blackPoint"
            }, 
            {
                "descr": "The white point", 
                "name": "whitePoint"
            }, 
            {
                "descr": "X offset of the ellipse", 
                "name": "x"
            }, 
            {
                "descr": "Y offset of the ellipse", 
                "name": "y"
            }
        ], 
        "path": "php/imagick.vignetteimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::waveImage": {
        "description": "Applies a wave filter to the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.", 
        "name": "Imagick::waveImage", 
        "overview": "bool Imagick::waveImage ( float $amplitude , float $length )", 
        "parameters": [
            {
                "descr": "The amplitude of the wave.", 
                "name": "amplitude"
            }, 
            {
                "descr": "The length of the wave.", 
                "name": "length"
            }
        ], 
        "path": "php/imagick.waveimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::whiteThresholdImage": {
        "description": "Is like Imagick::ThresholdImage() but force all pixels above the threshold into white while leaving all pixels below the threshold unchanged.", 
        "name": "Imagick::whiteThresholdImage", 
        "overview": "bool Imagick::whiteThresholdImage ( mixed $threshold )", 
        "parameters": [], 
        "path": "php/imagick.whitethresholdimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImage": {
        "description": "Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Imagick::readImage() or Imagick::setImageFilename().", 
        "name": "Imagick::writeImage", 
        "overview": "bool Imagick::writeImage ([ string $filename = NULL ] )", 
        "parameters": [
            {
                "descr": "Filename where to write the image. ", 
                "name": "filename"
            }
        ], 
        "path": "php/imagick.writeimage", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImageFile": {
        "description": "Writes the image sequence to an open filehandle. The handle must be opened with for example fopen. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::writeImageFile", 
        "overview": "bool Imagick::writeImageFile ( resource $filehandle )", 
        "parameters": [
            {
                "descr": "Filehandle where to write the image", 
                "name": "filehandle"
            }
        ], 
        "path": "php/imagick.writeimagefile", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImages": {
        "description": "Writes an image or image sequence.", 
        "name": "Imagick::writeImages", 
        "overview": "bool Imagick::writeImages ( string $filename , bool $adjoin )", 
        "parameters": [], 
        "path": "php/imagick.writeimages", 
        "type": "Image/ImageMagick"
    }, 
    "Imagick::writeImagesFile": {
        "description": "Writes all image frames into an open filehandle. This method can be used to write animated gifs or other multiframe images into open filehandle. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.", 
        "name": "Imagick::writeImagesFile", 
        "overview": "bool Imagick::writeImagesFile ( resource $filehandle )", 
        "parameters": [
            {
                "descr": "Filehandle where to write the images", 
                "name": "filehandle"
            }
        ], 
        "path": "php/imagick.writeimagesfile", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw": {
        "description": "", 
        "name": "ImagickDraw", 
        "overview": "bool affine ( array $affine )", 
        "parameters": [], 
        "path": "php/class.imagickdraw", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::__construct": {
        "description": "", 
        "name": "ImagickDraw::__construct", 
        "overview": "ImagickDraw::__construct ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.construct", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::affine": {
        "description": "", 
        "name": "ImagickDraw::affine", 
        "overview": "bool ImagickDraw::affine ( array $affine )", 
        "parameters": [
            {
                "descr": "Affine matrix parameters", 
                "name": "affine"
            }
        ], 
        "path": "php/imagickdraw.affine", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::annotation": {
        "description": "", 
        "name": "ImagickDraw::annotation", 
        "overview": "bool ImagickDraw::annotation ( float $x , float $y , string $text )", 
        "parameters": [
            {
                "descr": "The x coordinate where text is drawn", 
                "name": "x"
            }, 
            {
                "descr": "The y coordinate where text is drawn", 
                "name": "y"
            }, 
            {
                "descr": "The text to draw on the image", 
                "name": "text"
            }
        ], 
        "path": "php/imagickdraw.annotation", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::arc": {
        "description": "", 
        "name": "ImagickDraw::arc", 
        "overview": "bool ImagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )", 
        "parameters": [
            {
                "descr": "Starting x ordinate of bounding rectangle", 
                "name": "sx"
            }, 
            {
                "descr": "starting y ordinate of bounding rectangle", 
                "name": "sy"
            }, 
            {
                "descr": "ending x ordinate of bounding rectangle", 
                "name": "ex"
            }, 
            {
                "descr": "ending y ordinate of bounding rectangle", 
                "name": "ey"
            }, 
            {
                "descr": "starting degrees of rotation", 
                "name": "sd"
            }, 
            {
                "descr": "ending degrees of rotation", 
                "name": "ed"
            }
        ], 
        "path": "php/imagickdraw.arc", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::bezier": {
        "description": "", 
        "name": "ImagickDraw::bezier", 
        "overview": "bool ImagickDraw::bezier ( array $coordinates )", 
        "parameters": [
            {
                "descr": "Multidimensional array like array( array( 'x' => 1, 'y' => 2 ), array( 'x' => 3, 'y' => 4 ) )", 
                "name": "coordinates"
            }
        ], 
        "path": "php/imagickdraw.bezier", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::circle": {
        "description": "", 
        "name": "ImagickDraw::circle", 
        "overview": "bool ImagickDraw::circle ( float $ox , float $oy , float $px , float $py )", 
        "parameters": [
            {
                "descr": "origin x coordinate", 
                "name": "ox"
            }, 
            {
                "descr": "origin y coordinate", 
                "name": "oy"
            }, 
            {
                "descr": "perimeter x coordinate", 
                "name": "px"
            }, 
            {
                "descr": "perimeter y coordinate", 
                "name": "py"
            }
        ], 
        "path": "php/imagickdraw.circle", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::clear": {
        "description": "", 
        "name": "ImagickDraw::clear", 
        "overview": "bool ImagickDraw::clear ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.clear", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::clone": {
        "description": "", 
        "name": "ImagickDraw::clone", 
        "overview": "ImagickDraw ImagickDraw::clone ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.clone", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::color": {
        "description": "", 
        "name": "ImagickDraw::color", 
        "overview": "bool ImagickDraw::color ( float $x , float $y , int $paintMethod )", 
        "parameters": [
            {
                "descr": "x coordinate of the paint", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the paint", 
                "name": "y"
            }, 
            {
                "descr": "one of the PAINT_ constants", 
                "name": "paintMethod"
            }
        ], 
        "path": "php/imagickdraw.color", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::comment": {
        "description": "", 
        "name": "ImagickDraw::comment", 
        "overview": "bool ImagickDraw::comment ( string $comment )", 
        "parameters": [
            {
                "descr": "The comment string to add to vector output stream", 
                "name": "comment"
            }
        ], 
        "path": "php/imagickdraw.comment", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::composite": {
        "description": "", 
        "name": "ImagickDraw::composite", 
        "overview": "bool ImagickDraw::composite ( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand )", 
        "parameters": [
            {
                "descr": "composition operator. One of COMPOSITE_ constants", 
                "name": "compose"
            }, 
            {
                "descr": "x coordinate of the top left corner", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the top left corner", 
                "name": "y"
            }, 
            {
                "descr": "width of the composition image", 
                "name": "width"
            }, 
            {
                "descr": "height of the composition image", 
                "name": "height"
            }, 
            {
                "descr": "the Imagick object where composition image is taken from", 
                "name": "compositeWand"
            }
        ], 
        "path": "php/imagickdraw.composite", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::destroy": {
        "description": "", 
        "name": "ImagickDraw::destroy", 
        "overview": "bool ImagickDraw::destroy ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.destroy", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::ellipse": {
        "description": "", 
        "name": "ImagickDraw::ellipse", 
        "overview": "bool ImagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )", 
        "parameters": [], 
        "path": "php/imagickdraw.ellipse", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getClipPath": {
        "description": "", 
        "name": "ImagickDraw::getClipPath", 
        "overview": "string ImagickDraw::getClipPath ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getclippath", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getClipRule": {
        "description": "", 
        "name": "ImagickDraw::getClipRule", 
        "overview": "int ImagickDraw::getClipRule ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getcliprule", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getClipUnits": {
        "description": "", 
        "name": "ImagickDraw::getClipUnits", 
        "overview": "int ImagickDraw::getClipUnits ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getclipunits", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFillColor": {
        "description": "", 
        "name": "ImagickDraw::getFillColor", 
        "overview": "ImagickPixel ImagickDraw::getFillColor ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfillcolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFillOpacity": {
        "description": "", 
        "name": "ImagickDraw::getFillOpacity", 
        "overview": "float ImagickDraw::getFillOpacity ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfillopacity", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFillRule": {
        "description": "", 
        "name": "ImagickDraw::getFillRule", 
        "overview": "int ImagickDraw::getFillRule ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfillrule", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFont": {
        "description": "", 
        "name": "ImagickDraw::getFont", 
        "overview": "string ImagickDraw::getFont ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfont", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontFamily": {
        "description": "", 
        "name": "ImagickDraw::getFontFamily", 
        "overview": "string ImagickDraw::getFontFamily ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfontfamily", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontSize": {
        "description": "", 
        "name": "ImagickDraw::getFontSize", 
        "overview": "float ImagickDraw::getFontSize ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfontsize", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontStyle": {
        "description": "", 
        "name": "ImagickDraw::getFontStyle", 
        "overview": "int ImagickDraw::getFontStyle ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfontstyle", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getFontWeight": {
        "description": "", 
        "name": "ImagickDraw::getFontWeight", 
        "overview": "int ImagickDraw::getFontWeight ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getfontweight", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getGravity": {
        "description": "", 
        "name": "ImagickDraw::getGravity", 
        "overview": "int ImagickDraw::getGravity ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getgravity", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeAntialias": {
        "description": "", 
        "name": "ImagickDraw::getStrokeAntialias", 
        "overview": "bool ImagickDraw::getStrokeAntialias ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokeantialias", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeColor": {
        "description": "", 
        "name": "ImagickDraw::getStrokeColor", 
        "overview": "ImagickPixel ImagickDraw::getStrokeColor ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokecolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeDashArray": {
        "description": "", 
        "name": "ImagickDraw::getStrokeDashArray", 
        "overview": "array ImagickDraw::getStrokeDashArray ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokedasharray", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeDashOffset": {
        "description": "", 
        "name": "ImagickDraw::getStrokeDashOffset", 
        "overview": "float ImagickDraw::getStrokeDashOffset ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokedashoffset", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeLineCap": {
        "description": "", 
        "name": "ImagickDraw::getStrokeLineCap", 
        "overview": "int ImagickDraw::getStrokeLineCap ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokelinecap", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeLineJoin": {
        "description": "", 
        "name": "ImagickDraw::getStrokeLineJoin", 
        "overview": "int ImagickDraw::getStrokeLineJoin ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokelinejoin", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeMiterLimit": {
        "description": "", 
        "name": "ImagickDraw::getStrokeMiterLimit", 
        "overview": "int ImagickDraw::getStrokeMiterLimit ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokemiterlimit", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeOpacity": {
        "description": "", 
        "name": "ImagickDraw::getStrokeOpacity", 
        "overview": "float ImagickDraw::getStrokeOpacity ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokeopacity", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getStrokeWidth": {
        "description": "", 
        "name": "ImagickDraw::getStrokeWidth", 
        "overview": "float ImagickDraw::getStrokeWidth ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getstrokewidth", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextAlignment": {
        "description": "", 
        "name": "ImagickDraw::getTextAlignment", 
        "overview": "int ImagickDraw::getTextAlignment ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.gettextalignment", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextAntialias": {
        "description": "", 
        "name": "ImagickDraw::getTextAntialias", 
        "overview": "bool ImagickDraw::getTextAntialias ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.gettextantialias", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextDecoration": {
        "description": "", 
        "name": "ImagickDraw::getTextDecoration", 
        "overview": "int ImagickDraw::getTextDecoration ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.gettextdecoration", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextEncoding": {
        "description": "", 
        "name": "ImagickDraw::getTextEncoding", 
        "overview": "string ImagickDraw::getTextEncoding ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.gettextencoding", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getTextUnderColor": {
        "description": "", 
        "name": "ImagickDraw::getTextUnderColor", 
        "overview": "ImagickPixel ImagickDraw::getTextUnderColor ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.gettextundercolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::getVectorGraphics": {
        "description": "", 
        "name": "ImagickDraw::getVectorGraphics", 
        "overview": "string ImagickDraw::getVectorGraphics ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.getvectorgraphics", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::line": {
        "description": "", 
        "name": "ImagickDraw::line", 
        "overview": "bool ImagickDraw::line ( float $sx , float $sy , float $ex , float $ey )", 
        "parameters": [
            {
                "descr": "starting x coordinate", 
                "name": "sx"
            }, 
            {
                "descr": "starting y coordinate", 
                "name": "sy"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "ex"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "ey"
            }
        ], 
        "path": "php/imagickdraw.line", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::matte": {
        "description": "", 
        "name": "ImagickDraw::matte", 
        "overview": "bool ImagickDraw::matte ( float $x , float $y , int $paintMethod )", 
        "parameters": [
            {
                "descr": "x coordinate of the matte", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the matte", 
                "name": "y"
            }, 
            {
                "descr": "PAINT_ constant", 
                "name": "paintMethod"
            }
        ], 
        "path": "php/imagickdraw.matte", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathClose": {
        "description": "", 
        "name": "ImagickDraw::pathClose", 
        "overview": "bool ImagickDraw::pathClose ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.pathclose", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToAbsolute", 
        "overview": "bool ImagickDraw::pathCurveToAbsolute ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )", 
        "parameters": [
            {
                "descr": "x coordinate of the first control point", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the first control point", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the second control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the first control point", 
                "name": "y2"
            }, 
            {
                "descr": "x coordinate of the curve end", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the curve end", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierAbsolute", 
        "overview": "bool ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x , float $y )", 
        "parameters": [
            {
                "descr": "x coordinate of the control point", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the control point", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the end point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the end point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbezierabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierRelative": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierRelative", 
        "overview": "bool ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x , float $y )", 
        "parameters": [
            {
                "descr": "starting x coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "starting y coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbezierrelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute", 
        "overview": "bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbeziersmoothabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToQuadraticBezierSmoothRelative": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToQuadraticBezierSmoothRelative", 
        "overview": "bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetoquadraticbeziersmoothrelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToRelative": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToRelative", 
        "overview": "bool ImagickDraw::pathCurveToRelative ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )", 
        "parameters": [
            {
                "descr": "x coordinate of starting control point", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of starting control point", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of ending control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of ending control point", 
                "name": "y2"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetorelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToSmoothAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToSmoothAbsolute", 
        "overview": "bool ImagickDraw::pathCurveToSmoothAbsolute ( float $x2 , float $y2 , float $x , float $y )", 
        "parameters": [
            {
                "descr": "x coordinate of the second control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the second control point", 
                "name": "y2"
            }, 
            {
                "descr": "x coordinate of the ending point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the ending point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetosmoothabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathCurveToSmoothRelative": {
        "description": "", 
        "name": "ImagickDraw::pathCurveToSmoothRelative", 
        "overview": "bool ImagickDraw::pathCurveToSmoothRelative ( float $x2 , float $y2 , float $x , float $y )", 
        "parameters": [
            {
                "descr": "x coordinate of the second control point", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the second control point", 
                "name": "y2"
            }, 
            {
                "descr": "x coordinate of the ending point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the ending point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathcurvetosmoothrelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathEllipticArcAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathEllipticArcAbsolute", 
        "overview": "bool ImagickDraw::pathEllipticArcAbsolute ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )", 
        "parameters": [
            {
                "descr": "x radius", 
                "name": "rx"
            }, 
            {
                "descr": "y radius", 
                "name": "ry"
            }, 
            {
                "descr": "x axis rotation", 
                "name": "x_axis_rotation"
            }, 
            {
                "descr": "large arc flag", 
                "name": "large_arc_flag"
            }, 
            {
                "descr": "sweep flag", 
                "name": "sweep_flag"
            }, 
            {
                "descr": "x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathellipticarcabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathEllipticArcRelative": {
        "description": "", 
        "name": "ImagickDraw::pathEllipticArcRelative", 
        "overview": "bool ImagickDraw::pathEllipticArcRelative ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )", 
        "parameters": [
            {
                "descr": "x radius", 
                "name": "rx"
            }, 
            {
                "descr": "y radius", 
                "name": "ry"
            }, 
            {
                "descr": "x axis rotation", 
                "name": "x_axis_rotation"
            }, 
            {
                "descr": "large arc flag", 
                "name": "large_arc_flag"
            }, 
            {
                "descr": "sweep flag", 
                "name": "sweep_flag"
            }, 
            {
                "descr": "x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathellipticarcrelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathFinish": {
        "description": "", 
        "name": "ImagickDraw::pathFinish", 
        "overview": "bool ImagickDraw::pathFinish ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.pathfinish", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathLineToAbsolute", 
        "overview": "bool ImagickDraw::pathLineToAbsolute ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "starting x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "ending x coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetoabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToHorizontalAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathLineToHorizontalAbsolute", 
        "overview": "bool ImagickDraw::pathLineToHorizontalAbsolute ( float $x )", 
        "parameters": [
            {
                "descr": "x coordinate", 
                "name": "x"
            }
        ], 
        "path": "php/imagickdraw.pathlinetohorizontalabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToHorizontalRelative": {
        "description": "", 
        "name": "ImagickDraw::pathLineToHorizontalRelative", 
        "overview": "bool ImagickDraw::pathLineToHorizontalRelative ( float $x )", 
        "parameters": [
            {
                "descr": "x coordinate", 
                "name": "x"
            }
        ], 
        "path": "php/imagickdraw.pathlinetohorizontalrelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToRelative": {
        "description": "", 
        "name": "ImagickDraw::pathLineToRelative", 
        "overview": "bool ImagickDraw::pathLineToRelative ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "starting x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "starting y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetorelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToVerticalAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathLineToVerticalAbsolute", 
        "overview": "bool ImagickDraw::pathLineToVerticalAbsolute ( float $y )", 
        "parameters": [
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetoverticalabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathLineToVerticalRelative": {
        "description": "", 
        "name": "ImagickDraw::pathLineToVerticalRelative", 
        "overview": "bool ImagickDraw::pathLineToVerticalRelative ( float $y )", 
        "parameters": [
            {
                "descr": "y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathlinetoverticalrelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathMoveToAbsolute": {
        "description": "", 
        "name": "ImagickDraw::pathMoveToAbsolute", 
        "overview": "bool ImagickDraw::pathMoveToAbsolute ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "x coordinate of the starting point", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the starting point", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathmovetoabsolute", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathMoveToRelative": {
        "description": "", 
        "name": "ImagickDraw::pathMoveToRelative", 
        "overview": "bool ImagickDraw::pathMoveToRelative ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "target x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "target y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.pathmovetorelative", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pathStart": {
        "description": "", 
        "name": "ImagickDraw::pathStart", 
        "overview": "bool ImagickDraw::pathStart ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.pathstart", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::point": {
        "description": "", 
        "name": "ImagickDraw::point", 
        "overview": "bool ImagickDraw::point ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "point's x coordinate", 
                "name": "x"
            }, 
            {
                "descr": "point's y coordinate", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.point", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::polygon": {
        "description": "", 
        "name": "ImagickDraw::polygon", 
        "overview": "bool ImagickDraw::polygon ( array $coordinates )", 
        "parameters": [
            {
                "descr": "multidimensional array like array( array( 'x' => 3, 'y' => 4 ), array( 'x' => 2, 'y' => 6 ) );", 
                "name": "coordinates"
            }
        ], 
        "path": "php/imagickdraw.polygon", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::polyline": {
        "description": "", 
        "name": "ImagickDraw::polyline", 
        "overview": "bool ImagickDraw::polyline ( array $coordinates )", 
        "parameters": [
            {
                "descr": "array of x and y coordinates: array( array( 'x' => 4, 'y' => 6 ), array( 'x' => 8, 'y' => 10 ) )", 
                "name": "coordinates"
            }
        ], 
        "path": "php/imagickdraw.polyline", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pop": {
        "description": "", 
        "name": "ImagickDraw::pop", 
        "overview": "bool ImagickDraw::pop ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.pop", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::popClipPath": {
        "description": "", 
        "name": "ImagickDraw::popClipPath", 
        "overview": "bool ImagickDraw::popClipPath ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.popclippath", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::popDefs": {
        "description": "", 
        "name": "ImagickDraw::popDefs", 
        "overview": "bool ImagickDraw::popDefs ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.popdefs", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::popPattern": {
        "description": "", 
        "name": "ImagickDraw::popPattern", 
        "overview": "bool ImagickDraw::popPattern ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.poppattern", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::push": {
        "description": "", 
        "name": "ImagickDraw::push", 
        "overview": "bool ImagickDraw::push ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.push", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pushClipPath": {
        "description": "", 
        "name": "ImagickDraw::pushClipPath", 
        "overview": "bool ImagickDraw::pushClipPath ( string $clip_mask_id )", 
        "parameters": [
            {
                "descr": "Clip mask Id", 
                "name": "clip_mask_id"
            }
        ], 
        "path": "php/imagickdraw.pushclippath", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pushDefs": {
        "description": "", 
        "name": "ImagickDraw::pushDefs", 
        "overview": "bool ImagickDraw::pushDefs ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.pushdefs", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::pushPattern": {
        "description": "", 
        "name": "ImagickDraw::pushPattern", 
        "overview": "bool ImagickDraw::pushPattern ( string $pattern_id , float $x , float $y , float $width , float $height )", 
        "parameters": [
            {
                "descr": "the pattern Id", 
                "name": "pattern_id"
            }, 
            {
                "descr": "x coordinate of the top-left corner", 
                "name": "x"
            }, 
            {
                "descr": "y coordinate of the top-left corner", 
                "name": "y"
            }, 
            {
                "descr": "width of the pattern", 
                "name": "width"
            }, 
            {
                "descr": "height of the pattern", 
                "name": "height"
            }
        ], 
        "path": "php/imagickdraw.pushpattern", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::rectangle": {
        "description": "", 
        "name": "ImagickDraw::rectangle", 
        "overview": "bool ImagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )", 
        "parameters": [
            {
                "descr": "x coordinate of the top left corner", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the top left corner", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the bottom right corner", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the bottom right corner", 
                "name": "y2"
            }
        ], 
        "path": "php/imagickdraw.rectangle", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::render": {
        "description": "", 
        "name": "ImagickDraw::render", 
        "overview": "bool ImagickDraw::render ( void )", 
        "parameters": [], 
        "path": "php/imagickdraw.render", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::rotate": {
        "description": "", 
        "name": "ImagickDraw::rotate", 
        "overview": "bool ImagickDraw::rotate ( float $degrees )", 
        "parameters": [
            {
                "descr": "degrees to rotate", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagickdraw.rotate", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::roundRectangle": {
        "description": "", 
        "name": "ImagickDraw::roundRectangle", 
        "overview": "bool ImagickDraw::roundRectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )", 
        "parameters": [
            {
                "descr": "x coordinate of the top left corner", 
                "name": "x1"
            }, 
            {
                "descr": "y coordinate of the top left corner", 
                "name": "y1"
            }, 
            {
                "descr": "x coordinate of the bottom right", 
                "name": "x2"
            }, 
            {
                "descr": "y coordinate of the bottom right", 
                "name": "y2"
            }, 
            {
                "descr": "x rounding", 
                "name": "rx"
            }, 
            {
                "descr": "y rounding", 
                "name": "ry"
            }
        ], 
        "path": "php/imagickdraw.roundrectangle", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::scale": {
        "description": "", 
        "name": "ImagickDraw::scale", 
        "overview": "bool ImagickDraw::scale ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "horizontal factor", 
                "name": "x"
            }, 
            {
                "descr": "vertical factor", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.scale", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setClipPath": {
        "description": "", 
        "name": "ImagickDraw::setClipPath", 
        "overview": "bool ImagickDraw::setClipPath ( string $clip_mask )", 
        "parameters": [
            {
                "descr": "the clipping path name", 
                "name": "clip_mask"
            }
        ], 
        "path": "php/imagickdraw.setclippath", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setClipRule": {
        "description": "", 
        "name": "ImagickDraw::setClipRule", 
        "overview": "bool ImagickDraw::setClipRule ( int $fill_rule )", 
        "parameters": [
            {
                "descr": "FILLRULE_ constant", 
                "name": "fill_rule"
            }
        ], 
        "path": "php/imagickdraw.setcliprule", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setClipUnits": {
        "description": "", 
        "name": "ImagickDraw::setClipUnits", 
        "overview": "bool ImagickDraw::setClipUnits ( int $clip_units )", 
        "parameters": [
            {
                "descr": "the number of clip units", 
                "name": "clip_units"
            }
        ], 
        "path": "php/imagickdraw.setclipunits", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillAlpha": {
        "description": "", 
        "name": "ImagickDraw::setFillAlpha", 
        "overview": "bool ImagickDraw::setFillAlpha ( float $opacity )", 
        "parameters": [
            {
                "descr": "fill alpha", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagickdraw.setfillalpha", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillColor": {
        "description": "", 
        "name": "ImagickDraw::setFillColor", 
        "overview": "bool ImagickDraw::setFillColor ( ImagickPixel $fill_pixel )", 
        "parameters": [
            {
                "descr": "ImagickPixel to use to set the color", 
                "name": "fill_pixel"
            }
        ], 
        "path": "php/imagickdraw.setfillcolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillOpacity": {
        "description": "", 
        "name": "ImagickDraw::setFillOpacity", 
        "overview": "bool ImagickDraw::setFillOpacity ( float $fillOpacity )", 
        "parameters": [
            {
                "descr": "the fill opacity", 
                "name": "fillOpacity"
            }
        ], 
        "path": "php/imagickdraw.setfillopacity", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillPatternURL": {
        "description": "", 
        "name": "ImagickDraw::setFillPatternURL", 
        "overview": "bool ImagickDraw::setFillPatternURL ( string $fill_url )", 
        "parameters": [
            {
                "descr": "URL to use to obtain fill pattern.", 
                "name": "fill_url"
            }
        ], 
        "path": "php/imagickdraw.setfillpatternurl", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFillRule": {
        "description": "", 
        "name": "ImagickDraw::setFillRule", 
        "overview": "bool ImagickDraw::setFillRule ( int $fill_rule )", 
        "parameters": [
            {
                "descr": "FILLRULE_ constant", 
                "name": "fill_rule"
            }
        ], 
        "path": "php/imagickdraw.setfillrule", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFont": {
        "description": "", 
        "name": "ImagickDraw::setFont", 
        "overview": "bool ImagickDraw::setFont ( string $font_name )", 
        "parameters": [], 
        "path": "php/imagickdraw.setfont", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontFamily": {
        "description": "", 
        "name": "ImagickDraw::setFontFamily", 
        "overview": "bool ImagickDraw::setFontFamily ( string $font_family )", 
        "parameters": [
            {
                "descr": "the font family", 
                "name": "font_family"
            }
        ], 
        "path": "php/imagickdraw.setfontfamily", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontSize": {
        "description": "", 
        "name": "ImagickDraw::setFontSize", 
        "overview": "bool ImagickDraw::setFontSize ( float $pointsize )", 
        "parameters": [
            {
                "descr": "the point size", 
                "name": "pointsize"
            }
        ], 
        "path": "php/imagickdraw.setfontsize", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontStretch": {
        "description": "", 
        "name": "ImagickDraw::setFontStretch", 
        "overview": "bool ImagickDraw::setFontStretch ( int $fontStretch )", 
        "parameters": [
            {
                "descr": "STRETCH_ constant", 
                "name": "fontStretch"
            }
        ], 
        "path": "php/imagickdraw.setfontstretch", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontStyle": {
        "description": "", 
        "name": "ImagickDraw::setFontStyle", 
        "overview": "bool ImagickDraw::setFontStyle ( int $style )", 
        "parameters": [
            {
                "descr": "STYLETYPE_ constant", 
                "name": "style"
            }
        ], 
        "path": "php/imagickdraw.setfontstyle", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setFontWeight": {
        "description": "", 
        "name": "ImagickDraw::setFontWeight", 
        "overview": "bool ImagickDraw::setFontWeight ( int $font_weight )", 
        "parameters": [], 
        "path": "php/imagickdraw.setfontweight", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setGravity": {
        "description": "", 
        "name": "ImagickDraw::setGravity", 
        "overview": "bool ImagickDraw::setGravity ( int $gravity )", 
        "parameters": [
            {
                "descr": "GRAVITY_ constant", 
                "name": "gravity"
            }
        ], 
        "path": "php/imagickdraw.setgravity", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeAlpha": {
        "description": "", 
        "name": "ImagickDraw::setStrokeAlpha", 
        "overview": "bool ImagickDraw::setStrokeAlpha ( float $opacity )", 
        "parameters": [
            {
                "descr": "opacity", 
                "name": "opacity"
            }
        ], 
        "path": "php/imagickdraw.setstrokealpha", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeAntialias": {
        "description": "", 
        "name": "ImagickDraw::setStrokeAntialias", 
        "overview": "bool ImagickDraw::setStrokeAntialias ( bool $stroke_antialias )", 
        "parameters": [
            {
                "descr": "the antialias setting", 
                "name": "stroke_antialias"
            }
        ], 
        "path": "php/imagickdraw.setstrokeantialias", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeColor": {
        "description": "", 
        "name": "ImagickDraw::setStrokeColor", 
        "overview": "bool ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel )", 
        "parameters": [
            {
                "descr": "the stroke color", 
                "name": "stroke_pixel"
            }
        ], 
        "path": "php/imagickdraw.setstrokecolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeDashArray": {
        "description": "", 
        "name": "ImagickDraw::setStrokeDashArray", 
        "overview": "bool ImagickDraw::setStrokeDashArray ( array $dashArray )", 
        "parameters": [
            {
                "descr": "array of floats", 
                "name": "dashArray"
            }
        ], 
        "path": "php/imagickdraw.setstrokedasharray", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeDashOffset": {
        "description": "", 
        "name": "ImagickDraw::setStrokeDashOffset", 
        "overview": "bool ImagickDraw::setStrokeDashOffset ( float $dash_offset )", 
        "parameters": [
            {
                "descr": "dash offset", 
                "name": "dash_offset"
            }
        ], 
        "path": "php/imagickdraw.setstrokedashoffset", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeLineCap": {
        "description": "", 
        "name": "ImagickDraw::setStrokeLineCap", 
        "overview": "bool ImagickDraw::setStrokeLineCap ( int $linecap )", 
        "parameters": [
            {
                "descr": "LINECAP_ constant", 
                "name": "linecap"
            }
        ], 
        "path": "php/imagickdraw.setstrokelinecap", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeLineJoin": {
        "description": "", 
        "name": "ImagickDraw::setStrokeLineJoin", 
        "overview": "bool ImagickDraw::setStrokeLineJoin ( int $linejoin )", 
        "parameters": [
            {
                "descr": "LINEJOIN_ constant", 
                "name": "linejoin"
            }
        ], 
        "path": "php/imagickdraw.setstrokelinejoin", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeMiterLimit": {
        "description": "", 
        "name": "ImagickDraw::setStrokeMiterLimit", 
        "overview": "bool ImagickDraw::setStrokeMiterLimit ( int $miterlimit )", 
        "parameters": [
            {
                "descr": "the miter limit", 
                "name": "miterlimit"
            }
        ], 
        "path": "php/imagickdraw.setstrokemiterlimit", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeOpacity": {
        "description": "", 
        "name": "ImagickDraw::setStrokeOpacity", 
        "overview": "bool ImagickDraw::setStrokeOpacity ( float $stroke_opacity )", 
        "parameters": [
            {
                "descr": "stroke opacity. 1.0 is fully opaque", 
                "name": "stroke_opacity"
            }
        ], 
        "path": "php/imagickdraw.setstrokeopacity", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokePatternURL": {
        "description": "", 
        "name": "ImagickDraw::setStrokePatternURL", 
        "overview": "bool ImagickDraw::setStrokePatternURL ( string $stroke_url )", 
        "parameters": [
            {
                "descr": "stroke URL", 
                "name": "stroke_url"
            }
        ], 
        "path": "php/imagickdraw.setstrokepatternurl", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setStrokeWidth": {
        "description": "", 
        "name": "ImagickDraw::setStrokeWidth", 
        "overview": "bool ImagickDraw::setStrokeWidth ( float $stroke_width )", 
        "parameters": [
            {
                "descr": "stroke width", 
                "name": "stroke_width"
            }
        ], 
        "path": "php/imagickdraw.setstrokewidth", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextAlignment": {
        "description": "", 
        "name": "ImagickDraw::setTextAlignment", 
        "overview": "bool ImagickDraw::setTextAlignment ( int $alignment )", 
        "parameters": [
            {
                "descr": "ALIGN_ constant", 
                "name": "alignment"
            }
        ], 
        "path": "php/imagickdraw.settextalignment", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextAntialias": {
        "description": "", 
        "name": "ImagickDraw::setTextAntialias", 
        "overview": "bool ImagickDraw::setTextAntialias ( bool $antiAlias )", 
        "parameters": [], 
        "path": "php/imagickdraw.settextantialias", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextDecoration": {
        "description": "", 
        "name": "ImagickDraw::setTextDecoration", 
        "overview": "bool ImagickDraw::setTextDecoration ( int $decoration )", 
        "parameters": [
            {
                "descr": "DECORATION_ constant", 
                "name": "decoration"
            }
        ], 
        "path": "php/imagickdraw.settextdecoration", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextEncoding": {
        "description": "", 
        "name": "ImagickDraw::setTextEncoding", 
        "overview": "bool ImagickDraw::setTextEncoding ( string $encoding )", 
        "parameters": [
            {
                "descr": "the encoding name", 
                "name": "encoding"
            }
        ], 
        "path": "php/imagickdraw.settextencoding", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setTextUnderColor": {
        "description": "", 
        "name": "ImagickDraw::setTextUnderColor", 
        "overview": "bool ImagickDraw::setTextUnderColor ( ImagickPixel $under_color )", 
        "parameters": [
            {
                "descr": "the under color", 
                "name": "under_color"
            }
        ], 
        "path": "php/imagickdraw.settextundercolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setVectorGraphics": {
        "description": "", 
        "name": "ImagickDraw::setVectorGraphics", 
        "overview": "bool ImagickDraw::setVectorGraphics ( string $xml )", 
        "parameters": [
            {
                "descr": "xml containing the vector graphics", 
                "name": "xml"
            }
        ], 
        "path": "php/imagickdraw.setvectorgraphics", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::setViewbox": {
        "description": "", 
        "name": "ImagickDraw::setViewbox", 
        "overview": "bool ImagickDraw::setViewbox ( int $x1 , int $y1 , int $x2 , int $y2 )", 
        "parameters": [
            {
                "descr": "left x coordinate", 
                "name": "x1"
            }, 
            {
                "descr": "left y coordinate", 
                "name": "y1"
            }, 
            {
                "descr": "right x coordinate", 
                "name": "x2"
            }, 
            {
                "descr": "right y coordinate", 
                "name": "y2"
            }
        ], 
        "path": "php/imagickdraw.setviewbox", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::skewX": {
        "description": "", 
        "name": "ImagickDraw::skewX", 
        "overview": "bool ImagickDraw::skewX ( float $degrees )", 
        "parameters": [
            {
                "descr": "degrees to skew", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagickdraw.skewx", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::skewY": {
        "description": "", 
        "name": "ImagickDraw::skewY", 
        "overview": "bool ImagickDraw::skewY ( float $degrees )", 
        "parameters": [
            {
                "descr": "degrees to skew", 
                "name": "degrees"
            }
        ], 
        "path": "php/imagickdraw.skewy", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickDraw::translate": {
        "description": "", 
        "name": "ImagickDraw::translate", 
        "overview": "bool ImagickDraw::translate ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "horizontal translation", 
                "name": "x"
            }, 
            {
                "descr": "vertical translation", 
                "name": "y"
            }
        ], 
        "path": "php/imagickdraw.translate", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel": {
        "description": "", 
        "name": "ImagickPixel", 
        "overview": "bool clear ( void )", 
        "parameters": [], 
        "path": "php/class.imagickpixel", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::__construct": {
        "description": "", 
        "name": "ImagickPixel::__construct", 
        "overview": "ImagickPixel::__construct ([ string $color ] )", 
        "parameters": [
            {
                "descr": "The optional color string to use as the initial value of this object.", 
                "name": "color"
            }
        ], 
        "path": "php/imagickpixel.construct", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::clear": {
        "description": "", 
        "name": "ImagickPixel::clear", 
        "overview": "bool ImagickPixel::clear ( void )", 
        "parameters": [], 
        "path": "php/imagickpixel.clear", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::destroy": {
        "description": "", 
        "name": "ImagickPixel::destroy", 
        "overview": "bool ImagickPixel::destroy ( void )", 
        "parameters": [], 
        "path": "php/imagickpixel.destroy", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColor": {
        "description": "Returns the color described by the ImagickPixel object, as an array. If the color has an opacity channel set, this is provided as a fourth value in the list.", 
        "name": "ImagickPixel::getColor", 
        "overview": "array ImagickPixel::getColor ([ bool $normalized = false ] )", 
        "parameters": [
            {
                "descr": "Normalize the color values", 
                "name": "normalized"
            }
        ], 
        "path": "php/imagickpixel.getcolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColorAsString": {
        "description": "Returns the color of the ImagickPixel object as a string.", 
        "name": "ImagickPixel::getColorAsString", 
        "overview": "string ImagickPixel::getColorAsString ( void )", 
        "parameters": [], 
        "path": "php/imagickpixel.getcolorasstring", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColorCount": {
        "description": "", 
        "name": "ImagickPixel::getColorCount", 
        "overview": "int ImagickPixel::getColorCount ( void )", 
        "parameters": [], 
        "path": "php/imagickpixel.getcolorcount", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getColorValue": {
        "description": "Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.", 
        "name": "ImagickPixel::getColorValue", 
        "overview": "float ImagickPixel::getColorValue ( int $color )", 
        "parameters": [
            {
                "descr": "The color to get the value of, specified as one of the Imagick color constants. ", 
                "name": "color"
            }
        ], 
        "path": "php/imagickpixel.getcolorvalue", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::getHSL": {
        "description": "Returns the normalized HSL color described by the ImagickPixel object, with each of the three values as floating point numbers between 0.0 and 1.0.", 
        "name": "ImagickPixel::getHSL", 
        "overview": "array ImagickPixel::getHSL ( void )", 
        "parameters": [], 
        "path": "php/imagickpixel.gethsl", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::isPixelSimilar": {
        "description": "Checks the distance between the color described by this ImagickPixel object and that of the provided object, by plotting their RGB values on the color cube. If the distance between the two points is less than the fuzz value given, the colors are similar. This method replaces ImagickPixel::isSimilar() and correctly normalises the fuzz value to ImageMagick QuantumRange.", 
        "name": "ImagickPixel::isPixelSimilar", 
        "overview": "bool ImagickPixel::isPixelSimilar ( ImagickPixel $color , float $fuzz )", 
        "parameters": [
            {
                "descr": "The ImagickPixel object to compare this object against.", 
                "name": "color"
            }, 
            {
                "descr": "The maximum distance within which to consider these colors as similar. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagickpixel.ispixelsimilar", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::isSimilar": {
        "description": "", 
        "name": "ImagickPixel::isSimilar", 
        "overview": "bool ImagickPixel::isSimilar ( ImagickPixel $color , float $fuzz )", 
        "parameters": [
            {
                "descr": "The ImagickPixel object to compare this object against.", 
                "name": "color"
            }, 
            {
                "descr": "The maximum distance within which to consider these colors as similar. ", 
                "name": "fuzz"
            }
        ], 
        "path": "php/imagickpixel.issimilar", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::setColor": {
        "description": "", 
        "name": "ImagickPixel::setColor", 
        "overview": "bool ImagickPixel::setColor ( string $color )", 
        "parameters": [
            {
                "descr": "The color definition to use in order to initialise the ImagickPixel object.", 
                "name": "color"
            }
        ], 
        "path": "php/imagickpixel.setcolor", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::setColorValue": {
        "description": "Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to an ImagickPixel object.", 
        "name": "ImagickPixel::setColorValue", 
        "overview": "bool ImagickPixel::setColorValue ( int $color , float $value )", 
        "parameters": [
            {
                "descr": "One of the Imagick color constants e.g. ", 
                "name": "color"
            }, 
            {
                "descr": "The value to set this channel to, ranging from 0 to 1.", 
                "name": "value"
            }
        ], 
        "path": "php/imagickpixel.setcolorvalue", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixel::setHSL": {
        "description": "Sets the color described by the ImagickPixel object using normalized values for hue, saturation and luminosity.", 
        "name": "ImagickPixel::setHSL", 
        "overview": "bool ImagickPixel::setHSL ( float $hue , float $saturation , float $luminosity )", 
        "parameters": [
            {
                "descr": "The normalized value for hue, described as a fractional arc (between 0 and 1) of the hue circle, where the zero value is red.", 
                "name": "hue"
            }, 
            {
                "descr": "The normalized value for saturation, with 1 as full saturation.", 
                "name": "saturation"
            }, 
            {
                "descr": "The normalized value for luminosity, on a scale from black at 0 to white at 1, with the full HS value at 0.5 luminosity.", 
                "name": "luminosity"
            }
        ], 
        "path": "php/imagickpixel.sethsl", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator": {
        "description": "", 
        "name": "ImagickPixelIterator", 
        "overview": "bool clear ( void )", 
        "parameters": [], 
        "path": "php/class.imagickpixeliterator", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::__construct": {
        "description": "", 
        "name": "ImagickPixelIterator::__construct", 
        "overview": "ImagickPixelIterator::__construct ( Imagick $wand )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.construct", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::clear": {
        "description": "", 
        "name": "ImagickPixelIterator::clear", 
        "overview": "bool ImagickPixelIterator::clear ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.clear", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::destroy": {
        "description": "", 
        "name": "ImagickPixelIterator::destroy", 
        "overview": "bool ImagickPixelIterator::destroy ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.destroy", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getCurrentIteratorRow": {
        "description": "", 
        "name": "ImagickPixelIterator::getCurrentIteratorRow", 
        "overview": "array ImagickPixelIterator::getCurrentIteratorRow ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.getcurrentiteratorrow", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getIteratorRow": {
        "description": "", 
        "name": "ImagickPixelIterator::getIteratorRow", 
        "overview": "int ImagickPixelIterator::getIteratorRow ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.getiteratorrow", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getNextIteratorRow": {
        "description": "", 
        "name": "ImagickPixelIterator::getNextIteratorRow", 
        "overview": "array ImagickPixelIterator::getNextIteratorRow ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.getnextiteratorrow", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::getPreviousIteratorRow": {
        "description": "", 
        "name": "ImagickPixelIterator::getPreviousIteratorRow", 
        "overview": "array ImagickPixelIterator::getPreviousIteratorRow ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.getpreviousiteratorrow", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::newPixelIterator": {
        "description": "", 
        "name": "ImagickPixelIterator::newPixelIterator", 
        "overview": "bool ImagickPixelIterator::newPixelIterator ( Imagick $wand )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.newpixeliterator", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::newPixelRegionIterator": {
        "description": "", 
        "name": "ImagickPixelIterator::newPixelRegionIterator", 
        "overview": "bool ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand , int $x , int $y , int $columns , int $rows )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.newpixelregioniterator", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::resetIterator": {
        "description": "", 
        "name": "ImagickPixelIterator::resetIterator", 
        "overview": "bool ImagickPixelIterator::resetIterator ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.resetiterator", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::setIteratorFirstRow": {
        "description": "", 
        "name": "ImagickPixelIterator::setIteratorFirstRow", 
        "overview": "bool ImagickPixelIterator::setIteratorFirstRow ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.setiteratorfirstrow", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::setIteratorLastRow": {
        "description": "", 
        "name": "ImagickPixelIterator::setIteratorLastRow", 
        "overview": "bool ImagickPixelIterator::setIteratorLastRow ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.setiteratorlastrow", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::setIteratorRow": {
        "description": "", 
        "name": "ImagickPixelIterator::setIteratorRow", 
        "overview": "bool ImagickPixelIterator::setIteratorRow ( int $row )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.setiteratorrow", 
        "type": "Image/ImageMagick"
    }, 
    "ImagickPixelIterator::syncIterator": {
        "description": "", 
        "name": "ImagickPixelIterator::syncIterator", 
        "overview": "bool ImagickPixelIterator::syncIterator ( void )", 
        "parameters": [], 
        "path": "php/imagickpixeliterator.synciterator", 
        "type": "Image/ImageMagick"
    }, 
    "InfiniteIterator": {
        "description": "", 
        "name": "InfiniteIterator", 
        "overview": "public __construct ( Iterator $iterator )", 
        "parameters": [], 
        "path": "php/class.infiniteiterator", 
        "type": "SPL/Iterators"
    }, 
    "InfiniteIterator::__construct": {
        "description": "Constructs an InfiniteIterator from an Iterator.", 
        "name": "InfiniteIterator::__construct", 
        "overview": "public InfiniteIterator::__construct ( Iterator $iterator )", 
        "parameters": [
            {
                "descr": "The iterator to infinitely iterate over.", 
                "name": "iterator"
            }
        ], 
        "path": "php/infiniteiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "InfiniteIterator::next": {
        "description": "Moves the inner Iterator forward to its next element if there is one, otherwise rewinds the inner Iterator back to the beginning.", 
        "name": "InfiniteIterator::next", 
        "overview": "public void InfiniteIterator::next ( void )", 
        "parameters": [], 
        "path": "php/infiniteiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "IntlBreakIterator": {
        "description": "", 
        "name": "IntlBreakIterator", 
        "overview": "private __construct ( void )", 
        "parameters": [], 
        "path": "php/class.intlbreakiterator", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::__construct": {
        "description": "", 
        "name": "IntlBreakIterator::__construct", 
        "overview": "private IntlBreakIterator::__construct ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.construct", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createCharacterInstance": {
        "description": "", 
        "name": "IntlBreakIterator::createCharacterInstance", 
        "overview": "public static ReturnType IntlBreakIterator::createCharacterInstance ([ string $\"locale\" ] )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.createcharacterinstance", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createCodePointInstance": {
        "description": "", 
        "name": "IntlBreakIterator::createCodePointInstance", 
        "overview": "public static ReturnType IntlBreakIterator::createCodePointInstance ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.createcodepointinstance", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createLineInstance": {
        "description": "", 
        "name": "IntlBreakIterator::createLineInstance", 
        "overview": "public static ReturnType IntlBreakIterator::createLineInstance ([ string $\"locale\" ] )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.createlineinstance", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createSentenceInstance": {
        "description": "", 
        "name": "IntlBreakIterator::createSentenceInstance", 
        "overview": "public static ReturnType IntlBreakIterator::createSentenceInstance ([ string $\"locale\" ] )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.createsentenceinstance", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createTitleInstance": {
        "description": "", 
        "name": "IntlBreakIterator::createTitleInstance", 
        "overview": "public static ReturnType IntlBreakIterator::createTitleInstance ([ string $\"locale\" ] )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.createtitleinstance", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::createWordInstance": {
        "description": "", 
        "name": "IntlBreakIterator::createWordInstance", 
        "overview": "public static ReturnType IntlBreakIterator::createWordInstance ([ string $\"locale\" ] )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.createwordinstance", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::current": {
        "description": "", 
        "name": "IntlBreakIterator::current", 
        "overview": "public ReturnType IntlBreakIterator::current ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.current", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::first": {
        "description": "", 
        "name": "IntlBreakIterator::first", 
        "overview": "public ReturnType IntlBreakIterator::first ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.first", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::following": {
        "description": "", 
        "name": "IntlBreakIterator::following", 
        "overview": "public ReturnType IntlBreakIterator::following ( string $\"offset\" )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.following", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getErrorCode": {
        "description": "Procedural style:", 
        "name": "IntlBreakIterator::getErrorCode", 
        "overview": "public ReturnType IntlBreakIterator::getErrorCode ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.geterrorcode", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getErrorMessage": {
        "description": "Procedural style:", 
        "name": "IntlBreakIterator::getErrorMessage", 
        "overview": "public ReturnType IntlBreakIterator::getErrorMessage ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.geterrormessage", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getLocale": {
        "description": "", 
        "name": "IntlBreakIterator::getLocale", 
        "overview": "public ReturnType IntlBreakIterator::getLocale ( string $\"locale_type\" )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.getlocale", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getPartsIterator": {
        "description": "", 
        "name": "IntlBreakIterator::getPartsIterator", 
        "overview": "public ReturnType IntlBreakIterator::getPartsIterator ([ string $\"key_type\" ] )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.getpartsiterator", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::getText": {
        "description": "", 
        "name": "IntlBreakIterator::getText", 
        "overview": "public ReturnType IntlBreakIterator::getText ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.gettext", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::isBoundary": {
        "description": "", 
        "name": "IntlBreakIterator::isBoundary", 
        "overview": "public ReturnType IntlBreakIterator::isBoundary ( string $\"offset\" )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.isboundary", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::last": {
        "description": "", 
        "name": "IntlBreakIterator::last", 
        "overview": "public ReturnType IntlBreakIterator::last ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.last", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::next": {
        "description": "", 
        "name": "IntlBreakIterator::next", 
        "overview": "public ReturnType IntlBreakIterator::next ([ string $\"offset\" ] )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.next", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::preceding": {
        "description": "", 
        "name": "IntlBreakIterator::preceding", 
        "overview": "public ReturnType IntlBreakIterator::preceding ( string $\"offset\" )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.preceding", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::previous": {
        "description": "", 
        "name": "IntlBreakIterator::previous", 
        "overview": "public ReturnType IntlBreakIterator::previous ( void )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.previous", 
        "type": "Internationalization"
    }, 
    "IntlBreakIterator::setText": {
        "description": "", 
        "name": "IntlBreakIterator::setText", 
        "overview": "public ReturnType IntlBreakIterator::setText ( string $\"text\" )", 
        "parameters": [], 
        "path": "php/intlbreakiterator.settext", 
        "type": "Internationalization"
    }, 
    "IntlCalendar": {
        "description": "", 
        "name": "IntlCalendar", 
        "overview": "public bool add ( int $field , int $amount )", 
        "parameters": [], 
        "path": "php/class.intlcalendar", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::__construct": {
        "description": "A private constructor for disallowing instantiation with the new operator.", 
        "name": "IntlCalendar::__construct", 
        "overview": "private IntlCalendar::__construct ( void )", 
        "parameters": [], 
        "path": "php/intlcalendar.construct", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::add": {
        "description": "Add a signed amount to a field. Adding a positive amount allows advances in time, even if the numeric value of the field decreases (e.g. when working with years in BC dates).", 
        "name": "IntlCalendar::add", 
        "overview": "public bool IntlCalendar::add ( int $field , int $amount )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }, 
            {
                "descr": "The signed amount to add to the current field. ", 
                "name": "amount"
            }
        ], 
        "path": "php/intlcalendar.add", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::after": {
        "description": "Returns whether this object\u02bcs time succeeds the argument\u02bcs time.", 
        "name": "IntlCalendar::after", 
        "overview": "public bool IntlCalendar::after ( IntlCalendar $other )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The calendar whose time will be checked against the primary object\u02bcs time.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.after", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::before": {
        "description": "Returns whether this object\u02bcs time precedes the argument\u02bcs time.", 
        "name": "IntlCalendar::before", 
        "overview": "public bool IntlCalendar::before ( IntlCalendar $other )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The calendar whose time will be checked against the primary object\u02bcs time.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.before", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::clear": {
        "description": "Clears either all of the fields or a specific field. A cleared field is marked as unset, giving it the lowest priority against overlapping fields or even default values when calculating the time. Additionally, its value is set to 0, though given the field\u02bcs low priority, its value may have been internally set to another value by the time the field has finished been queried.", 
        "name": "IntlCalendar::clear", 
        "overview": "public bool IntlCalendar::clear ([ int $field = NULL ] )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.clear", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::createInstance": {
        "description": "Given a timezone and locale, this method creates an IntlCalendar object. This factory method may return a subclass of IntlCalendar.", 
        "name": "IntlCalendar::createInstance", 
        "overview": "public static IntlCalendar IntlCalendar::createInstance ([ mixed $timeZone = NULL [, string $locale = \"\" ]] )", 
        "parameters": [
            {
                "descr": "The timezone to use.    NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get().     An IntlTimeZone, which will be used directly.     A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICU\u02bcs database, not PHP\u02bcs.     A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.", 
                "name": "timeZone"
            }, 
            {
                "descr": "A locale to use or NULL to use the default locale.", 
                "name": "locale"
            }
        ], 
        "path": "php/intlcalendar.createinstance", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::equals": {
        "description": "Returns true if this calendar and the given calendar have the same time. The settings, calendar types and field states do not have to be the same.", 
        "name": "IntlCalendar::equals", 
        "overview": "public bool IntlCalendar::equals ( IntlCalendar $other )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The calendar to compare with the primary object.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.equals", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::fieldDifference": {
        "description": "Return the difference between the given time and the time this object is set to, with respect to the quantity specified the field parameter.", 
        "name": "IntlCalendar::fieldDifference", 
        "overview": "public int IntlCalendar::fieldDifference ( float $when , int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The time against which to compare the quantity represented by the field. ", 
                "name": "when"
            }, 
            {
                "descr": "The field that represents the quantity being compared. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.fielddifference", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::fromDateTime": {
        "description": "Creates an IntlCalendar object either from a DateTime object or from a string from which a DateTime object can be built.", 
        "name": "IntlCalendar::fromDateTime", 
        "overview": "public static IntlCalendar IntlCalendar::fromDateTime ( mixed $dateTime )", 
        "parameters": [
            {
                "descr": "A DateTime object or a string that can be passed to DateTime::__construct().", 
                "name": "dateTime"
            }
        ], 
        "path": "php/intlcalendar.fromdatetime", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::get": {
        "description": "Gets the value for a specific field.", 
        "name": "IntlCalendar::get", 
        "overview": "public int IntlCalendar::get ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.get", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getActualMaximum": {
        "description": "Returns a field\u02bcs relative maximum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the smallest relative maximum for the field and would increment it until reaching the global maximum or the field value wraps around, in which the value returned would be the global maximum or the value before the wrapping, respectively.", 
        "name": "IntlCalendar::getActualMaximum", 
        "overview": "public int IntlCalendar::getActualMaximum ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getactualmaximum", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getActualMinimum": {
        "description": "Returns a field\u02bcs relative minimum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the greatest relative minimum for the field and would decrement it until reaching the global minimum or the field value wraps around, in which the value returned would be the global minimum or the value before the wrapping, respectively.", 
        "name": "IntlCalendar::getActualMinimum", 
        "overview": "public int IntlCalendar::getActualMinimum ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getactualminimum", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getAvailableLocales": {
        "description": "Gives the list of locales for which calendars are installed. As of ICU 51, this is the list of all installed ICU locales.", 
        "name": "IntlCalendar::getAvailableLocales", 
        "overview": "public static array IntlCalendar::getAvailableLocales ( void )", 
        "parameters": [], 
        "path": "php/intlcalendar.getavailablelocales", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getDayOfWeekType": {
        "description": "Returns whether the passed day is a weekday (IntlCalendar::DOW_TYPE_WEEKDAY), a weekend day (IntlCalendar::DOW_TYPE_WEEKEND), a day during which a transition occurs into the weekend (IntlCalendar::DOW_TYPE_WEEKEND_OFFSET) or a day during which the weekend ceases (IntlCalendar::DOW_TYPE_WEEKEND_CEASE).", 
        "name": "IntlCalendar::getDayOfWeekType", 
        "overview": "public int IntlCalendar::getDayOfWeekType ( int $dayOfWeek )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, \u2026, IntlCalendar::DOW_SATURDAY.", 
                "name": "dayOfWeek"
            }
        ], 
        "path": "php/intlcalendar.getdayofweektype", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getErrorCode": {
        "description": "Returns the numeric ICU error code for the last call on this object (including cloning) or the IntlCalendar given for the calendar parameter (in the procedural\u2012style version). This may indicate only a warning (negative error code) or no error at all (U_ZERO_ERROR). The actual presence of an error can be tested with intl_is_failure().", 
        "name": "IntlCalendar::getErrorCode", 
        "overview": "public int IntlCalendar::getErrorCode ( void )", 
        "parameters": [
            {
                "descr": "The calendar object, on the procedural style interface.", 
                "name": "calendar"
            }
        ], 
        "path": "php/intlcalendar.geterrorcode", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getErrorMessage": {
        "description": "Returns the error message (if any) associated with the error reported by IntlCalendar::getErrorCode() or intlcal_get_error_code(). If there is no associated error message, only the string representation of the name of the error constant will be returned. Otherwise, the message also includes a message set on the side of the PHP binding.", 
        "name": "IntlCalendar::getErrorMessage", 
        "overview": "public string IntlCalendar::getErrorMessage ( void )", 
        "parameters": [
            {
                "descr": "The calendar object, on the procedural style interface.", 
                "name": "calendar"
            }
        ], 
        "path": "php/intlcalendar.geterrormessage", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getFirstDayOfWeek": {
        "description": "The week day deemed to start a week, either the default value for this locale or the value set with IntlCalendar::setFirstDayOfWeek().", 
        "name": "IntlCalendar::getFirstDayOfWeek", 
        "overview": "public int IntlCalendar::getFirstDayOfWeek ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getfirstdayofweek", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getGreatestMinimum": {
        "description": "Returns the largest local minimum for a field. This should be a value larger or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn larger or equal to that returned by IntlCalendar::getMinimum(). All these three functions return the same value for the Gregorian calendar.", 
        "name": "IntlCalendar::getGreatestMinimum", 
        "overview": "public int IntlCalendar::getGreatestMinimum ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getgreatestminimum", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getKeywordValuesForLocale": {
        "description": "For a given locale key, get the set of values for that key that would result in a different behavior. For now, only the 'calendar' keyword is supported.", 
        "name": "IntlCalendar::getKeywordValuesForLocale", 
        "overview": "public static Iterator IntlCalendar::getKeywordValuesForLocale ( string $key , string $locale , boolean $commonlyUsed )", 
        "parameters": [
            {
                "descr": "The locale keyword for which relevant values are to be queried. ", 
                "name": "key"
            }, 
            {
                "descr": "The locale onto which the keyword/value pair are to be appended.", 
                "name": "locale"
            }, 
            {
                "descr": "Whether to show only the values commonly used for the specified locale.", 
                "name": "commonlyUsed"
            }
        ], 
        "path": "php/intlcalendar.getkeywordvaluesforlocale", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getLeastMaximum": {
        "description": "Returns the smallest local maximumw for a field. This should be a value smaller or equal to that returned by IntlCalendar::getActualMaxmimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getMaximum().", 
        "name": "IntlCalendar::getLeastMaximum", 
        "overview": "public int IntlCalendar::getLeastMaximum ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getleastmaximum", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getLocale": {
        "description": "Returns the locale used by this calendar object.", 
        "name": "IntlCalendar::getLocale", 
        "overview": "public string IntlCalendar::getLocale ( int $localeType )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "Whether to fetch the actual locale (the locale from which the calendar data originates, with Locale::ACTUAL_LOCALE) or the valid locale, i.e., the most specific locale supported by ICU relatively to the requested locale \u2013 see Locale::VALID_LOCALE. From the most general to the most specific, the locales are ordered in this fashion \u2013 actual locale, valid locale, requested locale.", 
                "name": "localeType"
            }
        ], 
        "path": "php/intlcalendar.getlocale", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getMaximum": {
        "description": "Gets the global maximum for a field, in this specific calendar. This value is larger or equal to that returned by IntlCalendar::getActualMaximum(), which is in its turn larger or equal to that returned by IntlCalendar::getLeastMaximum().", 
        "name": "IntlCalendar::getMaximum", 
        "overview": "public int IntlCalendar::getMaximum ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getmaximum", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getMinimalDaysInFirstWeek": {
        "description": "Returns the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous year\u02bcs last week.", 
        "name": "IntlCalendar::getMinimalDaysInFirstWeek", 
        "overview": "public int IntlCalendar::getMinimalDaysInFirstWeek ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getminimaldaysinfirstweek", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getMinimum": {
        "description": "Gets the global minimum for a field, in this specific calendar. This value is smaller or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getGreatestMinimum(). For the Gregorian calendar, these three functions always return the same value (for each field).", 
        "name": "IntlCalendar::getMinimum", 
        "overview": "public int IntlCalendar::getMinimum ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.getminimum", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getNow": {
        "description": "The number of milliseconds that have passed since the reference date. This number is derived from the system time.", 
        "name": "IntlCalendar::getNow", 
        "overview": "public static float IntlCalendar::getNow ( void )", 
        "parameters": [], 
        "path": "php/intlcalendar.getnow", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getRepeatedWallTimeOption": {
        "description": "Gets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST.", 
        "name": "IntlCalendar::getRepeatedWallTimeOption", 
        "overview": "public int IntlCalendar::getRepeatedWallTimeOption ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getrepeatedwalltimeoption", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getSkippedWallTimeOption": {
        "description": "Gets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST.", 
        "name": "IntlCalendar::getSkippedWallTimeOption", 
        "overview": "public int IntlCalendar::getSkippedWallTimeOption ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.getskippedwalltimeoption", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getTime": {
        "description": "Returns the time associated with this object, expressed as the number of milliseconds since the epoch.", 
        "name": "IntlCalendar::getTime", 
        "overview": "public float IntlCalendar::getTime ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.gettime", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getTimeZone": {
        "description": "Returns the IntlTimeZone object associated with this calendar.", 
        "name": "IntlCalendar::getTimeZone", 
        "overview": "public IntlTimeZone IntlCalendar::getTimeZone ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.gettimezone", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getType": {
        "description": "A string describing the type of this calendar. This is one of the valid values for the calendar keyword value 'calendar'.", 
        "name": "IntlCalendar::getType", 
        "overview": "public string IntlCalendar::getType ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.gettype", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::getWeekendTransition": {
        "description": "Returns the number of milliseconds after midnight at which the weekend begins or ends.", 
        "name": "IntlCalendar::getWeekendTransition", 
        "overview": "public int IntlCalendar::getWeekendTransition ( string $dayOfWeek )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, \u2026, IntlCalendar::DOW_SATURDAY.", 
                "name": "dayOfWeek"
            }
        ], 
        "path": "php/intlcalendar.getweekendtransition", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::inDaylightTime": {
        "description": "Whether, for the instant represented by this object and for this object\u02bcs timezone, daylight saving time is in place.", 
        "name": "IntlCalendar::inDaylightTime", 
        "overview": "public bool IntlCalendar::inDaylightTime ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.indaylighttime", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isEquivalentTo": {
        "description": "Returns whether this and the given object are equivalent for all purposes except as to the time they have set. The locales do not have to match, as long as no change in behavior results from such mismatch. This includes the timezone, whether the lenient mode is set, the repeated and skipped wall time settings, the days of the week when the weekend starts and ceases and the times where such transitions occur. It may also include other calendar specific settings, such as the Gregorian/Julian transition instant.", 
        "name": "IntlCalendar::isEquivalentTo", 
        "overview": "public bool IntlCalendar::isEquivalentTo ( IntlCalendar $other )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The other calendar against which the comparison is to be made.", 
                "name": "other"
            }
        ], 
        "path": "php/intlcalendar.isequivalentto", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isLenient": {
        "description": "Returns whether the current date/time interpretations is lenient (the default). If that is case, some out of range values for fields will be accepted instead of raising an error.", 
        "name": "IntlCalendar::isLenient", 
        "overview": "public bool IntlCalendar::isLenient ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.islenient", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isSet": {
        "description": "Returns whether a field is set (as opposed to clear). Set fields take priority over unset fields and their default values when the date/time is being calculated. Fields set later take priority over fields set earlier.", 
        "name": "IntlCalendar::isSet", 
        "overview": "public bool IntlCalendar::isSet ( int $field )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }
        ], 
        "path": "php/intlcalendar.isset", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::isWeekend": {
        "description": "Returns whether either the obejct\u02bcs current time or the provided timestamp occur during a weekend in this object\u02bcs calendar system.", 
        "name": "IntlCalendar::isWeekend", 
        "overview": "public bool IntlCalendar::isWeekend ([ float $date = NULL ] )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "An optional timestamp representing the number of milliseconds since the epoch, excluding leap seconds. ", 
                "name": "date"
            }
        ], 
        "path": "php/intlcalendar.isweekend", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::roll": {
        "description": "Adds a (signed) amount to a field. The difference with respect to IntlCalendar::add() is that when the field value overflows, it does not carry into more significant fields.", 
        "name": "IntlCalendar::roll", 
        "overview": "public bool IntlCalendar::roll ( int $field , mixed $amountOrUpOrDown )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }, 
            {
                "descr": "The (signed) amount to add to the field, TRUE for rolling up (adding 1), or FALSE for rolling down (subtracting 1).", 
                "name": "amountOrUpOrDown"
            }
        ], 
        "path": "php/intlcalendar.roll", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::set": {
        "description": "Sets either a specific field to the given value, or sets at once several common fields. The range of values that are accepted depend on whether the calendar is using the lenient mode.", 
        "name": "IntlCalendar::set", 
        "overview": "public bool IntlCalendar::set ( int $field , int $value )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the IntlCalendar date/time field constants. ", 
                "name": "field"
            }, 
            {
                "descr": "The new value of the given field.", 
                "name": "value"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_YEAR.", 
                "name": "year"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_MONTH.", 
                "name": "month"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_DAY_OF_MONTH. ", 
                "name": "dayOfMonth"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_HOUR_OF_DAY.", 
                "name": "hour"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_MINUTE.", 
                "name": "minute"
            }, 
            {
                "descr": "The new value for IntlCalendar::FIELD_SECOND.", 
                "name": "second"
            }
        ], 
        "path": "php/intlcalendar.set", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setFirstDayOfWeek": {
        "description": "Defines the day of week deemed to start the week. This affects the behavior of fields that depend on the concept of week start and end such as IntlCalendar::FIELD_WEEK_OF_YEAR and IntlCalendar::FIELD_YEAR_WOY.", 
        "name": "IntlCalendar::setFirstDayOfWeek", 
        "overview": "public bool IntlCalendar::setFirstDayOfWeek ( int $dayOfWeek )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, \u2026, IntlCalendar::DOW_SATURDAY.", 
                "name": "dayOfWeek"
            }
        ], 
        "path": "php/intlcalendar.setfirstdayofweek", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setLenient": {
        "description": "Defines whether the calendar is \u2018lenient mode\u2019. In such a mode, some of out-of-bounds values for some fields are accepted, the behavior being similar to that of IntlCalendar::add() (i.e., the value wraps around, carrying into more significant fields each time). If the lenient mode is off, then such values will generate an error.", 
        "name": "IntlCalendar::setLenient", 
        "overview": "public ReturnType IntlCalendar::setLenient ( string $isLenient )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "Use TRUE to activate the lenient mode; FALSE otherwise.", 
                "name": "isLenient"
            }
        ], 
        "path": "php/intlcalendar.setlenient", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setMinimalDaysInFirstWeek": {
        "description": "Sets the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous year\u02bcs last week.", 
        "name": "IntlCalendar::setMinimalDaysInFirstWeek", 
        "overview": "public bool IntlCalendar::setMinimalDaysInFirstWeek ( int $minimalDays )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The number of minimal days to set.", 
                "name": "minimalDays"
            }
        ], 
        "path": "php/intlcalendar.setminimaldaysinfirstweek", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setRepeatedWallTimeOption": {
        "description": "Sets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST (take the post-DST instant). The other possible value is IntlCalendar::WALLTIME_FIRST (take the instant that occurs during DST).", 
        "name": "IntlCalendar::setRepeatedWallTimeOption", 
        "overview": "public bool IntlCalendar::setRepeatedWallTimeOption ( int $wallTimeOption )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::WALLTIME_FIRST or IntlCalendar::WALLTIME_LAST.", 
                "name": "wallTimeOption"
            }
        ], 
        "path": "php/intlcalendar.setrepeatedwalltimeoption", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setSkippedWallTimeOption": {
        "description": "Sets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST (take it as being the same instant as the one when the wall time is one hour more). Alternative values are IntlCalendar::WALLTIME_FIRST (same instant as the one with a wall time of one hour less) and IntlCalendar::WALLTIME_NEXT_VALID (same instant as when DST begins).", 
        "name": "IntlCalendar::setSkippedWallTimeOption", 
        "overview": "public bool IntlCalendar::setSkippedWallTimeOption ( int $wallTimeOption )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "One of the constants IntlCalendar::WALLTIME_FIRST, IntlCalendar::WALLTIME_LAST or IntlCalendar::WALLTIME_NEXT_VALID.", 
                "name": "wallTimeOption"
            }
        ], 
        "path": "php/intlcalendar.setskippedwalltimeoption", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setTime": {
        "description": "Sets the instant represented by this object. The instant is represented by a float whose value should be an integer number of milliseconds since the epoch (1 Jan 1970 00:00:00.000 UTC), ignoring leap seconds. All the field values will be recalculated accordingly.", 
        "name": "IntlCalendar::setTime", 
        "overview": "public bool IntlCalendar::setTime ( float $date )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "An instant represented by the number of number of milliseconds between such instant and the epoch, ignoring leap seconds.", 
                "name": "date"
            }
        ], 
        "path": "php/intlcalendar.settime", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::setTimeZone": {
        "description": "Defines a new timezone for this calendar. The time represented by the object is preserved to the detriment of the field values.", 
        "name": "IntlCalendar::setTimeZone", 
        "overview": "public bool IntlCalendar::setTimeZone ( mixed $timeZone )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }, 
            {
                "descr": "The new timezone to be used by this calendar. ", 
                "name": "timeZone"
            }
        ], 
        "path": "php/intlcalendar.settimezone", 
        "type": "Internationalization"
    }, 
    "IntlCalendar::toDateTime": {
        "description": "Create a DateTime object that represents the same instant (up to second precision, with a rounding error of less than 1 second) and has an analog timezone to this object (the difference being DateTime\u02bcs timezone will be backed by PHP\u02bcs timezone while IntlCalendar\u02bcs timezone is backed by ICU\u02bcs).", 
        "name": "IntlCalendar::toDateTime", 
        "overview": "public DateTime IntlCalendar::toDateTime ( void )", 
        "parameters": [
            {
                "descr": "The IntlCalendar resource.", 
                "name": "cal"
            }
        ], 
        "path": "php/intlcalendar.todatetime", 
        "type": "Internationalization"
    }, 
    "IntlCodePointBreakIterator": {
        "description": "", 
        "name": "IntlCodePointBreakIterator", 
        "overview": "public ReturnType getLastCodePoint ( void )", 
        "parameters": [], 
        "path": "php/class.intlcodepointbreakiterator", 
        "type": "Internationalization"
    }, 
    "IntlCodePointBreakIterator::getLastCodePoint": {
        "description": "", 
        "name": "IntlCodePointBreakIterator::getLastCodePoint", 
        "overview": "public ReturnType IntlCodePointBreakIterator::getLastCodePoint ( void )", 
        "parameters": [], 
        "path": "php/intlcodepointbreakiterator.getlastcodepoint", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter": {
        "description": "", 
        "name": "IntlDateFormatter", 
        "overview": "public static IntlDateFormatter create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = '' ]]] )", 
        "parameters": [], 
        "path": "php/class.intldateformatter", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::create": {
        "description": "Create a date formatter.", 
        "name": "IntlDateFormatter::create", 
        "overview": "public static IntlDateFormatter IntlDateFormatter::create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = '' ]]] )", 
        "parameters": [
            {
                "descr": "Locale to use when formatting or parsing or NULL to use the value specified in the ini setting intl.default_locale.", 
                "name": "locale"
            }, 
            {
                "descr": "Date type to use (none, short, medium, long, full). ", 
                "name": "datetype"
            }, 
            {
                "descr": "Time type to use (none, short, medium, long, full). ", 
                "name": "timetype"
            }, 
            {
                "descr": "Time zone ID. The default (and the one used if NULL is given) is the one returned by date_default_timezone_get() or, if applicable, that of the IntlCalendar object passed for the calendar parameter. ", 
                "name": "timezone"
            }, 
            {
                "descr": "Calendar to use for formatting or parsing. ", 
                "name": "calendar"
            }, 
            {
                "descr": "Optional pattern to use when formatting or parsing. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/intldateformatter.create", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::format": {
        "description": "Formats the time value as a string.", 
        "name": "IntlDateFormatter::format", 
        "overview": "public string IntlDateFormatter::format ( mixed $value )", 
        "parameters": [
            {
                "descr": "The date formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "Value to format. This may be a DateTime object, an IntlCalendar object, a numeric type representing a (possibly fractional) number of seconds since epoch or an array in the format output by localtime().   If a DateTime or an IntlCalendar object is passed, its timezone is not considered. The object will be formatted using the formater\u02bcs configured timezone. If one wants to use the timezone of the object to be formatted, IntlDateFormatter::setTimeZone() must be called before with the object\u02bcs timezone. Alternatively, the static function IntlDateFormatter::formatObject() may be used instead.", 
                "name": "value"
            }
        ], 
        "path": "php/intldateformatter.format", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::formatObject": {
        "description": "This function allows formatting an IntlCalendar or DateTime object without first explicitly creating a IntlDateFormatter object.", 
        "name": "IntlDateFormatter::formatObject", 
        "overview": "public static string IntlDateFormatter::formatObject ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )", 
        "parameters": [
            {
                "descr": "An object of type IntlCalendar or DateTime. ", 
                "name": "object"
            }, 
            {
                "descr": "How to format the date/time. This can either be an array with two elements (first the date style, then the time style, these being one of the constants IntlDateFormatter::NONE, IntlDateFormatter::SHORT, IntlDateFormatter::MEDIUM, IntlDateFormatter::LONG, IntlDateFormatter::FULL), a long with the value of one of these constants (in which case it will be used both for the time and the date) or a string with the format described in \u00bb the ICU documentation. If NULL, the default style will be used.", 
                "name": "format"
            }, 
            {
                "descr": "The locale to use, or NULL to use the default one.", 
                "name": "locale"
            }
        ], 
        "path": "php/intldateformatter.formatobject", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getCalendar": {
        "description": "Procedural style", 
        "name": "IntlDateFormatter::getCalendar", 
        "overview": "int IntlDateFormatter::getCalendar ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.getcalendar", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getCalendarObject": {
        "description": "Obtain a copy of the calendar object used internally by this formatter. This calendar will have a type (as in gregorian, japanese, buddhist, roc, persian, islamic, etc.) and a timezone that match the type and timezone used by the formatter. The date/time of the object is unspecified.", 
        "name": "IntlDateFormatter::getCalendarObject", 
        "overview": "public IntlCalendar IntlDateFormatter::getCalendarObject ( void )", 
        "parameters": [], 
        "path": "php/intldateformatter.getcalendarobject", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getDateType": {
        "description": "Returns date type used by the formatter.", 
        "name": "IntlDateFormatter::getDateType", 
        "overview": "public int IntlDateFormatter::getDateType ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.getdatetype", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getErrorCode": {
        "description": "Get the error code from last operation. Returns error code from the last number formatting operation.", 
        "name": "IntlDateFormatter::getErrorCode", 
        "overview": "public int IntlDateFormatter::getErrorCode ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.geterrorcode", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getErrorMessage": {
        "description": "Get the error text from the last operation.", 
        "name": "IntlDateFormatter::getErrorMessage", 
        "overview": "public string IntlDateFormatter::getErrorMessage ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.geterrormessage", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getLocale": {
        "description": "Get locale used by the formatter.", 
        "name": "IntlDateFormatter::getLocale", 
        "overview": "public string IntlDateFormatter::getLocale ([ int $which ] )", 
        "parameters": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "You can choose between valid and actual locale ( Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). ", 
                "name": "hich"
            }
        ], 
        "path": "php/intldateformatter.getlocale", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getPattern": {
        "description": "Get pattern used by the formatter.", 
        "name": "IntlDateFormatter::getPattern", 
        "overview": "public string IntlDateFormatter::getPattern ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.getpattern", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getTimeType": {
        "description": "Return time type used by the formatter.", 
        "name": "IntlDateFormatter::getTimeType", 
        "overview": "public int IntlDateFormatter::getTimeType ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.gettimetype", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getTimeZone": {
        "description": "Returns an IntlTimeZone object representing the timezone that will be used by this object to format dates and times. When formatting IntlCalendar and DateTime objects with this IntlDateFormatter, the timezone used will be the one returned by this method, not the one associated with the objects being formatted.", 
        "name": "IntlDateFormatter::getTimeZone", 
        "overview": "public IntlTimeZone IntlDateFormatter::getTimeZone ( void )", 
        "parameters": [], 
        "path": "php/intldateformatter.gettimezone", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::getTimeZoneId": {
        "description": "Get the timezone-id used for the IntlDateFormatter.", 
        "name": "IntlDateFormatter::getTimeZoneId", 
        "overview": "public string IntlDateFormatter::getTimeZoneId ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.gettimezoneid", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::isLenient": {
        "description": "Check if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.", 
        "name": "IntlDateFormatter::isLenient", 
        "overview": "public bool IntlDateFormatter::isLenient ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }
        ], 
        "path": "php/intldateformatter.islenient", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::localtime": {
        "description": "Converts string $value to a field-based time value ( an array of various fields), starting at $parse_pos and consuming as much of the input value as possible.", 
        "name": "IntlDateFormatter::localtime", 
        "overview": "public array IntlDateFormatter::localtime ( string $value [, int &$position ] )", 
        "parameters": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "string to convert to a time", 
                "name": "value"
            }, 
            {
                "descr": "Position at which to start the parsing in $value (zero-based). ", 
                "name": "position"
            }
        ], 
        "path": "php/intldateformatter.localtime", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::parse": {
        "description": "Converts string $value to an incremental time value, starting at $parse_pos and consuming as much of the input value as possible.", 
        "name": "IntlDateFormatter::parse", 
        "overview": "public int IntlDateFormatter::parse ( string $value [, int &$position ] )", 
        "parameters": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "string to convert to a time", 
                "name": "value"
            }, 
            {
                "descr": "Position at which to start the parsing in $value (zero-based). ", 
                "name": "position"
            }
        ], 
        "path": "php/intldateformatter.parse", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setCalendar": {
        "description": "Sets the calendar or calendar type used by the formatter.", 
        "name": "IntlDateFormatter::setCalendar", 
        "overview": "bool IntlDateFormatter::setCalendar ( mixed $which )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "This can either be: the calendar type to use (default is IntlDateFormatter::GREGORIAN, which is also used if NULL is specified) or an IntlCalendar object. ", 
                "name": "which"
            }
        ], 
        "path": "php/intldateformatter.setcalendar", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setLenient": {
        "description": "Define if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly. Enabling lenient parsing allows the parser to accept otherwise flawed date or time patterns, parsing as much as possible to obtain a value. Extra space, unrecognized tokens, or invalid values (\"February 30th\") are not accepted.", 
        "name": "IntlDateFormatter::setLenient", 
        "overview": "public bool IntlDateFormatter::setLenient ( bool $lenient )", 
        "parameters": [
            {
                "descr": "The formatter resource", 
                "name": "fmt"
            }, 
            {
                "descr": "Sets whether the parser is lenient or not, default is TRUE (lenient).", 
                "name": "lenient"
            }
        ], 
        "path": "php/intldateformatter.setlenient", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setPattern": {
        "description": "Set the pattern used for the IntlDateFormatter.", 
        "name": "IntlDateFormatter::setPattern", 
        "overview": "public bool IntlDateFormatter::setPattern ( string $pattern )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "New pattern string to use. Possible patterns are documented at \u00bb http://userguide.icu-project.org/formatparse/datetime.", 
                "name": "pattern"
            }
        ], 
        "path": "php/intldateformatter.setpattern", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setTimeZone": {
        "description": "Sets the timezone that will be used when formatting dates or times with this object.", 
        "name": "IntlDateFormatter::setTimeZone", 
        "overview": "public boolean IntlDateFormatter::setTimeZone ( mixed $zone )", 
        "parameters": [
            {
                "descr": "The timezone to use for this formatter. ", 
                "name": "zone"
            }
        ], 
        "path": "php/intldateformatter.settimezone", 
        "type": "Internationalization"
    }, 
    "IntlDateFormatter::setTimeZoneId": {
        "description": "Sets the time zone to use.", 
        "name": "IntlDateFormatter::setTimeZoneId", 
        "overview": "public bool IntlDateFormatter::setTimeZoneId ( string $zone )", 
        "parameters": [
            {
                "descr": "The formatter resource.", 
                "name": "fmt"
            }, 
            {
                "descr": "The time zone ID string of the time zone to use. ", 
                "name": "zone"
            }
        ], 
        "path": "php/intldateformatter.settimezoneid", 
        "type": "Internationalization"
    }, 
    "IntlException": {
        "description": "", 
        "name": "IntlException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.intlexception", 
        "type": "Internationalization"
    }, 
    "IntlIterator": {
        "description": "", 
        "name": "IntlIterator", 
        "overview": "public ReturnType current ( void )", 
        "parameters": [], 
        "path": "php/class.intliterator", 
        "type": "Internationalization"
    }, 
    "IntlIterator::current": {
        "description": "", 
        "name": "IntlIterator::current", 
        "overview": "public ReturnType IntlIterator::current ( void )", 
        "parameters": [], 
        "path": "php/intliterator.current", 
        "type": "Internationalization"
    }, 
    "IntlIterator::key": {
        "description": "", 
        "name": "IntlIterator::key", 
        "overview": "public ReturnType IntlIterator::key ( void )", 
        "parameters": [], 
        "path": "php/intliterator.key", 
        "type": "Internationalization"
    }, 
    "IntlIterator::next": {
        "description": "", 
        "name": "IntlIterator::next", 
        "overview": "public ReturnType IntlIterator::next ( void )", 
        "parameters": [], 
        "path": "php/intliterator.next", 
        "type": "Internationalization"
    }, 
    "IntlIterator::rewind": {
        "description": "", 
        "name": "IntlIterator::rewind", 
        "overview": "public ReturnType IntlIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/intliterator.rewind", 
        "type": "Internationalization"
    }, 
    "IntlIterator::valid": {
        "description": "", 
        "name": "IntlIterator::valid", 
        "overview": "public ReturnType IntlIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/intliterator.valid", 
        "type": "Internationalization"
    }, 
    "IntlPartsIterator": {
        "description": "", 
        "name": "IntlPartsIterator", 
        "overview": "public ReturnType getBreakIterator ( void )", 
        "parameters": [], 
        "path": "php/class.intlpartsiterator", 
        "type": "Internationalization"
    }, 
    "IntlPartsIterator::getBreakIterator": {
        "description": "", 
        "name": "IntlPartsIterator::getBreakIterator", 
        "overview": "public ReturnType IntlPartsIterator::getBreakIterator ( void )", 
        "parameters": [], 
        "path": "php/intlpartsiterator.getbreakiterator", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator": {
        "description": "", 
        "name": "IntlRuleBasedBreakIterator", 
        "overview": "public __construct ( string $rules [, string $areCompiled ] )", 
        "parameters": [], 
        "path": "php/class.intlrulebasedbreakiterator", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::__construct": {
        "description": "", 
        "name": "IntlRuleBasedBreakIterator::__construct", 
        "overview": "public IntlRuleBasedBreakIterator::__construct ( string $rules [, string $areCompiled ] )", 
        "parameters": [], 
        "path": "php/intlrulebasedbreakiterator.construct", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getBinaryRules": {
        "description": "", 
        "name": "IntlRuleBasedBreakIterator::getBinaryRules", 
        "overview": "public ReturnType IntlRuleBasedBreakIterator::getBinaryRules ( void )", 
        "parameters": [], 
        "path": "php/intlrulebasedbreakiterator.getbinaryrules", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getRuleStatus": {
        "description": "", 
        "name": "IntlRuleBasedBreakIterator::getRuleStatus", 
        "overview": "public ReturnType IntlRuleBasedBreakIterator::getRuleStatus ( void )", 
        "parameters": [], 
        "path": "php/intlrulebasedbreakiterator.getrulestatus", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getRuleStatusVec": {
        "description": "", 
        "name": "IntlRuleBasedBreakIterator::getRuleStatusVec", 
        "overview": "public ReturnType IntlRuleBasedBreakIterator::getRuleStatusVec ( void )", 
        "parameters": [], 
        "path": "php/intlrulebasedbreakiterator.getrulestatusvec", 
        "type": "Internationalization"
    }, 
    "IntlRuleBasedBreakIterator::getRules": {
        "description": "", 
        "name": "IntlRuleBasedBreakIterator::getRules", 
        "overview": "public ReturnType IntlRuleBasedBreakIterator::getRules ( void )", 
        "parameters": [], 
        "path": "php/intlrulebasedbreakiterator.getrules", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone": {
        "description": "", 
        "name": "IntlTimeZone", 
        "overview": "public static integer countEquivalentIDs ( string $zoneId )", 
        "parameters": [], 
        "path": "php/class.intltimezone", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::countEquivalentIDs": {
        "description": "", 
        "name": "IntlTimeZone::countEquivalentIDs", 
        "overview": "public static integer IntlTimeZone::countEquivalentIDs ( string $zoneId )", 
        "parameters": [], 
        "path": "php/intltimezone.countequivalentids", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::createDefault": {
        "description": "", 
        "name": "IntlTimeZone::createDefault", 
        "overview": "public static IntlTimeZone IntlTimeZone::createDefault ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.createdefault", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::createEnumeration": {
        "description": "", 
        "name": "IntlTimeZone::createEnumeration", 
        "overview": "public static IntlIterator IntlTimeZone::createEnumeration ([ mixed $countryOrRawOffset ] )", 
        "parameters": [], 
        "path": "php/intltimezone.createenumeration", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::createTimeZone": {
        "description": "", 
        "name": "IntlTimeZone::createTimeZone", 
        "overview": "public static IntlTimeZone IntlTimeZone::createTimeZone ( string $zoneId )", 
        "parameters": [], 
        "path": "php/intltimezone.createtimezone", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::fromDateTimeZone": {
        "description": "", 
        "name": "IntlTimeZone::fromDateTimeZone", 
        "overview": "public static IntlTimeZone IntlTimeZone::fromDateTimeZone ( DateTimeZone $zoneId )", 
        "parameters": [], 
        "path": "php/intltimezone.fromdatetimezone", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getCanonicalID": {
        "description": "", 
        "name": "IntlTimeZone::getCanonicalID", 
        "overview": "public static string IntlTimeZone::getCanonicalID ( string $zoneId [, bool &$isSystemID ] )", 
        "parameters": [], 
        "path": "php/intltimezone.getcanonicalid", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getDSTSavings": {
        "description": "", 
        "name": "IntlTimeZone::getDSTSavings", 
        "overview": "public integer IntlTimeZone::getDSTSavings ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.getdstsavings", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getDisplayName": {
        "description": "", 
        "name": "IntlTimeZone::getDisplayName", 
        "overview": "public string IntlTimeZone::getDisplayName ([ bool $isDaylight [, integer $style [, string $locale ]]] )", 
        "parameters": [], 
        "path": "php/intltimezone.getdisplayname", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getEquivalentID": {
        "description": "", 
        "name": "IntlTimeZone::getEquivalentID", 
        "overview": "public static string IntlTimeZone::getEquivalentID ( string $zoneId , integer $index )", 
        "parameters": [], 
        "path": "php/intltimezone.getequivalentid", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getErrorCode": {
        "description": "Procedural style:", 
        "name": "IntlTimeZone::getErrorCode", 
        "overview": "public integer IntlTimeZone::getErrorCode ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.geterrorcode", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getErrorMessage": {
        "description": "Procedural style:", 
        "name": "IntlTimeZone::getErrorMessage", 
        "overview": "public string IntlTimeZone::getErrorMessage ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.geterrormessage", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getGMT": {
        "description": "", 
        "name": "IntlTimeZone::getGMT", 
        "overview": "public static IntlTimeZone IntlTimeZone::getGMT ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.getgmt", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getID": {
        "description": "", 
        "name": "IntlTimeZone::getID", 
        "overview": "public string IntlTimeZone::getID ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.getid", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getOffset": {
        "description": "", 
        "name": "IntlTimeZone::getOffset", 
        "overview": "public integer IntlTimeZone::getOffset ( float $date , bool $local , integer &$rawOffset , integer &$dstOffset )", 
        "parameters": [], 
        "path": "php/intltimezone.getoffset", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getRawOffset": {
        "description": "", 
        "name": "IntlTimeZone::getRawOffset", 
        "overview": "public integer IntlTimeZone::getRawOffset ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.getrawoffset", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::getTZDataVersion": {
        "description": "", 
        "name": "IntlTimeZone::getTZDataVersion", 
        "overview": "public static string IntlTimeZone::getTZDataVersion ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.gettzdataversion", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::hasSameRules": {
        "description": "", 
        "name": "IntlTimeZone::hasSameRules", 
        "overview": "public bool IntlTimeZone::hasSameRules ( IntlTimeZone $otherTimeZone )", 
        "parameters": [], 
        "path": "php/intltimezone.hassamerules", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::toDateTimeZone": {
        "description": "", 
        "name": "IntlTimeZone::toDateTimeZone", 
        "overview": "public DateTimeZone IntlTimeZone::toDateTimeZone ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.todatetimezone", 
        "type": "Internationalization"
    }, 
    "IntlTimeZone::useDaylightTime": {
        "description": "", 
        "name": "IntlTimeZone::useDaylightTime", 
        "overview": "public bool IntlTimeZone::useDaylightTime ( void )", 
        "parameters": [], 
        "path": "php/intltimezone.usedaylighttime", 
        "type": "Internationalization"
    }, 
    "InvalidArgumentException": {
        "description": "", 
        "name": "InvalidArgumentException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.invalidargumentexception", 
        "type": "SPL/Exceptions"
    }, 
    "Iterator (interface": {
        "description": "", 
        "name": "Iterator (interface", 
        "overview": "abstract public mixed current ( void )", 
        "parameters": [], 
        "path": "php/class.iterator", 
        "type": "Classes and Functions"
    }, 
    "Iterator::current": {
        "description": "Returns the current element.", 
        "name": "Iterator::current", 
        "overview": "abstract public mixed Iterator::current ( void )", 
        "parameters": [], 
        "path": "php/iterator.current", 
        "type": "Classes and Functions"
    }, 
    "Iterator::key": {
        "description": "Returns the key of the current element.", 
        "name": "Iterator::key", 
        "overview": "abstract public scalar Iterator::key ( void )", 
        "parameters": [], 
        "path": "php/iterator.key", 
        "type": "Classes and Functions"
    }, 
    "Iterator::next": {
        "description": "Moves the current position to the next element.", 
        "name": "Iterator::next", 
        "overview": "abstract public void Iterator::next ( void )", 
        "parameters": [], 
        "path": "php/iterator.next", 
        "type": "Classes and Functions"
    }, 
    "Iterator::rewind": {
        "description": "Rewinds back to the first element of the Iterator.", 
        "name": "Iterator::rewind", 
        "overview": "abstract public void Iterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/iterator.rewind", 
        "type": "Classes and Functions"
    }, 
    "Iterator::valid": {
        "description": "This method is called after Iterator::rewind() and Iterator::next() to check if the current position is valid.", 
        "name": "Iterator::valid", 
        "overview": "abstract public boolean Iterator::valid ( void )", 
        "parameters": [], 
        "path": "php/iterator.valid", 
        "type": "Classes and Functions"
    }, 
    "IteratorAggregate (interface": {
        "description": "", 
        "name": "IteratorAggregate (interface", 
        "overview": "abstract public Traversable getIterator ( void )", 
        "parameters": [], 
        "path": "php/class.iteratoraggregate", 
        "type": "Classes and Functions"
    }, 
    "IteratorAggregate::getIterator": {
        "description": "Returns an external iterator.", 
        "name": "IteratorAggregate::getIterator", 
        "overview": "abstract public Traversable IteratorAggregate::getIterator ( void )", 
        "parameters": [], 
        "path": "php/iteratoraggregate.getiterator", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator": {
        "description": "", 
        "name": "IteratorIterator", 
        "overview": "public __construct ( Traversable $iterator )", 
        "parameters": [], 
        "path": "php/class.iteratoriterator", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::__construct": {
        "description": "Creates an iterator from anything that is traversable.", 
        "name": "IteratorIterator::__construct", 
        "overview": "public IteratorIterator::__construct ( Traversable $iterator )", 
        "parameters": [
            {
                "descr": "The traversable iterator.", 
                "name": "iterator"
            }
        ], 
        "path": "php/iteratoriterator.construct", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::current": {
        "description": "Get the value of the current element.", 
        "name": "IteratorIterator::current", 
        "overview": "public mixed IteratorIterator::current ( void )", 
        "parameters": [], 
        "path": "php/iteratoriterator.current", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::getInnerIterator": {
        "description": "Get the inner iterator.", 
        "name": "IteratorIterator::getInnerIterator", 
        "overview": "public Traversable IteratorIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/iteratoriterator.getinneriterator", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::key": {
        "description": "Get the key of the current element.", 
        "name": "IteratorIterator::key", 
        "overview": "public scalar IteratorIterator::key ( void )", 
        "parameters": [], 
        "path": "php/iteratoriterator.key", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::next": {
        "description": "Forward to the next element.", 
        "name": "IteratorIterator::next", 
        "overview": "public void IteratorIterator::next ( void )", 
        "parameters": [], 
        "path": "php/iteratoriterator.next", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::rewind": {
        "description": "Rewinds to the first element.", 
        "name": "IteratorIterator::rewind", 
        "overview": "public void IteratorIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/iteratoriterator.rewind", 
        "type": "Classes and Functions"
    }, 
    "IteratorIterator::valid": {
        "description": "Checks if the iterator is valid.", 
        "name": "IteratorIterator::valid", 
        "overview": "public bool IteratorIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/iteratoriterator.valid", 
        "type": "Classes and Functions"
    }, 
    "JDDayOfWeek": {
        "description": "Returns the day of the week. Can return a string or an integer depending on the mode.", 
        "name": "JDDayOfWeek", 
        "overview": "mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )", 
        "parameters": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }, 
            {
                "descr": "Calendar week modes Mode Meaning 0 (Default)  Return the day number as an int (0=Sunday, 1=Monday, etc)  1  Returns string containing the day of week (English-Gregorian)  2  Return a string containing the abbreviated day of week (English-Gregorian)", 
                "name": "mode"
            }
        ], 
        "path": "php/function.jddayofweek", 
        "type": "Date and Time"
    }, 
    "JDMonthName": {
        "description": "Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned.", 
        "name": "JDMonthName", 
        "overview": "string jdmonthname ( int $julianday , int $mode )", 
        "parameters": [
            {
                "descr": "The Julian Day to operate on", 
                "name": "jday"
            }, 
            {
                "descr": "The calendar to take the month name from", 
                "name": "calendar"
            }
        ], 
        "path": "php/function.jdmonthname", 
        "type": "Date and Time"
    }, 
    "JDToFrench": {
        "description": "Converts a Julian Day Count to the French Republican Calendar.", 
        "name": "JDToFrench", 
        "overview": "string jdtofrench ( int $juliandaycount )", 
        "parameters": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }
        ], 
        "path": "php/function.jdtofrench", 
        "type": "Date and Time"
    }, 
    "JDToGregorian": {
        "description": "Converts Julian Day Count to a string containing the Gregorian date in the format of \"month/day/year\".", 
        "name": "JDToGregorian", 
        "overview": "string jdtogregorian ( int $julianday )", 
        "parameters": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }
        ], 
        "path": "php/function.jdtogregorian", 
        "type": "Date and Time"
    }, 
    "JDToJulian": {
        "description": "Converts Julian Day Count to a string containing the Julian Calendar Date in the format of \"month/day/year\".", 
        "name": "JDToJulian", 
        "overview": "string jdtojulian ( int $julianday )", 
        "parameters": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }
        ], 
        "path": "php/function.jdtojulian", 
        "type": "Date and Time"
    }, 
    "JewishToJD": {
        "description": "Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.", 
        "name": "JewishToJD", 
        "overview": "int jewishtojd ( int $month , int $day , int $year )", 
        "parameters": [
            {
                "descr": "The month as a number from 1 to 13", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 30", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between 1 and 9999", 
                "name": "year"
            }
        ], 
        "path": "php/function.jewishtojd", 
        "type": "Date and Time"
    }, 
    "JsonSerializable (interface": {
        "description": "", 
        "name": "JsonSerializable (interface", 
        "overview": "abstract public mixed jsonSerialize ( void )", 
        "parameters": [], 
        "path": "php/class.jsonserializable", 
        "type": "JSON"
    }, 
    "JsonSerializable::jsonSerialize": {
        "description": "Serializes the object to a value that can be serialized natively by json_encode().", 
        "name": "JsonSerializable::jsonSerialize", 
        "overview": "abstract public mixed JsonSerializable::jsonSerialize ( void )", 
        "parameters": [], 
        "path": "php/jsonserializable.jsonserialize", 
        "type": "JSON"
    }, 
    "JulianToJD": {
        "description": "Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.", 
        "name": "JulianToJD", 
        "overview": "int juliantojd ( int $month , int $day , int $year )", 
        "parameters": [
            {
                "descr": "The month as a number from 1 (for January) to 12 (for December)", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number from 1 to 31", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number between -4713 and 9999", 
                "name": "year"
            }
        ], 
        "path": "php/function.juliantojd", 
        "type": "Date and Time"
    }, 
    "LengthException": {
        "description": "", 
        "name": "LengthException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.lengthexception", 
        "type": "SPL/Exceptions"
    }, 
    "LimitIterator": {
        "description": "", 
        "name": "LimitIterator", 
        "overview": "public __construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )", 
        "parameters": [], 
        "path": "php/class.limititerator", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::__construct": {
        "description": "Constructs a new LimitIterator from an iterator with a given starting offset and maximum count.", 
        "name": "LimitIterator::__construct", 
        "overview": "public LimitIterator::__construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )", 
        "parameters": [
            {
                "descr": "The Iterator to limit.", 
                "name": "iterator"
            }, 
            {
                "descr": "Optional offset of the limit.", 
                "name": "offset"
            }, 
            {
                "descr": "Optional count of the limit.", 
                "name": "count"
            }
        ], 
        "path": "php/limititerator.construct", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::current": {
        "description": "Gets the current element of the inner Iterator.", 
        "name": "LimitIterator::current", 
        "overview": "public mixed LimitIterator::current ( void )", 
        "parameters": [], 
        "path": "php/limititerator.current", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::getInnerIterator": {
        "description": "Gets the inner Iterator.", 
        "name": "LimitIterator::getInnerIterator", 
        "overview": "public Iterator LimitIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/limititerator.getinneriterator", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::getPosition": {
        "description": "Gets the current zero-based position of the inner Iterator.", 
        "name": "LimitIterator::getPosition", 
        "overview": "public int LimitIterator::getPosition ( void )", 
        "parameters": [], 
        "path": "php/limititerator.getposition", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::key": {
        "description": "Gets the key for the current item in the inner Iterator.", 
        "name": "LimitIterator::key", 
        "overview": "public mixed LimitIterator::key ( void )", 
        "parameters": [], 
        "path": "php/limititerator.key", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::next": {
        "description": "Moves the iterator forward.", 
        "name": "LimitIterator::next", 
        "overview": "public void LimitIterator::next ( void )", 
        "parameters": [], 
        "path": "php/limititerator.next", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::rewind": {
        "description": "Rewinds the iterator to the starting offset specified in LimitIterator::__construct().", 
        "name": "LimitIterator::rewind", 
        "overview": "public void LimitIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/limititerator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::seek": {
        "description": "Moves the iterator to the offset specified by position.", 
        "name": "LimitIterator::seek", 
        "overview": "public int LimitIterator::seek ( int $position )", 
        "parameters": [
            {
                "descr": "The position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/limititerator.seek", 
        "type": "SPL/Iterators"
    }, 
    "LimitIterator::valid": {
        "description": "Checks whether the current element is valid.", 
        "name": "LimitIterator::valid", 
        "overview": "public bool LimitIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/limititerator.valid", 
        "type": "SPL/Iterators"
    }, 
    "Locale": {
        "description": "", 
        "name": "Locale", 
        "overview": "public static string acceptFromHttp ( string $header )", 
        "parameters": [], 
        "path": "php/class.locale", 
        "type": "Internationalization"
    }, 
    "Locale::acceptFromHttp": {
        "description": "Tries to find locale that can satisfy the language list that is requested by the HTTP \"Accept-Language\" header.", 
        "name": "Locale::acceptFromHttp", 
        "overview": "public static string Locale::acceptFromHttp ( string $header )", 
        "parameters": [
            {
                "descr": "The string containing the \"Accept-Language\" header according to format in RFC 2616.", 
                "name": "header"
            }
        ], 
        "path": "php/locale.acceptfromhttp", 
        "type": "Internationalization"
    }, 
    "Locale::canonicalize": {
        "description": "", 
        "name": "Locale::canonicalize", 
        "overview": "public static string Locale::canonicalize ( string $locale )", 
        "parameters": [], 
        "path": "php/locale.canonicalize", 
        "type": "Internationalization"
    }, 
    "Locale::composeLocale": {
        "description": "Returns a correctly ordered and delimited locale ID the keys identify the particular locale ID subtags, and the values are the associated subtag values.", 
        "name": "Locale::composeLocale", 
        "overview": "public static string Locale::composeLocale ( array $subtags )", 
        "parameters": [
            {
                "descr": "an array containing a list of key-value pairs, where the keys identify the particular locale ID subtags, and the values are the associated subtag values. ", 
                "name": "subtags"
            }
        ], 
        "path": "php/locale.composelocale", 
        "type": "Internationalization"
    }, 
    "Locale::filterMatches": {
        "description": "Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm", 
        "name": "Locale::filterMatches", 
        "overview": "public static bool Locale::filterMatches ( string $langtag , string $locale [, bool $canonicalize = false ] )", 
        "parameters": [
            {
                "descr": "The language tag to check", 
                "name": "langtag"
            }, 
            {
                "descr": "The language range to check against", 
                "name": "locale"
            }, 
            {
                "descr": "If true, the arguments will be converted to canonical form before matching.", 
                "name": "canonicalize"
            }
        ], 
        "path": "php/locale.filtermatches", 
        "type": "Internationalization"
    }, 
    "Locale::getAllVariants": {
        "description": "Gets the variants for the input locale", 
        "name": "Locale::getAllVariants", 
        "overview": "public static array Locale::getAllVariants ( string $locale )", 
        "parameters": [
            {
                "descr": "The locale to extract the variants from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getallvariants", 
        "type": "Internationalization"
    }, 
    "Locale::getDefault": {
        "description": "Gets the default locale value. At the PHP initialization this value is set to 'intl.default_locale' value from php.ini if that value exists or from ICU's function uloc_getDefault().", 
        "name": "Locale::getDefault", 
        "overview": "public static string Locale::getDefault ( void )", 
        "parameters": [], 
        "path": "php/locale.getdefault", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayLanguage": {
        "description": "Returns an appropriately localized display name for language of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayLanguage", 
        "overview": "public static string Locale::getDisplayLanguage ( string $locale [, string $in_locale ] )", 
        "parameters": [
            {
                "descr": "The locale to return a display language for", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the language name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplaylanguage", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayName": {
        "description": "Returns an appropriately localized display name for the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayName", 
        "overview": "public static string Locale::getDisplayName ( string $locale [, string $in_locale ] )", 
        "parameters": [
            {
                "descr": "The locale to return a display name for.", 
                "name": "locale"
            }, 
            {
                "descr": "optional format locale", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayname", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayRegion": {
        "description": "Returns an appropriately localized display name for region of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayRegion", 
        "overview": "public static string Locale::getDisplayRegion ( string $locale [, string $in_locale ] )", 
        "parameters": [
            {
                "descr": "The locale to return a display region for.", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the region name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayregion", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayScript": {
        "description": "Returns an appropriately localized display name for script of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayScript", 
        "overview": "public static string Locale::getDisplayScript ( string $locale [, string $in_locale ] )", 
        "parameters": [
            {
                "descr": "The locale to return a display script for", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the script name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayscript", 
        "type": "Internationalization"
    }, 
    "Locale::getDisplayVariant": {
        "description": "Returns an appropriately localized display name for variants of the input locale. If is NULL then the default locale is used.", 
        "name": "Locale::getDisplayVariant", 
        "overview": "public static string Locale::getDisplayVariant ( string $locale [, string $in_locale ] )", 
        "parameters": [
            {
                "descr": "The locale to return a display variant for", 
                "name": "locale"
            }, 
            {
                "descr": "Optional format locale to use to display the variant name", 
                "name": "in_locale"
            }
        ], 
        "path": "php/locale.getdisplayvariant", 
        "type": "Internationalization"
    }, 
    "Locale::getKeywords": {
        "description": "Gets the keywords for the input locale.", 
        "name": "Locale::getKeywords", 
        "overview": "public static array Locale::getKeywords ( string $locale )", 
        "parameters": [
            {
                "descr": "The locale to extract the keywords from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getkeywords", 
        "type": "Internationalization"
    }, 
    "Locale::getPrimaryLanguage": {
        "description": "Gets the primary language for the input locale", 
        "name": "Locale::getPrimaryLanguage", 
        "overview": "public static string Locale::getPrimaryLanguage ( string $locale )", 
        "parameters": [
            {
                "descr": "The locale to extract the primary language code from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getprimarylanguage", 
        "type": "Internationalization"
    }, 
    "Locale::getRegion": {
        "description": "Gets the region for the input locale.", 
        "name": "Locale::getRegion", 
        "overview": "public static string Locale::getRegion ( string $locale )", 
        "parameters": [
            {
                "descr": "The locale to extract the region code from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getregion", 
        "type": "Internationalization"
    }, 
    "Locale::getScript": {
        "description": "Gets the script for the input locale.", 
        "name": "Locale::getScript", 
        "overview": "public static string Locale::getScript ( string $locale )", 
        "parameters": [
            {
                "descr": "The locale to extract the script code from", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.getscript", 
        "type": "Internationalization"
    }, 
    "Locale::lookup": {
        "description": "Searches the items in langtag for the best match to the language range specified in locale according to RFC 4647's lookup algorithm.", 
        "name": "Locale::lookup", 
        "overview": "public static string Locale::lookup ( array $langtag , string $locale [, bool $canonicalize = false [, string $default ]] )", 
        "parameters": [
            {
                "descr": "An array containing a list of language tags to compare to locale. ", 
                "name": "langtag"
            }, 
            {
                "descr": "The locale to use as the language range when matching.", 
                "name": "locale"
            }, 
            {
                "descr": "If true, the arguments will be converted to canonical form before matching.", 
                "name": "canonicalize"
            }, 
            {
                "descr": "The locale to use if no match is found.", 
                "name": "default"
            }
        ], 
        "path": "php/locale.lookup", 
        "type": "Internationalization"
    }, 
    "Locale::parseLocale": {
        "description": "Returns a key-value array of locale ID subtag elements.", 
        "name": "Locale::parseLocale", 
        "overview": "public static array Locale::parseLocale ( string $locale )", 
        "parameters": [
            {
                "descr": "The locale to extract the subtag array from. ", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.parselocale", 
        "type": "Internationalization"
    }, 
    "Locale::setDefault": {
        "description": "Sets the default runtime locale to $locale. This changes the value of INTL global 'default_locale' locale identifier. UAX #35 extensions are accepted.", 
        "name": "Locale::setDefault", 
        "overview": "public static bool Locale::setDefault ( string $locale )", 
        "parameters": [
            {
                "descr": "Is a BCP 47 compliant language tag containing the", 
                "name": "locale"
            }
        ], 
        "path": "php/locale.setdefault", 
        "type": "Internationalization"
    }, 
    "LogicException": {
        "description": "", 
        "name": "LogicException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.logicexception", 
        "type": "SPL/Exceptions"
    }, 
    "Memcached": {
        "description": "", 
        "name": "Memcached", 
        "overview": "public bool add ( string $key , mixed $value [, int $expiration ] )", 
        "parameters": [], 
        "path": "php/class.memcached", 
        "type": "Memcached"
    }, 
    "Memcached::add": {
        "description": "Memcached::add() is similar to Memcached::set(), but the operation fails if the key already exists on the server.", 
        "name": "Memcached::add", 
        "overview": "public bool Memcached::add ( string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.add", 
        "type": "Memcached"
    }, 
    "Memcached::addByKey": {
        "description": "Memcached::addByKey() is functionally equivalent to Memcached::add(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::addByKey", 
        "overview": "public bool Memcached::addByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.addbykey", 
        "type": "Memcached"
    }, 
    "Memcached::addServer": {
        "description": "Memcached::addServer() adds the specified server to the server pool. No connection is established to the server at this time, but if you are using consistent key distribution option (via Memcached::DISTRIBUTION_CONSISTENT or Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data structures will have to be updated. Thus, if you need to add multiple servers, it is better to use Memcached::addServers() as the update then happens only once.", 
        "name": "Memcached::addServer", 
        "overview": "public bool Memcached::addServer ( string $host , int $port [, int $weight = 0 ] )", 
        "parameters": [
            {
                "descr": "The hostname of the memcache server. ", 
                "name": "host"
            }, 
            {
                "descr": "The port on which memcache is running. ", 
                "name": "port"
            }, 
            {
                "descr": "The weight of the server relative to the total weight of all the servers in the pool. ", 
                "name": "weight"
            }
        ], 
        "path": "php/memcached.addserver", 
        "type": "Memcached"
    }, 
    "Memcached::addServers": {
        "description": "Memcached::addServers() adds servers to the server pool. Each entry in servers is supposed to be an array containing hostname, port, and, optionally, weight of the server. No connection is established to the servers at this time.", 
        "name": "Memcached::addServers", 
        "overview": "public bool Memcached::addServers ( array $servers )", 
        "parameters": [
            {
                "descr": "Array of the servers to add to the pool.", 
                "name": "array"
            }
        ], 
        "path": "php/memcached.addservers", 
        "type": "Memcached"
    }, 
    "Memcached::append": {
        "description": "Memcached::append() appends the given value string to the value of an existing item. The reason that value is forced to be a string is that appending mixed types is not well-defined.", 
        "name": "Memcached::append", 
        "overview": "public bool Memcached::append ( string $key , string $value )", 
        "parameters": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The string to append.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.append", 
        "type": "Memcached"
    }, 
    "Memcached::appendByKey": {
        "description": "Memcached::appendByKey() is functionally equivalent to Memcached::append(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::appendByKey", 
        "overview": "public bool Memcached::appendByKey ( string $server_key , string $key , string $value )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The string to append.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.appendbykey", 
        "type": "Memcached"
    }, 
    "Memcached::cas": {
        "description": "Memcached::cas() performs a \"check and set\" operation, so that the item will be stored only if no other client has updated it since it was last fetched by this client. The check is done via the cas_token parameter which is a unique 64-bit value assigned to the existing item by memcache. See the documentation for Memcached::get*() methods for how to obtain this token. Note that the token is represented as a double due to the limitations of PHP's integer space.", 
        "name": "Memcached::cas", 
        "overview": "public bool Memcached::cas ( float $cas_token , string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "Unique value associated with the existing item. ", 
                "name": "cas_token"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.cas", 
        "type": "Memcached"
    }, 
    "Memcached::casByKey": {
        "description": "Memcached::casByKey() is functionally equivalent to Memcached::cas(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::casByKey", 
        "overview": "public bool Memcached::casByKey ( float $cas_token , string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "Unique value associated with the existing item. ", 
                "name": "cas_token"
            }, 
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.casbykey", 
        "type": "Memcached"
    }, 
    "Memcached::decrement": {
        "description": "Memcached::decrement() decrements a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. Memcached::decrement() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::decrement", 
        "overview": "public int Memcached::decrement ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The key of the item to decrement.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to decrement the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.decrement", 
        "type": "Memcached"
    }, 
    "Memcached::decrementByKey": {
        "description": "Memcached::decrementByKey() decrements a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. Memcached::decrementByKey() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::decrementByKey", 
        "overview": "public int Memcached::decrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to decrement.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to decrement the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.decrementbykey", 
        "type": "Memcached"
    }, 
    "Memcached::delete": {
        "description": "Memcached::delete() deletes the key from the server. The time parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse add and replace commands for this key. For this amount of time, the item is put into a delete queue, which means that it won't possible to retrieve it by the get command, but add and replace command with this key will also fail (the set command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter time defaults to 0 (which means that the item will be deleted immediately and further storage commands with this key will succeed).", 
        "name": "Memcached::delete", 
        "overview": "public bool Memcached::delete ( string $key [, int $time = 0 ] )", 
        "parameters": [
            {
                "descr": "The key to be deleted.", 
                "name": "key"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the item.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.delete", 
        "type": "Memcached"
    }, 
    "Memcached::deleteByKey": {
        "description": "Memcached::deleteByKey() is functionally equivalent to Memcached::delete(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::deleteByKey", 
        "overview": "public bool Memcached::deleteByKey ( string $server_key , string $key [, int $time = 0 ] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key to be deleted.", 
                "name": "key"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the item.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.deletebykey", 
        "type": "Memcached"
    }, 
    "Memcached::deleteMulti": {
        "description": "Memcached::deleteMulti() deletes the array of keys from the server. The time parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse add and replace commands for these keys. For this amount of time, the item is put into a delete queue, which means that it won't be possible to retrieve it by the get command, but add and replace command with these keys will also fail (the set command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter time defaults to 0 (which means that the item will be deleted immediately and further storage commands with these keys will succeed).", 
        "name": "Memcached::deleteMulti", 
        "overview": "public bool Memcached::deleteMulti ( array $keys [, int $time = 0 ] )", 
        "parameters": [
            {
                "descr": "The keys to be deleted.", 
                "name": "keys"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the items.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.deletemulti", 
        "type": "Memcached"
    }, 
    "Memcached::deleteMultiByKey": {
        "description": "Memcached::deleteMultiByKey() is functionally equivalent to Memcached::deleteMulti(), except that the free-form server_key can be used to map the keys to a specific server.", 
        "name": "Memcached::deleteMultiByKey", 
        "overview": "public bool Memcached::deleteMultiByKey ( string $server_key , array $keys [, int $time = 0 ] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The keys to be deleted.", 
                "name": "keys"
            }, 
            {
                "descr": "The amount of time the server will wait to delete the items.", 
                "name": "time"
            }
        ], 
        "path": "php/memcached.deletemultibykey", 
        "type": "Memcached"
    }, 
    "Memcached::fetch": {
        "description": "Memcached::fetch() retrieves the next result from the last request.", 
        "name": "Memcached::fetch", 
        "overview": "public array Memcached::fetch ( void )", 
        "parameters": [], 
        "path": "php/memcached.fetch", 
        "type": "Memcached"
    }, 
    "Memcached::fetchAll": {
        "description": "Memcached::fetchAll() retrieves all the remaining results from the last request.", 
        "name": "Memcached::fetchAll", 
        "overview": "public array Memcached::fetchAll ( void )", 
        "parameters": [], 
        "path": "php/memcached.fetchall", 
        "type": "Memcached"
    }, 
    "Memcached::flush": {
        "description": "Memcached::flush() invalidates all existing cache items immediately (by default) or after the delay specified. After invalidation none of the items will be returned in response to a retrieval command (unless it's stored again under the same key after Memcached::flush() has invalidated the items). The flush does not actually free all the memory taken up by the existing items; that will happen gradually as new items are stored.", 
        "name": "Memcached::flush", 
        "overview": "public bool Memcached::flush ([ int $delay = 0 ] )", 
        "parameters": [
            {
                "descr": "Numer of seconds to wait before invalidating the items.", 
                "name": "delay"
            }
        ], 
        "path": "php/memcached.flush", 
        "type": "Memcached"
    }, 
    "Memcached::get": {
        "description": "Memcached::get() returns the item that was previously stored under the key. If the item is found and cas_token variable is provided, it will contain the CAS token value for the item. See Memcached::cas() for how to use CAS tokens. Read-through caching callback may be specified via cache_cb parameter.", 
        "name": "Memcached::get", 
        "overview": "public mixed Memcached::get ( string $key [, callable $cache_cb [, float &$cas_token ]] )", 
        "parameters": [
            {
                "descr": "The key of the item to retrieve.", 
                "name": "key"
            }, 
            {
                "descr": "Read-through caching callback or NULL.", 
                "name": "cache_cb"
            }, 
            {
                "descr": "The variable to store the CAS token in.", 
                "name": "cas_token"
            }
        ], 
        "path": "php/memcached.get", 
        "type": "Memcached"
    }, 
    "Memcached::getAllKeys": {
        "description": "Memcached::getAllKeys() queries each memcache server and retrieves an array of all keys stored on them at that point in time. This is not an atomic operation, so it isn't a truly consistent snapshot of the keys at point in time. As memcache doesn't guarantee to return all keys you also cannot assume that all keys have been returned.", 
        "name": "Memcached::getAllKeys", 
        "overview": "public array Memcached::getAllKeys ( void )", 
        "parameters": [], 
        "path": "php/memcached.getallkeys", 
        "type": "Memcached"
    }, 
    "Memcached::getByKey": {
        "description": "Memcached::getByKey() is functionally equivalent to Memcached::get(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::getByKey", 
        "overview": "public mixed Memcached::getByKey ( string $server_key , string $key [, callable $cache_cb [, float &$cas_token ]] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to fetch.", 
                "name": "key"
            }, 
            {
                "descr": "Read-through caching callback or NULL", 
                "name": "cache_cb"
            }, 
            {
                "descr": "The variable to store the CAS token in.", 
                "name": "cas_token"
            }
        ], 
        "path": "php/memcached.getbykey", 
        "type": "Memcached"
    }, 
    "Memcached::getDelayed": {
        "description": "Memcached::getDelayed() issues a request to memcache for multiple items the keys of which are specified in the keys array. The method does not wait for response and returns right away. When you are ready to collect the items, call either Memcached::fetch() or Memcached::fetchAll(). If with_cas is true, the CAS token values will also be requested.", 
        "name": "Memcached::getDelayed", 
        "overview": "public bool Memcached::getDelayed ( array $keys [, bool $with_cas [, callable $value_cb ]] )", 
        "parameters": [
            {
                "descr": "Array of keys to request.", 
                "name": "keys"
            }, 
            {
                "descr": "Whether to request CAS token values also.", 
                "name": "with_cas"
            }, 
            {
                "descr": "The result callback or NULL.", 
                "name": "value_cb"
            }
        ], 
        "path": "php/memcached.getdelayed", 
        "type": "Memcached"
    }, 
    "Memcached::getDelayedByKey": {
        "description": "Memcached::getDelayedByKey() is functionally equivalent to Memcached::getDelayed(), except that the free-form server_key can be used to map the keys to a specific server.", 
        "name": "Memcached::getDelayedByKey", 
        "overview": "public bool Memcached::getDelayedByKey ( string $server_key , array $keys [, bool $with_cas [, callable $value_cb ]] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "Array of keys to request.", 
                "name": "keys"
            }, 
            {
                "descr": "Whether to request CAS token values also.", 
                "name": "with_cas"
            }, 
            {
                "descr": "The result callback or NULL.", 
                "name": "value_cb"
            }
        ], 
        "path": "php/memcached.getdelayedbykey", 
        "type": "Memcached"
    }, 
    "Memcached::getMulti": {
        "description": "Memcached::getMulti() is similar to Memcached::get(), but instead of a single key item, it retrieves multiple items the keys of which are specified in the keys array. If cas_tokens variable is provided, it is filled with the CAS token values for the found items.", 
        "name": "Memcached::getMulti", 
        "overview": "public mixed Memcached::getMulti ( array $keys [, array &$cas_tokens [, int $flags ]] )", 
        "parameters": [
            {
                "descr": "Array of keys to retrieve.", 
                "name": "keys"
            }, 
            {
                "descr": "The variable to store the CAS tokens for the found items.", 
                "name": "cas_tokens"
            }, 
            {
                "descr": "The flags for the get operation.", 
                "name": "flags"
            }
        ], 
        "path": "php/memcached.getmulti", 
        "type": "Memcached"
    }, 
    "Memcached::getMultiByKey": {
        "description": "Memcached::getMultiByKey() is functionally equivalent to Memcached::getMulti(), except that the free-form server_key can be used to map the keys to a specific server.", 
        "name": "Memcached::getMultiByKey", 
        "overview": "public array Memcached::getMultiByKey ( string $server_key , array $keys [, string &$cas_tokens [, int $flags ]] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "Array of keys to retrieve.", 
                "name": "keys"
            }, 
            {
                "descr": "The variable to store the CAS tokens for the found items.", 
                "name": "cas_tokens"
            }, 
            {
                "descr": "The flags for the get operation.", 
                "name": "flags"
            }
        ], 
        "path": "php/memcached.getmultibykey", 
        "type": "Memcached"
    }, 
    "Memcached::getOption": {
        "description": "This method returns the value of a Memcached option. Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See Memcached Constants for more information.", 
        "name": "Memcached::getOption", 
        "overview": "public mixed Memcached::getOption ( int $option )", 
        "parameters": [
            {
                "descr": "One of the Memcached::OPT_* constants.", 
                "name": "option"
            }
        ], 
        "path": "php/memcached.getoption", 
        "type": "Memcached"
    }, 
    "Memcached::getResultCode": {
        "description": "Memcached::getResultCode() returns one of the Memcached::RES_* constants that is the result of the last executed Memcached method.", 
        "name": "Memcached::getResultCode", 
        "overview": "public int Memcached::getResultCode ( void )", 
        "parameters": [], 
        "path": "php/memcached.getresultcode", 
        "type": "Memcached"
    }, 
    "Memcached::getResultMessage": {
        "description": "Memcached::getResultMessage() returns a string that describes the result code of the last executed Memcached method.", 
        "name": "Memcached::getResultMessage", 
        "overview": "public string Memcached::getResultMessage ( void )", 
        "parameters": [], 
        "path": "php/memcached.getresultmessage", 
        "type": "Memcached"
    }, 
    "Memcached::getServerByKey": {
        "description": "Memcached::getServerByKey() returns the server that would be selected by a particular server_key in all the Memcached::*ByKey() operations.", 
        "name": "Memcached::getServerByKey", 
        "overview": "public array Memcached::getServerByKey ( string $server_key )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }
        ], 
        "path": "php/memcached.getserverbykey", 
        "type": "Memcached"
    }, 
    "Memcached::getServerList": {
        "description": "Memcached::getServerList() returns the list of all servers that are in its server pool.", 
        "name": "Memcached::getServerList", 
        "overview": "public array Memcached::getServerList ( void )", 
        "parameters": [], 
        "path": "php/memcached.getserverlist", 
        "type": "Memcached"
    }, 
    "Memcached::getStats": {
        "description": "Memcached::getStats() returns an array containing the state of all available memcache servers. See \u00bb memcache protocol specification for details on these statistics.", 
        "name": "Memcached::getStats", 
        "overview": "public array Memcached::getStats ( void )", 
        "parameters": [], 
        "path": "php/memcached.getstats", 
        "type": "Memcached"
    }, 
    "Memcached::getVersion": {
        "description": "Memcached::getVersion() returns an array containing the version info for all available memcache servers.", 
        "name": "Memcached::getVersion", 
        "overview": "public array Memcached::getVersion ( void )", 
        "parameters": [], 
        "path": "php/memcached.getversion", 
        "type": "Memcached"
    }, 
    "Memcached::increment": {
        "description": "Memcached::increment() increments a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. Memcached::increment() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::increment", 
        "overview": "public int Memcached::increment ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The key of the item to increment.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to increment the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.increment", 
        "type": "Memcached"
    }, 
    "Memcached::incrementByKey": {
        "description": "Memcached::incrementByKey() increments a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. Memcached::incrementByKey() will set the item to the initial_value parameter if the key doesn't exist.", 
        "name": "Memcached::incrementByKey", 
        "overview": "public int Memcached::incrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to increment.", 
                "name": "key"
            }, 
            {
                "descr": "The amount by which to increment the item's value.", 
                "name": "offset"
            }, 
            {
                "descr": "The value to set the item to if it doesn't currently exist.", 
                "name": "initial_value"
            }, 
            {
                "descr": "The expiry time to set on the item.", 
                "name": "expiry"
            }
        ], 
        "path": "php/memcached.incrementbykey", 
        "type": "Memcached"
    }, 
    "Memcached::isPersistent": {
        "description": "Memcached::isPersistent() checks if the connections to the memcache servers are persistent connections.", 
        "name": "Memcached::isPersistent", 
        "overview": "public bool Memcached::isPersistent ( void )", 
        "parameters": [], 
        "path": "php/memcached.ispersistent", 
        "type": "Memcached"
    }, 
    "Memcached::isPristine": {
        "description": "Memcached::isPristine() checks if the Memcache instance was recently created.", 
        "name": "Memcached::isPristine", 
        "overview": "public bool Memcached::isPristine ( void )", 
        "parameters": [], 
        "path": "php/memcached.ispristine", 
        "type": "Memcached"
    }, 
    "Memcached::prepend": {
        "description": "Memcached::prepend() prepends the given value string to the value of an existing item. The reason that value is forced to be a string is that prepending mixed types is not well-defined.", 
        "name": "Memcached::prepend", 
        "overview": "public bool Memcached::prepend ( string $key , string $value )", 
        "parameters": [
            {
                "descr": "The key of the item to prepend the data to.", 
                "name": "key"
            }, 
            {
                "descr": "The string to prepend.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.prepend", 
        "type": "Memcached"
    }, 
    "Memcached::prependByKey": {
        "description": "Memcached::prependByKey() is functionally equivalent to Memcached::prepend(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::prependByKey", 
        "overview": "public bool Memcached::prependByKey ( string $server_key , string $key , string $value )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key of the item to prepend the data to.", 
                "name": "key"
            }, 
            {
                "descr": "The string to prepend.", 
                "name": "value"
            }
        ], 
        "path": "php/memcached.prependbykey", 
        "type": "Memcached"
    }, 
    "Memcached::quit": {
        "description": "Memcached::quit() closes any open connections to the memcache servers.", 
        "name": "Memcached::quit", 
        "overview": "public bool Memcached::quit ( void )", 
        "parameters": [], 
        "path": "php/memcached.quit", 
        "type": "Memcached"
    }, 
    "Memcached::replace": {
        "description": "Memcached::replace() is similar to Memcached::set(), but the operation fails if the key does not exist on the server.", 
        "name": "Memcached::replace", 
        "overview": "public bool Memcached::replace ( string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.replace", 
        "type": "Memcached"
    }, 
    "Memcached::replaceByKey": {
        "description": "Memcached::replaceByKey() is functionally equivalent to Memcached::replace(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::replaceByKey", 
        "overview": "public bool Memcached::replaceByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.replacebykey", 
        "type": "Memcached"
    }, 
    "Memcached::resetServerList": {
        "description": "Memcached::resetserverlist() removes all memcache servers from the known server list, reseting it back to empty.", 
        "name": "Memcached::resetServerList", 
        "overview": "public bool Memcached::resetServerList ( void )", 
        "parameters": [], 
        "path": "php/memcached.resetserverlist", 
        "type": "Memcached"
    }, 
    "Memcached::set": {
        "description": "Memcached::set() stores the value on a memcache server under the specified key. The expiration parameter can be used to control when the value is considered expired.", 
        "name": "Memcached::set", 
        "overview": "public bool Memcached::set ( string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.set", 
        "type": "Memcached"
    }, 
    "Memcached::setByKey": {
        "description": "Memcached::setByKey() is functionally equivalent to Memcached::set(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::setByKey", 
        "overview": "public bool Memcached::setByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The value to store.", 
                "name": "value"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.setbykey", 
        "type": "Memcached"
    }, 
    "Memcached::setMulti": {
        "description": "Memcached::setMulti() is similar to Memcached::set(), but instead of a single key/value item, it works on multiple items specified in items. The expiration time applies to all the items at once.", 
        "name": "Memcached::setMulti", 
        "overview": "public bool Memcached::setMulti ( array $items [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "An array of key/value pairs to store on the server.", 
                "name": "items"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.setmulti", 
        "type": "Memcached"
    }, 
    "Memcached::setMultiByKey": {
        "description": "Memcached::setMultiByKey() is functionally equivalent to Memcached::setMulti(), except that the free-form server_key can be used to map the keys from items to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.", 
        "name": "Memcached::setMultiByKey", 
        "overview": "public bool Memcached::setMultiByKey ( string $server_key , array $items [, int $expiration ] )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "An array of key/value pairs to store on the server.", 
                "name": "items"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.setmultibykey", 
        "type": "Memcached"
    }, 
    "Memcached::setOption": {
        "description": "This method sets the value of a Memcached option. Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See Memcached Constants for more information.", 
        "name": "Memcached::setOption", 
        "overview": "public bool Memcached::setOption ( int $option , mixed $value )", 
        "parameters": [], 
        "path": "php/memcached.setoption", 
        "type": "Memcached"
    }, 
    "Memcached::setOptions": {
        "description": "Memcached::setOptions() is a variation of the Memcached::setOption() that takes an array of options to be set.", 
        "name": "Memcached::setOptions", 
        "overview": "public bool Memcached::setOptions ( array $options )", 
        "parameters": [
            {
                "descr": "An associative array of options where the key is the option to set and the value is the new value for the option.", 
                "name": "options"
            }
        ], 
        "path": "php/memcached.setoptions", 
        "type": "Memcached"
    }, 
    "Memcached::setSaslAuthData": {
        "description": "Memcached::setSaslAuthData() sets the username and password that should be used for SASL authentication with the memcache servers.", 
        "name": "Memcached::setSaslAuthData", 
        "overview": "public void Memcached::setSaslAuthData ( string $username , string $password )", 
        "parameters": [
            {
                "descr": "The username to use for authenticaiton.", 
                "name": "username"
            }, 
            {
                "descr": "The password to use for authenticaiton.", 
                "name": "password"
            }
        ], 
        "path": "php/memcached.setsaslauthdata", 
        "type": "Memcached"
    }, 
    "Memcached::touch": {
        "description": "Memcached::touch() sets a new expiration value on the given key.", 
        "name": "Memcached::touch", 
        "overview": "public bool Memcached::touch ( string $key , int $expiration )", 
        "parameters": [
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.touch", 
        "type": "Memcached"
    }, 
    "Memcached::touchByKey": {
        "description": "Memcached::touchByKey() is functionally equivalent to Memcached::touch(), except that the free-form server_key can be used to map the key to a specific server.", 
        "name": "Memcached::touchByKey", 
        "overview": "public bool Memcached::touchByKey ( string $server_key , string $key , int $expiration )", 
        "parameters": [
            {
                "descr": "The key identifying the server to store the value on or retrieve it from. ", 
                "name": "server_key"
            }, 
            {
                "descr": "The key under which to store the value.", 
                "name": "key"
            }, 
            {
                "descr": "The expiration time, defaults to 0. ", 
                "name": "expiration"
            }
        ], 
        "path": "php/memcached.touchbykey", 
        "type": "Memcached"
    }, 
    "MemcachedException": {
        "description": "", 
        "name": "MemcachedException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.memcachedexception", 
        "type": "Memcached"
    }, 
    "MessageFormatter": {
        "description": "", 
        "name": "MessageFormatter", 
        "overview": "public static MessageFormatter create ( string $locale , string $pattern )", 
        "parameters": [], 
        "path": "php/class.messageformatter", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::create": {
        "description": "Constructs a new Message Formatter", 
        "name": "MessageFormatter::create", 
        "overview": "public static MessageFormatter MessageFormatter::create ( string $locale , string $pattern )", 
        "parameters": [
            {
                "descr": "The locale to use when formatting arguments", 
                "name": "locale"
            }, 
            {
                "descr": "The pattern string to stick arguments into. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/messageformatter.create", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::format": {
        "description": "Format the message by substituting the data into the format string according to the locale rules", 
        "name": "MessageFormatter::format", 
        "overview": "public string MessageFormatter::format ( array $args )", 
        "parameters": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }, 
            {
                "descr": "Arguments to insert into the format string", 
                "name": "args"
            }
        ], 
        "path": "php/messageformatter.format", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::formatMessage": {
        "description": "Quick formatting function that formats the string without having to explicitly create the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.", 
        "name": "MessageFormatter::formatMessage", 
        "overview": "public static string MessageFormatter::formatMessage ( string $locale , string $pattern , array $args )", 
        "parameters": [
            {
                "descr": "The locale to use for formatting locale-dependent parts", 
                "name": "locale"
            }, 
            {
                "descr": "The pattern string to insert things into. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The array of values to insert into the format string", 
                "name": "args"
            }
        ], 
        "path": "php/messageformatter.formatmessage", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getErrorCode": {
        "description": "Get the error code from last operation.", 
        "name": "MessageFormatter::getErrorCode", 
        "overview": "public int MessageFormatter::getErrorCode ( void )", 
        "parameters": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }
        ], 
        "path": "php/messageformatter.geterrorcode", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getErrorMessage": {
        "description": "Get the error text from the last operation.", 
        "name": "MessageFormatter::getErrorMessage", 
        "overview": "public string MessageFormatter::getErrorMessage ( void )", 
        "parameters": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }
        ], 
        "path": "php/messageformatter.geterrormessage", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getLocale": {
        "description": "Get the locale for which the formatter was created.", 
        "name": "MessageFormatter::getLocale", 
        "overview": "public string MessageFormatter::getLocale ( void )", 
        "parameters": [
            {
                "descr": "The formatter resource", 
                "name": "formatter"
            }
        ], 
        "path": "php/messageformatter.getlocale", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::getPattern": {
        "description": "Get the pattern used by the formatter", 
        "name": "MessageFormatter::getPattern", 
        "overview": "public string MessageFormatter::getPattern ( void )", 
        "parameters": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }
        ], 
        "path": "php/messageformatter.getpattern", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::parse": {
        "description": "Parses input string and return any extracted items as an array.", 
        "name": "MessageFormatter::parse", 
        "overview": "public array MessageFormatter::parse ( string $value )", 
        "parameters": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }, 
            {
                "descr": "The string to parse", 
                "name": "value"
            }
        ], 
        "path": "php/messageformatter.parse", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::parseMessage": {
        "description": "Parses input string without explicitly creating the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.", 
        "name": "MessageFormatter::parseMessage", 
        "overview": "public static array MessageFormatter::parseMessage ( string $locale , string $pattern , string $source )", 
        "parameters": [
            {
                "descr": "The locale to use for parsing locale-dependent parts", 
                "name": "locale"
            }, 
            {
                "descr": "The pattern with which to parse the value.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string to parse, conforming to the pattern.", 
                "name": "source"
            }
        ], 
        "path": "php/messageformatter.parsemessage", 
        "type": "Internationalization"
    }, 
    "MessageFormatter::setPattern": {
        "description": "Set the pattern used by the formatter", 
        "name": "MessageFormatter::setPattern", 
        "overview": "public bool MessageFormatter::setPattern ( string $pattern )", 
        "parameters": [
            {
                "descr": "The message formatter", 
                "name": "fmt"
            }, 
            {
                "descr": "The pattern string to use in this message formatter. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/messageformatter.setpattern", 
        "type": "Internationalization"
    }, 
    "MultipleIterator": {
        "description": "", 
        "name": "MultipleIterator", 
        "overview": "public void attachIterator ( Iterator $iterator [, string $infos ] )", 
        "parameters": [], 
        "path": "php/class.multipleiterator", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::attachIterator": {
        "description": "Attaches iterator information.", 
        "name": "MultipleIterator::attachIterator", 
        "overview": "public void MultipleIterator::attachIterator ( Iterator $iterator [, string $infos ] )", 
        "parameters": [
            {
                "descr": "The new iterator to attach.", 
                "name": "iterator"
            }, 
            {
                "descr": "The associative information for the Iterator, which must be an integer, a string, or NULL.", 
                "name": "infos"
            }
        ], 
        "path": "php/multipleiterator.attachiterator", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::containsIterator": {
        "description": "Checks if an iterator is attached or not.", 
        "name": "MultipleIterator::containsIterator", 
        "overview": "public void MultipleIterator::containsIterator ( Iterator $iterator )", 
        "parameters": [
            {
                "descr": "The iterator to check.", 
                "name": "iterator"
            }
        ], 
        "path": "php/multipleiterator.containsiterator", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::countIterators": {
        "description": "Gets the number of attached iterator instances.", 
        "name": "MultipleIterator::countIterators", 
        "overview": "public void MultipleIterator::countIterators ( void )", 
        "parameters": [], 
        "path": "php/multipleiterator.countiterators", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::current": {
        "description": "Get the registered iterator instances current() result.", 
        "name": "MultipleIterator::current", 
        "overview": "public array MultipleIterator::current ( void )", 
        "parameters": [], 
        "path": "php/multipleiterator.current", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::detachIterator": {
        "description": "Detaches an iterator.", 
        "name": "MultipleIterator::detachIterator", 
        "overview": "public void MultipleIterator::detachIterator ( Iterator $iterator )", 
        "parameters": [
            {
                "descr": "The iterator to detach.", 
                "name": "iterator"
            }
        ], 
        "path": "php/multipleiterator.detachiterator", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::getFlags": {
        "description": "Gets information about the flags.", 
        "name": "MultipleIterator::getFlags", 
        "overview": "public void MultipleIterator::getFlags ( void )", 
        "parameters": [], 
        "path": "php/multipleiterator.getflags", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::key": {
        "description": "Get the registered iterator instances key() result.", 
        "name": "MultipleIterator::key", 
        "overview": "public array MultipleIterator::key ( void )", 
        "parameters": [], 
        "path": "php/multipleiterator.key", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::next": {
        "description": "Moves all attached iterator instances forward.", 
        "name": "MultipleIterator::next", 
        "overview": "public void MultipleIterator::next ( void )", 
        "parameters": [], 
        "path": "php/multipleiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::rewind": {
        "description": "Rewinds all attached iterator instances.", 
        "name": "MultipleIterator::rewind", 
        "overview": "public void MultipleIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/multipleiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::setFlags": {
        "description": "Sets flags.", 
        "name": "MultipleIterator::setFlags", 
        "overview": "public void MultipleIterator::setFlags ( int $flags )", 
        "parameters": [
            {
                "descr": "The flags to set, according to the Flag Constants", 
                "name": "flags"
            }
        ], 
        "path": "php/multipleiterator.setflags", 
        "type": "SPL/Iterators"
    }, 
    "MultipleIterator::valid": {
        "description": "Checks the validity of sub iterators.", 
        "name": "MultipleIterator::valid", 
        "overview": "public void MultipleIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/multipleiterator.valid", 
        "type": "SPL/Iterators"
    }, 
    "Mutex": {
        "description": "", 
        "name": "Mutex", 
        "overview": "final public static long create ([  boolean $lock  ] )", 
        "parameters": [], 
        "path": "php/class.mutex", 
        "type": "Process Control"
    }, 
    "Mutex::create": {
        "description": "Create, and optionally lock a new Mutex for the caller", 
        "name": "Mutex::create", 
        "overview": "final public static long Mutex::create ([  boolean $lock  ] )", 
        "parameters": [
            {
                "descr": "Setting lock to true will lock the Mutex for the caller before returning the handle", 
                "name": "lock"
            }
        ], 
        "path": "php/mutex.create", 
        "type": "Process Control"
    }, 
    "Mutex::destroy": {
        "description": "Destroying Mutex handles must be carried out explicitly by the programmer when they are finished with the Mutex handle.", 
        "name": "Mutex::destroy", 
        "overview": "final public static boolean Mutex::destroy (  long $mutex  )", 
        "parameters": [
            {
                "descr": "A handle returned by a previous call to Mutex::create(). ", 
                "name": "mutex"
            }
        ], 
        "path": "php/mutex.destroy", 
        "type": "Process Control"
    }, 
    "Mutex::lock": {
        "description": "Attempt to lock the Mutex for the caller.", 
        "name": "Mutex::lock", 
        "overview": "final public static boolean Mutex::lock (  long $mutex  )", 
        "parameters": [
            {
                "descr": "A handle returned by a previous call to Mutex::create().", 
                "name": "mutex"
            }
        ], 
        "path": "php/mutex.lock", 
        "type": "Process Control"
    }, 
    "Mutex::trylock": {
        "description": "Attempt to lock the Mutex for the caller without blocking if the Mutex is owned (locked) by another Thread.", 
        "name": "Mutex::trylock", 
        "overview": "final public static boolean Mutex::trylock (  long $mutex  )", 
        "parameters": [
            {
                "descr": "A handle returned by a previous call to Mutex::create().", 
                "name": "mutex"
            }
        ], 
        "path": "php/mutex.trylock", 
        "type": "Process Control"
    }, 
    "Mutex::unlock": {
        "description": "Attempts to unlock the Mutex for the caller, optionally destroying the Mutex handle. The calling thread should own the Mutex at the time of the call.", 
        "name": "Mutex::unlock", 
        "overview": "final public static boolean Mutex::unlock (  long $mutex  [,  boolean $destroy  ] )", 
        "parameters": [
            {
                "descr": "A handle returned by a previous call to Mutex::create().", 
                "name": "mutex"
            }, 
            {
                "descr": "When true pthreads will destroy the Mutex after a successful unlock.", 
                "name": "destroy"
            }
        ], 
        "path": "php/mutex.unlock", 
        "type": "Process Control"
    }, 
    "NoRewindIterator": {
        "description": "", 
        "name": "NoRewindIterator", 
        "overview": "public __construct ( Iterator $iterator )", 
        "parameters": [], 
        "path": "php/class.norewinditerator", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::__construct": {
        "description": "Constructs a NoRewindIterator.", 
        "name": "NoRewindIterator::__construct", 
        "overview": "public NoRewindIterator::__construct ( Iterator $iterator )", 
        "parameters": [
            {
                "descr": "The iterator being used.", 
                "name": "iterator"
            }
        ], 
        "path": "php/norewinditerator.construct", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::current": {
        "description": "Gets the current value.", 
        "name": "NoRewindIterator::current", 
        "overview": "public mixed NoRewindIterator::current ( void )", 
        "parameters": [], 
        "path": "php/norewinditerator.current", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::getInnerIterator": {
        "description": "Gets the inner iterator, that was passed in to NoRewindIterator.", 
        "name": "NoRewindIterator::getInnerIterator", 
        "overview": "public iterator NoRewindIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/norewinditerator.getinneriterator", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::key": {
        "description": "Gets the current key.", 
        "name": "NoRewindIterator::key", 
        "overview": "public mixed NoRewindIterator::key ( void )", 
        "parameters": [], 
        "path": "php/norewinditerator.key", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::next": {
        "description": "Forwards to the next element.", 
        "name": "NoRewindIterator::next", 
        "overview": "public void NoRewindIterator::next ( void )", 
        "parameters": [], 
        "path": "php/norewinditerator.next", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::rewind": {
        "description": "Prevents the rewind operation on the inner iterator.", 
        "name": "NoRewindIterator::rewind", 
        "overview": "public void NoRewindIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/norewinditerator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "NoRewindIterator::valid": {
        "description": "Checks whether the iterator is valid.", 
        "name": "NoRewindIterator::valid", 
        "overview": "public bool NoRewindIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/norewinditerator.valid", 
        "type": "SPL/Iterators"
    }, 
    "Normalizer": {
        "description": "", 
        "name": "Normalizer", 
        "overview": "public static bool isNormalized ( string $input [, string $form = Normalizer::FORM_C ] )", 
        "parameters": [], 
        "path": "php/class.normalizer", 
        "type": "Internationalization"
    }, 
    "Normalizer::isNormalized": {
        "description": "Checks if the provided string is already in the specified normalization form.", 
        "name": "Normalizer::isNormalized", 
        "overview": "public static bool Normalizer::isNormalized ( string $input [, string $form = Normalizer::FORM_C ] )", 
        "parameters": [
            {
                "descr": "The input string to normalize", 
                "name": "input"
            }, 
            {
                "descr": "One of the normalization forms.", 
                "name": "form"
            }
        ], 
        "path": "php/normalizer.isnormalized", 
        "type": "Internationalization"
    }, 
    "Normalizer::normalize": {
        "description": "Normalizes the input provided and returns the normalized string", 
        "name": "Normalizer::normalize", 
        "overview": "public static string Normalizer::normalize ( string $input [, string $form = Normalizer::FORM_C ] )", 
        "parameters": [
            {
                "descr": "The input string to normalize", 
                "name": "input"
            }, 
            {
                "descr": "One of the normalization forms.", 
                "name": "form"
            }
        ], 
        "path": "php/normalizer.normalize", 
        "type": "Internationalization"
    }, 
    "NumberFormatter": {
        "description": "", 
        "name": "NumberFormatter", 
        "overview": "public static NumberFormatter create ( string $locale , int $style [, string $pattern ] )", 
        "parameters": [], 
        "path": "php/class.numberformatter", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::create": {
        "description": "Creates a number formatter.", 
        "name": "NumberFormatter::create", 
        "overview": "public static NumberFormatter NumberFormatter::create ( string $locale , int $style [, string $pattern ] )", 
        "parameters": [
            {
                "descr": "Locale in which the number would be formatted (locale name, e.g. ", 
                "name": "locale"
            }, 
            {
                "descr": "Style of the formatting, one of the  format style constants. ", 
                "name": "style"
            }, 
            {
                "descr": "Pattern string if the chosen style requires a pattern.", 
                "name": "pattern"
            }
        ], 
        "path": "php/numberformatter.create", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::format": {
        "description": "Format a numeric value according to the formatter rules.", 
        "name": "NumberFormatter::format", 
        "overview": "public string NumberFormatter::format ( number $value [, int $type ] )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "The value to format. Can be integer or float, other values will be converted to a numeric value.", 
                "name": "value"
            }, 
            {
                "descr": "The  formatting type to use.", 
                "name": "type"
            }
        ], 
        "path": "php/numberformatter.format", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::formatCurrency": {
        "description": "Format the currency value according to the formatter rules.", 
        "name": "NumberFormatter::formatCurrency", 
        "overview": "public string NumberFormatter::formatCurrency ( float $value , string $currency )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "The numeric currency value.", 
                "name": "value"
            }, 
            {
                "descr": "The 3-letter ISO 4217 currency code indicating the currency to use.", 
                "name": "currency"
            }
        ], 
        "path": "php/numberformatter.formatcurrency", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getAttribute": {
        "description": "Get a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.", 
        "name": "NumberFormatter::getAttribute", 
        "overview": "public int NumberFormatter::getAttribute ( int $attr )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the  numeric attribute constants.", 
                "name": "attr"
            }
        ], 
        "path": "php/numberformatter.getattribute", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getErrorCode": {
        "description": "Get error code from the last function performed by the formatter.", 
        "name": "NumberFormatter::getErrorCode", 
        "overview": "public int NumberFormatter::getErrorCode ( void )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }
        ], 
        "path": "php/numberformatter.geterrorcode", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getErrorMessage": {
        "description": "Get error message from the last function performed by the formatter.", 
        "name": "NumberFormatter::getErrorMessage", 
        "overview": "public string NumberFormatter::getErrorMessage ( void )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }
        ], 
        "path": "php/numberformatter.geterrormessage", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getLocale": {
        "description": "Get formatter locale name.", 
        "name": "NumberFormatter::getLocale", 
        "overview": "public string NumberFormatter::getLocale ([ int $type ] )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "You can choose between valid and actual locale ( Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). ", 
                "name": "type"
            }
        ], 
        "path": "php/numberformatter.getlocale", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getPattern": {
        "description": "Extract pattern used by the formatter.", 
        "name": "NumberFormatter::getPattern", 
        "overview": "public string NumberFormatter::getPattern ( void )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }
        ], 
        "path": "php/numberformatter.getpattern", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getSymbol": {
        "description": "Get a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.", 
        "name": "NumberFormatter::getSymbol", 
        "overview": "public string NumberFormatter::getSymbol ( int $attr )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Symbol specifier, one of the  format symbol constants.", 
                "name": "attr"
            }
        ], 
        "path": "php/numberformatter.getsymbol", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::getTextAttribute": {
        "description": "Get a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.", 
        "name": "NumberFormatter::getTextAttribute", 
        "overview": "public string NumberFormatter::getTextAttribute ( int $attr )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the  text attribute constants.", 
                "name": "attr"
            }
        ], 
        "path": "php/numberformatter.gettextattribute", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::parse": {
        "description": "Parse a string into a number using the current formatter rules.", 
        "name": "NumberFormatter::parse", 
        "overview": "public mixed NumberFormatter::parse ( string $value [, int $type [, int &$position ]] )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "The  formatting type to use. By default, NumberFormatter::TYPE_DOUBLE is used.", 
                "name": "type"
            }, 
            {
                "descr": "Offset in the string at which to begin parsing. ", 
                "name": "position"
            }
        ], 
        "path": "php/numberformatter.parse", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::parseCurrency": {
        "description": "Parse a string into a double and a currency using the current formatter.", 
        "name": "NumberFormatter::parseCurrency", 
        "overview": "public float NumberFormatter::parseCurrency ( string $value , string &$currency [, int &$position ] )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Parameter to receive the currency name (3-letter ISO 4217 currency code).", 
                "name": "currency"
            }, 
            {
                "descr": "Offset in the string at which to begin parsing. ", 
                "name": "position"
            }
        ], 
        "path": "php/numberformatter.parsecurrency", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setAttribute": {
        "description": "Set a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.", 
        "name": "NumberFormatter::setAttribute", 
        "overview": "public bool NumberFormatter::setAttribute ( int $attr , int $value )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the  numeric attribute constants.", 
                "name": "attr"
            }, 
            {
                "descr": "The attribute value.", 
                "name": "value"
            }
        ], 
        "path": "php/numberformatter.setattribute", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setPattern": {
        "description": "Set the pattern used by the formatter. Can not be used on a rule-based formatter.", 
        "name": "NumberFormatter::setPattern", 
        "overview": "public bool NumberFormatter::setPattern ( string $pattern )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Pattern in syntax described in \u00bb ICU DecimalFormat documentation.", 
                "name": "pattern"
            }
        ], 
        "path": "php/numberformatter.setpattern", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setSymbol": {
        "description": "Set a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.", 
        "name": "NumberFormatter::setSymbol", 
        "overview": "public bool NumberFormatter::setSymbol ( int $attr , string $value )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Symbol specifier, one of the  format symbol constants.", 
                "name": "attr"
            }, 
            {
                "descr": "Text for the symbol.", 
                "name": "value"
            }
        ], 
        "path": "php/numberformatter.setsymbol", 
        "type": "Internationalization"
    }, 
    "NumberFormatter::setTextAttribute": {
        "description": "Set a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.", 
        "name": "NumberFormatter::setTextAttribute", 
        "overview": "public bool NumberFormatter::setTextAttribute ( int $attr , string $value )", 
        "parameters": [
            {
                "descr": "NumberFormatter object.", 
                "name": "fmt"
            }, 
            {
                "descr": "Attribute specifier - one of the text attribute constants.", 
                "name": "attr"
            }, 
            {
                "descr": "Text for the attribute value.", 
                "name": "value"
            }
        ], 
        "path": "php/numberformatter.settextattribute", 
        "type": "Internationalization"
    }, 
    "OAuth": {
        "description": "", 
        "name": "OAuth", 
        "overview": "public __construct ( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )", 
        "parameters": [], 
        "path": "php/class.oauth", 
        "type": "OAuth"
    }, 
    "OAuth::__construct": {
        "description": "Creates a new OAuth object", 
        "name": "OAuth::__construct", 
        "overview": "public OAuth::__construct ( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )", 
        "parameters": [
            {
                "descr": "The consumer key provided by the service provider.", 
                "name": "consumer_key"
            }, 
            {
                "descr": "The consumer secret provided by the service provider.", 
                "name": "consumer_secret"
            }, 
            {
                "descr": "This optional parameter defines which signature method to use, by default it is OAUTH_SIG_METHOD_HMACSHA1 (HMAC-SHA1).", 
                "name": "signature_method"
            }, 
            {
                "descr": "This optional parameter defines how to pass the OAuth parameters to a consumer, by default it is OAUTH_AUTH_TYPE_AUTHORIZATION (in the Authorization header).", 
                "name": "auth_type"
            }
        ], 
        "path": "php/oauth.construct", 
        "type": "OAuth"
    }, 
    "OAuth::__destruct": {
        "description": "The destructor.", 
        "name": "OAuth::__destruct", 
        "overview": "public void OAuth::__destruct ( void )", 
        "parameters": [], 
        "path": "php/oauth.destruct", 
        "type": "OAuth"
    }, 
    "OAuth::disableDebug": {
        "description": "Turns off verbose request information (off by default). Alternatively, the debug property can be set to a FALSE value to turn debug off.", 
        "name": "OAuth::disableDebug", 
        "overview": "public bool OAuth::disableDebug ( void )", 
        "parameters": [], 
        "path": "php/oauth.disabledebug", 
        "type": "OAuth"
    }, 
    "OAuth::disableRedirects": {
        "description": "Disable redirects from being followed automatically, thus allowing the request to be manually redirected.", 
        "name": "OAuth::disableRedirects", 
        "overview": "public bool OAuth::disableRedirects ( void )", 
        "parameters": [], 
        "path": "php/oauth.disableredirects", 
        "type": "OAuth"
    }, 
    "OAuth::disableSSLChecks": {
        "description": "Turns off the usual SSL peer certificate and host checks, this is not for production environments. Alternatively, the sslChecks member can be set to FALSE to turn SSL checks off.", 
        "name": "OAuth::disableSSLChecks", 
        "overview": "public bool OAuth::disableSSLChecks ( void )", 
        "parameters": [], 
        "path": "php/oauth.disablesslchecks", 
        "type": "OAuth"
    }, 
    "OAuth::enableDebug": {
        "description": "Turns on verbose request information useful for debugging, the debug information is stored in the debugInfo member. Alternatively, the debug member can be set to a non-FALSE value to turn debug on.", 
        "name": "OAuth::enableDebug", 
        "overview": "public bool OAuth::enableDebug ( void )", 
        "parameters": [], 
        "path": "php/oauth.enabledebug", 
        "type": "OAuth"
    }, 
    "OAuth::enableRedirects": {
        "description": "Follow and sign redirects automatically, which is enabled by default.", 
        "name": "OAuth::enableRedirects", 
        "overview": "public bool OAuth::enableRedirects ( void )", 
        "parameters": [], 
        "path": "php/oauth.enableredirects", 
        "type": "OAuth"
    }, 
    "OAuth::enableSSLChecks": {
        "description": "Turns on the usual SSL peer certificate and host checks (enabled by default). Alternatively, the sslChecks member can be set to a non-FALSE value to turn SSL checks off.", 
        "name": "OAuth::enableSSLChecks", 
        "overview": "public bool OAuth::enableSSLChecks ( void )", 
        "parameters": [], 
        "path": "php/oauth.enablesslchecks", 
        "type": "OAuth"
    }, 
    "OAuth::fetch": {
        "description": "Fetch a resource.", 
        "name": "OAuth::fetch", 
        "overview": "public mixed OAuth::fetch ( string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers ]]] )", 
        "parameters": [
            {
                "descr": "URL to the OAuth protected resource.", 
                "name": "protected_resource_url"
            }, 
            {
                "descr": "Extra parameters to send with the request for the resource.", 
                "name": "extra_parameters"
            }, 
            {
                "descr": "One of the OAUTH_HTTP_METHOD_* OAUTH constants, which includes GET, POST, PUT, HEAD, or DELETE. ", 
                "name": "http_method"
            }, 
            {
                "descr": "HTTP client headers (such as User-Agent, Accept, etc.)", 
                "name": "http_headers"
            }
        ], 
        "path": "php/oauth.fetch", 
        "type": "OAuth"
    }, 
    "OAuth::generateSignature": {
        "description": "Generate a signature based on the final HTTP method, URL and a string/array of parameters.", 
        "name": "OAuth::generateSignature", 
        "overview": "public string OAuth::generateSignature ( string $http_method , string $url [, mixed $extra_parameters ] )", 
        "parameters": [
            {
                "descr": "HTTP method for request", 
                "name": "http_method"
            }, 
            {
                "descr": "URL for request", 
                "name": "url"
            }, 
            {
                "descr": "String or array of additional parameters.", 
                "name": "extra_parameters"
            }
        ], 
        "path": "php/oauth.generatesignature", 
        "type": "OAuth"
    }, 
    "OAuth::getAccessToken": {
        "description": "Fetch an access token, secret and any additional response parameters from the service provider.", 
        "name": "OAuth::getAccessToken", 
        "overview": "public array OAuth::getAccessToken ( string $access_token_url [, string $auth_session_handle [, string $verifier_token ]] )", 
        "parameters": [
            {
                "descr": "URL to the access token API.", 
                "name": "access_token_url"
            }, 
            {
                "descr": "Authorization session handle, this parameter does not have any citation in the core OAuth 1.0 specification but may be implemented by large providers. ", 
                "name": "auth_session_handle"
            }, 
            {
                "descr": "For service providers which support 1.0a, a verifier_token must be passed while exchanging the request token for the access token. ", 
                "name": "verifier_token"
            }
        ], 
        "path": "php/oauth.getaccesstoken", 
        "type": "OAuth"
    }, 
    "OAuth::getCAPath": {
        "description": "Gets the Certificate Authority information, which includes the ca_path and ca_info set by OAuth::setCaPath().", 
        "name": "OAuth::getCAPath", 
        "overview": "public array OAuth::getCAPath ( void )", 
        "parameters": [], 
        "path": "php/oauth.getcapath", 
        "type": "OAuth"
    }, 
    "OAuth::getLastResponse": {
        "description": "Get the raw response of the most recent request.", 
        "name": "OAuth::getLastResponse", 
        "overview": "public string OAuth::getLastResponse ( void )", 
        "parameters": [], 
        "path": "php/oauth.getlastresponse", 
        "type": "OAuth"
    }, 
    "OAuth::getLastResponseHeaders": {
        "description": "Get headers for last response.", 
        "name": "OAuth::getLastResponseHeaders", 
        "overview": "public string OAuth::getLastResponseHeaders ( void )", 
        "parameters": [], 
        "path": "php/oauth.getlastresponseheaders", 
        "type": "OAuth"
    }, 
    "OAuth::getLastResponseInfo": {
        "description": "Get HTTP information about the last response.", 
        "name": "OAuth::getLastResponseInfo", 
        "overview": "public array OAuth::getLastResponseInfo ( void )", 
        "parameters": [], 
        "path": "php/oauth.getlastresponseinfo", 
        "type": "OAuth"
    }, 
    "OAuth::getRequestHeader": {
        "description": "Generate OAuth header string signature based on the final HTTP method, URL and a string/array of parameters", 
        "name": "OAuth::getRequestHeader", 
        "overview": "public string OAuth::getRequestHeader ( string $http_method , string $url [, mixed $extra_parameters ] )", 
        "parameters": [
            {
                "descr": "HTTP method for request.", 
                "name": "http_method"
            }, 
            {
                "descr": "URL for request.", 
                "name": "url"
            }, 
            {
                "descr": "String or array of additional parameters.", 
                "name": "extra_parameters"
            }
        ], 
        "path": "php/oauth.getrequestheader", 
        "type": "OAuth"
    }, 
    "OAuth::getRequestToken": {
        "description": "Fetch a request token, secret and any additional response parameters from the service provider.", 
        "name": "OAuth::getRequestToken", 
        "overview": "public array OAuth::getRequestToken ( string $request_token_url [, string $callback_url ] )", 
        "parameters": [
            {
                "descr": "URL to the request token API.", 
                "name": "request_token_url"
            }, 
            {
                "descr": "OAuth callback URL. If callback_url is passed and is an empty value, it is set to \"oob\" to address the OAuth 2009.1 advisory.", 
                "name": "callback_url"
            }
        ], 
        "path": "php/oauth.getrequesttoken", 
        "type": "OAuth"
    }, 
    "OAuth::setAuthType": {
        "description": "Set where the OAuth parameters should be passed.", 
        "name": "OAuth::setAuthType", 
        "overview": "public mixed OAuth::setAuthType ( int $auth_type )", 
        "parameters": [
            {
                "descr": "auth_type can be one of the following flags (in order of decreasing preference as per OAuth 1.0 section 5.2):  OAUTH_AUTH_TYPE_AUTHORIZATION   Pass the OAuth parameters in the HTTP Authorization header.", 
                "name": "auth_type"
            }, 
            {
                "descr": "Append the OAuth parameters to the HTTP POST request body.", 
                "name": "OAUTH_AUTH_TYPE_FORM"
            }, 
            {
                "descr": "Append the OAuth parameters to the request URI.", 
                "name": "OAUTH_AUTH_TYPE_URI"
            }, 
            {
                "descr": "None.", 
                "name": "OAUTH_AUTH_TYPE_NONE"
            }
        ], 
        "path": "php/oauth.setauthtype", 
        "type": "OAuth"
    }, 
    "OAuth::setCAPath": {
        "description": "Sets the Certificate Authority (CA), both for path and info.", 
        "name": "OAuth::setCAPath", 
        "overview": "public mixed OAuth::setCAPath ([ string $ca_path [, string $ca_info ]] )", 
        "parameters": [
            {
                "descr": "The CA Path being set.", 
                "name": "ca_path"
            }, 
            {
                "descr": "The CA Info being set.", 
                "name": "ca_info"
            }
        ], 
        "path": "php/oauth.setcapath", 
        "type": "OAuth"
    }, 
    "OAuth::setNonce": {
        "description": "Sets the nonce for all subsequent requests.", 
        "name": "OAuth::setNonce", 
        "overview": "public mixed OAuth::setNonce ( string $nonce )", 
        "parameters": [
            {
                "descr": "The value for oauth_nonce.", 
                "name": "nonce"
            }
        ], 
        "path": "php/oauth.setnonce", 
        "type": "OAuth"
    }, 
    "OAuth::setRSACertificate": {
        "description": "Sets the RSA certificate.", 
        "name": "OAuth::setRSACertificate", 
        "overview": "public mixed OAuth::setRSACertificate ( string $cert )", 
        "parameters": [
            {
                "descr": "The RSA certificate.", 
                "name": "cert"
            }
        ], 
        "path": "php/oauth.setrsacertificate", 
        "type": "OAuth"
    }, 
    "OAuth::setRequestEngine": {
        "description": "Sets the Request Engine, that will be sending the HTTP requests.", 
        "name": "OAuth::setRequestEngine", 
        "overview": "public void OAuth::setRequestEngine ( int $reqengine )", 
        "parameters": [
            {
                "descr": "The desired request engine. Set to OAUTH_REQENGINE_STREAMS to use PHP Streams, or OAUTH_REQENGINE_CURL to use Curl.", 
                "name": "reqengine"
            }
        ], 
        "path": "php/oauth.setrequestengine", 
        "type": "OAuth"
    }, 
    "OAuth::setSSLChecks": {
        "description": "Tweak specific SSL checks for requests.", 
        "name": "OAuth::setSSLChecks", 
        "overview": "public bool OAuth::setSSLChecks ( int $sslcheck )", 
        "parameters": [], 
        "path": "php/oauth.setsslchecks", 
        "type": "OAuth"
    }, 
    "OAuth::setTimestamp": {
        "description": "Sets the OAuth timestamp for subsequent requests.", 
        "name": "OAuth::setTimestamp", 
        "overview": "public mixed OAuth::setTimestamp ( string $timestamp )", 
        "parameters": [
            {
                "descr": "The timestamp.", 
                "name": "timestamp"
            }
        ], 
        "path": "php/oauth.settimestamp", 
        "type": "OAuth"
    }, 
    "OAuth::setToken": {
        "description": "Set the token and secret for subsequent requests.", 
        "name": "OAuth::setToken", 
        "overview": "public bool OAuth::setToken ( string $token , string $token_secret )", 
        "parameters": [
            {
                "descr": "The OAuth token.", 
                "name": "token"
            }, 
            {
                "descr": "The OAuth token secret.", 
                "name": "token_secret"
            }
        ], 
        "path": "php/oauth.settoken", 
        "type": "OAuth"
    }, 
    "OAuth::setVersion": {
        "description": "Sets the OAuth version for subsequent requests", 
        "name": "OAuth::setVersion", 
        "overview": "public bool OAuth::setVersion ( string $version )", 
        "parameters": [
            {
                "descr": "OAuth version, default value is always \"1.0\"", 
                "name": "version"
            }
        ], 
        "path": "php/oauth.setversion", 
        "type": "OAuth"
    }, 
    "OAuthException": {
        "description": "", 
        "name": "OAuthException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.oauthexception", 
        "type": "OAuth"
    }, 
    "OAuthProvider": {
        "description": "", 
        "name": "OAuthProvider", 
        "overview": "final public bool addRequiredParameter ( string $req_params )", 
        "parameters": [], 
        "path": "php/class.oauthprovider", 
        "type": "OAuth"
    }, 
    "OAuthProvider::__construct": {
        "description": "Initiates a new OAuthProvider object.", 
        "name": "OAuthProvider::__construct", 
        "overview": "public OAuthProvider::__construct ([ array $params_array ] )", 
        "parameters": [
            {
                "descr": "Setting these optional parameters is limited to the CLI SAPI.", 
                "name": "params_array"
            }
        ], 
        "path": "php/oauthprovider.construct", 
        "type": "OAuth"
    }, 
    "OAuthProvider::addRequiredParameter": {
        "description": "Add required oauth provider parameters.", 
        "name": "OAuthProvider::addRequiredParameter", 
        "overview": "final public bool OAuthProvider::addRequiredParameter ( string $req_params )", 
        "parameters": [
            {
                "descr": "The required parameters.", 
                "name": "req_params"
            }
        ], 
        "path": "php/oauthprovider.addrequiredparameter", 
        "type": "OAuth"
    }, 
    "OAuthProvider::callTimestampNonceHandler": {
        "description": "Calls the registered timestamp handler callback function, which is set with OAuthProvider::timestampNonceHandler().", 
        "name": "OAuthProvider::callTimestampNonceHandler", 
        "overview": "public void OAuthProvider::callTimestampNonceHandler ( void )", 
        "parameters": [], 
        "path": "php/oauthprovider.calltimestampnoncehandler", 
        "type": "OAuth"
    }, 
    "OAuthProvider::callconsumerHandler": {
        "description": "Calls the registered consumer handler callback function, which is set with OAuthProvider::consumerHandler().", 
        "name": "OAuthProvider::callconsumerHandler", 
        "overview": "public void OAuthProvider::callconsumerHandler ( void )", 
        "parameters": [], 
        "path": "php/oauthprovider.callconsumerhandler", 
        "type": "OAuth"
    }, 
    "OAuthProvider::calltokenHandler": {
        "description": "Calls the registered token handler callback function, which is set with OAuthProvider::tokenHandler().", 
        "name": "OAuthProvider::calltokenHandler", 
        "overview": "public void OAuthProvider::calltokenHandler ( void )", 
        "parameters": [], 
        "path": "php/oauthprovider.calltokenhandler", 
        "type": "OAuth"
    }, 
    "OAuthProvider::checkOAuthRequest": {
        "description": "Checks an OAuth request.", 
        "name": "OAuthProvider::checkOAuthRequest", 
        "overview": "public void OAuthProvider::checkOAuthRequest ([ string $uri [, string $method ]] )", 
        "parameters": [
            {
                "descr": "The optional URI, or endpoint.", 
                "name": "uri"
            }, 
            {
                "descr": "The HTTP method. Optionally pass in one of the OAUTH_HTTP_METHOD_* OAuth constants.", 
                "name": "method"
            }
        ], 
        "path": "php/oauthprovider.checkoauthrequest", 
        "type": "OAuth"
    }, 
    "OAuthProvider::consumerHandler": {
        "description": "Sets the consumer handler callback, which will later be called with OAuthProvider::callConsumerHandler().", 
        "name": "OAuthProvider::consumerHandler", 
        "overview": "public void OAuthProvider::consumerHandler ( callable $callback_function )", 
        "parameters": [
            {
                "descr": "The callable functions name.", 
                "name": "callback_function"
            }
        ], 
        "path": "php/oauthprovider.consumerhandler", 
        "type": "OAuth"
    }, 
    "OAuthProvider::generateToken": {
        "description": "Generates a string of pseudo-random bytes.", 
        "name": "OAuthProvider::generateToken", 
        "overview": "final public static string OAuthProvider::generateToken ( int $size [, bool $strong = false ] )", 
        "parameters": [
            {
                "descr": "The desired token length, in terms of bytes.", 
                "name": "size"
            }, 
            {
                "descr": "Setting to TRUE means /dev/random will be used for entropy, as otherwise the non-blocking /dev/urandom is used. ", 
                "name": "strong"
            }
        ], 
        "path": "php/oauthprovider.generatetoken", 
        "type": "OAuth"
    }, 
    "OAuthProvider::is2LeggedEndpoint": {
        "description": "The 2-legged flow, or request signing. It does not require a token.", 
        "name": "OAuthProvider::is2LeggedEndpoint", 
        "overview": "public void OAuthProvider::is2LeggedEndpoint ( mixed $params_array )", 
        "parameters": [], 
        "path": "php/oauthprovider.is2leggedendpoint", 
        "type": "OAuth"
    }, 
    "OAuthProvider::isRequestTokenEndpoint": {
        "description": "", 
        "name": "OAuthProvider::isRequestTokenEndpoint", 
        "overview": "public void OAuthProvider::isRequestTokenEndpoint ( bool $will_issue_request_token )", 
        "parameters": [
            {
                "descr": "Sets whether or not it will issue a request token, thus determining if OAuthProvider::tokenHandler() needs to be called.", 
                "name": "will_issue_request_token"
            }
        ], 
        "path": "php/oauthprovider.isrequesttokenendpoint", 
        "type": "OAuth"
    }, 
    "OAuthProvider::removeRequiredParameter": {
        "description": "Removes a required parameter.", 
        "name": "OAuthProvider::removeRequiredParameter", 
        "overview": "final public bool OAuthProvider::removeRequiredParameter ( string $req_params )", 
        "parameters": [
            {
                "descr": "The required parameter to be removed.", 
                "name": "req_params"
            }
        ], 
        "path": "php/oauthprovider.removerequiredparameter", 
        "type": "OAuth"
    }, 
    "OAuthProvider::reportProblem": {
        "description": "Pass in a problem as an OAuthException, with possible problems listed in the OAuth constants section.", 
        "name": "OAuthProvider::reportProblem", 
        "overview": "final public static string OAuthProvider::reportProblem ( string $oauthexception [, bool $send_headers = true ] )", 
        "parameters": [
            {
                "descr": "The OAuthException.", 
                "name": "oauthexception"
            }
        ], 
        "path": "php/oauthprovider.reportproblem", 
        "type": "OAuth"
    }, 
    "OAuthProvider::setParam": {
        "description": "Sets a parameter.", 
        "name": "OAuthProvider::setParam", 
        "overview": "final public bool OAuthProvider::setParam ( string $param_key [, mixed $param_val ] )", 
        "parameters": [
            {
                "descr": "The parameter key.", 
                "name": "param_key"
            }, 
            {
                "descr": "The optional parameter value.", 
                "name": "param_val"
            }
        ], 
        "path": "php/oauthprovider.setparam", 
        "type": "OAuth"
    }, 
    "OAuthProvider::setRequestTokenPath": {
        "description": "Sets the request tokens path.", 
        "name": "OAuthProvider::setRequestTokenPath", 
        "overview": "final public bool OAuthProvider::setRequestTokenPath ( string $path )", 
        "parameters": [
            {
                "descr": "The path.", 
                "name": "path"
            }
        ], 
        "path": "php/oauthprovider.setrequesttokenpath", 
        "type": "OAuth"
    }, 
    "OAuthProvider::timestampNonceHandler": {
        "description": "Sets the timestamp nonce handler callback, which will later be called with OAuthProvider::callTimestampNonceHandler(). Errors related to timestamp/nonce are thrown to this callback.", 
        "name": "OAuthProvider::timestampNonceHandler", 
        "overview": "public void OAuthProvider::timestampNonceHandler ( callable $callback_function )", 
        "parameters": [
            {
                "descr": "The callable functions name.", 
                "name": "callback_function"
            }
        ], 
        "path": "php/oauthprovider.timestampnoncehandler", 
        "type": "OAuth"
    }, 
    "OAuthProvider::tokenHandler": {
        "description": "Sets the token handler callback, which will later be called with OAuthProvider::callTokenHandler().", 
        "name": "OAuthProvider::tokenHandler", 
        "overview": "public void OAuthProvider::tokenHandler ( callable $callback_function )", 
        "parameters": [
            {
                "descr": "The callable functions name.", 
                "name": "callback_function"
            }
        ], 
        "path": "php/oauthprovider.tokenhandler", 
        "type": "OAuth"
    }, 
    "OutOfBoundsException": {
        "description": "", 
        "name": "OutOfBoundsException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.outofboundsexception", 
        "type": "SPL/Exceptions"
    }, 
    "OutOfRangeException": {
        "description": "", 
        "name": "OutOfRangeException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.outofrangeexception", 
        "type": "SPL/Exceptions"
    }, 
    "OuterIterator (interface": {
        "description": "", 
        "name": "OuterIterator (interface", 
        "overview": "public Iterator getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/class.outeriterator", 
        "type": "SPL/Interfaces"
    }, 
    "OuterIterator::getInnerIterator": {
        "description": "Returns the inner iterator for the current iterator entry.", 
        "name": "OuterIterator::getInnerIterator", 
        "overview": "public Iterator OuterIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/outeriterator.getinneriterator", 
        "type": "SPL/Interfaces"
    }, 
    "OverflowException": {
        "description": "", 
        "name": "OverflowException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.overflowexception", 
        "type": "SPL/Exceptions"
    }, 
    "PDO": {
        "description": "", 
        "name": "PDO", 
        "overview": "public bool beginTransaction ( void )", 
        "parameters": [], 
        "path": "php/class.pdo", 
        "type": "Database"
    }, 
    "PDO::beginTransaction": {
        "description": "Turns off autocommit mode. While autocommit mode is turned off, changes made to the database via the PDO object instance are not committed until you end the transaction by calling PDO::commit(). Calling PDO::rollBack() will roll back all changes to the database and return the connection to autocommit mode.", 
        "name": "PDO::beginTransaction", 
        "overview": "public bool PDO::beginTransaction ( void )", 
        "parameters": [], 
        "path": "php/pdo.begintransaction", 
        "type": "Database"
    }, 
    "PDO::commit": {
        "description": "Commits a transaction, returning the database connection to autocommit mode until the next call to PDO::beginTransaction() starts a new transaction.", 
        "name": "PDO::commit", 
        "overview": "public bool PDO::commit ( void )", 
        "parameters": [], 
        "path": "php/pdo.commit", 
        "type": "Database"
    }, 
    "PDO::errorCode": {
        "description": "", 
        "name": "PDO::errorCode", 
        "overview": "public mixed PDO::errorCode ( void )", 
        "parameters": [], 
        "path": "php/pdo.errorcode", 
        "type": "Database"
    }, 
    "PDO::errorInfo": {
        "description": "", 
        "name": "PDO::errorInfo", 
        "overview": "public array PDO::errorInfo ( void )", 
        "parameters": [], 
        "path": "php/pdo.errorinfo", 
        "type": "Database"
    }, 
    "PDO::exec": {
        "description": "PDO::exec() executes an SQL statement in a single function call, returning the number of rows affected by the statement.", 
        "name": "PDO::exec", 
        "overview": "public int PDO::exec ( string $statement )", 
        "parameters": [
            {
                "descr": "The SQL statement to prepare and execute. ", 
                "name": "statement"
            }
        ], 
        "path": "php/pdo.exec", 
        "type": "Database"
    }, 
    "PDO::getAttribute": {
        "description": "This function returns the value of a database connection attribute. To retrieve PDOStatement attributes, refer to PDOStatement::getAttribute().", 
        "name": "PDO::getAttribute", 
        "overview": "public mixed PDO::getAttribute ( int $attribute )", 
        "parameters": [
            {
                "descr": "One of the PDO::ATTR_* constants. ", 
                "name": "attribute"
            }
        ], 
        "path": "php/pdo.getattribute", 
        "type": "Database"
    }, 
    "PDO::getAvailableDrivers": {
        "description": "This function returns all currently available PDO drivers which can be used in DSN parameter of PDO::__construct().", 
        "name": "PDO::getAvailableDrivers", 
        "overview": "public static array PDO::getAvailableDrivers ( void )", 
        "parameters": [], 
        "path": "php/pdo.getavailabledrivers", 
        "type": "Database"
    }, 
    "PDO::inTransaction": {
        "description": "Checks if a transaction is currently active within the driver. This method only works for database drivers that support transactions.", 
        "name": "PDO::inTransaction", 
        "overview": "public bool PDO::inTransaction ( void )", 
        "parameters": [], 
        "path": "php/pdo.intransaction", 
        "type": "Database"
    }, 
    "PDO::lastInsertId": {
        "description": "Returns the ID of the last inserted row, or the last value from a sequence object, depending on the underlying driver. For example, PDO_PGSQL requires you to specify the name of a sequence object for the name parameter.", 
        "name": "PDO::lastInsertId", 
        "overview": "public string PDO::lastInsertId ([ string $name = NULL ] )", 
        "parameters": [
            {
                "descr": "Name of the sequence object from which the ID should be returned.", 
                "name": "name"
            }
        ], 
        "path": "php/pdo.lastinsertid", 
        "type": "Database"
    }, 
    "PDO::prepare": {
        "description": "Prepares an SQL statement to be executed by the PDOStatement::execute() method. The SQL statement can contain zero or more named (:name) or question mark (?) parameter markers for which real values will be substituted when the statement is executed. You cannot use both named and question mark parameter markers within the same SQL statement; pick one or the other parameter style. Use these parameters to bind any user-input, do not include the user-input directly in the query.", 
        "name": "PDO::prepare", 
        "overview": "public PDOStatement PDO::prepare ( string $statement [, array $driver_options = array() ] )", 
        "parameters": [
            {
                "descr": "This must be a valid SQL statement for the target database server.", 
                "name": "statement"
            }, 
            {
                "descr": "This array holds one or more key=>value pairs to set attribute values for the PDOStatement object that this method returns. ", 
                "name": "driver_options"
            }
        ], 
        "path": "php/pdo.prepare", 
        "type": "Database"
    }, 
    "PDO::query": {
        "description": "PDO::query() executes an SQL statement in a single function call, returning the result set (if any) returned by the statement as a PDOStatement object.", 
        "name": "PDO::query", 
        "overview": "public PDOStatement PDO::query ( string $statement )", 
        "parameters": [
            {
                "descr": "The SQL statement to prepare and execute. ", 
                "name": "statement"
            }
        ], 
        "path": "php/pdo.query", 
        "type": "Database"
    }, 
    "PDO::quote": {
        "description": "PDO::quote() places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver.", 
        "name": "PDO::quote", 
        "overview": "public string PDO::quote ( string $string [, int $parameter_type = PDO::PARAM_STR ] )", 
        "parameters": [
            {
                "descr": "The string to be quoted.", 
                "name": "string"
            }, 
            {
                "descr": "Provides a data type hint for drivers that have alternate quoting styles.", 
                "name": "parameter_type"
            }
        ], 
        "path": "php/pdo.quote", 
        "type": "Database"
    }, 
    "PDO::rollBack": {
        "description": "Rolls back the current transaction, as initiated by PDO::beginTransaction(). A PDOException will be thrown if no transaction is active.", 
        "name": "PDO::rollBack", 
        "overview": "public bool PDO::rollBack ( void )", 
        "parameters": [], 
        "path": "php/pdo.rollback", 
        "type": "Database"
    }, 
    "PDO::setAttribute": {
        "description": "Sets an attribute on the database handle. Some of the available generic attributes are listed below; some drivers may make use of additional driver specific attributes.", 
        "name": "PDO::setAttribute", 
        "overview": "public bool PDO::setAttribute ( int $attribute , mixed $value )", 
        "parameters": [], 
        "path": "php/pdo.setattribute", 
        "type": "Database"
    }, 
    "PDOException": {
        "description": "", 
        "name": "PDOException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.pdoexception", 
        "type": "Database"
    }, 
    "PDOStatement": {
        "description": "", 
        "name": "PDOStatement", 
        "overview": "public bool bindColumn ( mixed $column , mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )", 
        "parameters": [], 
        "path": "php/class.pdostatement", 
        "type": "Database"
    }, 
    "PDOStatement::bindColumn": {
        "description": "PDOStatement::bindColumn() arranges to have a particular variable bound to a given column in the result-set from a query. Each call to PDOStatement::fetch() or PDOStatement::fetchAll() will update all the variables that are bound to columns.", 
        "name": "PDOStatement::bindColumn", 
        "overview": "public bool PDOStatement::bindColumn ( mixed $column , mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )", 
        "parameters": [
            {
                "descr": "Number of the column (1-indexed) or name of the column in the result set. ", 
                "name": "column"
            }, 
            {
                "descr": "Name of the PHP variable to which the column will be bound.", 
                "name": "param"
            }, 
            {
                "descr": "Data type of the parameter, specified by the PDO::PARAM_* constants.", 
                "name": "type"
            }, 
            {
                "descr": "A hint for pre-allocation.", 
                "name": "maxlen"
            }, 
            {
                "descr": "Optional parameter(s) for the driver.", 
                "name": "driverdata"
            }
        ], 
        "path": "php/pdostatement.bindcolumn", 
        "type": "Database"
    }, 
    "PDOStatement::bindParam": {
        "description": "Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement. Unlike PDOStatement::bindValue(), the variable is bound as a reference and will only be evaluated at the time that PDOStatement::execute() is called.", 
        "name": "PDOStatement::bindParam", 
        "overview": "public bool PDOStatement::bindParam ( mixed $parameter , mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] )", 
        "parameters": [
            {
                "descr": "Parameter identifier. For a prepared statement using named placeholders, this will be a parameter name of the form :name. ", 
                "name": "parameter"
            }, 
            {
                "descr": "Name of the PHP variable to bind to the SQL statement parameter.", 
                "name": "variable"
            }, 
            {
                "descr": "Explicit data type for the parameter using the PDO::PARAM_* constants. ", 
                "name": "data_type"
            }, 
            {
                "descr": "Length of the data type. To indicate that a parameter is an OUT parameter from a stored procedure, you must explicitly set the length.", 
                "name": "length"
            }
        ], 
        "path": "php/pdostatement.bindparam", 
        "type": "Database"
    }, 
    "PDOStatement::bindValue": {
        "description": "Binds a value to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement.", 
        "name": "PDOStatement::bindValue", 
        "overview": "public bool PDOStatement::bindValue ( mixed $parameter , mixed $value [, int $data_type = PDO::PARAM_STR ] )", 
        "parameters": [
            {
                "descr": "Parameter identifier. For a prepared statement using named placeholders, this will be a parameter name of the form :name. ", 
                "name": "parameter"
            }, 
            {
                "descr": "The value to bind to the parameter.", 
                "name": "value"
            }, 
            {
                "descr": "Explicit data type for the parameter using the PDO::PARAM_* constants.", 
                "name": "data_type"
            }
        ], 
        "path": "php/pdostatement.bindvalue", 
        "type": "Database"
    }, 
    "PDOStatement::closeCursor": {
        "description": "PDOStatement::closeCursor() frees up the connection to the server so that other SQL statements may be issued, but leaves the statement in a state that enables it to be executed again.", 
        "name": "PDOStatement::closeCursor", 
        "overview": "public bool PDOStatement::closeCursor ( void )", 
        "parameters": [], 
        "path": "php/pdostatement.closecursor", 
        "type": "Database"
    }, 
    "PDOStatement::columnCount": {
        "description": "Use PDOStatement::columnCount() to return the number of columns in the result set represented by the PDOStatement object.", 
        "name": "PDOStatement::columnCount", 
        "overview": "public int PDOStatement::columnCount ( void )", 
        "parameters": [], 
        "path": "php/pdostatement.columncount", 
        "type": "Database"
    }, 
    "PDOStatement::debugDumpParams": {
        "description": "Dumps the informations contained by a prepared statement directly on the output. It will provide the SQL query in use, the number of parameters used (Params), the list of parameters, with their name, type (paramtype) as an integer, their key name or position, the value, and the position in the query (if this is supported by the PDO driver, otherwise, it will be -1).", 
        "name": "PDOStatement::debugDumpParams", 
        "overview": "public void PDOStatement::debugDumpParams ( void )", 
        "parameters": [], 
        "path": "php/pdostatement.debugdumpparams", 
        "type": "Database"
    }, 
    "PDOStatement::errorCode": {
        "description": "", 
        "name": "PDOStatement::errorCode", 
        "overview": "public string PDOStatement::errorCode ( void )", 
        "parameters": [], 
        "path": "php/pdostatement.errorcode", 
        "type": "Database"
    }, 
    "PDOStatement::errorInfo": {
        "description": "", 
        "name": "PDOStatement::errorInfo", 
        "overview": "public array PDOStatement::errorInfo ( void )", 
        "parameters": [], 
        "path": "php/pdostatement.errorinfo", 
        "type": "Database"
    }, 
    "PDOStatement::execute": {
        "description": "Execute the prepared statement. If the prepared statement included parameter markers, you must either:", 
        "name": "PDOStatement::execute", 
        "overview": "public bool PDOStatement::execute ([ array $input_parameters ] )", 
        "parameters": [
            {
                "descr": "An array of values with as many elements as there are bound parameters in the SQL statement being executed. ", 
                "name": "input_parameters"
            }
        ], 
        "path": "php/pdostatement.execute", 
        "type": "Database"
    }, 
    "PDOStatement::fetch": {
        "description": "Fetches a row from a result set associated with a PDOStatement object. The fetch_style parameter determines how PDO returns the row.", 
        "name": "PDOStatement::fetch", 
        "overview": "public mixed PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] )", 
        "parameters": [
            {
                "descr": "Controls how the next row will be returned to the caller. ", 
                "name": "fetch_style"
            }, 
            {
                "descr": "For a PDOStatement object representing a scrollable cursor, this value determines which row will be returned to the caller. ", 
                "name": "cursor_orientation"
            }, 
            {
                "descr": "For a PDOStatement object representing a scrollable cursor for which the cursor_orientation parameter is set to PDO::FETCH_ORI_ABS, this value specifies the absolute number of the row in the result set that shall be fetched.   For a PDOStatement object representing a scrollable cursor for which the cursor_orientation parameter is set to PDO::FETCH_ORI_REL, this value specifies the row to fetch relative to the cursor position before PDOStatement::fetch() was called.", 
                "name": "offset"
            }
        ], 
        "path": "php/pdostatement.fetch", 
        "type": "Database"
    }, 
    "PDOStatement::fetchAll": {
        "description": "", 
        "name": "PDOStatement::fetchAll", 
        "overview": "public array PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] )", 
        "parameters": [
            {
                "descr": "Controls the contents of the returned array as documented in PDOStatement::fetch(). ", 
                "name": "fetch_style"
            }, 
            {
                "descr": "This argument have a different meaning depending on the value of the fetch_style parameter:   PDO::FETCH_COLUMN: Returns the indicated 0-indexed column. ", 
                "name": "fetch_argument"
            }, 
            {
                "descr": "Arguments of custom class constructor when the fetch_style parameter is PDO::FETCH_CLASS.", 
                "name": "ctor_args"
            }
        ], 
        "path": "php/pdostatement.fetchall", 
        "type": "Database"
    }, 
    "PDOStatement::fetchColumn": {
        "description": "Returns a single column from the next row of a result set or FALSE if there are no more rows.", 
        "name": "PDOStatement::fetchColumn", 
        "overview": "public string PDOStatement::fetchColumn ([ int $column_number = 0 ] )", 
        "parameters": [
            {
                "descr": "0-indexed number of the column you wish to retrieve from the row. ", 
                "name": "column_number"
            }
        ], 
        "path": "php/pdostatement.fetchcolumn", 
        "type": "Database"
    }, 
    "PDOStatement::fetchObject": {
        "description": "Fetches the next row and returns it as an object. This function is an alternative to PDOStatement::fetch() with PDO::FETCH_CLASS or PDO::FETCH_OBJ style.", 
        "name": "PDOStatement::fetchObject", 
        "overview": "public mixed PDOStatement::fetchObject ([ string $class_name = \"stdClass\" [, array $ctor_args ]] )", 
        "parameters": [
            {
                "descr": "Name of the created class.", 
                "name": "class_name"
            }, 
            {
                "descr": "Elements of this array are passed to the constructor.", 
                "name": "ctor_args"
            }
        ], 
        "path": "php/pdostatement.fetchobject", 
        "type": "Database"
    }, 
    "PDOStatement::getAttribute": {
        "description": "Gets an attribute of the statement. Currently, no generic attributes exist but only driver specific:", 
        "name": "PDOStatement::getAttribute", 
        "overview": "public mixed PDOStatement::getAttribute ( int $attribute )", 
        "parameters": [], 
        "path": "php/pdostatement.getattribute", 
        "type": "Database"
    }, 
    "PDOStatement::getColumnMeta": {
        "description": "", 
        "name": "PDOStatement::getColumnMeta", 
        "overview": "public array PDOStatement::getColumnMeta ( int $column )", 
        "parameters": [
            {
                "descr": "The 0-indexed column in the result set.", 
                "name": "column"
            }
        ], 
        "path": "php/pdostatement.getcolumnmeta", 
        "type": "Database"
    }, 
    "PDOStatement::nextRowset": {
        "description": "Some database servers support stored procedures that return more than one rowset (also known as a result set). PDOStatement::nextRowset() enables you to access the second and subsequent rowsets associated with a PDOStatement object. Each rowset can have a different set of columns from the preceding rowset.", 
        "name": "PDOStatement::nextRowset", 
        "overview": "public bool PDOStatement::nextRowset ( void )", 
        "parameters": [], 
        "path": "php/pdostatement.nextrowset", 
        "type": "Database"
    }, 
    "PDOStatement::rowCount": {
        "description": "PDOStatement::rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement executed by the corresponding PDOStatement object.", 
        "name": "PDOStatement::rowCount", 
        "overview": "public int PDOStatement::rowCount ( void )", 
        "parameters": [], 
        "path": "php/pdostatement.rowcount", 
        "type": "Database"
    }, 
    "PDOStatement::setAttribute": {
        "description": "Sets an attribute on the statement. Currently, no generic attributes are set but only driver specific:", 
        "name": "PDOStatement::setAttribute", 
        "overview": "public bool PDOStatement::setAttribute ( int $attribute , mixed $value )", 
        "parameters": [], 
        "path": "php/pdostatement.setattribute", 
        "type": "Database"
    }, 
    "PDOStatement::setFetchMode": {
        "description": "", 
        "name": "PDOStatement::setFetchMode", 
        "overview": "public bool PDOStatement::setFetchMode ( int $mode )", 
        "parameters": [
            {
                "descr": "The fetch mode must be one of the PDO::FETCH_* constants.", 
                "name": "mode"
            }, 
            {
                "descr": "Column number.", 
                "name": "colno"
            }, 
            {
                "descr": "Class name.", 
                "name": "classname"
            }, 
            {
                "descr": "Constructor arguments.", 
                "name": "ctorargs"
            }, 
            {
                "descr": "Object.", 
                "name": "object"
            }
        ], 
        "path": "php/pdostatement.setfetchmode", 
        "type": "Database"
    }, 
    "ParentIterator": {
        "description": "", 
        "name": "ParentIterator", 
        "overview": "public bool accept ( void )", 
        "parameters": [], 
        "path": "php/class.parentiterator", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::__construct": {
        "description": "Constructs a ParentIterator on an iterator.", 
        "name": "ParentIterator::__construct", 
        "overview": "public ParentIterator::__construct ( RecursiveIterator $iterator )", 
        "parameters": [
            {
                "descr": "The iterator being constructed upon.", 
                "name": "iterator"
            }
        ], 
        "path": "php/parentiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::accept": {
        "description": "Determines if the current element has children.", 
        "name": "ParentIterator::accept", 
        "overview": "public bool ParentIterator::accept ( void )", 
        "parameters": [], 
        "path": "php/parentiterator.accept", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::getChildren": {
        "description": "Get the inner iterator's children contained in a ParentIterator.", 
        "name": "ParentIterator::getChildren", 
        "overview": "public ParentIterator ParentIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/parentiterator.getchildren", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::hasChildren": {
        "description": "Check whether the inner iterator's current element has children.", 
        "name": "ParentIterator::hasChildren", 
        "overview": "public bool ParentIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/parentiterator.haschildren", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::next": {
        "description": "Moves the iterator forward.", 
        "name": "ParentIterator::next", 
        "overview": "public void ParentIterator::next ( void )", 
        "parameters": [], 
        "path": "php/parentiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "ParentIterator::rewind": {
        "description": "Rewinds the iterator.", 
        "name": "ParentIterator::rewind", 
        "overview": "public void ParentIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/parentiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "RangeException": {
        "description": "", 
        "name": "RangeException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.rangeexception", 
        "type": "SPL/Exceptions"
    }, 
    "RecursiveArrayIterator": {
        "description": "", 
        "name": "RecursiveArrayIterator", 
        "overview": "public RecursiveArrayIterator getChildren ( void )", 
        "parameters": [], 
        "path": "php/class.recursivearrayiterator", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveArrayIterator::getChildren": {
        "description": "Returns an iterator for the current iterator entry.", 
        "name": "RecursiveArrayIterator::getChildren", 
        "overview": "public RecursiveArrayIterator RecursiveArrayIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivearrayiterator.getchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveArrayIterator::hasChildren": {
        "description": "Returns whether current entry is an array or an object for which an iterator can be obtained via RecursiveArrayIterator::getChildren().", 
        "name": "RecursiveArrayIterator::hasChildren", 
        "overview": "public bool RecursiveArrayIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivearrayiterator.haschildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator": {
        "description": "", 
        "name": "RecursiveCachingIterator", 
        "overview": "public __construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "parameters": [], 
        "path": "php/class.recursivecachingiterator", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator::__construct": {
        "description": "Constructs a new RecursiveCachingIterator, which consists of a passed in iterator.", 
        "name": "RecursiveCachingIterator::__construct", 
        "overview": "public RecursiveCachingIterator::__construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )", 
        "parameters": [
            {
                "descr": "The iterator being used.", 
                "name": "iterator"
            }, 
            {
                "descr": "The flags. Use CALL_TOSTRING to call RecursiveCachingIterator::__toString() for every element (the default), and/or CATCH_GET_CHILD to catch exceptions when trying to get children.", 
                "name": "flags"
            }
        ], 
        "path": "php/recursivecachingiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator::getChildren": {
        "description": "", 
        "name": "RecursiveCachingIterator::getChildren", 
        "overview": "public RecursiveCachingIterator RecursiveCachingIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivecachingiterator.getchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCachingIterator::hasChildren": {
        "description": "", 
        "name": "RecursiveCachingIterator::hasChildren", 
        "overview": "public bool RecursiveCachingIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivecachingiterator.haschildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCallbackFilterIterator": {
        "description": "", 
        "name": "RecursiveCallbackFilterIterator", 
        "overview": "public RecursiveCallbackFilterIterator getChildren ( void )", 
        "parameters": [], 
        "path": "php/class.recursivecallbackfilteriterator", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCallbackFilterIterator::getChildren": {
        "description": "Fetches the filtered children of the inner iterator.", 
        "name": "RecursiveCallbackFilterIterator::getChildren", 
        "overview": "public RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivecallbackfilteriterator.getchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveCallbackFilterIterator::hasChildren": {
        "description": "Returns TRUE if the current element has children, FALSE otherwise.", 
        "name": "RecursiveCallbackFilterIterator::hasChildren", 
        "overview": "public void RecursiveCallbackFilterIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivecallbackfilteriterator.haschildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator": {
        "description": "", 
        "name": "RecursiveDirectoryIterator", 
        "overview": "public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "parameters": [], 
        "path": "php/class.recursivedirectoryiterator", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::__construct": {
        "description": "Constructs a RecursiveDirectoryIterator() for the provided path.", 
        "name": "RecursiveDirectoryIterator::__construct", 
        "overview": "public RecursiveDirectoryIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )", 
        "parameters": [
            {
                "descr": "The path of the directory to be iterated over.", 
                "name": "path"
            }, 
            {
                "descr": "Flags may be provided which will affect the behavior of some methods. ", 
                "name": "flags"
            }
        ], 
        "path": "php/recursivedirectoryiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::getChildren": {
        "description": "", 
        "name": "RecursiveDirectoryIterator::getChildren", 
        "overview": "public mixed RecursiveDirectoryIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivedirectoryiterator.getchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::getSubPath": {
        "description": "Gets the sub path.", 
        "name": "RecursiveDirectoryIterator::getSubPath", 
        "overview": "public string RecursiveDirectoryIterator::getSubPath ( void )", 
        "parameters": [], 
        "path": "php/recursivedirectoryiterator.getsubpath", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::getSubPathname": {
        "description": "Gets the sub path and filename.", 
        "name": "RecursiveDirectoryIterator::getSubPathname", 
        "overview": "public string RecursiveDirectoryIterator::getSubPathname ( void )", 
        "parameters": [], 
        "path": "php/recursivedirectoryiterator.getsubpathname", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::hasChildren": {
        "description": "", 
        "name": "RecursiveDirectoryIterator::hasChildren", 
        "overview": "public bool RecursiveDirectoryIterator::hasChildren ([ bool $allow_links = false ] )", 
        "parameters": [], 
        "path": "php/recursivedirectoryiterator.haschildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::key": {
        "description": "", 
        "name": "RecursiveDirectoryIterator::key", 
        "overview": "public string RecursiveDirectoryIterator::key ( void )", 
        "parameters": [], 
        "path": "php/recursivedirectoryiterator.key", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::next": {
        "description": "", 
        "name": "RecursiveDirectoryIterator::next", 
        "overview": "public void RecursiveDirectoryIterator::next ( void )", 
        "parameters": [], 
        "path": "php/recursivedirectoryiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveDirectoryIterator::rewind": {
        "description": "", 
        "name": "RecursiveDirectoryIterator::rewind", 
        "overview": "public void RecursiveDirectoryIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/recursivedirectoryiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator": {
        "description": "", 
        "name": "RecursiveFilterIterator", 
        "overview": "public __construct ( RecursiveIterator $iterator )", 
        "parameters": [], 
        "path": "php/class.recursivefilteriterator", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator::__construct": {
        "description": "Create a RecursiveFilterIterator from a RecursiveIterator.", 
        "name": "RecursiveFilterIterator::__construct", 
        "overview": "public RecursiveFilterIterator::__construct ( RecursiveIterator $iterator )", 
        "parameters": [
            {
                "descr": "The RecursiveIterator to be filtered.", 
                "name": "iterator"
            }
        ], 
        "path": "php/recursivefilteriterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator::getChildren": {
        "description": "Return the inner iterator's children contained in a RecursiveFilterIterator.", 
        "name": "RecursiveFilterIterator::getChildren", 
        "overview": "public void RecursiveFilterIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivefilteriterator.getchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveFilterIterator::hasChildren": {
        "description": "Check whether the inner iterator's current element has children.", 
        "name": "RecursiveFilterIterator::hasChildren", 
        "overview": "public void RecursiveFilterIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivefilteriterator.haschildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveIterator (interface": {
        "description": "", 
        "name": "RecursiveIterator (interface", 
        "overview": "public RecursiveIterator getChildren ( void )", 
        "parameters": [], 
        "path": "php/class.recursiveiterator", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIterator::getChildren": {
        "description": "Returns an iterator for the current iterator entry.", 
        "name": "RecursiveIterator::getChildren", 
        "overview": "public RecursiveIterator RecursiveIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveiterator.getchildren", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIterator::hasChildren": {
        "description": "Returns if an iterator can be created for the current entry. RecursiveIterator::getChildren().", 
        "name": "RecursiveIterator::hasChildren", 
        "overview": "public bool RecursiveIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveiterator.haschildren", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator": {
        "description": "", 
        "name": "RecursiveIteratorIterator", 
        "overview": "public void beginChildren ( void )", 
        "parameters": [], 
        "path": "php/class.recursiveiteratoriterator", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::__construct": {
        "description": "Creates a RecursiveIteratorIterator from a RecursiveIterator.", 
        "name": "RecursiveIteratorIterator::__construct", 
        "overview": "public RecursiveIteratorIterator::__construct ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]] )", 
        "parameters": [
            {
                "descr": "The iterator being constructed from. ", 
                "name": "iterator"
            }, 
            {
                "descr": "Optional mode. Possible values are  RecursiveIteratorIterator::LEAVES_ONLY - The default. ", 
                "name": "mode"
            }, 
            {
                "descr": "Optional flag. Possible values are RecursiveIteratorIterator::CATCH_GET_CHILD which will then ignore exceptions thrown in calls to RecursiveIteratorIterator::getChildren().", 
                "name": "flags"
            }
        ], 
        "path": "php/recursiveiteratoriterator.construct", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::beginChildren": {
        "description": "Is called after calling RecursiveIteratorIterator::getChildren(), and its associated RecursiveIteratorIterator::rewind().", 
        "name": "RecursiveIteratorIterator::beginChildren", 
        "overview": "public void RecursiveIteratorIterator::beginChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.beginchildren", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::beginIteration": {
        "description": "Called when iteration begins (after the first RecursiveIteratorIterator::rewind() call.", 
        "name": "RecursiveIteratorIterator::beginIteration", 
        "overview": "public void RecursiveIteratorIterator::beginIteration ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.beginiteration", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::callGetChildren": {
        "description": "Get children of the current element.", 
        "name": "RecursiveIteratorIterator::callGetChildren", 
        "overview": "public RecursiveIterator RecursiveIteratorIterator::callGetChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.callgetchildren", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::callHasChildren": {
        "description": "Called for each element to test whether it has children.", 
        "name": "RecursiveIteratorIterator::callHasChildren", 
        "overview": "public bool RecursiveIteratorIterator::callHasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.callhaschildren", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::current": {
        "description": "", 
        "name": "RecursiveIteratorIterator::current", 
        "overview": "public mixed RecursiveIteratorIterator::current ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.current", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::endChildren": {
        "description": "Called when end recursing one level.", 
        "name": "RecursiveIteratorIterator::endChildren", 
        "overview": "public void RecursiveIteratorIterator::endChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.endchildren", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::endIteration": {
        "description": "Called when the iteration ends (when RecursiveIteratorIterator::valid() first returns FALSE.", 
        "name": "RecursiveIteratorIterator::endIteration", 
        "overview": "public void RecursiveIteratorIterator::endIteration ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.enditeration", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getDepth": {
        "description": "", 
        "name": "RecursiveIteratorIterator::getDepth", 
        "overview": "public int RecursiveIteratorIterator::getDepth ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.getdepth", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getInnerIterator": {
        "description": "Gets the current active sub iterator.", 
        "name": "RecursiveIteratorIterator::getInnerIterator", 
        "overview": "public iterator RecursiveIteratorIterator::getInnerIterator ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.getinneriterator", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getMaxDepth": {
        "description": "Gets the maximum allowable depth.", 
        "name": "RecursiveIteratorIterator::getMaxDepth", 
        "overview": "public mixed RecursiveIteratorIterator::getMaxDepth ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.getmaxdepth", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::getSubIterator": {
        "description": "", 
        "name": "RecursiveIteratorIterator::getSubIterator", 
        "overview": "public RecursiveIterator RecursiveIteratorIterator::getSubIterator ([ int $level ] )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.getsubiterator", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::key": {
        "description": "", 
        "name": "RecursiveIteratorIterator::key", 
        "overview": "public mixed RecursiveIteratorIterator::key ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.key", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::next": {
        "description": "", 
        "name": "RecursiveIteratorIterator::next", 
        "overview": "public void RecursiveIteratorIterator::next ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.next", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::nextElement": {
        "description": "Called when the next element is available.", 
        "name": "RecursiveIteratorIterator::nextElement", 
        "overview": "public void RecursiveIteratorIterator::nextElement ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.nextelement", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::rewind": {
        "description": "", 
        "name": "RecursiveIteratorIterator::rewind", 
        "overview": "public void RecursiveIteratorIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.rewind", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::setMaxDepth": {
        "description": "Set the maximum allowed depth.", 
        "name": "RecursiveIteratorIterator::setMaxDepth", 
        "overview": "public void RecursiveIteratorIterator::setMaxDepth ([ string $max_depth = -1 ] )", 
        "parameters": [
            {
                "descr": "The maximum allowed depth. -1 is used for any depth.", 
                "name": "max_depth"
            }
        ], 
        "path": "php/recursiveiteratoriterator.setmaxdepth", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveIteratorIterator::valid": {
        "description": "", 
        "name": "RecursiveIteratorIterator::valid", 
        "overview": "public bool RecursiveIteratorIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/recursiveiteratoriterator.valid", 
        "type": "SPL/Interfaces"
    }, 
    "RecursiveRegexIterator": {
        "description": "", 
        "name": "RecursiveRegexIterator", 
        "overview": "public RecursiveRegexIterator getChildren ( void )", 
        "parameters": [], 
        "path": "php/class.recursiveregexiterator", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveRegexIterator::getChildren": {
        "description": "Returns an iterator for the current iterator entry.", 
        "name": "RecursiveRegexIterator::getChildren", 
        "overview": "public RecursiveRegexIterator RecursiveRegexIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveregexiterator.getchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveRegexIterator::hasChildren": {
        "description": "Returns whether an iterator can be obtained for the current entry. This iterator can be obtained via RecursiveRegexIterator::getChildren().", 
        "name": "RecursiveRegexIterator::hasChildren", 
        "overview": "public bool RecursiveRegexIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursiveregexiterator.haschildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator": {
        "description": "", 
        "name": "RecursiveTreeIterator", 
        "overview": "public void beginChildren ( void )", 
        "parameters": [], 
        "path": "php/class.recursivetreeiterator", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::__construct": {
        "description": "Constructs a new RecursiveTreeIterator from the supplied recursive iterator.", 
        "name": "RecursiveTreeIterator::__construct", 
        "overview": "public RecursiveTreeIterator::__construct ( RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]] )", 
        "parameters": [
            {
                "descr": "The RecursiveIterator or IteratorAggregate to iterate over.", 
                "name": "it"
            }, 
            {
                "descr": "Flags may be provided which will affect the behavior of some methods. ", 
                "name": "flags"
            }, 
            {
                "descr": "Flags to affect the behavior of the RecursiveCachingIterator used internally.", 
                "name": "caching_it_flags"
            }, 
            {
                "descr": "Flags to affect the behavior of the RecursiveIteratorIterator used internally.", 
                "name": "mode"
            }
        ], 
        "path": "php/recursivetreeiterator.construct", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::beginChildren": {
        "description": "Called when recursing one level down.", 
        "name": "RecursiveTreeIterator::beginChildren", 
        "overview": "public void RecursiveTreeIterator::beginChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.beginchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::beginIteration": {
        "description": "Called when iteration begins (after the first RecursiveTreeIterator::rewind() call).", 
        "name": "RecursiveTreeIterator::beginIteration", 
        "overview": "public RecursiveIterator RecursiveTreeIterator::beginIteration ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.beginiteration", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::callGetChildren": {
        "description": "Gets children of the current element.", 
        "name": "RecursiveTreeIterator::callGetChildren", 
        "overview": "public RecursiveIterator RecursiveTreeIterator::callGetChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.callgetchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::callHasChildren": {
        "description": "Called for each element to test whether it has children.", 
        "name": "RecursiveTreeIterator::callHasChildren", 
        "overview": "public bool RecursiveTreeIterator::callHasChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.callhaschildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::current": {
        "description": "Gets the current element prefixed and postfixed.", 
        "name": "RecursiveTreeIterator::current", 
        "overview": "public string RecursiveTreeIterator::current ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.current", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::endChildren": {
        "description": "Called when end recursing one level.", 
        "name": "RecursiveTreeIterator::endChildren", 
        "overview": "public void RecursiveTreeIterator::endChildren ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.endchildren", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::endIteration": {
        "description": "Called when the iteration ends (when RecursiveTreeIterator::valid() first returns FALSE)", 
        "name": "RecursiveTreeIterator::endIteration", 
        "overview": "public void RecursiveTreeIterator::endIteration ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.enditeration", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::getEntry": {
        "description": "Gets the part of the tree built for the current element.", 
        "name": "RecursiveTreeIterator::getEntry", 
        "overview": "public string RecursiveTreeIterator::getEntry ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.getentry", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::getPostfix": {
        "description": "Gets the string to place after the current element.", 
        "name": "RecursiveTreeIterator::getPostfix", 
        "overview": "public void RecursiveTreeIterator::getPostfix ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.getpostfix", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::getPrefix": {
        "description": "Gets the string to place in front of current element", 
        "name": "RecursiveTreeIterator::getPrefix", 
        "overview": "public string RecursiveTreeIterator::getPrefix ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.getprefix", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::key": {
        "description": "Gets the current key prefixed and postfixed.", 
        "name": "RecursiveTreeIterator::key", 
        "overview": "public string RecursiveTreeIterator::key ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.key", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::next": {
        "description": "Moves forward to the next element.", 
        "name": "RecursiveTreeIterator::next", 
        "overview": "public void RecursiveTreeIterator::next ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.next", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::nextElement": {
        "description": "Called when the next element is available.", 
        "name": "RecursiveTreeIterator::nextElement", 
        "overview": "public void RecursiveTreeIterator::nextElement ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.nextelement", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::rewind": {
        "description": "Rewinds the iterator to the first element of the top level inner iterator.", 
        "name": "RecursiveTreeIterator::rewind", 
        "overview": "public void RecursiveTreeIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.rewind", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::setPrefixPart": {
        "description": "Sets a part of the prefix used in the graphic tree.", 
        "name": "RecursiveTreeIterator::setPrefixPart", 
        "overview": "public void RecursiveTreeIterator::setPrefixPart ( int $part , string $value )", 
        "parameters": [
            {
                "descr": "One of the RecursiveTreeIterator::PREFIX_* constants.", 
                "name": "part"
            }, 
            {
                "descr": "The value to assign to the part of the prefix specified in part.", 
                "name": "value"
            }
        ], 
        "path": "php/recursivetreeiterator.setprefixpart", 
        "type": "SPL/Iterators"
    }, 
    "RecursiveTreeIterator::valid": {
        "description": "Check whether the current position is valid.", 
        "name": "RecursiveTreeIterator::valid", 
        "overview": "public bool RecursiveTreeIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/recursivetreeiterator.valid", 
        "type": "SPL/Iterators"
    }, 
    "Reflection": {
        "description": "", 
        "name": "Reflection", 
        "overview": "public static string export ( Reflector $reflector [, bool $return = false ] )", 
        "parameters": [], 
        "path": "php/class.reflection", 
        "type": "Reflection"
    }, 
    "Reflection::export": {
        "description": "Exports a reflection.", 
        "name": "Reflection::export", 
        "overview": "public static string Reflection::export ( Reflector $reflector [, bool $return = false ] )", 
        "parameters": [
            {
                "descr": "The reflection to export.", 
                "name": "reflector"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflection.export", 
        "type": "Reflection"
    }, 
    "Reflection::getModifierNames": {
        "description": "Gets modifier names.", 
        "name": "Reflection::getModifierNames", 
        "overview": "public static array Reflection::getModifierNames ( int $modifiers )", 
        "parameters": [
            {
                "descr": "The modifiers to get, which is from a numeric value.", 
                "name": "modifiers"
            }
        ], 
        "path": "php/reflection.getmodifiernames", 
        "type": "Reflection"
    }, 
    "ReflectionClass": {
        "description": "", 
        "name": "ReflectionClass", 
        "overview": "public __construct ( mixed $argument )", 
        "parameters": [], 
        "path": "php/class.reflectionclass", 
        "type": "Reflection"
    }, 
    "ReflectionClass::__construct": {
        "description": "Constructs a new ReflectionClass object.", 
        "name": "ReflectionClass::__construct", 
        "overview": "public ReflectionClass::__construct ( mixed $argument )", 
        "parameters": [
            {
                "descr": "Either a string containing the name of the class to reflect, or an object.", 
                "name": "argument"
            }
        ], 
        "path": "php/reflectionclass.construct", 
        "type": "Reflection"
    }, 
    "ReflectionClass::__toString": {
        "description": "Returns the string representation of the ReflectionClass object.", 
        "name": "ReflectionClass::__toString", 
        "overview": "public string ReflectionClass::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionClass::export": {
        "description": "Exports a reflected class.", 
        "name": "ReflectionClass::export", 
        "overview": "public static string ReflectionClass::export ( mixed $argument [, bool $return = false ] )", 
        "parameters": [
            {
                "descr": "The reflection to export.", 
                "name": "argument"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionclass.export", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getConstant": {
        "description": "Gets the defined constant.", 
        "name": "ReflectionClass::getConstant", 
        "overview": "public mixed ReflectionClass::getConstant ( string $name )", 
        "parameters": [
            {
                "descr": "Name of the constant.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getconstant", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getConstants": {
        "description": "Gets defined constants from a class.", 
        "name": "ReflectionClass::getConstants", 
        "overview": "public array ReflectionClass::getConstants ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getconstants", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getConstructor": {
        "description": "Gets the constructor of the reflected class.", 
        "name": "ReflectionClass::getConstructor", 
        "overview": "public ReflectionMethod ReflectionClass::getConstructor ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getconstructor", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getDefaultProperties": {
        "description": "Gets default properties from a class (including inherited properties).", 
        "name": "ReflectionClass::getDefaultProperties", 
        "overview": "public array ReflectionClass::getDefaultProperties ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getdefaultproperties", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getDocComment": {
        "description": "Gets doc comments from a class.", 
        "name": "ReflectionClass::getDocComment", 
        "overview": "public string ReflectionClass::getDocComment ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getdoccomment", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getEndLine": {
        "description": "Gets end line number from a user-defined class definition.", 
        "name": "ReflectionClass::getEndLine", 
        "overview": "public int ReflectionClass::getEndLine ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getendline", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getExtension": {
        "description": "Gets a ReflectionExtension object for the extension which defined the class.", 
        "name": "ReflectionClass::getExtension", 
        "overview": "public ReflectionExtension ReflectionClass::getExtension ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getextension", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getExtensionName": {
        "description": "Gets the name of the extension which defined the class.", 
        "name": "ReflectionClass::getExtensionName", 
        "overview": "public string ReflectionClass::getExtensionName ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getextensionname", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getFileName": {
        "description": "Gets the filename of the file in which the class has been defined.", 
        "name": "ReflectionClass::getFileName", 
        "overview": "public string ReflectionClass::getFileName ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getfilename", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getInterfaceNames": {
        "description": "Get the interface names.", 
        "name": "ReflectionClass::getInterfaceNames", 
        "overview": "public array ReflectionClass::getInterfaceNames ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getinterfacenames", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getInterfaces": {
        "description": "Gets the interfaces.", 
        "name": "ReflectionClass::getInterfaces", 
        "overview": "public array ReflectionClass::getInterfaces ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getinterfaces", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getMethod": {
        "description": "Gets a ReflectionMethod for a class method.", 
        "name": "ReflectionClass::getMethod", 
        "overview": "public ReflectionMethod ReflectionClass::getMethod ( string $name )", 
        "parameters": [
            {
                "descr": "The method name to reflect.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getmethod", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getMethods": {
        "description": "Gets an array of methods for the class.", 
        "name": "ReflectionClass::getMethods", 
        "overview": "public array ReflectionClass::getMethods ([ int $filter ] )", 
        "parameters": [
            {
                "descr": "Filter the results to include only methods with certain attributes. ", 
                "name": "filter"
            }
        ], 
        "path": "php/reflectionclass.getmethods", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getModifiers": {
        "description": "Returns a bitfield of the access modifiers for this class.", 
        "name": "ReflectionClass::getModifiers", 
        "overview": "public int ReflectionClass::getModifiers ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getmodifiers", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getName": {
        "description": "Gets the class name.", 
        "name": "ReflectionClass::getName", 
        "overview": "public string ReflectionClass::getName ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getname", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getNamespaceName": {
        "description": "Gets the namespace name.", 
        "name": "ReflectionClass::getNamespaceName", 
        "overview": "public string ReflectionClass::getNamespaceName ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getnamespacename", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getParentClass": {
        "description": "", 
        "name": "ReflectionClass::getParentClass", 
        "overview": "public object ReflectionClass::getParentClass ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getparentclass", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getProperties": {
        "description": "Retrieves reflected properties.", 
        "name": "ReflectionClass::getProperties", 
        "overview": "public array ReflectionClass::getProperties ([ int $filter ] )", 
        "parameters": [
            {
                "descr": "The optional filter, for filtering desired property types. ", 
                "name": "filter"
            }
        ], 
        "path": "php/reflectionclass.getproperties", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getProperty": {
        "description": "Gets a ReflectionProperty for a class's property.", 
        "name": "ReflectionClass::getProperty", 
        "overview": "public ReflectionProperty ReflectionClass::getProperty ( string $name )", 
        "parameters": [
            {
                "descr": "The property name.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getproperty", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getShortName": {
        "description": "Gets the short name of the class, the part without the namespace.", 
        "name": "ReflectionClass::getShortName", 
        "overview": "public string ReflectionClass::getShortName ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getshortname", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getStartLine": {
        "description": "Get the starting line number.", 
        "name": "ReflectionClass::getStartLine", 
        "overview": "public int ReflectionClass::getStartLine ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getstartline", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getStaticProperties": {
        "description": "Get the static properties.", 
        "name": "ReflectionClass::getStaticProperties", 
        "overview": "public array ReflectionClass::getStaticProperties ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.getstaticproperties", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getStaticPropertyValue": {
        "description": "Gets the value of a static property on this class.", 
        "name": "ReflectionClass::getStaticPropertyValue", 
        "overview": "public mixed ReflectionClass::getStaticPropertyValue ( string $name [, mixed &$def_value ] )", 
        "parameters": [
            {
                "descr": "The name of the static property for which to return a value.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.getstaticpropertyvalue", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getTraitAliases": {
        "description": "", 
        "name": "ReflectionClass::getTraitAliases", 
        "overview": "public array ReflectionClass::getTraitAliases ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.gettraitaliases", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getTraitNames": {
        "description": "", 
        "name": "ReflectionClass::getTraitNames", 
        "overview": "public array ReflectionClass::getTraitNames ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.gettraitnames", 
        "type": "Reflection"
    }, 
    "ReflectionClass::getTraits": {
        "description": "", 
        "name": "ReflectionClass::getTraits", 
        "overview": "public array ReflectionClass::getTraits ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.gettraits", 
        "type": "Reflection"
    }, 
    "ReflectionClass::hasConstant": {
        "description": "Checks whether the class has a specific constant defined or not.", 
        "name": "ReflectionClass::hasConstant", 
        "overview": "public bool ReflectionClass::hasConstant ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the constant being checked for.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.hasconstant", 
        "type": "Reflection"
    }, 
    "ReflectionClass::hasMethod": {
        "description": "Checks whether a specific method is defined in a class.", 
        "name": "ReflectionClass::hasMethod", 
        "overview": "public bool ReflectionClass::hasMethod ( string $name )", 
        "parameters": [
            {
                "descr": "Name of the method being checked for.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.hasmethod", 
        "type": "Reflection"
    }, 
    "ReflectionClass::hasProperty": {
        "description": "Checks whether the specified property is defined.", 
        "name": "ReflectionClass::hasProperty", 
        "overview": "public bool ReflectionClass::hasProperty ( string $name )", 
        "parameters": [
            {
                "descr": "Name of the property being checked for.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionclass.hasproperty", 
        "type": "Reflection"
    }, 
    "ReflectionClass::implementsInterface": {
        "description": "Checks whether it implements an interface.", 
        "name": "ReflectionClass::implementsInterface", 
        "overview": "public bool ReflectionClass::implementsInterface ( string $interface )", 
        "parameters": [
            {
                "descr": "The interface name.", 
                "name": "interface"
            }
        ], 
        "path": "php/reflectionclass.implementsinterface", 
        "type": "Reflection"
    }, 
    "ReflectionClass::inNamespace": {
        "description": "Checks if this class is defined in a namespace.", 
        "name": "ReflectionClass::inNamespace", 
        "overview": "public bool ReflectionClass::inNamespace ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.innamespace", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isAbstract": {
        "description": "Checks if the class is abstract.", 
        "name": "ReflectionClass::isAbstract", 
        "overview": "public bool ReflectionClass::isAbstract ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.isabstract", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isCloneable": {
        "description": "Returns whether this class is cloneable.", 
        "name": "ReflectionClass::isCloneable", 
        "overview": "public bool ReflectionClass::isCloneable ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.iscloneable", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isFinal": {
        "description": "Checks if a class is final.", 
        "name": "ReflectionClass::isFinal", 
        "overview": "public bool ReflectionClass::isFinal ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.isfinal", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInstance": {
        "description": "Checks if an object is an instance of a class.", 
        "name": "ReflectionClass::isInstance", 
        "overview": "public bool ReflectionClass::isInstance ( object $object )", 
        "parameters": [
            {
                "descr": "The object being compared to.", 
                "name": "object"
            }
        ], 
        "path": "php/reflectionclass.isinstance", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInstantiable": {
        "description": "Checks if the class is instantiable.", 
        "name": "ReflectionClass::isInstantiable", 
        "overview": "public bool ReflectionClass::isInstantiable ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.isinstantiable", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInterface": {
        "description": "Checks whether the class is an interface.", 
        "name": "ReflectionClass::isInterface", 
        "overview": "public bool ReflectionClass::isInterface ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.isinterface", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isInternal": {
        "description": "Checks if the class is defined internally by an extension, or the core, as opposed to user-defined.", 
        "name": "ReflectionClass::isInternal", 
        "overview": "public bool ReflectionClass::isInternal ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.isinternal", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isIterateable": {
        "description": "Checks whether the class is iterateable.", 
        "name": "ReflectionClass::isIterateable", 
        "overview": "public bool ReflectionClass::isIterateable ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.isiterateable", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isSubclassOf": {
        "description": "Checks if the class is a subclass of a specified class or implements a specified interface.", 
        "name": "ReflectionClass::isSubclassOf", 
        "overview": "public bool ReflectionClass::isSubclassOf ( string $class )", 
        "parameters": [
            {
                "descr": "The class name being checked against.", 
                "name": "class"
            }
        ], 
        "path": "php/reflectionclass.issubclassof", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isTrait": {
        "description": "", 
        "name": "ReflectionClass::isTrait", 
        "overview": "public bool ReflectionClass::isTrait ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.istrait", 
        "type": "Reflection"
    }, 
    "ReflectionClass::isUserDefined": {
        "description": "Checks whether the class is user-defined, as opposed to internal.", 
        "name": "ReflectionClass::isUserDefined", 
        "overview": "public bool ReflectionClass::isUserDefined ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.isuserdefined", 
        "type": "Reflection"
    }, 
    "ReflectionClass::newInstance": {
        "description": "Creates a new instance of the class. The given arguments are passed to the class constructor.", 
        "name": "ReflectionClass::newInstance", 
        "overview": "public object ReflectionClass::newInstance ( mixed $args [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "Accepts a variable number of arguments which are passed to the class constructor, much like call_user_func().", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionclass.newinstance", 
        "type": "Reflection"
    }, 
    "ReflectionClass::newInstanceArgs": {
        "description": "Creates a new instance of the class, the given arguments are passed to the class constructor.", 
        "name": "ReflectionClass::newInstanceArgs", 
        "overview": "public object ReflectionClass::newInstanceArgs ([ array $args ] )", 
        "parameters": [
            {
                "descr": "The parameters to be passed to the class constructor as an array.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionclass.newinstanceargs", 
        "type": "Reflection"
    }, 
    "ReflectionClass::newInstanceWithoutConstructor": {
        "description": "Creates a new instance of the class without invoking the constructor.", 
        "name": "ReflectionClass::newInstanceWithoutConstructor", 
        "overview": "public object ReflectionClass::newInstanceWithoutConstructor ( void )", 
        "parameters": [], 
        "path": "php/reflectionclass.newinstancewithoutconstructor", 
        "type": "Reflection"
    }, 
    "ReflectionClass::setStaticPropertyValue": {
        "description": "Sets static property value.", 
        "name": "ReflectionClass::setStaticPropertyValue", 
        "overview": "public void ReflectionClass::setStaticPropertyValue ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "Property name.", 
                "name": "name"
            }, 
            {
                "descr": "New property value.", 
                "name": "value"
            }
        ], 
        "path": "php/reflectionclass.setstaticpropertyvalue", 
        "type": "Reflection"
    }, 
    "ReflectionException": {
        "description": "", 
        "name": "ReflectionException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.reflectionexception", 
        "type": "Reflection"
    }, 
    "ReflectionExtension": {
        "description": "", 
        "name": "ReflectionExtension", 
        "overview": "final private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.reflectionextension", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::__clone": {
        "description": "The clone method prevents an object from being cloned. Reflection objects cannot be cloned.", 
        "name": "ReflectionExtension::__clone", 
        "overview": "final private void ReflectionExtension::__clone ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.clone", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::__construct": {
        "description": "Construct a ReflectionExtension object.", 
        "name": "ReflectionExtension::__construct", 
        "overview": "public ReflectionExtension::__construct ( string $name )", 
        "parameters": [
            {
                "descr": "Name of the extension.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionextension.construct", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::__toString": {
        "description": "Exports a reflected extension and returns it as a string. This is the same as the ReflectionExtension::export() with the return set to TRUE.", 
        "name": "ReflectionExtension::__toString", 
        "overview": "public string ReflectionExtension::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::export": {
        "description": "Exports a reflected extension. The output format of this function is the same as the CLI argument --re [extension].", 
        "name": "ReflectionExtension::export", 
        "overview": "public static string ReflectionExtension::export ( string $name [, string $return = false ] )", 
        "parameters": [
            {
                "descr": "The reflection to export.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionextension.export", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getClassNames": {
        "description": "Gets a listing of class names as defined in the extension.", 
        "name": "ReflectionExtension::getClassNames", 
        "overview": "public array ReflectionExtension::getClassNames ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getclassnames", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getClasses": {
        "description": "Gets a list of classes from an extension.", 
        "name": "ReflectionExtension::getClasses", 
        "overview": "public array ReflectionExtension::getClasses ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getclasses", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getConstants": {
        "description": "Get defined constants from an extension.", 
        "name": "ReflectionExtension::getConstants", 
        "overview": "public array ReflectionExtension::getConstants ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getconstants", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getDependencies": {
        "description": "Gets dependencies, by listing both required and conflicting dependencies.", 
        "name": "ReflectionExtension::getDependencies", 
        "overview": "public array ReflectionExtension::getDependencies ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getdependencies", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getFunctions": {
        "description": "Get defined functions from an extension.", 
        "name": "ReflectionExtension::getFunctions", 
        "overview": "public array ReflectionExtension::getFunctions ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getfunctions", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getINIEntries": {
        "description": "Get the ini entries for an extension.", 
        "name": "ReflectionExtension::getINIEntries", 
        "overview": "public array ReflectionExtension::getINIEntries ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getinientries", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getName": {
        "description": "Gets the extensions name.", 
        "name": "ReflectionExtension::getName", 
        "overview": "public string ReflectionExtension::getName ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getname", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::getVersion": {
        "description": "Gets the version of the extension.", 
        "name": "ReflectionExtension::getVersion", 
        "overview": "public string ReflectionExtension::getVersion ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.getversion", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::info": {
        "description": "Prints out the \"phpinfo()\" snippet for the given extension.", 
        "name": "ReflectionExtension::info", 
        "overview": "public void ReflectionExtension::info ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.info", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::isPersistent": {
        "description": "", 
        "name": "ReflectionExtension::isPersistent", 
        "overview": "public void ReflectionExtension::isPersistent ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.ispersistent", 
        "type": "Reflection"
    }, 
    "ReflectionExtension::isTemporary": {
        "description": "", 
        "name": "ReflectionExtension::isTemporary", 
        "overview": "public void ReflectionExtension::isTemporary ( void )", 
        "parameters": [], 
        "path": "php/reflectionextension.istemporary", 
        "type": "Reflection"
    }, 
    "ReflectionFunction": {
        "description": "", 
        "name": "ReflectionFunction", 
        "overview": "public __construct ( mixed $name )", 
        "parameters": [], 
        "path": "php/class.reflectionfunction", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::__construct": {
        "description": "Constructs a ReflectionFunction object.", 
        "name": "ReflectionFunction::__construct", 
        "overview": "public ReflectionFunction::__construct ( mixed $name )", 
        "parameters": [
            {
                "descr": "The name of the function to reflect or a closure.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionfunction.construct", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::__toString": {
        "description": "To string.", 
        "name": "ReflectionFunction::__toString", 
        "overview": "public string ReflectionFunction::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunction.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::export": {
        "description": "Exports a Reflected function.", 
        "name": "ReflectionFunction::export", 
        "overview": "public static string ReflectionFunction::export ( string $name [, string $return ] )", 
        "parameters": [
            {
                "descr": "The reflection to export.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionfunction.export", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::getClosure": {
        "description": "", 
        "name": "ReflectionFunction::getClosure", 
        "overview": "public Closure ReflectionFunction::getClosure ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunction.getclosure", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::invoke": {
        "description": "Invokes a reflected function.", 
        "name": "ReflectionFunction::invoke", 
        "overview": "public mixed ReflectionFunction::invoke ([ mixed $parameter [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The passed in argument list. It accepts a variable number of arguments which are passed to the function much like call_user_func() is.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionfunction.invoke", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::invokeArgs": {
        "description": "Invokes the function and pass its arguments as array.", 
        "name": "ReflectionFunction::invokeArgs", 
        "overview": "public mixed ReflectionFunction::invokeArgs ( array $args )", 
        "parameters": [
            {
                "descr": "The passed arguments to the function as an array, much like call_user_func_array() works.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionfunction.invokeargs", 
        "type": "Reflection"
    }, 
    "ReflectionFunction::isDisabled": {
        "description": "Checks if the function is disabled, via the disable_functions directive.", 
        "name": "ReflectionFunction::isDisabled", 
        "overview": "public bool ReflectionFunction::isDisabled ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunction.isdisabled", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract": {
        "description": "", 
        "name": "ReflectionFunctionAbstract", 
        "overview": "final private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.reflectionfunctionabstract", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::__clone": {
        "description": "Clones a function.", 
        "name": "ReflectionFunctionAbstract::__clone", 
        "overview": "final private void ReflectionFunctionAbstract::__clone ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.clone", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::__toString": {
        "description": "To string.", 
        "name": "ReflectionFunctionAbstract::__toString", 
        "overview": "abstract public void ReflectionFunctionAbstract::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getClosureScopeClass": {
        "description": "", 
        "name": "ReflectionFunctionAbstract::getClosureScopeClass", 
        "overview": "public ReflectionClass ReflectionFunctionAbstract::getClosureScopeClass ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getclosurescopeclass", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getClosureThis": {
        "description": "", 
        "name": "ReflectionFunctionAbstract::getClosureThis", 
        "overview": "public object ReflectionFunctionAbstract::getClosureThis ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getclosurethis", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getDocComment": {
        "description": "Get a Doc comment from a function.", 
        "name": "ReflectionFunctionAbstract::getDocComment", 
        "overview": "public string ReflectionFunctionAbstract::getDocComment ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getdoccomment", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getEndLine": {
        "description": "Get the ending line number.", 
        "name": "ReflectionFunctionAbstract::getEndLine", 
        "overview": "public int ReflectionFunctionAbstract::getEndLine ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getendline", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getExtension": {
        "description": "Get the extension information of a function.", 
        "name": "ReflectionFunctionAbstract::getExtension", 
        "overview": "public ReflectionExtension ReflectionFunctionAbstract::getExtension ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getextension", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getExtensionName": {
        "description": "Get the extensions name.", 
        "name": "ReflectionFunctionAbstract::getExtensionName", 
        "overview": "public string ReflectionFunctionAbstract::getExtensionName ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getextensionname", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getFileName": {
        "description": "Gets the file name from a user-defined function.", 
        "name": "ReflectionFunctionAbstract::getFileName", 
        "overview": "public string ReflectionFunctionAbstract::getFileName ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getfilename", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getName": {
        "description": "Get the name of the function.", 
        "name": "ReflectionFunctionAbstract::getName", 
        "overview": "public string ReflectionFunctionAbstract::getName ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getname", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getNamespaceName": {
        "description": "Get the namespace name where the class is defined.", 
        "name": "ReflectionFunctionAbstract::getNamespaceName", 
        "overview": "public string ReflectionFunctionAbstract::getNamespaceName ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getnamespacename", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getNumberOfParameters": {
        "description": "Get the number of parameters that a function defines, both optional and required.", 
        "name": "ReflectionFunctionAbstract::getNumberOfParameters", 
        "overview": "public int ReflectionFunctionAbstract::getNumberOfParameters ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getnumberofparameters", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getNumberOfRequiredParameters": {
        "description": "Get the number of required parameters that a function defines.", 
        "name": "ReflectionFunctionAbstract::getNumberOfRequiredParameters", 
        "overview": "public int ReflectionFunctionAbstract::getNumberOfRequiredParameters ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getnumberofrequiredparameters", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getParameters": {
        "description": "Get the parameters as an array of ReflectionParameter.", 
        "name": "ReflectionFunctionAbstract::getParameters", 
        "overview": "public array ReflectionFunctionAbstract::getParameters ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getparameters", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getShortName": {
        "description": "Get the short name of the function (without the namespace part).", 
        "name": "ReflectionFunctionAbstract::getShortName", 
        "overview": "public string ReflectionFunctionAbstract::getShortName ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getshortname", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getStartLine": {
        "description": "Gets the starting line number of the function.", 
        "name": "ReflectionFunctionAbstract::getStartLine", 
        "overview": "public int ReflectionFunctionAbstract::getStartLine ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getstartline", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::getStaticVariables": {
        "description": "Get the static variables.", 
        "name": "ReflectionFunctionAbstract::getStaticVariables", 
        "overview": "public array ReflectionFunctionAbstract::getStaticVariables ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.getstaticvariables", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::inNamespace": {
        "description": "Checks whether a function is defined in a namespace.", 
        "name": "ReflectionFunctionAbstract::inNamespace", 
        "overview": "public bool ReflectionFunctionAbstract::inNamespace ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.innamespace", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isClosure": {
        "description": "Checks whether it's a closure.", 
        "name": "ReflectionFunctionAbstract::isClosure", 
        "overview": "public bool ReflectionFunctionAbstract::isClosure ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.isclosure", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isDeprecated": {
        "description": "Checks whether the function is deprecated.", 
        "name": "ReflectionFunctionAbstract::isDeprecated", 
        "overview": "public bool ReflectionFunctionAbstract::isDeprecated ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.isdeprecated", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isGenerator": {
        "description": "", 
        "name": "ReflectionFunctionAbstract::isGenerator", 
        "overview": "public bool ReflectionFunctionAbstract::isGenerator ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.isgenerator", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isInternal": {
        "description": "Checks whether the function is internal, as opposed to user-defined.", 
        "name": "ReflectionFunctionAbstract::isInternal", 
        "overview": "public bool ReflectionFunctionAbstract::isInternal ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.isinternal", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::isUserDefined": {
        "description": "Checks whether the function is user-defined, as opposed to internal.", 
        "name": "ReflectionFunctionAbstract::isUserDefined", 
        "overview": "public bool ReflectionFunctionAbstract::isUserDefined ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.isuserdefined", 
        "type": "Reflection"
    }, 
    "ReflectionFunctionAbstract::returnsReference": {
        "description": "Checks whether the function returns a reference.", 
        "name": "ReflectionFunctionAbstract::returnsReference", 
        "overview": "public bool ReflectionFunctionAbstract::returnsReference ( void )", 
        "parameters": [], 
        "path": "php/reflectionfunctionabstract.returnsreference", 
        "type": "Reflection"
    }, 
    "ReflectionMethod": {
        "description": "", 
        "name": "ReflectionMethod", 
        "overview": "public __construct ( mixed $class , string $name )", 
        "parameters": [], 
        "path": "php/class.reflectionmethod", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::__construct": {
        "description": "Constructs a new ReflectionMethod.", 
        "name": "ReflectionMethod::__construct", 
        "overview": "public ReflectionMethod::__construct ( mixed $class , string $name )", 
        "parameters": [
            {
                "descr": "Classname or object (instance of the class) that contains the method.", 
                "name": "class"
            }, 
            {
                "descr": "Name of the method.", 
                "name": "name"
            }, 
            {
                "descr": "Class name and method name delimited by ::.", 
                "name": "class_method"
            }
        ], 
        "path": "php/reflectionmethod.construct", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::__toString": {
        "description": "Returns the string representation of the Reflection method object.", 
        "name": "ReflectionMethod::__toString", 
        "overview": "public string ReflectionMethod::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::export": {
        "description": "Exports a ReflectionMethod.", 
        "name": "ReflectionMethod::export", 
        "overview": "public static string ReflectionMethod::export ( string $class , string $name [, bool $return = false ] )", 
        "parameters": [
            {
                "descr": "The class name.", 
                "name": "class"
            }, 
            {
                "descr": "The name of the method.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionmethod.export", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getClosure": {
        "description": "", 
        "name": "ReflectionMethod::getClosure", 
        "overview": "public Closure ReflectionMethod::getClosure ( object $object )", 
        "parameters": [
            {
                "descr": "Forbidden for static methods, required for other methods.", 
                "name": "object"
            }
        ], 
        "path": "php/reflectionmethod.getclosure", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getDeclaringClass": {
        "description": "Gets the declaring class for the reflected method.", 
        "name": "ReflectionMethod::getDeclaringClass", 
        "overview": "public ReflectionClass ReflectionMethod::getDeclaringClass ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.getdeclaringclass", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getModifiers": {
        "description": "Returns a bitfield of the access modifiers for this method.", 
        "name": "ReflectionMethod::getModifiers", 
        "overview": "public int ReflectionMethod::getModifiers ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.getmodifiers", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::getPrototype": {
        "description": "Returns the methods prototype.", 
        "name": "ReflectionMethod::getPrototype", 
        "overview": "public ReflectionMethod ReflectionMethod::getPrototype ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.getprototype", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::invoke": {
        "description": "Invokes a reflected method.", 
        "name": "ReflectionMethod::invoke", 
        "overview": "public mixed ReflectionMethod::invoke ( object $object [, mixed $parameter [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The object to invoke the method on. ", 
                "name": "object"
            }, 
            {
                "descr": "Zero or more parameters to be passed to the method. ", 
                "name": "parameter"
            }
        ], 
        "path": "php/reflectionmethod.invoke", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::invokeArgs": {
        "description": "Invokes the reflected method and pass its arguments as array.", 
        "name": "ReflectionMethod::invokeArgs", 
        "overview": "public mixed ReflectionMethod::invokeArgs ( object $object , array $args )", 
        "parameters": [
            {
                "descr": "The object to invoke the method on. ", 
                "name": "object"
            }, 
            {
                "descr": "The parameters to be passed to the function, as an array.", 
                "name": "args"
            }
        ], 
        "path": "php/reflectionmethod.invokeargs", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isAbstract": {
        "description": "Checks if the method is abstract.", 
        "name": "ReflectionMethod::isAbstract", 
        "overview": "public bool ReflectionMethod::isAbstract ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.isabstract", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isConstructor": {
        "description": "Checks if the method is a constructor.", 
        "name": "ReflectionMethod::isConstructor", 
        "overview": "public bool ReflectionMethod::isConstructor ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.isconstructor", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isDestructor": {
        "description": "Checks if the method is a destructor.", 
        "name": "ReflectionMethod::isDestructor", 
        "overview": "public bool ReflectionMethod::isDestructor ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.isdestructor", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isFinal": {
        "description": "Checks if the method is final.", 
        "name": "ReflectionMethod::isFinal", 
        "overview": "public bool ReflectionMethod::isFinal ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.isfinal", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isPrivate": {
        "description": "Checks if the method is private.", 
        "name": "ReflectionMethod::isPrivate", 
        "overview": "public bool ReflectionMethod::isPrivate ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.isprivate", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isProtected": {
        "description": "Checks if the method is protected.", 
        "name": "ReflectionMethod::isProtected", 
        "overview": "public bool ReflectionMethod::isProtected ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.isprotected", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isPublic": {
        "description": "Checks if the method is public.", 
        "name": "ReflectionMethod::isPublic", 
        "overview": "public bool ReflectionMethod::isPublic ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.ispublic", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::isStatic": {
        "description": "Checks if the method is static.", 
        "name": "ReflectionMethod::isStatic", 
        "overview": "public bool ReflectionMethod::isStatic ( void )", 
        "parameters": [], 
        "path": "php/reflectionmethod.isstatic", 
        "type": "Reflection"
    }, 
    "ReflectionMethod::setAccessible": {
        "description": "Sets a method to be accessible. For example, it may allow protected and private methods to be invoked.", 
        "name": "ReflectionMethod::setAccessible", 
        "overview": "public void ReflectionMethod::setAccessible ( bool $accessible )", 
        "parameters": [
            {
                "descr": "TRUE to allow accessibility, or FALSE.", 
                "name": "accessible"
            }
        ], 
        "path": "php/reflectionmethod.setaccessible", 
        "type": "Reflection"
    }, 
    "ReflectionObject": {
        "description": "", 
        "name": "ReflectionObject", 
        "overview": "public __construct ( object $argument )", 
        "parameters": [], 
        "path": "php/class.reflectionobject", 
        "type": "Reflection"
    }, 
    "ReflectionObject::__construct": {
        "description": "Constructs a ReflectionObject.", 
        "name": "ReflectionObject::__construct", 
        "overview": "public ReflectionObject::__construct ( object $argument )", 
        "parameters": [
            {
                "descr": "An object instance.", 
                "name": "argument"
            }
        ], 
        "path": "php/reflectionobject.construct", 
        "type": "Reflection"
    }, 
    "ReflectionObject::export": {
        "description": "Exports a reflection.", 
        "name": "ReflectionObject::export", 
        "overview": "public static string ReflectionObject::export ( string $argument [, bool $return ] )", 
        "parameters": [
            {
                "descr": "The reflection to export.", 
                "name": "argument"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionobject.export", 
        "type": "Reflection"
    }, 
    "ReflectionParameter": {
        "description": "", 
        "name": "ReflectionParameter", 
        "overview": "public bool allowsNull ( void )", 
        "parameters": [], 
        "path": "php/class.reflectionparameter", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::__clone": {
        "description": "Clones.", 
        "name": "ReflectionParameter::__clone", 
        "overview": "final private void ReflectionParameter::__clone ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.clone", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::__construct": {
        "description": "Constructs a ReflectionParameter class.", 
        "name": "ReflectionParameter::__construct", 
        "overview": "public ReflectionParameter::__construct ( string $function , string $parameter )", 
        "parameters": [
            {
                "descr": "The function to reflect parameters from.", 
                "name": "function"
            }, 
            {
                "descr": "The parameter.", 
                "name": "parameter"
            }
        ], 
        "path": "php/reflectionparameter.construct", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::__toString": {
        "description": "To string.", 
        "name": "ReflectionParameter::__toString", 
        "overview": "public string ReflectionParameter::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::allowsNull": {
        "description": "Checks whether the parameter allows NULL.", 
        "name": "ReflectionParameter::allowsNull", 
        "overview": "public bool ReflectionParameter::allowsNull ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.allowsnull", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::canBePassedByValue": {
        "description": "", 
        "name": "ReflectionParameter::canBePassedByValue", 
        "overview": "public bool ReflectionParameter::canBePassedByValue ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.canbepassedbyvalue", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::export": {
        "description": "Exports.", 
        "name": "ReflectionParameter::export", 
        "overview": "public static string ReflectionParameter::export ( string $function , string $parameter [, bool $return ] )", 
        "parameters": [
            {
                "descr": "The function name.", 
                "name": "function"
            }, 
            {
                "descr": "The parameter name.", 
                "name": "parameter"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionparameter.export", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getClass": {
        "description": "Gets the class type hinted for the parameter as a ReflectionClass object.", 
        "name": "ReflectionParameter::getClass", 
        "overview": "public ReflectionClass ReflectionParameter::getClass ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.getclass", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDeclaringClass": {
        "description": "Gets the declaring class.", 
        "name": "ReflectionParameter::getDeclaringClass", 
        "overview": "public ReflectionClass ReflectionParameter::getDeclaringClass ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.getdeclaringclass", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDeclaringFunction": {
        "description": "Gets the declaring function.", 
        "name": "ReflectionParameter::getDeclaringFunction", 
        "overview": "public ReflectionFunctionAbstract ReflectionParameter::getDeclaringFunction ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.getdeclaringfunction", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDefaultValue": {
        "description": "Gets the default value of the parameter for a user-defined function or method. If the parameter is not optional a ReflectionException will be thrown.", 
        "name": "ReflectionParameter::getDefaultValue", 
        "overview": "public mixed ReflectionParameter::getDefaultValue ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.getdefaultvalue", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getDefaultValueConstantName": {
        "description": "", 
        "name": "ReflectionParameter::getDefaultValueConstantName", 
        "overview": "public string ReflectionParameter::getDefaultValueConstantName ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.getdefaultvalueconstantname", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getName": {
        "description": "Gets the name of the parameter.", 
        "name": "ReflectionParameter::getName", 
        "overview": "public string ReflectionParameter::getName ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.getname", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::getPosition": {
        "description": "Gets the position of the parameter.", 
        "name": "ReflectionParameter::getPosition", 
        "overview": "public int ReflectionParameter::getPosition ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.getposition", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isArray": {
        "description": "Checks if the parameter expects an array.", 
        "name": "ReflectionParameter::isArray", 
        "overview": "public bool ReflectionParameter::isArray ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.isarray", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isCallable": {
        "description": "", 
        "name": "ReflectionParameter::isCallable", 
        "overview": "public bool ReflectionParameter::isCallable ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.iscallable", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isDefaultValueAvailable": {
        "description": "Checks if a default value for the parameter is available.", 
        "name": "ReflectionParameter::isDefaultValueAvailable", 
        "overview": "public bool ReflectionParameter::isDefaultValueAvailable ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.isdefaultvalueavailable", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isDefaultValueConstant": {
        "description": "", 
        "name": "ReflectionParameter::isDefaultValueConstant", 
        "overview": "public bool ReflectionParameter::isDefaultValueConstant ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.isdefaultvalueconstant", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isOptional": {
        "description": "Checks if the parameter is optional.", 
        "name": "ReflectionParameter::isOptional", 
        "overview": "public bool ReflectionParameter::isOptional ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.isoptional", 
        "type": "Reflection"
    }, 
    "ReflectionParameter::isPassedByReference": {
        "description": "Checks if the parameter is passed in by reference.", 
        "name": "ReflectionParameter::isPassedByReference", 
        "overview": "public bool ReflectionParameter::isPassedByReference ( void )", 
        "parameters": [], 
        "path": "php/reflectionparameter.ispassedbyreference", 
        "type": "Reflection"
    }, 
    "ReflectionProperty": {
        "description": "", 
        "name": "ReflectionProperty", 
        "overview": "final private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.reflectionproperty", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::__clone": {
        "description": "Clones.", 
        "name": "ReflectionProperty::__clone", 
        "overview": "final private void ReflectionProperty::__clone ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.clone", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::__construct": {
        "description": "", 
        "name": "ReflectionProperty::__construct", 
        "overview": "public ReflectionProperty::__construct ( mixed $class , string $name )", 
        "parameters": [
            {
                "descr": "The class name, that contains the property.", 
                "name": "class"
            }, 
            {
                "descr": "The name of the property being reflected.", 
                "name": "name"
            }
        ], 
        "path": "php/reflectionproperty.construct", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::__toString": {
        "description": "To string.", 
        "name": "ReflectionProperty::__toString", 
        "overview": "public string ReflectionProperty::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::export": {
        "description": "Exports a reflection.", 
        "name": "ReflectionProperty::export", 
        "overview": "public static string ReflectionProperty::export ( mixed $class , string $name [, bool $return ] )", 
        "parameters": [
            {
                "descr": "The reflection to export.", 
                "name": "argument"
            }, 
            {
                "descr": "The property name.", 
                "name": "name"
            }, 
            {
                "descr": "Setting to TRUE will return the export, as opposed to emitting it. ", 
                "name": "return"
            }
        ], 
        "path": "php/reflectionproperty.export", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getDeclaringClass": {
        "description": "Gets the declaring class.", 
        "name": "ReflectionProperty::getDeclaringClass", 
        "overview": "public ReflectionClass ReflectionProperty::getDeclaringClass ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.getdeclaringclass", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getDocComment": {
        "description": "Gets the doc comment.", 
        "name": "ReflectionProperty::getDocComment", 
        "overview": "public string ReflectionProperty::getDocComment ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.getdoccomment", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getModifiers": {
        "description": "Gets the modifiers.", 
        "name": "ReflectionProperty::getModifiers", 
        "overview": "public int ReflectionProperty::getModifiers ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.getmodifiers", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getName": {
        "description": "Gets the properties name.", 
        "name": "ReflectionProperty::getName", 
        "overview": "public string ReflectionProperty::getName ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.getname", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::getValue": {
        "description": "Gets the properties value.", 
        "name": "ReflectionProperty::getValue", 
        "overview": "public mixed ReflectionProperty::getValue ([ object $object ] )", 
        "parameters": [
            {
                "descr": "If the property is non-static an object must be provided to fetch the property from. ", 
                "name": "object"
            }
        ], 
        "path": "php/reflectionproperty.getvalue", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isDefault": {
        "description": "Checks whether the property is the default.", 
        "name": "ReflectionProperty::isDefault", 
        "overview": "public bool ReflectionProperty::isDefault ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.isdefault", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isPrivate": {
        "description": "Checks whether the property is private.", 
        "name": "ReflectionProperty::isPrivate", 
        "overview": "public bool ReflectionProperty::isPrivate ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.isprivate", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isProtected": {
        "description": "Checks whether the property is protected.", 
        "name": "ReflectionProperty::isProtected", 
        "overview": "public bool ReflectionProperty::isProtected ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.isprotected", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isPublic": {
        "description": "Checks whether the property is public.", 
        "name": "ReflectionProperty::isPublic", 
        "overview": "public bool ReflectionProperty::isPublic ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.ispublic", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::isStatic": {
        "description": "Checks whether the property is static.", 
        "name": "ReflectionProperty::isStatic", 
        "overview": "public bool ReflectionProperty::isStatic ( void )", 
        "parameters": [], 
        "path": "php/reflectionproperty.isstatic", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::setAccessible": {
        "description": "Sets a property to be accessible. For example, it may allow protected and private properties to be accessed.", 
        "name": "ReflectionProperty::setAccessible", 
        "overview": "public void ReflectionProperty::setAccessible ( bool $accessible )", 
        "parameters": [
            {
                "descr": "TRUE to allow accessibility, or FALSE.", 
                "name": "accessible"
            }
        ], 
        "path": "php/reflectionproperty.setaccessible", 
        "type": "Reflection"
    }, 
    "ReflectionProperty::setValue": {
        "description": "Sets (changes) the property's value.", 
        "name": "ReflectionProperty::setValue", 
        "overview": "public void ReflectionProperty::setValue ( object $object , mixed $value )", 
        "parameters": [
            {
                "descr": "If the property is non-static an object must be provided to change the property on. ", 
                "name": "object"
            }, 
            {
                "descr": "The new value.", 
                "name": "value"
            }
        ], 
        "path": "php/reflectionproperty.setvalue", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension": {
        "description": "", 
        "name": "ReflectionZendExtension", 
        "overview": "final private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.reflectionzendextension", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::__clone": {
        "description": "", 
        "name": "ReflectionZendExtension::__clone", 
        "overview": "final private void ReflectionZendExtension::__clone ( void )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.clone", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::__construct": {
        "description": "", 
        "name": "ReflectionZendExtension::__construct", 
        "overview": "public ReflectionZendExtension::__construct ( string $name )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.construct", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::__toString": {
        "description": "", 
        "name": "ReflectionZendExtension::__toString", 
        "overview": "public string ReflectionZendExtension::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.tostring", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::export": {
        "description": "", 
        "name": "ReflectionZendExtension::export", 
        "overview": "public static string ReflectionZendExtension::export ( string $name [, string $return ] )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.export", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getAuthor": {
        "description": "", 
        "name": "ReflectionZendExtension::getAuthor", 
        "overview": "public string ReflectionZendExtension::getAuthor ( void )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.getauthor", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getCopyright": {
        "description": "", 
        "name": "ReflectionZendExtension::getCopyright", 
        "overview": "public string ReflectionZendExtension::getCopyright ( void )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.getcopyright", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getName": {
        "description": "", 
        "name": "ReflectionZendExtension::getName", 
        "overview": "public string ReflectionZendExtension::getName ( void )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.getname", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getURL": {
        "description": "", 
        "name": "ReflectionZendExtension::getURL", 
        "overview": "public string ReflectionZendExtension::getURL ( void )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.geturl", 
        "type": "Reflection"
    }, 
    "ReflectionZendExtension::getVersion": {
        "description": "", 
        "name": "ReflectionZendExtension::getVersion", 
        "overview": "public string ReflectionZendExtension::getVersion ( void )", 
        "parameters": [], 
        "path": "php/reflectionzendextension.getversion", 
        "type": "Reflection"
    }, 
    "Reflector (interface": {
        "description": "", 
        "name": "Reflector (interface", 
        "overview": "abstract public static string export ( void )", 
        "parameters": [], 
        "path": "php/class.reflector", 
        "type": "Reflection"
    }, 
    "Reflector::__toString": {
        "description": "To string.", 
        "name": "Reflector::__toString", 
        "overview": "abstract public string Reflector::__toString ( void )", 
        "parameters": [], 
        "path": "php/reflector.tostring", 
        "type": "Reflection"
    }, 
    "Reflector::export": {
        "description": "Exports.", 
        "name": "Reflector::export", 
        "overview": "abstract public static string Reflector::export ( void )", 
        "parameters": [], 
        "path": "php/reflector.export", 
        "type": "Reflection"
    }, 
    "RegexIterator": {
        "description": "", 
        "name": "RegexIterator", 
        "overview": "public bool accept ( void )", 
        "parameters": [], 
        "path": "php/class.regexiterator", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::accept": {
        "description": "Matches (string) RegexIterator::current() (or RegexIterator::key() if the RegexIterator::USE_KEY flag is set) against the regular expression.", 
        "name": "RegexIterator::accept", 
        "overview": "public bool RegexIterator::accept ( void )", 
        "parameters": [], 
        "path": "php/regexiterator.accept", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getFlags": {
        "description": "Returns the flags, see RegexIterator::setFlags() for a list of available flags.", 
        "name": "RegexIterator::getFlags", 
        "overview": "public int RegexIterator::getFlags ( void )", 
        "parameters": [], 
        "path": "php/regexiterator.getflags", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getMode": {
        "description": "Returns the operation mode, see RegexIterator::setMode() for the list of operation modes.", 
        "name": "RegexIterator::getMode", 
        "overview": "public int RegexIterator::getMode ( void )", 
        "parameters": [], 
        "path": "php/regexiterator.getmode", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getPregFlags": {
        "description": "Returns the regular expression flags, see RegexIterator::__construct() for the list of flags.", 
        "name": "RegexIterator::getPregFlags", 
        "overview": "public int RegexIterator::getPregFlags ( void )", 
        "parameters": [], 
        "path": "php/regexiterator.getpregflags", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::getRegex": {
        "description": "", 
        "name": "RegexIterator::getRegex", 
        "overview": "public string RegexIterator::getRegex ( void )", 
        "parameters": [], 
        "path": "php/regexiterator.getregex", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::setFlags": {
        "description": "Sets the flags.", 
        "name": "RegexIterator::setFlags", 
        "overview": "public void RegexIterator::setFlags ( int $flags )", 
        "parameters": [
            {
                "descr": "The flags to set, a bitmask of class constants. ", 
                "name": "flags"
            }
        ], 
        "path": "php/regexiterator.setflags", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::setMode": {
        "description": "Sets the operation mode.", 
        "name": "RegexIterator::setMode", 
        "overview": "public void RegexIterator::setMode ( int $mode )", 
        "parameters": [
            {
                "descr": "The operation mode.   The available modes are listed below. ", 
                "name": "mode"
            }
        ], 
        "path": "php/regexiterator.setmode", 
        "type": "SPL/Iterators"
    }, 
    "RegexIterator::setPregFlags": {
        "description": "Sets the regular expression flags.", 
        "name": "RegexIterator::setPregFlags", 
        "overview": "public void RegexIterator::setPregFlags ( int $preg_flags )", 
        "parameters": [
            {
                "descr": "The regular expression flags. See RegexIterator::__construct() for an overview of available flags.", 
                "name": "preg_flags"
            }
        ], 
        "path": "php/regexiterator.setpregflags", 
        "type": "SPL/Iterators"
    }, 
    "ResourceBundle": {
        "description": "", 
        "name": "ResourceBundle", 
        "overview": "public int count ( void )", 
        "parameters": [], 
        "path": "php/class.resourcebundle", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::count": {
        "description": "Get the number of elements in the bundle.", 
        "name": "ResourceBundle::count", 
        "overview": "public int ResourceBundle::count ( void )", 
        "parameters": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }
        ], 
        "path": "php/resourcebundle.count", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::create": {
        "description": "Creates a resource bundle.", 
        "name": "ResourceBundle::create", 
        "overview": "public static ResourceBundle ResourceBundle::create ( string $locale , string $bundlename [, bool $fallback ] )", 
        "parameters": [
            {
                "descr": "Locale for which the resources should be loaded (locale name, e.g. ", 
                "name": "locale"
            }, 
            {
                "descr": "The directory where the data is stored or the name of the .dat file.", 
                "name": "bundlename"
            }, 
            {
                "descr": "Whether locale should match exactly or fallback to parent locale is allowed.", 
                "name": "fallback"
            }
        ], 
        "path": "php/resourcebundle.create", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::get": {
        "description": "Get the data from the bundle by index or string key.", 
        "name": "ResourceBundle::get", 
        "overview": "public mixed ResourceBundle::get ( string|int $index )", 
        "parameters": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }, 
            {
                "descr": "Data index, must be string or integer.", 
                "name": "index"
            }
        ], 
        "path": "php/resourcebundle.get", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::getErrorCode": {
        "description": "Get error code from the last function performed by the bundle object.", 
        "name": "ResourceBundle::getErrorCode", 
        "overview": "public int ResourceBundle::getErrorCode ( void )", 
        "parameters": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }
        ], 
        "path": "php/resourcebundle.geterrorcode", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::getErrorMessage": {
        "description": "Get error message from the last function performed by the bundle object.", 
        "name": "ResourceBundle::getErrorMessage", 
        "overview": "public string ResourceBundle::getErrorMessage ( void )", 
        "parameters": [
            {
                "descr": "ResourceBundle object.", 
                "name": "r"
            }
        ], 
        "path": "php/resourcebundle.geterrormessage", 
        "type": "Internationalization"
    }, 
    "ResourceBundle::getLocales": {
        "description": "Get available locales from ResourceBundle name.", 
        "name": "ResourceBundle::getLocales", 
        "overview": "public array ResourceBundle::getLocales ( string $bundlename )", 
        "parameters": [
            {
                "descr": "Path of ResourceBundle for which to get available locales, or empty string for default locales list.", 
                "name": "bundlename"
            }
        ], 
        "path": "php/resourcebundle.locales", 
        "type": "Internationalization"
    }, 
    "Runkit_Sandbox": {
        "description": "options is an associative array containing any combination of the special ini options listed below.", 
        "name": "Runkit_Sandbox", 
        "overview": "void Runkit_Sandbox::__construct ([ array $options ] )", 
        "parameters": [
            {
                "descr": "If the outer script which is instantiating the Runkit_Sandbox class is configured with safe_mode = off, then safe_mode may be turned on for the sandbox environment. ", 
                "name": "safe_mode"
            }, 
            {
                "descr": "If the outer script which is instantiating the Runkit_Sandbox class is configured with safe_mode_gid = on, then safe_mode_gid may be turned off for the sandbox environment. ", 
                "name": "safe_mode_gid"
            }, 
            {
                "descr": "If the outer script which is instantiating the Runkit_Sandbox class is configured with a safe_mode_include_dir, then a new safe_mode_include_dir may be set for sandbox environments below the currently defined value. safe_mode_include_dir may also be cleared to indicate that the bypass feature is disabled. If safe_mode_include_dir was blank in the outer script, but safe_mode was not enabled, then any arbitrary safe_mode_include_dir may be set while turning safe_mode on.", 
                "name": "safe_mode_include_dir"
            }, 
            {
                "descr": "open_basedir may be set to any path below the current setting of open_basedir. ", 
                "name": "open_basedir"
            }, 
            {
                "descr": "Like safe_mode, this setting can only be made more restrictive, in this case by setting it to FALSE when it is previously set to TRUE", 
                "name": "allow_url_fopen"
            }, 
            {
                "descr": "Comma separated list of functions to disable within the sandbox sub-interpreter. ", 
                "name": "disable_functions"
            }, 
            {
                "descr": "Comma separated list of classes to disable within the sandbox sub-interpreter. ", 
                "name": "disable_classes"
            }, 
            {
                "descr": "Comma separated list of variables to be treated as superglobals within the sandbox sub-interpreter. ", 
                "name": "runkit.superglobal"
            }, 
            {
                "descr": "Ini option runkit.internal_override may be disabled (but not re-enabled) within sandboxes.", 
                "name": "runkit.internal_override"
            }
        ], 
        "path": "php/runkit.sandbox", 
        "type": "Classes and Functions"
    }, 
    "Runkit_Sandbox_Parent": {
        "description": "Instantiating the Runkit_Sandbox_Parent class from within a sandbox environment created from the Runkit_Sandbox class provides some (controlled) means for a sandbox child to access its parent.", 
        "name": "Runkit_Sandbox_Parent", 
        "overview": "void Runkit_Sandbox_Parent::__construct ( void )", 
        "parameters": [], 
        "path": "php/runkit.sandbox-parent", 
        "type": "Classes and Functions"
    }, 
    "RuntimeException": {
        "description": "", 
        "name": "RuntimeException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.runtimeexception", 
        "type": "SPL/Exceptions"
    }, 
    "SQLite3": {
        "description": "", 
        "name": "SQLite3", 
        "overview": "public bool busyTimeout ( int $msecs )", 
        "parameters": [], 
        "path": "php/class.sqlite3", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::__construct": {
        "description": "Instantiates an SQLite3 object and opens a connection to an SQLite 3 database. If the build includes encryption, then it will attempt to use the key.", 
        "name": "SQLite3::__construct", 
        "overview": "public SQLite3::__construct ( string $filename [, int $flags [, string $encryption_key ]] )", 
        "parameters": [
            {
                "descr": "Path to the SQLite database, or :memory: to use in-memory database.", 
                "name": "filename"
            }, 
            {
                "descr": "Optional flags used to determine how to open the SQLite database. ", 
                "name": "flags"
            }, 
            {
                "descr": "An optional encryption key used when encrypting and decrypting an SQLite database.", 
                "name": "encryption_key"
            }
        ], 
        "path": "php/sqlite3.construct", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::busyTimeout": {
        "description": "Sets a busy handler that will sleep until the database is not locked or the timeout is reached.", 
        "name": "SQLite3::busyTimeout", 
        "overview": "public bool SQLite3::busyTimeout ( int $msecs )", 
        "parameters": [
            {
                "descr": "The milliseconds to sleep. Setting this value to a value less than or equal to zero, will turn off an already set timeout handler.", 
                "name": "msecs"
            }
        ], 
        "path": "php/sqlite3.busytimeout", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::changes": {
        "description": "Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement.", 
        "name": "SQLite3::changes", 
        "overview": "public int SQLite3::changes ( void )", 
        "parameters": [], 
        "path": "php/sqlite3.changes", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::close": {
        "description": "Closes the database connection.", 
        "name": "SQLite3::close", 
        "overview": "public bool SQLite3::close ( void )", 
        "parameters": [], 
        "path": "php/sqlite3.close", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::createAggregate": {
        "description": "Registers a PHP function or user-defined function for use as an SQL aggregate function for use within SQL statements.", 
        "name": "SQLite3::createAggregate", 
        "overview": "public bool SQLite3::createAggregate ( string $name , mixed $step_callback , mixed $final_callback [, int $argument_count = -1 ] )", 
        "parameters": [
            {
                "descr": "Name of the SQL aggregate to be created or redefined.", 
                "name": "name"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback for every item in the aggregate.", 
                "name": "step_callback"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback at the end of the aggregate data.", 
                "name": "final_callback"
            }, 
            {
                "descr": "The number of arguments that the SQL aggregate takes. ", 
                "name": "argument_count"
            }
        ], 
        "path": "php/sqlite3.createaggregate", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::createCollation": {
        "description": "Registers a PHP function or user-defined function for use as a collating function within SQL statements.", 
        "name": "SQLite3::createCollation", 
        "overview": "public bool SQLite3::createCollation ( string $name , callable $callback )", 
        "parameters": [
            {
                "descr": "Name of the SQL collating function to be created or redefined", 
                "name": "name"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the collation. ", 
                "name": "callback"
            }
        ], 
        "path": "php/sqlite3.createcollation", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::createFunction": {
        "description": "Registers a PHP function or user-defined function for use as an SQL scalar function for use within SQL statements.", 
        "name": "SQLite3::createFunction", 
        "overview": "public bool SQLite3::createFunction ( string $name , mixed $callback [, int $argument_count = -1 ] )", 
        "parameters": [
            {
                "descr": "Name of the SQL function to be created or redefined.", 
                "name": "name"
            }, 
            {
                "descr": "The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the SQL function.", 
                "name": "callback"
            }, 
            {
                "descr": "The number of arguments that the SQL function takes. ", 
                "name": "argument_count"
            }
        ], 
        "path": "php/sqlite3.createfunction", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::escapeString": {
        "description": "Returns a string that has been properly escaped for safe inclusion in an SQL statement.", 
        "name": "SQLite3::escapeString", 
        "overview": "public static string SQLite3::escapeString ( string $value )", 
        "parameters": [
            {
                "descr": "The string to be escaped.", 
                "name": "value"
            }
        ], 
        "path": "php/sqlite3.escapestring", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::exec": {
        "description": "Executes a result-less query against a given database.", 
        "name": "SQLite3::exec", 
        "overview": "public bool SQLite3::exec ( string $query )", 
        "parameters": [
            {
                "descr": "The SQL query to execute (typically an INSERT, UPDATE, or DELETE query).", 
                "name": "query"
            }
        ], 
        "path": "php/sqlite3.exec", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::lastErrorCode": {
        "description": "Returns the numeric result code of the most recent failed SQLite request.", 
        "name": "SQLite3::lastErrorCode", 
        "overview": "public int SQLite3::lastErrorCode ( void )", 
        "parameters": [], 
        "path": "php/sqlite3.lasterrorcode", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::lastErrorMsg": {
        "description": "Returns English text describing the most recent failed SQLite request.", 
        "name": "SQLite3::lastErrorMsg", 
        "overview": "public string SQLite3::lastErrorMsg ( void )", 
        "parameters": [], 
        "path": "php/sqlite3.lasterrormsg", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::lastInsertRowID": {
        "description": "Returns the row ID of the most recent INSERT into the database.", 
        "name": "SQLite3::lastInsertRowID", 
        "overview": "public int SQLite3::lastInsertRowID ( void )", 
        "parameters": [], 
        "path": "php/sqlite3.lastinsertrowid", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::loadExtension": {
        "description": "Attempts to load an SQLite extension library.", 
        "name": "SQLite3::loadExtension", 
        "overview": "public bool SQLite3::loadExtension ( string $shared_library )", 
        "parameters": [
            {
                "descr": "The name of the library to load. ", 
                "name": "shared_library"
            }
        ], 
        "path": "php/sqlite3.loadextension", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::open": {
        "description": "Opens an SQLite 3 Database. If the build includes encryption, then it will attempt to use the key.", 
        "name": "SQLite3::open", 
        "overview": "public void SQLite3::open ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key ]] )", 
        "parameters": [
            {
                "descr": "Path to the SQLite database, or :memory: to use in-memory database.", 
                "name": "filename"
            }, 
            {
                "descr": "Optional flags used to determine how to open the SQLite database. ", 
                "name": "flags"
            }, 
            {
                "descr": "An optional encryption key used when encrypting and decrypting an SQLite database.", 
                "name": "encryption_key"
            }
        ], 
        "path": "php/sqlite3.open", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::prepare": {
        "description": "Prepares an SQL statement for execution and returns an SQLite3Stmt object.", 
        "name": "SQLite3::prepare", 
        "overview": "public SQLite3Stmt SQLite3::prepare ( string $query )", 
        "parameters": [
            {
                "descr": "The SQL query to prepare.", 
                "name": "query"
            }
        ], 
        "path": "php/sqlite3.prepare", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::query": {
        "description": "Executes an SQL query, returning an SQLite3Result object if the query returns results.", 
        "name": "SQLite3::query", 
        "overview": "public SQLite3Result SQLite3::query ( string $query )", 
        "parameters": [
            {
                "descr": "The SQL query to execute.", 
                "name": "query"
            }
        ], 
        "path": "php/sqlite3.query", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::querySingle": {
        "description": "Executes a query and returns a single result.", 
        "name": "SQLite3::querySingle", 
        "overview": "public mixed SQLite3::querySingle ( string $query [, bool $entire_row = false ] )", 
        "parameters": [
            {
                "descr": "The SQL query to execute.", 
                "name": "query"
            }, 
            {
                "descr": "By default, querySingle() returns the value of the first column returned by the query. ", 
                "name": "entire_row"
            }
        ], 
        "path": "php/sqlite3.querysingle", 
        "type": "Database/SQLite"
    }, 
    "SQLite3::version": {
        "description": "Returns the SQLite3 library version as a string constant and as a number.", 
        "name": "SQLite3::version", 
        "overview": "public static array SQLite3::version ( void )", 
        "parameters": [], 
        "path": "php/sqlite3.version", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result": {
        "description": "", 
        "name": "SQLite3Result", 
        "overview": "public string columnName ( int $column_number )", 
        "parameters": [], 
        "path": "php/class.sqlite3result", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::columnName": {
        "description": "Returns the name of the column specified by the column_number.", 
        "name": "SQLite3Result::columnName", 
        "overview": "public string SQLite3Result::columnName ( int $column_number )", 
        "parameters": [
            {
                "descr": "The numeric zero-based index of the column.", 
                "name": "column_number"
            }
        ], 
        "path": "php/sqlite3result.columnname", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::columnType": {
        "description": "Returns the type of the column identified by column_number.", 
        "name": "SQLite3Result::columnType", 
        "overview": "public int SQLite3Result::columnType ( int $column_number )", 
        "parameters": [
            {
                "descr": "The numeric zero-based index of the column.", 
                "name": "column_number"
            }
        ], 
        "path": "php/sqlite3result.columntype", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::fetchArray": {
        "description": "Fetches a result row as an associative or numerically indexed array or both. By default, fetches as both.", 
        "name": "SQLite3Result::fetchArray", 
        "overview": "public array SQLite3Result::fetchArray ([ int $mode = SQLITE3_BOTH ] )", 
        "parameters": [
            {
                "descr": "Controls how the next row will be returned to the caller. ", 
                "name": "mode"
            }
        ], 
        "path": "php/sqlite3result.fetcharray", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::finalize": {
        "description": "Closes the result set.", 
        "name": "SQLite3Result::finalize", 
        "overview": "public bool SQLite3Result::finalize ( void )", 
        "parameters": [], 
        "path": "php/sqlite3result.finalize", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::numColumns": {
        "description": "Returns the number of columns in the result set.", 
        "name": "SQLite3Result::numColumns", 
        "overview": "public int SQLite3Result::numColumns ( void )", 
        "parameters": [], 
        "path": "php/sqlite3result.numcolumns", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Result::reset": {
        "description": "Resets the result set back to the first row.", 
        "name": "SQLite3Result::reset", 
        "overview": "public bool SQLite3Result::reset ( void )", 
        "parameters": [], 
        "path": "php/sqlite3result.reset", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt": {
        "description": "", 
        "name": "SQLite3Stmt", 
        "overview": "public bool bindParam ( string $sql_param , mixed &$param [, int $type ] )", 
        "parameters": [], 
        "path": "php/class.sqlite3stmt", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::bindParam": {
        "description": "Binds a parameter to a statement variable.", 
        "name": "SQLite3Stmt::bindParam", 
        "overview": "public bool SQLite3Stmt::bindParam ( string $sql_param , mixed &$param [, int $type ] )", 
        "parameters": [
            {
                "descr": "An string identifying the statement variable to which the parameter should be bound.", 
                "name": "sql_param"
            }, 
            {
                "descr": "The parameter to bind to a statement variable.", 
                "name": "param"
            }, 
            {
                "descr": "The data type of the parameter to bind. ", 
                "name": "type"
            }
        ], 
        "path": "php/sqlite3stmt.bindparam", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::bindValue": {
        "description": "Binds the value of a parameter to a statement variable.", 
        "name": "SQLite3Stmt::bindValue", 
        "overview": "public bool SQLite3Stmt::bindValue ( string $sql_param , mixed $value [, int $type ] )", 
        "parameters": [
            {
                "descr": "An string identifying the statement variable to which the value should be bound.", 
                "name": "sql_param"
            }, 
            {
                "descr": "The value to bind to a statement variable.", 
                "name": "value"
            }, 
            {
                "descr": "The data type of the value to bind. ", 
                "name": "type"
            }
        ], 
        "path": "php/sqlite3stmt.bindvalue", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::clear": {
        "description": "Clears all current bound parameters.", 
        "name": "SQLite3Stmt::clear", 
        "overview": "public bool SQLite3Stmt::clear ( void )", 
        "parameters": [], 
        "path": "php/sqlite3stmt.clear", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::close": {
        "description": "Closes the prepared statement.", 
        "name": "SQLite3Stmt::close", 
        "overview": "public bool SQLite3Stmt::close ( void )", 
        "parameters": [], 
        "path": "php/sqlite3stmt.close", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::execute": {
        "description": "Executes a prepared statement and returns a result set object.", 
        "name": "SQLite3Stmt::execute", 
        "overview": "public SQLite3Result SQLite3Stmt::execute ( void )", 
        "parameters": [], 
        "path": "php/sqlite3stmt.execute", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::paramCount": {
        "description": "Returns the number of parameters within the prepared statement.", 
        "name": "SQLite3Stmt::paramCount", 
        "overview": "public int SQLite3Stmt::paramCount ( void )", 
        "parameters": [], 
        "path": "php/sqlite3stmt.paramcount", 
        "type": "Database/SQLite"
    }, 
    "SQLite3Stmt::reset": {
        "description": "Resets the prepared statement to its state prior to execution. All bindings remain intact after reset.", 
        "name": "SQLite3Stmt::reset", 
        "overview": "public bool SQLite3Stmt::reset ( void )", 
        "parameters": [], 
        "path": "php/sqlite3stmt.reset", 
        "type": "Database/SQLite"
    }, 
    "SeekableIterator (interface": {
        "description": "", 
        "name": "SeekableIterator (interface", 
        "overview": "abstract public void seek ( int $position )", 
        "parameters": [], 
        "path": "php/class.seekableiterator", 
        "type": "SPL/Interfaces"
    }, 
    "SeekableIterator::seek": {
        "description": "Seeks to a given position in the iterator.", 
        "name": "SeekableIterator::seek", 
        "overview": "abstract public void SeekableIterator::seek ( int $position )", 
        "parameters": [
            {
                "descr": "The position to seek to.", 
                "name": "position"
            }
        ], 
        "path": "php/seekableiterator.seek", 
        "type": "SPL/Interfaces"
    }, 
    "Serializable (interface": {
        "description": "", 
        "name": "Serializable (interface", 
        "overview": "abstract public string serialize ( void )", 
        "parameters": [], 
        "path": "php/class.serializable", 
        "type": "Classes and Functions"
    }, 
    "Serializable::serialize": {
        "description": "Should return the string representation of the object.", 
        "name": "Serializable::serialize", 
        "overview": "abstract public string Serializable::serialize ( void )", 
        "parameters": [], 
        "path": "php/serializable.serialize", 
        "type": "Classes and Functions"
    }, 
    "Serializable::unserialize": {
        "description": "Called during unserialization of the object.", 
        "name": "Serializable::unserialize", 
        "overview": "abstract public void Serializable::unserialize ( string $serialized )", 
        "parameters": [
            {
                "descr": "The string representation of the object.", 
                "name": "serialized"
            }
        ], 
        "path": "php/serializable.unserialize", 
        "type": "Classes and Functions"
    }, 
    "SessionHandler": {
        "description": "", 
        "name": "SessionHandler", 
        "overview": "public bool close ( void )", 
        "parameters": [], 
        "path": "php/class.sessionhandler", 
        "type": "Sessions"
    }, 
    "SessionHandler::close": {
        "description": "Closes the current session. This method is automatically executed internally by PHP when closing the session, or explicitly via session_write_close() (which first calls the SessionHandler::write()).", 
        "name": "SessionHandler::close", 
        "overview": "public bool SessionHandler::close ( void )", 
        "parameters": [], 
        "path": "php/sessionhandler.close", 
        "type": "Sessions"
    }, 
    "SessionHandler::destroy": {
        "description": "Destroys a session. Called by internally by PHP with session_regenerate_id() (assuming the $destory is set to TRUE, by session_destroy() or when session_decode() fails.", 
        "name": "SessionHandler::destroy", 
        "overview": "public bool SessionHandler::destroy ( string $session_id )", 
        "parameters": [
            {
                "descr": "The session ID being destroyed.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandler.destroy", 
        "type": "Sessions"
    }, 
    "SessionHandler::gc": {
        "description": "Cleans up expired sessions. Called randomly by PHP internally when a session starts or when session_start() is invoked. The frequency this is called is based on the session.gc_divisor and session.gc_probability configuration directives.", 
        "name": "SessionHandler::gc", 
        "overview": "public bool SessionHandler::gc ( int $maxlifetime )", 
        "parameters": [
            {
                "descr": "Sessions that have not updated for the last maxlifetime seconds will be removed.", 
                "name": "maxlifetime"
            }
        ], 
        "path": "php/sessionhandler.gc", 
        "type": "Sessions"
    }, 
    "SessionHandler::open": {
        "description": "Create new session, or re-initialize existing session. Called internally by PHP when a session starts either automatically or when session_start() is invoked.", 
        "name": "SessionHandler::open", 
        "overview": "public bool SessionHandler::open ( string $save_path , string $session_id )", 
        "parameters": [
            {
                "descr": "The path where to store/retrieve the session.", 
                "name": "save_path"
            }, 
            {
                "descr": "The session id.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandler.open", 
        "type": "Sessions"
    }, 
    "SessionHandler::read": {
        "description": "Reads the session data from the session storage, and returns the result back to PHP for internal processing. This method is called automatically by PHP when a session is started (either automatically or explicity with session_start() and is preceeded by an internal call to the SessionHandler::open().", 
        "name": "SessionHandler::read", 
        "overview": "public string SessionHandler::read ( string $session_id )", 
        "parameters": [
            {
                "descr": "The session id to read data for.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandler.read", 
        "type": "Sessions"
    }, 
    "SessionHandler::write": {
        "description": "Writes the session data to the session storage. Called by normal PHP shutdown, by session_write_close(), or when session_register_shutdown() fails. PHP will call SessionHandler::close() immediately after this method returns.", 
        "name": "SessionHandler::write", 
        "overview": "public bool SessionHandler::write ( string $session_id , string $session_data )", 
        "parameters": [
            {
                "descr": "The session id.", 
                "name": "session_id"
            }, 
            {
                "descr": "The encoded session data. This data is the result of the PHP internally encoding the $_SESSION superglobal to a serialized string and passing it as this parameter. ", 
                "name": "session_data"
            }
        ], 
        "path": "php/sessionhandler.write", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface": {
        "description": "", 
        "name": "SessionHandlerInterface", 
        "overview": "abstract public bool close ( void )", 
        "parameters": [], 
        "path": "php/class.sessionhandlerinterface", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::close": {
        "description": "Closes the current session. This function is automatically executed when closing the session, or explicitly via session_write_close().", 
        "name": "SessionHandlerInterface::close", 
        "overview": "abstract public bool SessionHandlerInterface::close ( void )", 
        "parameters": [], 
        "path": "php/sessionhandlerinterface.close", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::destroy": {
        "description": "Destroys a session. Called by session_regenerate_id() (with $destroy = TRUE), session_destroy() and when session_decode() fails.", 
        "name": "SessionHandlerInterface::destroy", 
        "overview": "abstract public bool SessionHandlerInterface::destroy ( string $session_id )", 
        "parameters": [
            {
                "descr": "The session ID being destroyed.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandlerinterface.destroy", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::gc": {
        "description": "Cleans up expired sessions. Called by session_start(), based on session.gc_divisor, session.gc_probability and session.gc_lifetime settings.", 
        "name": "SessionHandlerInterface::gc", 
        "overview": "abstract public bool SessionHandlerInterface::gc ( string $maxlifetime )", 
        "parameters": [
            {
                "descr": "Sessions that have not updated for the last maxlifetime seconds will be removed.", 
                "name": "maxlifetime"
            }
        ], 
        "path": "php/sessionhandlerinterface.gc", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::open": {
        "description": "Re-initialize existing session, or creates a new one. Called when a session starts or when session_start() is invoked.", 
        "name": "SessionHandlerInterface::open", 
        "overview": "abstract public bool SessionHandlerInterface::open ( string $save_path , string $name )", 
        "parameters": [
            {
                "descr": "The path where to store/retrieve the session.", 
                "name": "save_path"
            }, 
            {
                "descr": "The session name.", 
                "name": "name"
            }
        ], 
        "path": "php/sessionhandlerinterface.open", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::read": {
        "description": "Reads the session data from the session storage, and returns the results. Called right after the session starts or when session_start() is called. Please note that before this method is called SessionHandlerInterface::open() is invoked.", 
        "name": "SessionHandlerInterface::read", 
        "overview": "abstract public string SessionHandlerInterface::read ( string $session_id )", 
        "parameters": [
            {
                "descr": "The session id.", 
                "name": "session_id"
            }
        ], 
        "path": "php/sessionhandlerinterface.read", 
        "type": "Sessions"
    }, 
    "SessionHandlerInterface::write": {
        "description": "Writes the session data to the session storage. Called by session_write_close(), when session_register_shutdown() fails, or during a normal shutdown. Note: SessionHandlerInterface::close() is called immediately after this function.", 
        "name": "SessionHandlerInterface::write", 
        "overview": "abstract public bool SessionHandlerInterface::write ( string $session_id , string $session_data )", 
        "parameters": [
            {
                "descr": "The session id.", 
                "name": "session_id"
            }, 
            {
                "descr": "The encoded session data. This data is the result of the PHP internally encoding the $_SESSION superglobal to a serialized string and passing it as this parameter. ", 
                "name": "session_data"
            }
        ], 
        "path": "php/sessionhandlerinterface.write", 
        "type": "Sessions"
    }, 
    "SimpleXMLElement": {
        "description": "", 
        "name": "SimpleXMLElement", 
        "overview": "public void addAttribute ( string $name [, string $value [, string $namespace ]] )", 
        "parameters": [], 
        "path": "php/class.simplexmlelement", 
        "type": "XML"
    }, 
    "SimpleXMLElement::__toString": {
        "description": "Returns text content that is directly in this element. Does not return text content that is inside this element's children.", 
        "name": "SimpleXMLElement::__toString", 
        "overview": "public string SimpleXMLElement::__toString ( void )", 
        "parameters": [], 
        "path": "php/simplexmlelement.tostring", 
        "type": "XML"
    }, 
    "SimpleXMLElement::addAttribute": {
        "description": "Adds an attribute to the SimpleXML element.", 
        "name": "SimpleXMLElement::addAttribute", 
        "overview": "public void SimpleXMLElement::addAttribute ( string $name [, string $value [, string $namespace ]] )", 
        "parameters": [
            {
                "descr": "The name of the attribute to add.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }, 
            {
                "descr": "If specified, the namespace to which the attribute belongs.", 
                "name": "namespace"
            }
        ], 
        "path": "php/simplexmlelement.addattribute", 
        "type": "XML"
    }, 
    "SimpleXMLElement::addChild": {
        "description": "Adds a child element to the node and returns a SimpleXMLElement of the child.", 
        "name": "SimpleXMLElement::addChild", 
        "overview": "public SimpleXMLElement SimpleXMLElement::addChild ( string $name [, string $value [, string $namespace ]] )", 
        "parameters": [
            {
                "descr": "The name of the child element to add.", 
                "name": "name"
            }, 
            {
                "descr": "If specified, the value of the child element.", 
                "name": "value"
            }, 
            {
                "descr": "If specified, the namespace to which the child element belongs.", 
                "name": "namespace"
            }
        ], 
        "path": "php/simplexmlelement.addchild", 
        "type": "XML"
    }, 
    "SimpleXMLElement::asXML": {
        "description": "The asXML method formats the parent object's data in XML version 1.0.", 
        "name": "SimpleXMLElement::asXML", 
        "overview": "public mixed SimpleXMLElement::asXML ([ string $filename ] )", 
        "parameters": [
            {
                "descr": "If specified, the function writes the data to the file rather than returning it.", 
                "name": "filename"
            }
        ], 
        "path": "php/simplexmlelement.asxml", 
        "type": "XML"
    }, 
    "SimpleXMLElement::attributes": {
        "description": "This function provides the attributes and values defined within an xml tag.", 
        "name": "SimpleXMLElement::attributes", 
        "overview": "public SimpleXMLElement SimpleXMLElement::attributes ([ string $ns = NULL [, bool $is_prefix = false ]] )", 
        "parameters": [
            {
                "descr": "An optional namespace for the retrieved attributes", 
                "name": "ns"
            }, 
            {
                "descr": "Default to FALSE", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/simplexmlelement.attributes", 
        "type": "XML"
    }, 
    "SimpleXMLElement::children": {
        "description": "This method finds the children of an element. The result follows normal iteration rules.", 
        "name": "SimpleXMLElement::children", 
        "overview": "public SimpleXMLElement SimpleXMLElement::children ([ string $ns [, bool $is_prefix = false ]] )", 
        "parameters": [
            {
                "descr": "An XML namespace.", 
                "name": "ns"
            }, 
            {
                "descr": "If is_prefix is TRUE, ns will be regarded as a prefix. ", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/simplexmlelement.children", 
        "type": "XML"
    }, 
    "SimpleXMLElement::count": {
        "description": "This method counts the number of children of an element.", 
        "name": "SimpleXMLElement::count", 
        "overview": "public int SimpleXMLElement::count ( void )", 
        "parameters": [], 
        "path": "php/simplexmlelement.count", 
        "type": "XML"
    }, 
    "SimpleXMLElement::getDocNamespaces": {
        "description": "Returns namespaces declared in document", 
        "name": "SimpleXMLElement::getDocNamespaces", 
        "overview": "public array SimpleXMLElement::getDocNamespaces ([ bool $recursive = false [, bool $from_root = true ]] )", 
        "parameters": [
            {
                "descr": "If specified, returns all namespaces declared in parent and child nodes. ", 
                "name": "recursive"
            }, 
            {
                "descr": "Allows you to recursively check namespaces under a child node instead of from the root of the XML doc.", 
                "name": "from_root"
            }
        ], 
        "path": "php/simplexmlelement.getdocnamespaces", 
        "type": "XML"
    }, 
    "SimpleXMLElement::getName": {
        "description": "Gets the name of the XML element.", 
        "name": "SimpleXMLElement::getName", 
        "overview": "public string SimpleXMLElement::getName ( void )", 
        "parameters": [], 
        "path": "php/simplexmlelement.getname", 
        "type": "XML"
    }, 
    "SimpleXMLElement::getNamespaces": {
        "description": "Returns namespaces used in document", 
        "name": "SimpleXMLElement::getNamespaces", 
        "overview": "public array SimpleXMLElement::getNamespaces ([ bool $recursive = false ] )", 
        "parameters": [
            {
                "descr": "If specified, returns all namespaces used in parent and child nodes. ", 
                "name": "recursive"
            }
        ], 
        "path": "php/simplexmlelement.getnamespaces", 
        "type": "XML"
    }, 
    "SimpleXMLElement::registerXPathNamespace": {
        "description": "Creates a prefix/ns context for the next XPath query. In particular, this is helpful if the provider of the given XML document alters the namespace prefixes. registerXPathNamespace will create a prefix for the associated namespace, allowing one to access nodes in that namespace without the need to change code to allow for the new prefixes dictated by the provider.", 
        "name": "SimpleXMLElement::registerXPathNamespace", 
        "overview": "public bool SimpleXMLElement::registerXPathNamespace ( string $prefix , string $ns )", 
        "parameters": [
            {
                "descr": "The namespace prefix to use in the XPath query for the namespace given in ns.", 
                "name": "prefix"
            }, 
            {
                "descr": "The namespace to use for the XPath query. ", 
                "name": "ns"
            }
        ], 
        "path": "php/simplexmlelement.registerxpathnamespace", 
        "type": "XML"
    }, 
    "SimpleXMLElement::xpath": {
        "description": "The xpath method searches the SimpleXML node for children matching the XPath path.", 
        "name": "SimpleXMLElement::xpath", 
        "overview": "public array SimpleXMLElement::xpath ( string $path )", 
        "parameters": [
            {
                "descr": "An XPath path", 
                "name": "path"
            }
        ], 
        "path": "php/simplexmlelement.xpath", 
        "type": "XML"
    }, 
    "SimpleXMLIterator": {
        "description": "", 
        "name": "SimpleXMLIterator", 
        "overview": "public mixed current ( void )", 
        "parameters": [], 
        "path": "php/class.simplexmliterator", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::current": {
        "description": "This method returns the current element as a SimpleXMLIterator object or NULL.", 
        "name": "SimpleXMLIterator::current", 
        "overview": "public mixed SimpleXMLIterator::current ( void )", 
        "parameters": [], 
        "path": "php/simplexmliterator.current", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::getChildren": {
        "description": "This method returns a SimpleXMLIterator object containing sub-elements of the current SimpleXMLIterator element.", 
        "name": "SimpleXMLIterator::getChildren", 
        "overview": "public SimpleXMLIterator SimpleXMLIterator::getChildren ( void )", 
        "parameters": [], 
        "path": "php/simplexmliterator.getchildren", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::hasChildren": {
        "description": "This method checks whether the current SimpleXMLIterator element has sub-elements.", 
        "name": "SimpleXMLIterator::hasChildren", 
        "overview": "public bool SimpleXMLIterator::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/simplexmliterator.haschildren", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::key": {
        "description": "This method gets the XML tag name of the current element.", 
        "name": "SimpleXMLIterator::key", 
        "overview": "public mixed SimpleXMLIterator::key ( void )", 
        "parameters": [], 
        "path": "php/simplexmliterator.key", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::next": {
        "description": "This method moves the SimpleXMLIterator to the next element.", 
        "name": "SimpleXMLIterator::next", 
        "overview": "public void SimpleXMLIterator::next ( void )", 
        "parameters": [], 
        "path": "php/simplexmliterator.next", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::rewind": {
        "description": "This method rewinds the SimpleXMLIterator to the first element.", 
        "name": "SimpleXMLIterator::rewind", 
        "overview": "public void SimpleXMLIterator::rewind ( void )", 
        "parameters": [], 
        "path": "php/simplexmliterator.rewind", 
        "type": "XML"
    }, 
    "SimpleXMLIterator::valid": {
        "description": "This method checks if the current element is valid after calls to SimpleXMLIterator::rewind() or SimpleXMLIterator::next().", 
        "name": "SimpleXMLIterator::valid", 
        "overview": "public bool SimpleXMLIterator::valid ( void )", 
        "parameters": [], 
        "path": "php/simplexmliterator.valid", 
        "type": "XML"
    }, 
    "SoapClient": {
        "description": "", 
        "name": "SoapClient", 
        "overview": "public mixed __call ( string $function_name , string $arguments )", 
        "parameters": [], 
        "path": "php/class.soapclient", 
        "type": "SOAP"
    }, 
    "SoapClient::SoapClient": {
        "description": "This constructor creates SoapClient objects in WSDL or non-WSDL mode.", 
        "name": "SoapClient::SoapClient", 
        "overview": "public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )", 
        "parameters": [
            {
                "descr": "URI of the WSDL file or NULL if working in non-WSDL mode. ", 
                "name": "wsdl"
            }, 
            {
                "descr": "An array of options. If working in WSDL mode, this parameter is optional. ", 
                "name": "options"
            }
        ], 
        "path": "php/soapclient.soapclient", 
        "type": "SOAP"
    }, 
    "SoapClient::__call": {
        "description": "Calling this method directly is deprecated. Usually, SOAP functions can be called as methods of the SoapClient object; in situations where this is not possible or additional options are needed, use SoapClient::__soapCall().", 
        "name": "SoapClient::__call", 
        "overview": "public mixed SoapClient::__call ( string $function_name , string $arguments )", 
        "parameters": [], 
        "path": "php/soapclient.call", 
        "type": "SOAP"
    }, 
    "SoapClient::__construct": {
        "description": "This function is an alias of: SoapClient::SoapClient()", 
        "name": "SoapClient::__construct", 
        "overview": "public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )", 
        "parameters": [], 
        "path": "php/soapclient.construct", 
        "type": "SOAP"
    }, 
    "SoapClient::__doRequest": {
        "description": "Performs SOAP request over HTTP.", 
        "name": "SoapClient::__doRequest", 
        "overview": "public string SoapClient::__doRequest ( string $request , string $location , string $action , int $version [, int $one_way = 0 ] )", 
        "parameters": [
            {
                "descr": "The XML SOAP request.", 
                "name": "request"
            }, 
            {
                "descr": "The URL to request.", 
                "name": "location"
            }, 
            {
                "descr": "The SOAP action.", 
                "name": "action"
            }, 
            {
                "descr": "The SOAP version.", 
                "name": "version"
            }, 
            {
                "descr": "If one_way is set to 1, this method returns nothing. ", 
                "name": "one_way"
            }
        ], 
        "path": "php/soapclient.dorequest", 
        "type": "SOAP"
    }, 
    "SoapClient::__getFunctions": {
        "description": "Returns an array of functions described in the WSDL for the Web service.", 
        "name": "SoapClient::__getFunctions", 
        "overview": "public array SoapClient::__getFunctions ( void )", 
        "parameters": [], 
        "path": "php/soapclient.getfunctions", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastRequest": {
        "description": "Returns the XML sent in the last SOAP request.", 
        "name": "SoapClient::__getLastRequest", 
        "overview": "public string SoapClient::__getLastRequest ( void )", 
        "parameters": [], 
        "path": "php/soapclient.getlastrequest", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastRequestHeaders": {
        "description": "Returns the SOAP headers from the last request.", 
        "name": "SoapClient::__getLastRequestHeaders", 
        "overview": "public string SoapClient::__getLastRequestHeaders ( void )", 
        "parameters": [], 
        "path": "php/soapclient.getlastrequestheaders", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastResponse": {
        "description": "Returns the XML received in the last SOAP response.", 
        "name": "SoapClient::__getLastResponse", 
        "overview": "public string SoapClient::__getLastResponse ( void )", 
        "parameters": [], 
        "path": "php/soapclient.getlastresponse", 
        "type": "SOAP"
    }, 
    "SoapClient::__getLastResponseHeaders": {
        "description": "Returns the SOAP headers from the last response.", 
        "name": "SoapClient::__getLastResponseHeaders", 
        "overview": "public string SoapClient::__getLastResponseHeaders ( void )", 
        "parameters": [], 
        "path": "php/soapclient.getlastresponseheaders", 
        "type": "SOAP"
    }, 
    "SoapClient::__getTypes": {
        "description": "Returns an array of types described in the WSDL for the Web service.", 
        "name": "SoapClient::__getTypes", 
        "overview": "public array SoapClient::__getTypes ( void )", 
        "parameters": [], 
        "path": "php/soapclient.gettypes", 
        "type": "SOAP"
    }, 
    "SoapClient::__setCookie": {
        "description": "Defines a cookie to be sent along with the SOAP requests.", 
        "name": "SoapClient::__setCookie", 
        "overview": "public void SoapClient::__setCookie ( string $name [, string $value ] )", 
        "parameters": [
            {
                "descr": "The name of the cookie.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the cookie. If not specified, the cookie will be deleted.", 
                "name": "value"
            }
        ], 
        "path": "php/soapclient.setcookie", 
        "type": "SOAP"
    }, 
    "SoapClient::__setLocation": {
        "description": "Sets the endpoint URL that will be touched by following SOAP requests. This is equivalent to specifying the location option when constructing the SoapClient.", 
        "name": "SoapClient::__setLocation", 
        "overview": "public string SoapClient::__setLocation ([ string $new_location ] )", 
        "parameters": [
            {
                "descr": "The new endpoint URL.", 
                "name": "new_location"
            }
        ], 
        "path": "php/soapclient.setlocation", 
        "type": "SOAP"
    }, 
    "SoapClient::__setSoapHeaders": {
        "description": "Defines headers to be sent along with the SOAP requests.", 
        "name": "SoapClient::__setSoapHeaders", 
        "overview": "public bool SoapClient::__setSoapHeaders ([ mixed $soapheaders ] )", 
        "parameters": [
            {
                "descr": "The headers to be set. It could be SoapHeader object or array of SoapHeader objects. ", 
                "name": "soapheaders"
            }
        ], 
        "path": "php/soapclient.setsoapheaders", 
        "type": "SOAP"
    }, 
    "SoapClient::__soapCall": {
        "description": "This is a low level API function that is used to make a SOAP call. Usually, in WSDL mode, SOAP functions can be called as methods of the SoapClient object. This method is useful in non-WSDL mode when soapaction is unknown, uri differs from the default or when sending and/or receiving SOAP Headers.", 
        "name": "SoapClient::__soapCall", 
        "overview": "public mixed SoapClient::__soapCall ( string $function_name , array $arguments [, array $options [, mixed $input_headers [, array &$output_headers ]]] )", 
        "parameters": [
            {
                "descr": "The name of the SOAP function to call.", 
                "name": "function_name"
            }, 
            {
                "descr": "An array of the arguments to pass to the function. ", 
                "name": "arguments"
            }, 
            {
                "descr": "An associative array of options to pass to the client. ", 
                "name": "options"
            }, 
            {
                "descr": "An array of headers to be sent along with the SOAP request.", 
                "name": "input_headers"
            }, 
            {
                "descr": "If supplied, this array will be filled with the headers from the SOAP response.", 
                "name": "output_headers"
            }
        ], 
        "path": "php/soapclient.soapcall", 
        "type": "SOAP"
    }, 
    "SoapFault": {
        "description": "", 
        "name": "SoapFault", 
        "overview": "__construct ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )", 
        "parameters": [], 
        "path": "php/class.soapfault", 
        "type": "SOAP"
    }, 
    "SoapFault::SoapFault": {
        "description": "This class is used to send SOAP fault responses from the PHP handler. faultcode, faultstring, faultactor and detail are standard elements of a SOAP Fault.", 
        "name": "SoapFault::SoapFault", 
        "overview": "SoapFault::SoapFault ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )", 
        "parameters": [
            {
                "descr": "The error code of the SoapFault.", 
                "name": "faultcode"
            }, 
            {
                "descr": "The error message of the SoapFault.", 
                "name": "faultstring"
            }, 
            {
                "descr": "A string identifying the actor that caused the error.", 
                "name": "faultactor"
            }, 
            {
                "descr": "More details about the cause of the error.", 
                "name": "detail"
            }, 
            {
                "descr": "Can be used to select the proper fault encoding from WSDL.", 
                "name": "faultname"
            }, 
            {
                "descr": "Can be used during SOAP header handling to report an error in the response header.", 
                "name": "headerfault"
            }
        ], 
        "path": "php/soapfault.soapfault", 
        "type": "SOAP"
    }, 
    "SoapFault::__construct": {
        "description": "This function is an alias of: SoapFault::SoapFault()", 
        "name": "SoapFault::__construct", 
        "overview": "SoapFault::__construct ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )", 
        "parameters": [], 
        "path": "php/soapfault.construct", 
        "type": "SOAP"
    }, 
    "SoapFault::__toString": {
        "description": "Returns a string representation of the SoapFault.", 
        "name": "SoapFault::__toString", 
        "overview": "public string SoapFault::__toString ( void )", 
        "parameters": [], 
        "path": "php/soapfault.tostring", 
        "type": "SOAP"
    }, 
    "SoapHeader": {
        "description": "", 
        "name": "SoapHeader", 
        "overview": "__construct ( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )", 
        "parameters": [], 
        "path": "php/class.soapheader", 
        "type": "SOAP"
    }, 
    "SoapHeader::SoapHeader": {
        "description": "Constructs a new SoapHeader object.", 
        "name": "SoapHeader::SoapHeader", 
        "overview": "SoapHeader::SoapHeader ( string $namespace , string $name [, mixed $data [, bool $mustunderstand = false [, string $actor ]]] )", 
        "parameters": [
            {
                "descr": "The namespace of the SOAP header element.", 
                "name": "namespace"
            }, 
            {
                "descr": "The name of the SoapHeader object.", 
                "name": "name"
            }, 
            {
                "descr": "A SOAP header's content. It can be a PHP value or a SoapVar object.", 
                "name": "data"
            }, 
            {
                "descr": "Value of the mustUnderstand attribute of the SOAP header element.", 
                "name": "mustUnderstand"
            }, 
            {
                "descr": "Value of the actor attribute of the SOAP header element.", 
                "name": "actor"
            }
        ], 
        "path": "php/soapheader.soapheader", 
        "type": "SOAP"
    }, 
    "SoapHeader::__construct": {
        "description": "This function is an alias of: SoapHeader::SoapHeader()", 
        "name": "SoapHeader::__construct", 
        "overview": "SoapHeader::__construct ( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )", 
        "parameters": [], 
        "path": "php/soapheader.construct", 
        "type": "SOAP"
    }, 
    "SoapParam": {
        "description": "", 
        "name": "SoapParam", 
        "overview": "__construct ( mixed $data , string $name )", 
        "parameters": [], 
        "path": "php/class.soapparam", 
        "type": "SOAP"
    }, 
    "SoapParam::SoapParam": {
        "description": "Constructs a new SoapParam object.", 
        "name": "SoapParam::SoapParam", 
        "overview": "SoapParam::SoapParam ( mixed $data , string $name )", 
        "parameters": [
            {
                "descr": "The data to pass or return. This parameter can be passed directly as PHP value, but in this case it will be named as paramN and the SOAP service may not understand it.", 
                "name": "data"
            }, 
            {
                "descr": "The parameter name.", 
                "name": "name"
            }
        ], 
        "path": "php/soapparam.soapparam", 
        "type": "SOAP"
    }, 
    "SoapParam::__construct": {
        "description": "This function is an alias of: SoapParam::SoapParam()", 
        "name": "SoapParam::__construct", 
        "overview": "SoapParam::__construct ( mixed $data , string $name )", 
        "parameters": [], 
        "path": "php/soapparam.construct", 
        "type": "SOAP"
    }, 
    "SoapServer": {
        "description": "", 
        "name": "SoapServer", 
        "overview": "public void addFunction ( mixed $functions )", 
        "parameters": [], 
        "path": "php/class.soapserver", 
        "type": "SOAP"
    }, 
    "SoapServer::SoapServer": {
        "description": "This constructor allows the creation of SoapServer objects in WSDL or non-WSDL mode.", 
        "name": "SoapServer::SoapServer", 
        "overview": "public SoapServer::SoapServer ( mixed $wsdl [, array $options ] )", 
        "parameters": [
            {
                "descr": "To use the SoapServer in WSDL mode, pass the URI of a WSDL file. ", 
                "name": "wsdl"
            }, 
            {
                "descr": "Allow setting a default SOAP version (soap_version), internal character encoding (encoding), and actor URI (actor). ", 
                "name": "options"
            }
        ], 
        "path": "php/soapserver.soapserver", 
        "type": "SOAP"
    }, 
    "SoapServer::__construct": {
        "description": "This function is an alias of: SoapServer::SoapServer()", 
        "name": "SoapServer::__construct", 
        "overview": "public SoapServer::__construct ( mixed $wsdl [, array $options ] )", 
        "parameters": [], 
        "path": "php/soapserver.construct", 
        "type": "SOAP"
    }, 
    "SoapServer::addFunction": {
        "description": "Exports one or more functions for remote clients", 
        "name": "SoapServer::addFunction", 
        "overview": "public void SoapServer::addFunction ( mixed $functions )", 
        "parameters": [
            {
                "descr": "To export one function, pass the function name into this parameter as a string. ", 
                "name": "functions"
            }
        ], 
        "path": "php/soapserver.addfunction", 
        "type": "SOAP"
    }, 
    "SoapServer::addSoapHeader": {
        "description": "Adds a SOAP header to be returned with the response to the current request.", 
        "name": "SoapServer::addSoapHeader", 
        "overview": "public void SoapServer::addSoapHeader ( SoapHeader $object )", 
        "parameters": [
            {
                "descr": "The header to be returned.", 
                "name": "object"
            }
        ], 
        "path": "php/soapserver.addsoapheader", 
        "type": "SOAP"
    }, 
    "SoapServer::fault": {
        "description": "Sends a response to the client of the current request indicating an error.", 
        "name": "SoapServer::fault", 
        "overview": "public void SoapServer::fault ( string $code , string $string [, string $actor [, string $details [, string $name ]]] )", 
        "parameters": [
            {
                "descr": "The error code to return", 
                "name": "code"
            }, 
            {
                "descr": "A brief description of the error", 
                "name": "string"
            }, 
            {
                "descr": "A string identifying the actor that caused the fault.", 
                "name": "actor"
            }, 
            {
                "descr": "More details of the fault", 
                "name": "details"
            }, 
            {
                "descr": "The name of the fault. This can be used to select a name from a WSDL file.", 
                "name": "name"
            }
        ], 
        "path": "php/soapserver.fault", 
        "type": "SOAP"
    }, 
    "SoapServer::getFunctions": {
        "description": "Returns a list of the defined functions in the SoapServer object. This method returns the list of all functions added by SoapServer::addFunction() or SoapServer::setClass().", 
        "name": "SoapServer::getFunctions", 
        "overview": "public array SoapServer::getFunctions ( void )", 
        "parameters": [], 
        "path": "php/soapserver.getfunctions", 
        "type": "SOAP"
    }, 
    "SoapServer::handle": {
        "description": "Processes a SOAP request, calls necessary functions, and sends a response back.", 
        "name": "SoapServer::handle", 
        "overview": "public void SoapServer::handle ([ string $soap_request ] )", 
        "parameters": [
            {
                "descr": "The SOAP request. If this argument is omitted, the request is assumed to be in the raw POST data of the HTTP request.", 
                "name": "soap_request"
            }
        ], 
        "path": "php/soapserver.handle", 
        "type": "SOAP"
    }, 
    "SoapServer::setClass": {
        "description": "Exports all methods from specified class.", 
        "name": "SoapServer::setClass", 
        "overview": "public void SoapServer::setClass ( string $class_name [, mixed $args [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The name of the exported class.", 
                "name": "class_name"
            }, 
            {
                "descr": "These optional parameters will be passed to the default class constructor during object creation.", 
                "name": "args"
            }
        ], 
        "path": "php/soapserver.setclass", 
        "type": "SOAP"
    }, 
    "SoapServer::setObject": {
        "description": "This sets a specific object as the handler for SOAP requests, rather than just a class as in SoapServer::setClass().", 
        "name": "SoapServer::setObject", 
        "overview": "public void SoapServer::setObject ( object $object )", 
        "parameters": [
            {
                "descr": "The object to handle the requests.", 
                "name": "object"
            }
        ], 
        "path": "php/soapserver.setobject", 
        "type": "SOAP"
    }, 
    "SoapServer::setPersistence": {
        "description": "This function allows changing the persistence state of a SoapServer object between requests. This function allows saving data between requests utilizing PHP sessions. This method only has an affect on a SoapServer after it has exported functions utilizing SoapServer::setClass().", 
        "name": "SoapServer::setPersistence", 
        "overview": "public void SoapServer::setPersistence ( int $mode )", 
        "parameters": [
            {
                "descr": "One of the SOAP_PERSISTENCE_XXX constants. ", 
                "name": "mode"
            }
        ], 
        "path": "php/soapserver.setpersistence", 
        "type": "SOAP"
    }, 
    "SoapVar": {
        "description": "", 
        "name": "SoapVar", 
        "overview": "__construct ( string $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )", 
        "parameters": [], 
        "path": "php/class.soapvar", 
        "type": "SOAP"
    }, 
    "SoapVar::SoapVar": {
        "description": "Constructs a new SoapVar object.", 
        "name": "SoapVar::SoapVar", 
        "overview": "SoapVar::SoapVar ( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )", 
        "parameters": [
            {
                "descr": "The data to pass or return.", 
                "name": "data"
            }, 
            {
                "descr": "The encoding ID, one of the XSD_... ", 
                "name": "encoding"
            }, 
            {
                "descr": "The type name.", 
                "name": "type_name"
            }, 
            {
                "descr": "The type namespace.", 
                "name": "type_namespace"
            }, 
            {
                "descr": "The XML node name.", 
                "name": "node_name"
            }, 
            {
                "descr": "The XML node namespace.", 
                "name": "node_namespace"
            }
        ], 
        "path": "php/soapvar.soapvar", 
        "type": "SOAP"
    }, 
    "SoapVar::__construct": {
        "description": "This function is an alias of: SoapVar::SoapVar()", 
        "name": "SoapVar::__construct", 
        "overview": "SoapVar::__construct ( string $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )", 
        "parameters": [], 
        "path": "php/soapvar.construct", 
        "type": "SOAP"
    }, 
    "SolrClient": {
        "description": "", 
        "name": "SolrClient", 
        "overview": "public SolrUpdateResponse addDocument ( SolrInputDocument $doc [, bool $allowDups = false [, int $commitWithin = 0 ]] )", 
        "parameters": [], 
        "path": "php/class.solrclient", 
        "type": "Solr"
    }, 
    "SolrClient::__construct": {
        "description": "Constructor for the SolrClient object", 
        "name": "SolrClient::__construct", 
        "overview": "public SolrClient::__construct ( array $clientOptions )", 
        "parameters": [
            {
                "descr": "This is an array containing one of the following keys :  - secure          (Boolean value indicating whether or not to connect in secure mode) - hostname        (The hostname for the Solr server) - port            (The port number) - path            (The path to solr) - wt              (The name of the response writer e.g. xml, phpnative) - login           (The username used for HTTP Authentication, if any) - password        (The HTTP Authentication password) - proxy_host      (The hostname for the proxy server, if any) - proxy_port      (The proxy port) - proxy_login     (The proxy username) - proxy_password  (The proxy password) - timeout         (This is maximum time in seconds allowed for the http data transfer operation. Default is 30 seconds) - ssl_cert        (File name to a PEM-formatted file containing the private key + private certificate (concatenated in that order) ) - ssl_key         (File name to a PEM-formatted private key file only) - ssl_keypassword (Password for private key) - ssl_cainfo      (Name of file holding one or more CA certificates to verify peer with) - ssl_capath      (Name of directory holding multiple CA certificates to verify peer with )  Please note the if the ssl_cert file only contains the private certificate, you have to specify a separate ssl_key file  The ssl_keypassword option is required if the ssl_cert or ssl_key options are set.", 
                "name": "clientOptions"
            }
        ], 
        "path": "php/solrclient.construct", 
        "type": "Solr"
    }, 
    "SolrClient::__destruct": {
        "description": "Destructor", 
        "name": "SolrClient::__destruct", 
        "overview": "public void SolrClient::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrclient.destruct", 
        "type": "Solr"
    }, 
    "SolrClient::addDocument": {
        "description": "This method adds a document to the index.", 
        "name": "SolrClient::addDocument", 
        "overview": "public SolrUpdateResponse SolrClient::addDocument ( SolrInputDocument $doc [, bool $allowDups = false [, int $commitWithin = 0 ]] )", 
        "parameters": [
            {
                "descr": "The SolrInputDocument instance.", 
                "name": "doc"
            }, 
            {
                "descr": "If FALSE duplicates will be overwritten.", 
                "name": "allowDups"
            }, 
            {
                "descr": "Number of milliseconds within which to commit this document. ", 
                "name": "commitWithin"
            }
        ], 
        "path": "php/solrclient.adddocument", 
        "type": "Solr"
    }, 
    "SolrClient::addDocuments": {
        "description": "Adds a collection of documents to the index.", 
        "name": "SolrClient::addDocuments", 
        "overview": "public void SolrClient::addDocuments ( array $docs [, bool $allowDups = false [, int $commitWithin = 0 ]] )", 
        "parameters": [
            {
                "descr": "An array containing the collection of SolrInputDocument instances. ", 
                "name": "docs"
            }, 
            {
                "descr": "If FALSE duplicates will be overwritten.", 
                "name": "allowDups"
            }, 
            {
                "descr": "Number of milliseconds within which to commit the documents to the index. ", 
                "name": "commitWithin"
            }
        ], 
        "path": "php/solrclient.adddocuments", 
        "type": "Solr"
    }, 
    "SolrClient::commit": {
        "description": "This method finalizes all add/deletes made to the index.", 
        "name": "SolrClient::commit", 
        "overview": "public SolrUpdateResponse SolrClient::commit ([ int $maxSegments = \"1\" [, bool $waitFlush = true [, bool $waitSearcher = true ]]] )", 
        "parameters": [
            {
                "descr": "Optimizes down to at most this number of segments. ", 
                "name": "maxSegments"
            }, 
            {
                "descr": "Block until index changes are flushed to disk.", 
                "name": "waitFlush"
            }, 
            {
                "descr": "Block until a new searcher is opened and registered as the main query searcher, making the changes visible.", 
                "name": "waitSearcher"
            }
        ], 
        "path": "php/solrclient.commit", 
        "type": "Solr"
    }, 
    "SolrClient::deleteById": {
        "description": "Deletes the document with the specified ID. Where ID is the value of the uniqueKey field declared in the schema", 
        "name": "SolrClient::deleteById", 
        "overview": "public SolrUpdateResponse SolrClient::deleteById ( string $id )", 
        "parameters": [
            {
                "descr": "The value of the uniqueKey field declared in the schema", 
                "name": "id"
            }
        ], 
        "path": "php/solrclient.deletebyid", 
        "type": "Solr"
    }, 
    "SolrClient::deleteByIds": {
        "description": "Deletes a collection of documents with the specified set of ids.", 
        "name": "SolrClient::deleteByIds", 
        "overview": "public SolrUpdateResponse SolrClient::deleteByIds ( array $ids )", 
        "parameters": [
            {
                "descr": "An array of IDs representing the uniqueKey field declared in the schema for each document to be deleted. ", 
                "name": "ids"
            }
        ], 
        "path": "php/solrclient.deletebyids", 
        "type": "Solr"
    }, 
    "SolrClient::deleteByQueries": {
        "description": "Removes all documents matching any of the queries", 
        "name": "SolrClient::deleteByQueries", 
        "overview": "public SolrUpdateResponse SolrClient::deleteByQueries ( array $queries )", 
        "parameters": [
            {
                "descr": "The array of queries. This must be an actual php variable.", 
                "name": "queries"
            }
        ], 
        "path": "php/solrclient.deletebyqueries", 
        "type": "Solr"
    }, 
    "SolrClient::deleteByQuery": {
        "description": "Deletes all documents matching the given query.", 
        "name": "SolrClient::deleteByQuery", 
        "overview": "public SolrUpdateResponse SolrClient::deleteByQuery ( string $query )", 
        "parameters": [
            {
                "descr": "The query", 
                "name": "query"
            }
        ], 
        "path": "php/solrclient.deletebyquery", 
        "type": "Solr"
    }, 
    "SolrClient::getDebug": {
        "description": "Returns the debug data for the last connection attempt", 
        "name": "SolrClient::getDebug", 
        "overview": "public string SolrClient::getDebug ( void )", 
        "parameters": [], 
        "path": "php/solrclient.getdebug", 
        "type": "Solr"
    }, 
    "SolrClient::getOptions": {
        "description": "Returns the client options set internally. Very useful for debugging. The values returned are readonly and can only be set when the object is instantiated.", 
        "name": "SolrClient::getOptions", 
        "overview": "public array SolrClient::getOptions ( void )", 
        "parameters": [], 
        "path": "php/solrclient.getoptions", 
        "type": "Solr"
    }, 
    "SolrClient::optimize": {
        "description": "Defragments the index for faster search performance.", 
        "name": "SolrClient::optimize", 
        "overview": "public SolrUpdateResponse SolrClient::optimize ([ int $maxSegments = \"1\" [, bool $waitFlush = true [, bool $waitSearcher = true ]]] )", 
        "parameters": [
            {
                "descr": "Optimizes down to at most this number of segments. ", 
                "name": "maxSegments"
            }, 
            {
                "descr": "Block until index changes are flushed to disk.", 
                "name": "waitFlush"
            }, 
            {
                "descr": "Block until a new searcher is opened and registered as the main query searcher, making the changes visible.", 
                "name": "waitSearcher"
            }
        ], 
        "path": "php/solrclient.optimize", 
        "type": "Solr"
    }, 
    "SolrClient::ping": {
        "description": "Checks if the Solr server is still alive. Sends a HEAD request to the Apache Solr server.", 
        "name": "SolrClient::ping", 
        "overview": "public SolrPingResponse SolrClient::ping ( void )", 
        "parameters": [], 
        "path": "php/solrclient.ping", 
        "type": "Solr"
    }, 
    "SolrClient::query": {
        "description": "Sends a query to the server.", 
        "name": "SolrClient::query", 
        "overview": "public SolrQueryResponse SolrClient::query ( SolrParams $query )", 
        "parameters": [
            {
                "descr": "A SolrParam object. It is recommended to use SolrQuery for advanced queries.", 
                "name": "query"
            }
        ], 
        "path": "php/solrclient.query", 
        "type": "Solr"
    }, 
    "SolrClient::request": {
        "description": "Sends a raw XML update request to the server", 
        "name": "SolrClient::request", 
        "overview": "public void SolrClient::request ( string $raw_request )", 
        "parameters": [
            {
                "descr": "An XML string with the raw request to the server.", 
                "name": "raw_request"
            }
        ], 
        "path": "php/solrclient.request", 
        "type": "Solr"
    }, 
    "SolrClient::rollback": {
        "description": "Rollbacks all add/deletes made to the index since the last commit. It neither calls any event listeners nor creates a new searcher.", 
        "name": "SolrClient::rollback", 
        "overview": "public SolrUpdateResponse SolrClient::rollback ( void )", 
        "parameters": [], 
        "path": "php/solrclient.rollback", 
        "type": "Solr"
    }, 
    "SolrClient::setResponseWriter": {
        "description": "Sets the response writer used to prepare the response from Solr", 
        "name": "SolrClient::setResponseWriter", 
        "overview": "public void SolrClient::setResponseWriter ( string $responseWriter )", 
        "parameters": [
            {
                "descr": "One of the following : - xml - phpnative", 
                "name": "responseWriter"
            }
        ], 
        "path": "php/solrclient.setresponsewriter", 
        "type": "Solr"
    }, 
    "SolrClient::setServlet": {
        "description": "Changes the specified servlet type to a new value", 
        "name": "SolrClient::setServlet", 
        "overview": "public bool SolrClient::setServlet ( int $type , string $value )", 
        "parameters": [
            {
                "descr": "One of the following : - SolrClient::SEARCH_SERVLET_TYPE - SolrClient::UPDATE_SERVLET_TYPE - SolrClient::THREADS_SERVLET_TYPE - SolrClient::PING_SERVLET_TYPE - SolrClient::TERMS_SERVLET_TYPE", 
                "name": "type"
            }, 
            {
                "descr": "The new value for the servlet", 
                "name": "value"
            }
        ], 
        "path": "php/solrclient.setservlet", 
        "type": "Solr"
    }, 
    "SolrClient::threads": {
        "description": "Checks the threads status", 
        "name": "SolrClient::threads", 
        "overview": "public void SolrClient::threads ( void )", 
        "parameters": [], 
        "path": "php/solrclient.threads", 
        "type": "Solr"
    }, 
    "SolrClientException": {
        "description": "", 
        "name": "SolrClientException", 
        "overview": "public array getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/class.solrclientexception", 
        "type": "Solr"
    }, 
    "SolrClientException::getInternalInfo": {
        "description": "Returns internal information where the Exception was thrown.", 
        "name": "SolrClientException::getInternalInfo", 
        "overview": "public array SolrClientException::getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/solrclientexception.getinternalinfo", 
        "type": "Solr"
    }, 
    "SolrDocument": {
        "description": "", 
        "name": "SolrDocument", 
        "overview": "public bool addField ( string $fieldName , string $fieldValue )", 
        "parameters": [], 
        "path": "php/class.solrdocument", 
        "type": "Solr"
    }, 
    "SolrDocument::__clone": {
        "description": "Creates a copy of a SolrDocument object. Not to be called directly.", 
        "name": "SolrDocument::__clone", 
        "overview": "public void SolrDocument::__clone ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.clone", 
        "type": "Solr"
    }, 
    "SolrDocument::__construct": {
        "description": "Constructor for SolrDocument", 
        "name": "SolrDocument::__construct", 
        "overview": "public SolrDocument::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.construct", 
        "type": "Solr"
    }, 
    "SolrDocument::__destruct": {
        "description": "Destructor for SolrDocument.", 
        "name": "SolrDocument::__destruct", 
        "overview": "public void SolrDocument::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.destruct", 
        "type": "Solr"
    }, 
    "SolrDocument::__get": {
        "description": "Magic method for accessing the field as a property.", 
        "name": "SolrDocument::__get", 
        "overview": "public SolrDocumentField SolrDocument::__get ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.get", 
        "type": "Solr"
    }, 
    "SolrDocument::__isset": {
        "description": "Checks if a field exists", 
        "name": "SolrDocument::__isset", 
        "overview": "public bool SolrDocument::__isset ( string $fieldName )", 
        "parameters": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.isset", 
        "type": "Solr"
    }, 
    "SolrDocument::__set": {
        "description": "Adds another field to the document. Used to set the fields as new properties.", 
        "name": "SolrDocument::__set", 
        "overview": "public bool SolrDocument::__set ( string $fieldName , string $fieldValue )", 
        "parameters": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }, 
            {
                "descr": "Field value.", 
                "name": "fieldValue"
            }
        ], 
        "path": "php/solrdocument.set", 
        "type": "Solr"
    }, 
    "SolrDocument::__unset": {
        "description": "Removes a field from the document when the field is access as an object property.", 
        "name": "SolrDocument::__unset", 
        "overview": "public bool SolrDocument::__unset ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.unset", 
        "type": "Solr"
    }, 
    "SolrDocument::addField": {
        "description": "This method adds a field to the SolrDocument instance.", 
        "name": "SolrDocument::addField", 
        "overview": "public bool SolrDocument::addField ( string $fieldName , string $fieldValue )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "fieldName"
            }, 
            {
                "descr": "The value of the field.", 
                "name": "fieldValue"
            }
        ], 
        "path": "php/solrdocument.addfield", 
        "type": "Solr"
    }, 
    "SolrDocument::clear": {
        "description": "Resets the current object. Discards all the fields and resets the document boost to zero.", 
        "name": "SolrDocument::clear", 
        "overview": "public bool SolrDocument::clear ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.clear", 
        "type": "Solr"
    }, 
    "SolrDocument::current": {
        "description": "Retrieves the current field", 
        "name": "SolrDocument::current", 
        "overview": "public SolrDocumentField SolrDocument::current ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.current", 
        "type": "Solr"
    }, 
    "SolrDocument::deleteField": {
        "description": "Removes a field from the document.", 
        "name": "SolrDocument::deleteField", 
        "overview": "public bool SolrDocument::deleteField ( string $fieldName )", 
        "parameters": [
            {
                "descr": "Name of the field", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.deletefield", 
        "type": "Solr"
    }, 
    "SolrDocument::fieldExists": {
        "description": "Checks if the requested field as a valid fieldname in the document.", 
        "name": "SolrDocument::fieldExists", 
        "overview": "public bool SolrDocument::fieldExists ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.fieldexists", 
        "type": "Solr"
    }, 
    "SolrDocument::getField": {
        "description": "Retrieves a field by name.", 
        "name": "SolrDocument::getField", 
        "overview": "public SolrDocumentField SolrDocument::getField ( string $fieldName )", 
        "parameters": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.getfield", 
        "type": "Solr"
    }, 
    "SolrDocument::getFieldCount": {
        "description": "Returns the number of fields in this document. Multi-value fields are only counted once.", 
        "name": "SolrDocument::getFieldCount", 
        "overview": "public int SolrDocument::getFieldCount ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.getfieldcount", 
        "type": "Solr"
    }, 
    "SolrDocument::getFieldNames": {
        "description": "Returns an array of fields names in the document.", 
        "name": "SolrDocument::getFieldNames", 
        "overview": "public array SolrDocument::getFieldNames ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.getfieldnames", 
        "type": "Solr"
    }, 
    "SolrDocument::getInputDocument": {
        "description": "Returns a SolrInputDocument equivalent of the object. This is useful if one wishes to resubmit/update a document retrieved from a query.", 
        "name": "SolrDocument::getInputDocument", 
        "overview": "public SolrInputDocument SolrDocument::getInputDocument ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.getinputdocument", 
        "type": "Solr"
    }, 
    "SolrDocument::key": {
        "description": "Retrieves the current key.", 
        "name": "SolrDocument::key", 
        "overview": "public string SolrDocument::key ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.key", 
        "type": "Solr"
    }, 
    "SolrDocument::merge": {
        "description": "Merges source to the current SolrDocument.", 
        "name": "SolrDocument::merge", 
        "overview": "public bool SolrDocument::merge ( SolrDocument $sourceDoc [, bool $overwrite = true ] )", 
        "parameters": [
            {
                "descr": "The source document.", 
                "name": "sourceDoc"
            }, 
            {
                "descr": "If this is TRUE then fields with the same name in the destination document will be overwritten.", 
                "name": "overwrite"
            }
        ], 
        "path": "php/solrdocument.merge", 
        "type": "Solr"
    }, 
    "SolrDocument::next": {
        "description": "Moves the internal pointer to the next field.", 
        "name": "SolrDocument::next", 
        "overview": "public void SolrDocument::next ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.next", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetExists": {
        "description": "Checks if a particular field exists. This is used when the object is treated as an array.", 
        "name": "SolrDocument::offsetExists", 
        "overview": "public bool SolrDocument::offsetExists ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.offsetexists", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetGet": {
        "description": "This is used to retrieve the field when the object is treated as an array.", 
        "name": "SolrDocument::offsetGet", 
        "overview": "public SolrDocumentField SolrDocument::offsetGet ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.offsetget", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetSet": {
        "description": "Used when the object is treated as an array to add a field to the document.", 
        "name": "SolrDocument::offsetSet", 
        "overview": "public void SolrDocument::offsetSet ( string $fieldName , string $fieldValue )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }, 
            {
                "descr": "The value for this field.", 
                "name": "fieldValue"
            }
        ], 
        "path": "php/solrdocument.offsetset", 
        "type": "Solr"
    }, 
    "SolrDocument::offsetUnset": {
        "description": "Removes a field from the document.", 
        "name": "SolrDocument::offsetUnset", 
        "overview": "public void SolrDocument::offsetUnset ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrdocument.offsetunset", 
        "type": "Solr"
    }, 
    "SolrDocument::reset": {
        "description": "This is an alias to SolrDocument::clear()", 
        "name": "SolrDocument::reset", 
        "overview": "public bool SolrDocument::reset ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.reset", 
        "type": "Solr"
    }, 
    "SolrDocument::rewind": {
        "description": "Resets the internal pointer to the beginning.", 
        "name": "SolrDocument::rewind", 
        "overview": "public void SolrDocument::rewind ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.rewind", 
        "type": "Solr"
    }, 
    "SolrDocument::serialize": {
        "description": "Used for custom serialization.", 
        "name": "SolrDocument::serialize", 
        "overview": "public string SolrDocument::serialize ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.serialize", 
        "type": "Solr"
    }, 
    "SolrDocument::sort": {
        "description": "", 
        "name": "SolrDocument::sort", 
        "overview": "public bool SolrDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC ] )", 
        "parameters": [
            {
                "descr": "The sort criteria.", 
                "name": "sortOrderBy"
            }, 
            {
                "descr": "The sort direction.", 
                "name": "sortDirection"
            }
        ], 
        "path": "php/solrdocument.sort", 
        "type": "Solr"
    }, 
    "SolrDocument::toArray": {
        "description": "Returns an array representation of the document.", 
        "name": "SolrDocument::toArray", 
        "overview": "public array SolrDocument::toArray ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.toarray", 
        "type": "Solr"
    }, 
    "SolrDocument::unserialize": {
        "description": "Custom serialization of SolrDocument objects", 
        "name": "SolrDocument::unserialize", 
        "overview": "public void SolrDocument::unserialize ( string $serialized )", 
        "parameters": [
            {
                "descr": "An XML representation of the document.", 
                "name": "serialized"
            }
        ], 
        "path": "php/solrdocument.unserialize", 
        "type": "Solr"
    }, 
    "SolrDocument::valid": {
        "description": "Checks if the current position internally is still valid. It is used during foreach operations.", 
        "name": "SolrDocument::valid", 
        "overview": "public bool SolrDocument::valid ( void )", 
        "parameters": [], 
        "path": "php/solrdocument.valid", 
        "type": "Solr"
    }, 
    "SolrDocumentField": {
        "description": "", 
        "name": "SolrDocumentField", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.solrdocumentfield", 
        "type": "Solr"
    }, 
    "SolrDocumentField::__construct": {
        "description": "Constructor.", 
        "name": "SolrDocumentField::__construct", 
        "overview": "public SolrDocumentField::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrdocumentfield.construct", 
        "type": "Solr"
    }, 
    "SolrDocumentField::__destruct": {
        "description": "Destructor.", 
        "name": "SolrDocumentField::__destruct", 
        "overview": "public void SolrDocumentField::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrdocumentfield.destruct", 
        "type": "Solr"
    }, 
    "SolrException": {
        "description": "", 
        "name": "SolrException", 
        "overview": "public array getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/class.solrexception", 
        "type": "Solr"
    }, 
    "SolrException::getInternalInfo": {
        "description": "Returns internal information where the Exception was thrown.", 
        "name": "SolrException::getInternalInfo", 
        "overview": "public array SolrException::getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/solrexception.getinternalinfo", 
        "type": "Solr"
    }, 
    "SolrGenericResponse": {
        "description": "", 
        "name": "SolrGenericResponse", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.solrgenericresponse", 
        "type": "Solr"
    }, 
    "SolrGenericResponse::__construct": {
        "description": "Constructor", 
        "name": "SolrGenericResponse::__construct", 
        "overview": "public SolrGenericResponse::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrgenericresponse.construct", 
        "type": "Solr"
    }, 
    "SolrGenericResponse::__destruct": {
        "description": "Destructor.", 
        "name": "SolrGenericResponse::__destruct", 
        "overview": "public void SolrGenericResponse::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrgenericresponse.destruct", 
        "type": "Solr"
    }, 
    "SolrIllegalArgumentException": {
        "description": "", 
        "name": "SolrIllegalArgumentException", 
        "overview": "public array getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/class.solrillegalargumentexception", 
        "type": "Solr"
    }, 
    "SolrIllegalArgumentException::getInternalInfo": {
        "description": "Returns internal information where the Exception was thrown.", 
        "name": "SolrIllegalArgumentException::getInternalInfo", 
        "overview": "public array SolrIllegalArgumentException::getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/solrillegalargumentexception.getinternalinfo", 
        "type": "Solr"
    }, 
    "SolrIllegalOperationException": {
        "description": "", 
        "name": "SolrIllegalOperationException", 
        "overview": "public array getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/class.solrillegaloperationexception", 
        "type": "Solr"
    }, 
    "SolrIllegalOperationException::getInternalInfo": {
        "description": "Returns internal information where the Exception was thrown.", 
        "name": "SolrIllegalOperationException::getInternalInfo", 
        "overview": "public array SolrIllegalOperationException::getInternalInfo ( void )", 
        "parameters": [], 
        "path": "php/solrillegaloperationexception.getinternalinfo", 
        "type": "Solr"
    }, 
    "SolrInputDocument": {
        "description": "", 
        "name": "SolrInputDocument", 
        "overview": "public bool addField ( string $fieldName , string $fieldValue [, float $fieldBoostValue = 0.0 ] )", 
        "parameters": [], 
        "path": "php/class.solrinputdocument", 
        "type": "Solr"
    }, 
    "SolrInputDocument::__clone": {
        "description": "Should not be called directly. It is used to create a deep copy of a SolrInputDocument.", 
        "name": "SolrInputDocument::__clone", 
        "overview": "public void SolrInputDocument::__clone ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.clone", 
        "type": "Solr"
    }, 
    "SolrInputDocument::__construct": {
        "description": "Constructor.", 
        "name": "SolrInputDocument::__construct", 
        "overview": "public SolrInputDocument::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.construct", 
        "type": "Solr"
    }, 
    "SolrInputDocument::__destruct": {
        "description": "Destructor", 
        "name": "SolrInputDocument::__destruct", 
        "overview": "public void SolrInputDocument::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.destruct", 
        "type": "Solr"
    }, 
    "SolrInputDocument::addField": {
        "description": "For multi-value fields, if a valid boost value is specified, the specified value will be multiplied by the current boost value for this field.", 
        "name": "SolrInputDocument::addField", 
        "overview": "public bool SolrInputDocument::addField ( string $fieldName , string $fieldValue [, float $fieldBoostValue = 0.0 ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "fieldName"
            }, 
            {
                "descr": "The value for the field.", 
                "name": "fieldValue"
            }, 
            {
                "descr": "The index time boost for the field. ", 
                "name": "fieldBoostValue"
            }
        ], 
        "path": "php/solrinputdocument.addfield", 
        "type": "Solr"
    }, 
    "SolrInputDocument::clear": {
        "description": "Resets the document by dropping all the fields and resets the document boost to zero.", 
        "name": "SolrInputDocument::clear", 
        "overview": "public bool SolrInputDocument::clear ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.clear", 
        "type": "Solr"
    }, 
    "SolrInputDocument::deleteField": {
        "description": "Removes a field from the document.", 
        "name": "SolrInputDocument::deleteField", 
        "overview": "public bool SolrInputDocument::deleteField ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.deletefield", 
        "type": "Solr"
    }, 
    "SolrInputDocument::fieldExists": {
        "description": "Checks if a field exists", 
        "name": "SolrInputDocument::fieldExists", 
        "overview": "public bool SolrInputDocument::fieldExists ( string $fieldName )", 
        "parameters": [
            {
                "descr": "Name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.fieldexists", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getBoost": {
        "description": "Retrieves the current boost value for the document.", 
        "name": "SolrInputDocument::getBoost", 
        "overview": "public float SolrInputDocument::getBoost ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.getboost", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getField": {
        "description": "Retrieves a field in the document.", 
        "name": "SolrInputDocument::getField", 
        "overview": "public SolrDocumentField SolrInputDocument::getField ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.getfield", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getFieldBoost": {
        "description": "Retrieves the boost value for a particular field.", 
        "name": "SolrInputDocument::getFieldBoost", 
        "overview": "public float SolrInputDocument::getFieldBoost ( string $fieldName )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }
        ], 
        "path": "php/solrinputdocument.getfieldboost", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getFieldCount": {
        "description": "Returns the number of fields in the document.", 
        "name": "SolrInputDocument::getFieldCount", 
        "overview": "public int SolrInputDocument::getFieldCount ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.getfieldcount", 
        "type": "Solr"
    }, 
    "SolrInputDocument::getFieldNames": {
        "description": "Returns an array containing all the fields in the document.", 
        "name": "SolrInputDocument::getFieldNames", 
        "overview": "public array SolrInputDocument::getFieldNames ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.getfieldnames", 
        "type": "Solr"
    }, 
    "SolrInputDocument::merge": {
        "description": "Merges one input document into another.", 
        "name": "SolrInputDocument::merge", 
        "overview": "public bool SolrInputDocument::merge ( SolrInputDocument $sourceDoc [, bool $overwrite = true ] )", 
        "parameters": [
            {
                "descr": "The source document.", 
                "name": "sourceDoc"
            }, 
            {
                "descr": "If this is TRUE it will replace matching fields in the destination document.", 
                "name": "overwrite"
            }
        ], 
        "path": "php/solrinputdocument.merge", 
        "type": "Solr"
    }, 
    "SolrInputDocument::reset": {
        "description": "This is an alias of SolrInputDocument::clear", 
        "name": "SolrInputDocument::reset", 
        "overview": "public bool SolrInputDocument::reset ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.reset", 
        "type": "Solr"
    }, 
    "SolrInputDocument::setBoost": {
        "description": "Sets the boost value for this document.", 
        "name": "SolrInputDocument::setBoost", 
        "overview": "public bool SolrInputDocument::setBoost ( float $documentBoostValue )", 
        "parameters": [
            {
                "descr": "The index-time boost value for this document.", 
                "name": "documentBoostValue"
            }
        ], 
        "path": "php/solrinputdocument.setboost", 
        "type": "Solr"
    }, 
    "SolrInputDocument::setFieldBoost": {
        "description": "Sets the index-time boost value for a field. This replaces the current boost value for this field.", 
        "name": "SolrInputDocument::setFieldBoost", 
        "overview": "public bool SolrInputDocument::setFieldBoost ( string $fieldName , float $fieldBoostValue )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "fieldName"
            }, 
            {
                "descr": "The index time boost value.", 
                "name": "fieldBoostValue"
            }
        ], 
        "path": "php/solrinputdocument.setfieldboost", 
        "type": "Solr"
    }, 
    "SolrInputDocument::sort": {
        "description": "", 
        "name": "SolrInputDocument::sort", 
        "overview": "public bool SolrInputDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC ] )", 
        "parameters": [
            {
                "descr": "The sort criteria", 
                "name": "sortOrderBy"
            }, 
            {
                "descr": "The sort direction", 
                "name": "sortDirection"
            }
        ], 
        "path": "php/solrinputdocument.sort", 
        "type": "Solr"
    }, 
    "SolrInputDocument::toArray": {
        "description": "Returns an array representation of the input document.", 
        "name": "SolrInputDocument::toArray", 
        "overview": "public array SolrInputDocument::toArray ( void )", 
        "parameters": [], 
        "path": "php/solrinputdocument.toarray", 
        "type": "Solr"
    }, 
    "SolrModifiableParams": {
        "description": "", 
        "name": "SolrModifiableParams", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.solrmodifiableparams", 
        "type": "Solr"
    }, 
    "SolrModifiableParams::__construct": {
        "description": "Constructor", 
        "name": "SolrModifiableParams::__construct", 
        "overview": "public SolrModifiableParams::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrmodifiableparams.construct", 
        "type": "Solr"
    }, 
    "SolrModifiableParams::__destruct": {
        "description": "Destructor", 
        "name": "SolrModifiableParams::__destruct", 
        "overview": "public void SolrModifiableParams::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrmodifiableparams.destruct", 
        "type": "Solr"
    }, 
    "SolrObject": {
        "description": "", 
        "name": "SolrObject", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.solrobject", 
        "type": "Solr"
    }, 
    "SolrObject::__construct": {
        "description": "Creates Solr object.", 
        "name": "SolrObject::__construct", 
        "overview": "public SolrObject::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrobject.construct", 
        "type": "Solr"
    }, 
    "SolrObject::__destruct": {
        "description": "The destructor", 
        "name": "SolrObject::__destruct", 
        "overview": "public void SolrObject::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrobject.destruct", 
        "type": "Solr"
    }, 
    "SolrObject::getPropertyNames": {
        "description": "Returns an array of all the names of the properties", 
        "name": "SolrObject::getPropertyNames", 
        "overview": "public array SolrObject::getPropertyNames ( void )", 
        "parameters": [], 
        "path": "php/solrobject.getpropertynames", 
        "type": "Solr"
    }, 
    "SolrObject::offsetExists": {
        "description": "Checks if the property exists. This is used when the object is treated as an array.", 
        "name": "SolrObject::offsetExists", 
        "overview": "public bool SolrObject::offsetExists ( string $property_name )", 
        "parameters": [
            {
                "descr": "The name of the property.", 
                "name": "property_name"
            }
        ], 
        "path": "php/solrobject.offsetexists", 
        "type": "Solr"
    }, 
    "SolrObject::offsetGet": {
        "description": "Used to get the value of a property. This is used when the object is treated as an array.", 
        "name": "SolrObject::offsetGet", 
        "overview": "public mixed SolrObject::offsetGet ( string $property_name )", 
        "parameters": [
            {
                "descr": "Name of the property.", 
                "name": "property_name"
            }
        ], 
        "path": "php/solrobject.offsetget", 
        "type": "Solr"
    }, 
    "SolrObject::offsetSet": {
        "description": "Sets the value for a property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.", 
        "name": "SolrObject::offsetSet", 
        "overview": "public void SolrObject::offsetSet ( string $property_name , string $property_value )", 
        "parameters": [
            {
                "descr": "The name of the property.", 
                "name": "property_name"
            }, 
            {
                "descr": "The new value.", 
                "name": "property_value"
            }
        ], 
        "path": "php/solrobject.offsetset", 
        "type": "Solr"
    }, 
    "SolrObject::offsetUnset": {
        "description": "Sets the value for the property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.", 
        "name": "SolrObject::offsetUnset", 
        "overview": "public void SolrObject::offsetUnset ( string $property_name )", 
        "parameters": [
            {
                "descr": "The name of the property.", 
                "name": "property_name"
            }
        ], 
        "path": "php/solrobject.offsetunset", 
        "type": "Solr"
    }, 
    "SolrParams": {
        "description": "", 
        "name": "SolrParams", 
        "overview": "final public SolrParams add ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/class.solrparams", 
        "type": "Solr"
    }, 
    "SolrParams::add": {
        "description": "This is an alias for SolrParams::addParam", 
        "name": "SolrParams::add", 
        "overview": "final public SolrParams SolrParams::add ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "The name of the parameter", 
                "name": "name"
            }, 
            {
                "descr": "The value of the parameter", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.add", 
        "type": "Solr"
    }, 
    "SolrParams::addParam": {
        "description": "Adds a parameter to the object. This is used for parameters that can be specified multiple times.", 
        "name": "SolrParams::addParam", 
        "overview": "public SolrParams SolrParams::addParam ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "Name of parameter", 
                "name": "name"
            }, 
            {
                "descr": "Value of parameter", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.addparam", 
        "type": "Solr"
    }, 
    "SolrParams::get": {
        "description": "This is an alias for SolrParams::getParam", 
        "name": "SolrParams::get", 
        "overview": "final public mixed SolrParams::get ( string $param_name )", 
        "parameters": [
            {
                "descr": "Then name of the parameter", 
                "name": "param_name"
            }
        ], 
        "path": "php/solrparams.get", 
        "type": "Solr"
    }, 
    "SolrParams::getParam": {
        "description": "Returns a parameter with name param_name", 
        "name": "SolrParams::getParam", 
        "overview": "final public mixed SolrParams::getParam ([ string $param_name ] )", 
        "parameters": [
            {
                "descr": "The name of the parameter", 
                "name": "param_name"
            }
        ], 
        "path": "php/solrparams.getparam", 
        "type": "Solr"
    }, 
    "SolrParams::getParams": {
        "description": "Returns an array of non URL-encoded parameters", 
        "name": "SolrParams::getParams", 
        "overview": "final public array SolrParams::getParams ( void )", 
        "parameters": [], 
        "path": "php/solrparams.getparams", 
        "type": "Solr"
    }, 
    "SolrParams::getPreparedParams": {
        "description": "Returns an array on URL-encoded parameters", 
        "name": "SolrParams::getPreparedParams", 
        "overview": "final public array SolrParams::getPreparedParams ( void )", 
        "parameters": [], 
        "path": "php/solrparams.getpreparedparams", 
        "type": "Solr"
    }, 
    "SolrParams::serialize": {
        "description": "Used for custom serialization", 
        "name": "SolrParams::serialize", 
        "overview": "final public string SolrParams::serialize ( void )", 
        "parameters": [], 
        "path": "php/solrparams.serialize", 
        "type": "Solr"
    }, 
    "SolrParams::set": {
        "description": "An alias of SolrParams::setParam", 
        "name": "SolrParams::set", 
        "overview": "final public void SolrParams::set ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "Then name of the parameter", 
                "name": "name"
            }, 
            {
                "descr": "The parameter value", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.set", 
        "type": "Solr"
    }, 
    "SolrParams::setParam": {
        "description": "Sets the query parameter to the specified value. This is used for parameters that can only be specified once. Subsequent calls with the same parameter name will override the existing value", 
        "name": "SolrParams::setParam", 
        "overview": "public SolrParams SolrParams::setParam ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "Name of the parameter", 
                "name": "name"
            }, 
            {
                "descr": "Value of the parameter", 
                "name": "value"
            }
        ], 
        "path": "php/solrparams.setparam", 
        "type": "Solr"
    }, 
    "SolrParams::toString": {
        "description": "Returns all the name-value pair parameters in the object", 
        "name": "SolrParams::toString", 
        "overview": "final public string SolrParams::toString ([ bool $url_encode = false ] )", 
        "parameters": [
            {
                "descr": "Whether to return URL-encoded values", 
                "name": "url_encode"
            }
        ], 
        "path": "php/solrparams.tostring", 
        "type": "Solr"
    }, 
    "SolrParams::unserialize": {
        "description": "Used for custom serialization", 
        "name": "SolrParams::unserialize", 
        "overview": "final public void SolrParams::unserialize ( string $serialized )", 
        "parameters": [
            {
                "descr": "The serialized representation of the object", 
                "name": "serialized"
            }
        ], 
        "path": "php/solrparams.unserialize", 
        "type": "Solr"
    }, 
    "SolrPingResponse": {
        "description": "", 
        "name": "SolrPingResponse", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.solrpingresponse", 
        "type": "Solr"
    }, 
    "SolrPingResponse::__construct": {
        "description": "Constructor", 
        "name": "SolrPingResponse::__construct", 
        "overview": "public SolrPingResponse::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrpingresponse.construct", 
        "type": "Solr"
    }, 
    "SolrPingResponse::__destruct": {
        "description": "Destructor", 
        "name": "SolrPingResponse::__destruct", 
        "overview": "public void SolrPingResponse::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrpingresponse.destruct", 
        "type": "Solr"
    }, 
    "SolrPingResponse::getResponse": {
        "description": "Returns the response from the server. This should be empty because the request as a HEAD request.", 
        "name": "SolrPingResponse::getResponse", 
        "overview": "public string SolrPingResponse::getResponse ( void )", 
        "parameters": [], 
        "path": "php/solrpingresponse.getresponse", 
        "type": "Solr"
    }, 
    "SolrQuery": {
        "description": "", 
        "name": "SolrQuery", 
        "overview": "public SolrQuery addFacetDateField ( string $dateField )", 
        "parameters": [], 
        "path": "php/class.solrquery", 
        "type": "Solr"
    }, 
    "SolrQuery::__construct": {
        "description": "Constructor.", 
        "name": "SolrQuery::__construct", 
        "overview": "public SolrQuery::__construct ([ string $q ] )", 
        "parameters": [
            {
                "descr": "Optional search query", 
                "name": "q"
            }
        ], 
        "path": "php/solrquery.construct", 
        "type": "Solr"
    }, 
    "SolrQuery::__destruct": {
        "description": "Destructor", 
        "name": "SolrQuery::__destruct", 
        "overview": "public void SolrQuery::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrquery.destruct", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetDateField": {
        "description": "This method allows you to specify a field which should be treated as a facet.", 
        "name": "SolrQuery::addFacetDateField", 
        "overview": "public SolrQuery SolrQuery::addFacetDateField ( string $dateField )", 
        "parameters": [
            {
                "descr": "The name of the date field.", 
                "name": "dateField"
            }
        ], 
        "path": "php/solrquery.addfacetdatefield", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetDateOther": {
        "description": "Sets the facet.date.other parameter. Accepts an optional field override", 
        "name": "SolrQuery::addFacetDateOther", 
        "overview": "public SolrQuery SolrQuery::addFacetDateOther ( string $value [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The value to use.", 
                "name": "value"
            }, 
            {
                "descr": "The field name for the override.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.addfacetdateother", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetField": {
        "description": "Adds another field to the facet", 
        "name": "SolrQuery::addFacetField", 
        "overview": "public SolrQuery SolrQuery::addFacetField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addfacetfield", 
        "type": "Solr"
    }, 
    "SolrQuery::addFacetQuery": {
        "description": "Adds a facet query", 
        "name": "SolrQuery::addFacetQuery", 
        "overview": "public SolrQuery SolrQuery::addFacetQuery ( string $facetQuery )", 
        "parameters": [
            {
                "descr": "The facet query", 
                "name": "facetQuery"
            }
        ], 
        "path": "php/solrquery.addfacetquery", 
        "type": "Solr"
    }, 
    "SolrQuery::addField": {
        "description": "This method is used to used to specify a set of fields to return, thereby restricting the amount of data returned in the response.", 
        "name": "SolrQuery::addField", 
        "overview": "public SolrQuery SolrQuery::addField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addfield", 
        "type": "Solr"
    }, 
    "SolrQuery::addFilterQuery": {
        "description": "Specifies a filter query", 
        "name": "SolrQuery::addFilterQuery", 
        "overview": "public SolrQuery SolrQuery::addFilterQuery ( string $fq )", 
        "parameters": [
            {
                "descr": "The filter query", 
                "name": "fq"
            }
        ], 
        "path": "php/solrquery.addfilterquery", 
        "type": "Solr"
    }, 
    "SolrQuery::addHighlightField": {
        "description": "Maps to hl.fl. This is used to specify that highlighted snippets should be generated for a particular field", 
        "name": "SolrQuery::addHighlightField", 
        "overview": "public SolrQuery SolrQuery::addHighlightField ( string $field )", 
        "parameters": [
            {
                "descr": "Name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addhighlightfield", 
        "type": "Solr"
    }, 
    "SolrQuery::addMltField": {
        "description": "Maps to mlt.fl. It specifies that a field should be used for similarity.", 
        "name": "SolrQuery::addMltField", 
        "overview": "public SolrQuery SolrQuery::addMltField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addmltfield", 
        "type": "Solr"
    }, 
    "SolrQuery::addMltQueryField": {
        "description": "Maps to mlt.qf. It is used to specify query fields and their boosts", 
        "name": "SolrQuery::addMltQueryField", 
        "overview": "public SolrQuery SolrQuery::addMltQueryField ( string $field , float $boost )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }, 
            {
                "descr": "Its boost value", 
                "name": "boost"
            }
        ], 
        "path": "php/solrquery.addmltqueryfield", 
        "type": "Solr"
    }, 
    "SolrQuery::addSortField": {
        "description": "Used to control how the results should be sorted.", 
        "name": "SolrQuery::addSortField", 
        "overview": "public SolrQuery SolrQuery::addSortField ( string $field [, int $order = SolrQuery::ORDER_DESC ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }, 
            {
                "descr": "The sort direction. This should be either SolrQuery::ORDER_ASC or SolrQuery::ORDER_DESC.", 
                "name": "order"
            }
        ], 
        "path": "php/solrquery.addsortfield", 
        "type": "Solr"
    }, 
    "SolrQuery::addStatsFacet": {
        "description": "Requests a return of sub results for values within the given facet. Maps to the stats.facet field", 
        "name": "SolrQuery::addStatsFacet", 
        "overview": "public SolrQuery SolrQuery::addStatsFacet ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addstatsfacet", 
        "type": "Solr"
    }, 
    "SolrQuery::addStatsField": {
        "description": "Maps to stats.field parameter This methods adds another stats.field parameter.", 
        "name": "SolrQuery::addStatsField", 
        "overview": "public SolrQuery SolrQuery::addStatsField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.addstatsfield", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacet": {
        "description": "Returns the value of the facet parameter.", 
        "name": "SolrQuery::getFacet", 
        "overview": "public bool SolrQuery::getFacet ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getfacet", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateEnd": {
        "description": "Returns the value for the facet.date.end parameter. This method accepts an optional field override", 
        "name": "SolrQuery::getFacetDateEnd", 
        "overview": "public string SolrQuery::getFacetDateEnd ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdateend", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateFields": {
        "description": "Returns all the facet.date fields", 
        "name": "SolrQuery::getFacetDateFields", 
        "overview": "public array SolrQuery::getFacetDateFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getfacetdatefields", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateGap": {
        "description": "Returns the value of the facet.date.gap parameter. It accepts an optional field override", 
        "name": "SolrQuery::getFacetDateGap", 
        "overview": "public string SolrQuery::getFacetDateGap ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdategap", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateHardEnd": {
        "description": "Returns the value of the facet.date.hardend parameter. Accepts an optional field override", 
        "name": "SolrQuery::getFacetDateHardEnd", 
        "overview": "public string SolrQuery::getFacetDateHardEnd ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdatehardend", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateOther": {
        "description": "Returns the value for the facet.date.other parameter. This method accepts an optional field override.", 
        "name": "SolrQuery::getFacetDateOther", 
        "overview": "public array SolrQuery::getFacetDateOther ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdateother", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetDateStart": {
        "description": "Returns the lower bound for the first date range for all date faceting on this field. Accepts an optional field override", 
        "name": "SolrQuery::getFacetDateStart", 
        "overview": "public string SolrQuery::getFacetDateStart ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetdatestart", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetFields": {
        "description": "Returns all the facet fields", 
        "name": "SolrQuery::getFacetFields", 
        "overview": "public array SolrQuery::getFacetFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getfacetfields", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetLimit": {
        "description": "Returns the maximum number of constraint counts that should be returned for the facet fields. This method accepts an optional field override", 
        "name": "SolrQuery::getFacetLimit", 
        "overview": "public int SolrQuery::getFacetLimit ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field to override for", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetlimit", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetMethod": {
        "description": "Returns the value of the facet.method parameter. This accepts an optional field override.", 
        "name": "SolrQuery::getFacetMethod", 
        "overview": "public string SolrQuery::getFacetMethod ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetmethod", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetMinCount": {
        "description": "Returns the minimum counts for facet fields should be included in the response. It accepts an optional field override", 
        "name": "SolrQuery::getFacetMinCount", 
        "overview": "public int SolrQuery::getFacetMinCount ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetmincount", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetMissing": {
        "description": "Returns the current state of the facet.missing parameter. This accepts an optional field override", 
        "name": "SolrQuery::getFacetMissing", 
        "overview": "public bool SolrQuery::getFacetMissing ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetmissing", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetOffset": {
        "description": "Returns an offset into the list of constraints to be used for pagination. Accepts an optional field override", 
        "name": "SolrQuery::getFacetOffset", 
        "overview": "public int SolrQuery::getFacetOffset ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field to override for.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetoffset", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetPrefix": {
        "description": "Returns the facet prefix", 
        "name": "SolrQuery::getFacetPrefix", 
        "overview": "public string SolrQuery::getFacetPrefix ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetprefix", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetQueries": {
        "description": "Returns all the facet queries", 
        "name": "SolrQuery::getFacetQueries", 
        "overview": "public array SolrQuery::getFacetQueries ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getfacetqueries", 
        "type": "Solr"
    }, 
    "SolrQuery::getFacetSort": {
        "description": "Returns an integer (SolrQuery::FACET_SORT_INDEX or SolrQuery::FACET_SORT_COUNT)", 
        "name": "SolrQuery::getFacetSort", 
        "overview": "public int SolrQuery::getFacetSort ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.getfacetsort", 
        "type": "Solr"
    }, 
    "SolrQuery::getFields": {
        "description": "Returns the list of fields that will be returned in the response", 
        "name": "SolrQuery::getFields", 
        "overview": "public array SolrQuery::getFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getfields", 
        "type": "Solr"
    }, 
    "SolrQuery::getFilterQueries": {
        "description": "Returns an array of filter queries. These are queries that can be used to restrict the super set of documents that can be returned, without influencing score", 
        "name": "SolrQuery::getFilterQueries", 
        "overview": "public array SolrQuery::getFilterQueries ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getfilterqueries", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlight": {
        "description": "Returns a boolean indicating whether or not to enable highlighted snippets to be generated in the query response.", 
        "name": "SolrQuery::getHighlight", 
        "overview": "public bool SolrQuery::getHighlight ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlight", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightAlternateField": {
        "description": "Returns the highlight field to use as backup or default. It accepts an optional override.", 
        "name": "SolrQuery::getHighlightAlternateField", 
        "overview": "public string SolrQuery::getHighlightAlternateField ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightalternatefield", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFields": {
        "description": "Returns all the fields that Solr should generate highlighted snippets for", 
        "name": "SolrQuery::getHighlightFields", 
        "overview": "public array SolrQuery::getHighlightFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlightfields", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFormatter": {
        "description": "Returns the formatter for the highlighted output", 
        "name": "SolrQuery::getHighlightFormatter", 
        "overview": "public string SolrQuery::getHighlightFormatter ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightformatter", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFragmenter": {
        "description": "Returns the text snippet generator for highlighted text. Accepts an optional field override.", 
        "name": "SolrQuery::getHighlightFragmenter", 
        "overview": "public string SolrQuery::getHighlightFragmenter ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightfragmenter", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightFragsize": {
        "description": "Returns the number of characters of fragments to consider for highlighting. Zero implies no fragmenting. The entire field should be used.", 
        "name": "SolrQuery::getHighlightFragsize", 
        "overview": "public int SolrQuery::getHighlightFragsize ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightfragsize", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightHighlightMultiTerm": {
        "description": "Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries", 
        "name": "SolrQuery::getHighlightHighlightMultiTerm", 
        "overview": "public bool SolrQuery::getHighlightHighlightMultiTerm ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlighthighlightmultiterm", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightMaxAlternateFieldLength": {
        "description": "Returns the maximum number of characters of the field to return", 
        "name": "SolrQuery::getHighlightMaxAlternateFieldLength", 
        "overview": "public int SolrQuery::getHighlightMaxAlternateFieldLength ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightmaxalternatefieldlength", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightMaxAnalyzedChars": {
        "description": "Returns the maximum number of characters into a document to look for suitable snippets", 
        "name": "SolrQuery::getHighlightMaxAnalyzedChars", 
        "overview": "public int SolrQuery::getHighlightMaxAnalyzedChars ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlightmaxanalyzedchars", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightMergeContiguous": {
        "description": "Returns whether or not the collapse contiguous fragments into a single fragment. Accepts an optional field override.", 
        "name": "SolrQuery::getHighlightMergeContiguous", 
        "overview": "public bool SolrQuery::getHighlightMergeContiguous ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightmergecontiguous", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRegexMaxAnalyzedChars": {
        "description": "Returns the maximum number of characters from a field when using the regex fragmenter", 
        "name": "SolrQuery::getHighlightRegexMaxAnalyzedChars", 
        "overview": "public int SolrQuery::getHighlightRegexMaxAnalyzedChars ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlightregexmaxanalyzedchars", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRegexPattern": {
        "description": "Returns the regular expression used for fragmenting", 
        "name": "SolrQuery::getHighlightRegexPattern", 
        "overview": "public string SolrQuery::getHighlightRegexPattern ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlightregexpattern", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRegexSlop": {
        "description": "Returns the factor by which the regex fragmenter can deviate from the ideal fragment size to accomodate the regular expression", 
        "name": "SolrQuery::getHighlightRegexSlop", 
        "overview": "public float SolrQuery::getHighlightRegexSlop ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlightregexslop", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightRequireFieldMatch": {
        "description": "Returns if a field will only be highlighted if the query matched in this particular field.", 
        "name": "SolrQuery::getHighlightRequireFieldMatch", 
        "overview": "public bool SolrQuery::getHighlightRequireFieldMatch ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlightrequirefieldmatch", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightSimplePost": {
        "description": "Returns the text which appears after a highlighted term. Accepts an optional field override", 
        "name": "SolrQuery::getHighlightSimplePost", 
        "overview": "public string SolrQuery::getHighlightSimplePost ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightsimplepost", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightSimplePre": {
        "description": "Returns the text which appears before a highlighted term. Accepts an optional field override", 
        "name": "SolrQuery::getHighlightSimplePre", 
        "overview": "public string SolrQuery::getHighlightSimplePre ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightsimplepre", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightSnippets": {
        "description": "Returns the maximum number of highlighted snippets to generate per field. Accepts an optional field override", 
        "name": "SolrQuery::getHighlightSnippets", 
        "overview": "public int SolrQuery::getHighlightSnippets ([ string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.gethighlightsnippets", 
        "type": "Solr"
    }, 
    "SolrQuery::getHighlightUsePhraseHighlighter": {
        "description": "Returns whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.", 
        "name": "SolrQuery::getHighlightUsePhraseHighlighter", 
        "overview": "public bool SolrQuery::getHighlightUsePhraseHighlighter ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gethighlightusephrasehighlighter", 
        "type": "Solr"
    }, 
    "SolrQuery::getMlt": {
        "description": "Returns whether or not MoreLikeThis results should be enabled", 
        "name": "SolrQuery::getMlt", 
        "overview": "public bool SolrQuery::getMlt ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmlt", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltBoost": {
        "description": "Returns whether or not the query will be boosted by the interesting term relevance", 
        "name": "SolrQuery::getMltBoost", 
        "overview": "public bool SolrQuery::getMltBoost ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltboost", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltCount": {
        "description": "Returns the number of similar documents to return for each result", 
        "name": "SolrQuery::getMltCount", 
        "overview": "public int SolrQuery::getMltCount ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltcount", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltFields": {
        "description": "Returns all the fields to use for similarity", 
        "name": "SolrQuery::getMltFields", 
        "overview": "public array SolrQuery::getMltFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltfields", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMaxNumQueryTerms": {
        "description": "Returns the maximum number of query terms that will be included in any generated query", 
        "name": "SolrQuery::getMltMaxNumQueryTerms", 
        "overview": "public int SolrQuery::getMltMaxNumQueryTerms ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltmaxnumqueryterms", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMaxNumTokens": {
        "description": "Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support", 
        "name": "SolrQuery::getMltMaxNumTokens", 
        "overview": "public int SolrQuery::getMltMaxNumTokens ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltmaxnumtokens", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMaxWordLength": {
        "description": "Returns the maximum word length above which words will be ignored", 
        "name": "SolrQuery::getMltMaxWordLength", 
        "overview": "public int SolrQuery::getMltMaxWordLength ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltmaxwordlength", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMinDocFrequency": {
        "description": "Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs", 
        "name": "SolrQuery::getMltMinDocFrequency", 
        "overview": "public int SolrQuery::getMltMinDocFrequency ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltmindocfrequency", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMinTermFrequency": {
        "description": "Returns the frequency below which terms will be ignored in the source document", 
        "name": "SolrQuery::getMltMinTermFrequency", 
        "overview": "public int SolrQuery::getMltMinTermFrequency ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltmintermfrequency", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltMinWordLength": {
        "description": "Returns the minimum word length below which words will be ignored", 
        "name": "SolrQuery::getMltMinWordLength", 
        "overview": "public int SolrQuery::getMltMinWordLength ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltminwordlength", 
        "type": "Solr"
    }, 
    "SolrQuery::getMltQueryFields": {
        "description": "Returns the query fields and their boosts", 
        "name": "SolrQuery::getMltQueryFields", 
        "overview": "public array SolrQuery::getMltQueryFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getmltqueryfields", 
        "type": "Solr"
    }, 
    "SolrQuery::getQuery": {
        "description": "Returns the main search query", 
        "name": "SolrQuery::getQuery", 
        "overview": "public string SolrQuery::getQuery ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getquery", 
        "type": "Solr"
    }, 
    "SolrQuery::getRows": {
        "description": "Returns the maximum number of documents from the complete result set to return to the client for every request", 
        "name": "SolrQuery::getRows", 
        "overview": "public int SolrQuery::getRows ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getrows", 
        "type": "Solr"
    }, 
    "SolrQuery::getSortFields": {
        "description": "Returns all the sort fields", 
        "name": "SolrQuery::getSortFields", 
        "overview": "public array SolrQuery::getSortFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getsortfields", 
        "type": "Solr"
    }, 
    "SolrQuery::getStart": {
        "description": "Returns the offset in the complete result set for the queries where the set of returned documents should begin.", 
        "name": "SolrQuery::getStart", 
        "overview": "public int SolrQuery::getStart ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getstart", 
        "type": "Solr"
    }, 
    "SolrQuery::getStats": {
        "description": "Returns whether or not stats is enabled", 
        "name": "SolrQuery::getStats", 
        "overview": "public bool SolrQuery::getStats ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getstats", 
        "type": "Solr"
    }, 
    "SolrQuery::getStatsFacets": {
        "description": "Returns all the stats facets that were set", 
        "name": "SolrQuery::getStatsFacets", 
        "overview": "public array SolrQuery::getStatsFacets ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getstatsfacets", 
        "type": "Solr"
    }, 
    "SolrQuery::getStatsFields": {
        "description": "Returns all the statistics fields", 
        "name": "SolrQuery::getStatsFields", 
        "overview": "public array SolrQuery::getStatsFields ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getstatsfields", 
        "type": "Solr"
    }, 
    "SolrQuery::getTerms": {
        "description": "Returns whether or not the TermsComponent is enabled", 
        "name": "SolrQuery::getTerms", 
        "overview": "public bool SolrQuery::getTerms ( void )", 
        "parameters": [], 
        "path": "php/solrquery.getterms", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsField": {
        "description": "Returns the field from which the terms are retrieved", 
        "name": "SolrQuery::getTermsField", 
        "overview": "public string SolrQuery::getTermsField ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsfield", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsIncludeLowerBound": {
        "description": "Returns whether or not to include the lower bound in the result set", 
        "name": "SolrQuery::getTermsIncludeLowerBound", 
        "overview": "public bool SolrQuery::getTermsIncludeLowerBound ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsincludelowerbound", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsIncludeUpperBound": {
        "description": "Returns whether or not to include the upper bound term in the result set", 
        "name": "SolrQuery::getTermsIncludeUpperBound", 
        "overview": "public bool SolrQuery::getTermsIncludeUpperBound ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsincludeupperbound", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsLimit": {
        "description": "Returns the maximum number of terms Solr should return", 
        "name": "SolrQuery::getTermsLimit", 
        "overview": "public int SolrQuery::getTermsLimit ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermslimit", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsLowerBound": {
        "description": "Returns the term to start at", 
        "name": "SolrQuery::getTermsLowerBound", 
        "overview": "public string SolrQuery::getTermsLowerBound ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermslowerbound", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsMaxCount": {
        "description": "Returns the maximum document frequency", 
        "name": "SolrQuery::getTermsMaxCount", 
        "overview": "public int SolrQuery::getTermsMaxCount ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsmaxcount", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsMinCount": {
        "description": "Returns the minimum document frequency to return in order to be included", 
        "name": "SolrQuery::getTermsMinCount", 
        "overview": "public int SolrQuery::getTermsMinCount ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsmincount", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsPrefix": {
        "description": "Returns the prefix to which matching terms must be restricted. This will restrict matches to only terms that start with the prefix", 
        "name": "SolrQuery::getTermsPrefix", 
        "overview": "public string SolrQuery::getTermsPrefix ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsprefix", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsReturnRaw": {
        "description": "Returns a boolean indicating whether or not to return the raw characters of the indexed term, regardless of if it is human readable", 
        "name": "SolrQuery::getTermsReturnRaw", 
        "overview": "public bool SolrQuery::getTermsReturnRaw ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsreturnraw", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsSort": {
        "description": "SolrQuery::TERMS_SORT_INDEX indicates that the terms are returned by index order. SolrQuery::TERMS_SORT_COUNT implies that the terms are sorted by term frequency (highest count first)", 
        "name": "SolrQuery::getTermsSort", 
        "overview": "public int SolrQuery::getTermsSort ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermssort", 
        "type": "Solr"
    }, 
    "SolrQuery::getTermsUpperBound": {
        "description": "Returns the term to stop at", 
        "name": "SolrQuery::getTermsUpperBound", 
        "overview": "public string SolrQuery::getTermsUpperBound ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettermsupperbound", 
        "type": "Solr"
    }, 
    "SolrQuery::getTimeAllowed": {
        "description": "Returns the time in milliseconds allowed for the query to finish.", 
        "name": "SolrQuery::getTimeAllowed", 
        "overview": "public int SolrQuery::getTimeAllowed ( void )", 
        "parameters": [], 
        "path": "php/solrquery.gettimeallowed", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetDateField": {
        "description": "The name of the field", 
        "name": "SolrQuery::removeFacetDateField", 
        "overview": "public SolrQuery SolrQuery::removeFacetDateField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the date field to remove", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removefacetdatefield", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetDateOther": {
        "description": "Removes one of the facet.date.other parameters", 
        "name": "SolrQuery::removeFacetDateOther", 
        "overview": "public SolrQuery SolrQuery::removeFacetDateOther ( string $value [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The value", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.removefacetdateother", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetField": {
        "description": "Removes one of the facet.date parameters", 
        "name": "SolrQuery::removeFacetField", 
        "overview": "public SolrQuery SolrQuery::removeFacetField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removefacetfield", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFacetQuery": {
        "description": "Removes one of the facet.query parameters.", 
        "name": "SolrQuery::removeFacetQuery", 
        "overview": "public SolrQuery SolrQuery::removeFacetQuery ( string $value )", 
        "parameters": [
            {
                "descr": "The value", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.removefacetquery", 
        "type": "Solr"
    }, 
    "SolrQuery::removeField": {
        "description": "Removes a field from the list of fields", 
        "name": "SolrQuery::removeField", 
        "overview": "public SolrQuery SolrQuery::removeField ( string $field )", 
        "parameters": [
            {
                "descr": "Name of the field.", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removefield", 
        "type": "Solr"
    }, 
    "SolrQuery::removeFilterQuery": {
        "description": "Removes a filter query.", 
        "name": "SolrQuery::removeFilterQuery", 
        "overview": "public SolrQuery SolrQuery::removeFilterQuery ( string $fq )", 
        "parameters": [
            {
                "descr": "The filter query to remove", 
                "name": "fq"
            }
        ], 
        "path": "php/solrquery.removefilterquery", 
        "type": "Solr"
    }, 
    "SolrQuery::removeHighlightField": {
        "description": "Removes one of the fields used for highlighting.", 
        "name": "SolrQuery::removeHighlightField", 
        "overview": "public SolrQuery SolrQuery::removeHighlightField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removehighlightfield", 
        "type": "Solr"
    }, 
    "SolrQuery::removeMltField": {
        "description": "Removes one of the moreLikeThis fields.", 
        "name": "SolrQuery::removeMltField", 
        "overview": "public SolrQuery SolrQuery::removeMltField ( string $field )", 
        "parameters": [
            {
                "descr": "Name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removemltfield", 
        "type": "Solr"
    }, 
    "SolrQuery::removeMltQueryField": {
        "description": "Removes one of the moreLikeThis query fields.", 
        "name": "SolrQuery::removeMltQueryField", 
        "overview": "public SolrQuery SolrQuery::removeMltQueryField ( string $queryField )", 
        "parameters": [
            {
                "descr": "The query field", 
                "name": "queryField"
            }
        ], 
        "path": "php/solrquery.removemltqueryfield", 
        "type": "Solr"
    }, 
    "SolrQuery::removeSortField": {
        "description": "Removes one of the sort fields", 
        "name": "SolrQuery::removeSortField", 
        "overview": "public SolrQuery SolrQuery::removeSortField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removesortfield", 
        "type": "Solr"
    }, 
    "SolrQuery::removeStatsFacet": {
        "description": "Removes one of the stats.facet parameters", 
        "name": "SolrQuery::removeStatsFacet", 
        "overview": "public SolrQuery SolrQuery::removeStatsFacet ( string $value )", 
        "parameters": [
            {
                "descr": "The value", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.removestatsfacet", 
        "type": "Solr"
    }, 
    "SolrQuery::removeStatsField": {
        "description": "Removes one of the stats.field parameters", 
        "name": "SolrQuery::removeStatsField", 
        "overview": "public SolrQuery SolrQuery::removeStatsField ( string $field )", 
        "parameters": [
            {
                "descr": "The name of the field.", 
                "name": "field"
            }
        ], 
        "path": "php/solrquery.removestatsfield", 
        "type": "Solr"
    }, 
    "SolrQuery::setEchoHandler": {
        "description": "If set to true, Solr places the name of the handle used in the response to the client for debugging purposes.", 
        "name": "SolrQuery::setEchoHandler", 
        "overview": "public SolrQuery SolrQuery::setEchoHandler ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setechohandler", 
        "type": "Solr"
    }, 
    "SolrQuery::setEchoParams": {
        "description": "Instructs Solr what kinds of Request parameters should be included in the response for debugging purposes, legal values include:", 
        "name": "SolrQuery::setEchoParams", 
        "overview": "public SolrQuery SolrQuery::setEchoParams ( string $type )", 
        "parameters": [
            {
                "descr": "The type of parameters to include", 
                "name": "type"
            }
        ], 
        "path": "php/solrquery.setechoparams", 
        "type": "Solr"
    }, 
    "SolrQuery::setExplainOther": {
        "description": "Sets the explainOther common query parameter", 
        "name": "SolrQuery::setExplainOther", 
        "overview": "public SolrQuery SolrQuery::setExplainOther ( string $query )", 
        "parameters": [
            {
                "descr": "The Lucene query to identify a set of documents", 
                "name": "query"
            }
        ], 
        "path": "php/solrquery.setexplainother", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacet": {
        "description": "Enables or disables faceting.", 
        "name": "SolrQuery::setFacet", 
        "overview": "public SolrQuery SolrQuery::setFacet ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE enables faceting and FALSE disables it.", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setfacet", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateEnd": {
        "description": "Maps to facet.date.end", 
        "name": "SolrQuery::setFacetDateEnd", 
        "overview": "public SolrQuery SolrQuery::setFacetDateEnd ( string $value [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "See facet.date.end", 
                "name": "value"
            }, 
            {
                "descr": "Name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdateend", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateGap": {
        "description": "Maps to facet.date.gap", 
        "name": "SolrQuery::setFacetDateGap", 
        "overview": "public SolrQuery SolrQuery::setFacetDateGap ( string $value [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "See facet.date.gap", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdategap", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateHardEnd": {
        "description": "Maps to facet.date.hardend", 
        "name": "SolrQuery::setFacetDateHardEnd", 
        "overview": "public SolrQuery SolrQuery::setFacetDateHardEnd ( bool $value [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "See facet.date.hardend", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdatehardend", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetDateStart": {
        "description": "Maps to facet.date.start", 
        "name": "SolrQuery::setFacetDateStart", 
        "overview": "public SolrQuery SolrQuery::setFacetDateStart ( string $value [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "See facet.date.start", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetdatestart", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetEnumCacheMinDefaultFrequency": {
        "description": "Sets the minimum document frequency used for determining term count", 
        "name": "SolrQuery::setFacetEnumCacheMinDefaultFrequency", 
        "overview": "public SolrQuery SolrQuery::setFacetEnumCacheMinDefaultFrequency ( int $frequency [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The minimum frequency", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetenumcachemindefaultfrequency", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetLimit": {
        "description": "Maps to facet.limit. Sets the maximum number of constraint counts that should be returned for the facet fields.", 
        "name": "SolrQuery::setFacetLimit", 
        "overview": "public SolrQuery SolrQuery::setFacetLimit ( int $limit [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The maximum number of constraint counts", 
                "name": "limit"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetlimit", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetMethod": {
        "description": "Specifies the type of algorithm to use when faceting a field. This method accepts optional field override.", 
        "name": "SolrQuery::setFacetMethod", 
        "overview": "public SolrQuery SolrQuery::setFacetMethod ( string $method [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The method to use.", 
                "name": "method"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetmethod", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetMinCount": {
        "description": "Sets the minimum counts for facet fields that should be included in the response", 
        "name": "SolrQuery::setFacetMinCount", 
        "overview": "public SolrQuery SolrQuery::setFacetMinCount ( int $mincount [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The minimum count", 
                "name": "mincount"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetmincount", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetMissing": {
        "description": "Used to indicate that in addition to the Term-based constraints of a facet field, a count of all matching results which have no value for the field should be computed", 
        "name": "SolrQuery::setFacetMissing", 
        "overview": "public SolrQuery SolrQuery::setFacetMissing ( bool $flag [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "TRUE turns this feature on. FALSE disables it.", 
                "name": "flag"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetmissing", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetOffset": {
        "description": "Sets the offset into the list of constraints to allow for pagination.", 
        "name": "SolrQuery::setFacetOffset", 
        "overview": "public SolrQuery SolrQuery::setFacetOffset ( int $offset [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The offset", 
                "name": "offset"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetoffset", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetPrefix": {
        "description": "Specifies a string prefix with which to limits the terms on which to facet.", 
        "name": "SolrQuery::setFacetPrefix", 
        "overview": "public SolrQuery SolrQuery::setFacetPrefix ( string $prefix [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The prefix string", 
                "name": "prefix"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetprefix", 
        "type": "Solr"
    }, 
    "SolrQuery::setFacetSort": {
        "description": "Determines the ordering of the facet field constraints", 
        "name": "SolrQuery::setFacetSort", 
        "overview": "public SolrQuery SolrQuery::setFacetSort ( int $facetSort [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "Use SolrQuery::FACET_SORT_INDEX for sorting by index order or SolrQuery::FACET_SORT_COUNT for sorting by count.", 
                "name": "facetSort"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.setfacetsort", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlight": {
        "description": "Setting it to TRUE enables highlighted snippets to be generated in the query response.", 
        "name": "SolrQuery::setHighlight", 
        "overview": "public SolrQuery SolrQuery::setHighlight ( bool $flag )", 
        "parameters": [
            {
                "descr": "Enable or disable highlighting", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.sethighlight", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightAlternateField": {
        "description": "If a snippet cannot be generated because there were no matching terms, one can specify a field to use as the backup or default summary", 
        "name": "SolrQuery::setHighlightAlternateField", 
        "overview": "public SolrQuery SolrQuery::setHighlightAlternateField ( string $field [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The name of the backup field", 
                "name": "field"
            }, 
            {
                "descr": "The name of the field we are overriding this setting for.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightalternatefield", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightFormatter": {
        "description": "Specify a formatter for the highlight output.", 
        "name": "SolrQuery::setHighlightFormatter", 
        "overview": "public SolrQuery SolrQuery::setHighlightFormatter ( string $formatter [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "Currently the only legal value is \"simple\"", 
                "name": "formatter"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightformatter", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightFragmenter": {
        "description": "Specify a text snippet generator for highlighted text.", 
        "name": "SolrQuery::setHighlightFragmenter", 
        "overview": "public SolrQuery SolrQuery::setHighlightFragmenter ( string $fragmenter [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The standard fragmenter is gap. ", 
                "name": "fragmenter"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightfragmenter", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightFragsize": {
        "description": "Sets the size, in characters, of fragments to consider for highlighting. \"0\" indicates that the whole field value should be used (no fragmenting).", 
        "name": "SolrQuery::setHighlightFragsize", 
        "overview": "public SolrQuery SolrQuery::setHighlightFragsize ( int $size [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The size, in characters, of fragments to consider for highlighting", 
                "name": "size"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightfragsize", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightHighlightMultiTerm": {
        "description": "Use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.", 
        "name": "SolrQuery::setHighlightHighlightMultiTerm", 
        "overview": "public SolrQuery SolrQuery::setHighlightHighlightMultiTerm ( bool $flag )", 
        "parameters": [
            {
                "descr": "Whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.sethighlighthighlightmultiterm", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightMaxAlternateFieldLength": {
        "description": "If SolrQuery::setHighlightAlternateField() was passed the value TRUE, this parameter specifies the maximum number of characters of the field to return", 
        "name": "SolrQuery::setHighlightMaxAlternateFieldLength", 
        "overview": "public SolrQuery SolrQuery::setHighlightMaxAlternateFieldLength ( int $fieldLength [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The length of the field", 
                "name": "fieldLength"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightmaxalternatefieldlength", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightMaxAnalyzedChars": {
        "description": "Specifies the number of characters into a document to look for suitable snippets", 
        "name": "SolrQuery::setHighlightMaxAnalyzedChars", 
        "overview": "public SolrQuery SolrQuery::setHighlightMaxAnalyzedChars ( int $value )", 
        "parameters": [
            {
                "descr": "The number of characters into a document to look for suitable snippets", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.sethighlightmaxanalyzedchars", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightMergeContiguous": {
        "description": "Whether or not to collapse contiguous fragments into a single fragment", 
        "name": "SolrQuery::setHighlightMergeContiguous", 
        "overview": "public SolrQuery SolrQuery::setHighlightMergeContiguous ( bool $flag [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "Whether or not to collapse contiguous fragments into a single fragment", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightmergecontiguous", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRegexMaxAnalyzedChars": {
        "description": "Specify the maximum number of characters to analyze from a field when using the regex fragmenter", 
        "name": "SolrQuery::setHighlightRegexMaxAnalyzedChars", 
        "overview": "public SolrQuery SolrQuery::setHighlightRegexMaxAnalyzedChars ( int $maxAnalyzedChars )", 
        "parameters": [
            {
                "descr": "The maximum number of characters to analyze from a field when using the regex fragmenter", 
                "name": "maxAnalyzedChars"
            }
        ], 
        "path": "php/solrquery.sethighlightregexmaxanalyzedchars", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRegexPattern": {
        "description": "Specifies the regular expression for fragmenting. This could be used to extract sentences", 
        "name": "SolrQuery::setHighlightRegexPattern", 
        "overview": "public SolrQuery SolrQuery::setHighlightRegexPattern ( string $value )", 
        "parameters": [
            {
                "descr": "The regular expression for fragmenting. ", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.sethighlightregexpattern", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRegexSlop": {
        "description": "The factor by which the regex fragmenter can stray from the ideal fragment size ( specfied by SolrQuery::setHighlightFragsize )to accomodate the regular expression", 
        "name": "SolrQuery::setHighlightRegexSlop", 
        "overview": "public SolrQuery SolrQuery::setHighlightRegexSlop ( float $factor )", 
        "parameters": [
            {
                "descr": "The factor by which the regex fragmenter can stray from the ideal fragment size", 
                "name": "factor"
            }
        ], 
        "path": "php/solrquery.sethighlightregexslop", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightRequireFieldMatch": {
        "description": "If TRUE, then a field will only be highlighted if the query matched in this particular field.", 
        "name": "SolrQuery::setHighlightRequireFieldMatch", 
        "overview": "public SolrQuery SolrQuery::setHighlightRequireFieldMatch ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.sethighlightrequirefieldmatch", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightSimplePost": {
        "description": "Sets the text which appears before a highlighted term", 
        "name": "SolrQuery::setHighlightSimplePost", 
        "overview": "public SolrQuery SolrQuery::setHighlightSimplePost ( string $simplePost [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "Sets the text which appears after a highlighted term  The default is </em>", 
                "name": "simplePost"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightsimplepost", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightSimplePre": {
        "description": "Sets the text which appears before a highlighted term", 
        "name": "SolrQuery::setHighlightSimplePre", 
        "overview": "public SolrQuery SolrQuery::setHighlightSimplePre ( string $simplePre [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The text which appears before a highlighted term", 
                "name": "simplePre"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightsimplepre", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightSnippets": {
        "description": "Sets the maximum number of highlighted snippets to generate per field", 
        "name": "SolrQuery::setHighlightSnippets", 
        "overview": "public SolrQuery SolrQuery::setHighlightSnippets ( int $value [, string $field_override ] )", 
        "parameters": [
            {
                "descr": "The maximum number of highlighted snippets to generate per field", 
                "name": "value"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_override"
            }
        ], 
        "path": "php/solrquery.sethighlightsnippets", 
        "type": "Solr"
    }, 
    "SolrQuery::setHighlightUsePhraseHighlighter": {
        "description": "Sets whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document", 
        "name": "SolrQuery::setHighlightUsePhraseHighlighter", 
        "overview": "public SolrQuery SolrQuery::setHighlightUsePhraseHighlighter ( bool $flag )", 
        "parameters": [
            {
                "descr": "Whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.sethighlightusephrasehighlighter", 
        "type": "Solr"
    }, 
    "SolrQuery::setMlt": {
        "description": "Enables or disables moreLikeThis", 
        "name": "SolrQuery::setMlt", 
        "overview": "public SolrQuery SolrQuery::setMlt ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE enables it and FALSE turns it off.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setmlt", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltBoost": {
        "description": "Set if the query will be boosted by the interesting term relevance", 
        "name": "SolrQuery::setMltBoost", 
        "overview": "public SolrQuery SolrQuery::setMltBoost ( bool $flag )", 
        "parameters": [
            {
                "descr": "Sets to TRUE or FALSE", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setmltboost", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltCount": {
        "description": "Set the number of similar documents to return for each result", 
        "name": "SolrQuery::setMltCount", 
        "overview": "public SolrQuery SolrQuery::setMltCount ( int $count )", 
        "parameters": [
            {
                "descr": "The number of similar documents to return for each result", 
                "name": "count"
            }
        ], 
        "path": "php/solrquery.setmltcount", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMaxNumQueryTerms": {
        "description": "Sets the maximum number of query terms that will be included in any generated query.", 
        "name": "SolrQuery::setMltMaxNumQueryTerms", 
        "overview": "public SolrQuery SolrQuery::setMltMaxNumQueryTerms ( int $value )", 
        "parameters": [
            {
                "descr": "The maximum number of query terms that will be included in any generated query", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setmltmaxnumqueryterms", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMaxNumTokens": {
        "description": "Specifies the maximum number of tokens to parse in each example doc field that is not stored with TermVector support.", 
        "name": "SolrQuery::setMltMaxNumTokens", 
        "overview": "public SolrQuery SolrQuery::setMltMaxNumTokens ( int $value )", 
        "parameters": [
            {
                "descr": "The maximum number of tokens to parse", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.setmltmaxnumtokens", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMaxWordLength": {
        "description": "Sets the maximum word length above which words will be ignored.", 
        "name": "SolrQuery::setMltMaxWordLength", 
        "overview": "public SolrQuery SolrQuery::setMltMaxWordLength ( int $maxWordLength )", 
        "parameters": [
            {
                "descr": "The maximum word length above which words will be ignored", 
                "name": "maxWordLength"
            }
        ], 
        "path": "php/solrquery.setmltmaxwordlength", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMinDocFrequency": {
        "description": "The frequency at which words will be ignored which do not occur in at least this many docs.", 
        "name": "SolrQuery::setMltMinDocFrequency", 
        "overview": "public SolrQuery SolrQuery::setMltMinDocFrequency ( int $minDocFrequency )", 
        "parameters": [
            {
                "descr": "Sets the frequency at which words will be ignored which do not occur in at least this many docs.", 
                "name": "minDocFrequency"
            }
        ], 
        "path": "php/solrquery.setmltmindocfrequency", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMinTermFrequency": {
        "description": "Sets the frequency below which terms will be ignored in the source docs", 
        "name": "SolrQuery::setMltMinTermFrequency", 
        "overview": "public SolrQuery SolrQuery::setMltMinTermFrequency ( int $minTermFrequency )", 
        "parameters": [
            {
                "descr": "The frequency below which terms will be ignored in the source docs", 
                "name": "minTermFrequency"
            }
        ], 
        "path": "php/solrquery.setmltmintermfrequency", 
        "type": "Solr"
    }, 
    "SolrQuery::setMltMinWordLength": {
        "description": "Sets the minimum word length below which words will be ignored.", 
        "name": "SolrQuery::setMltMinWordLength", 
        "overview": "public SolrQuery SolrQuery::setMltMinWordLength ( int $minWordLength )", 
        "parameters": [
            {
                "descr": "The minimum word length below which words will be ignored", 
                "name": "minWordLength"
            }
        ], 
        "path": "php/solrquery.setmltminwordlength", 
        "type": "Solr"
    }, 
    "SolrQuery::setOmitHeader": {
        "description": "Exclude the header from the returned results.", 
        "name": "SolrQuery::setOmitHeader", 
        "overview": "public SolrQuery SolrQuery::setOmitHeader ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE excludes the header from the result.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setomitheader", 
        "type": "Solr"
    }, 
    "SolrQuery::setQuery": {
        "description": "Sets the search query.", 
        "name": "SolrQuery::setQuery", 
        "overview": "public SolrQuery SolrQuery::setQuery ( string $query )", 
        "parameters": [
            {
                "descr": "The search query", 
                "name": "query"
            }
        ], 
        "path": "php/solrquery.setquery", 
        "type": "Solr"
    }, 
    "SolrQuery::setRows": {
        "description": "Specifies the maximum number of rows to return in the result", 
        "name": "SolrQuery::setRows", 
        "overview": "public SolrQuery SolrQuery::setRows ( int $rows )", 
        "parameters": [
            {
                "descr": "The maximum number of rows to return", 
                "name": "rows"
            }
        ], 
        "path": "php/solrquery.setrows", 
        "type": "Solr"
    }, 
    "SolrQuery::setShowDebugInfo": {
        "description": "Whether to show debug info", 
        "name": "SolrQuery::setShowDebugInfo", 
        "overview": "public SolrQuery SolrQuery::setShowDebugInfo ( bool $flag )", 
        "parameters": [
            {
                "descr": "Whether to show debug info. TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setshowdebuginfo", 
        "type": "Solr"
    }, 
    "SolrQuery::setStart": {
        "description": "Specifies the number of rows to skip. Useful in pagination of results.", 
        "name": "SolrQuery::setStart", 
        "overview": "public SolrQuery SolrQuery::setStart ( int $start )", 
        "parameters": [
            {
                "descr": "The number of rows to skip.", 
                "name": "start"
            }
        ], 
        "path": "php/solrquery.setstart", 
        "type": "Solr"
    }, 
    "SolrQuery::setStats": {
        "description": "Enables or disables the Stats component.", 
        "name": "SolrQuery::setStats", 
        "overview": "public SolrQuery SolrQuery::setStats ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE turns on the stats component and FALSE disables it.", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setstats", 
        "type": "Solr"
    }, 
    "SolrQuery::setTerms": {
        "description": "Enables or disables the TermsComponent", 
        "name": "SolrQuery::setTerms", 
        "overview": "public SolrQuery SolrQuery::setTerms ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE enables it. FALSE turns it off", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.setterms", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsField": {
        "description": "Sets the name of the field to get the terms from", 
        "name": "SolrQuery::setTermsField", 
        "overview": "public SolrQuery SolrQuery::setTermsField ( string $fieldname )", 
        "parameters": [
            {
                "descr": "The field name", 
                "name": "fieldname"
            }
        ], 
        "path": "php/solrquery.settermsfield", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsIncludeLowerBound": {
        "description": "Include the lower bound term in the result set.", 
        "name": "SolrQuery::setTermsIncludeLowerBound", 
        "overview": "public SolrQuery SolrQuery::setTermsIncludeLowerBound ( bool $flag )", 
        "parameters": [
            {
                "descr": "Include the lower bound term in the result set", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.settermsincludelowerbound", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsIncludeUpperBound": {
        "description": "Include the upper bound term in the result set.", 
        "name": "SolrQuery::setTermsIncludeUpperBound", 
        "overview": "public SolrQuery SolrQuery::setTermsIncludeUpperBound ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE or FALSE", 
                "name": "flag"
            }
        ], 
        "path": "php/solrquery.settermsincludeupperbound", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsLimit": {
        "description": "Sets the maximum number of terms to return", 
        "name": "SolrQuery::setTermsLimit", 
        "overview": "public SolrQuery SolrQuery::setTermsLimit ( int $limit )", 
        "parameters": [
            {
                "descr": "The maximum number of terms to return. ", 
                "name": "limit"
            }
        ], 
        "path": "php/solrquery.settermslimit", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsLowerBound": {
        "description": "Specifies the Term to start from", 
        "name": "SolrQuery::setTermsLowerBound", 
        "overview": "public SolrQuery SolrQuery::setTermsLowerBound ( string $lowerBound )", 
        "parameters": [
            {
                "descr": "The lower bound Term", 
                "name": "lowerBound"
            }
        ], 
        "path": "php/solrquery.settermslowerbound", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsMaxCount": {
        "description": "Sets the maximum document frequency.", 
        "name": "SolrQuery::setTermsMaxCount", 
        "overview": "public SolrQuery SolrQuery::setTermsMaxCount ( int $frequency )", 
        "parameters": [
            {
                "descr": "The maximum document frequency.", 
                "name": "frequency"
            }
        ], 
        "path": "php/solrquery.settermsmaxcount", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsMinCount": {
        "description": "Sets the minimum doc frequency to return in order to be included", 
        "name": "SolrQuery::setTermsMinCount", 
        "overview": "public SolrQuery SolrQuery::setTermsMinCount ( int $frequency )", 
        "parameters": [
            {
                "descr": "The minimum frequency", 
                "name": "frequency"
            }
        ], 
        "path": "php/solrquery.settermsmincount", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsPrefix": {
        "description": "Restrict matches to terms that start with the prefix", 
        "name": "SolrQuery::setTermsPrefix", 
        "overview": "public SolrQuery SolrQuery::setTermsPrefix ( string $prefix )", 
        "parameters": [
            {
                "descr": "Restrict matches to terms that start with the prefix", 
                "name": "prefix"
            }
        ], 
        "path": "php/solrquery.settermsprefix", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsReturnRaw": {
        "description": "If true, return the raw characters of the indexed term, regardless of if it is human readable", 
        "name": "SolrQuery::setTermsReturnRaw", 
        "overview": "public SolrQuery SolrQuery::setTermsReturnRaw ( bool $flag )", 
        "parameters": [
            {
                "descr": "TRUE or FALSE", 
                "name": "value"
            }
        ], 
        "path": "php/solrquery.settermsreturnraw", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsSort": {
        "description": "If SolrQuery::TERMS_SORT_COUNT, sorts the terms by the term frequency (highest count first). If SolrQuery::TERMS_SORT_INDEX, returns the terms in index order", 
        "name": "SolrQuery::setTermsSort", 
        "overview": "public SolrQuery SolrQuery::setTermsSort ( int $sortType )", 
        "parameters": [
            {
                "descr": "SolrQuery::TERMS_SORT_INDEX or SolrQuery::TERMS_SORT_COUNT", 
                "name": "sortType"
            }
        ], 
        "path": "php/solrquery.settermssort", 
        "type": "Solr"
    }, 
    "SolrQuery::setTermsUpperBound": {
        "description": "Sets the term to stop at", 
        "name": "SolrQuery::setTermsUpperBound", 
        "overview": "public SolrQuery SolrQuery::setTermsUpperBound ( string $upperBound )", 
        "parameters": [
            {
                "descr": "The term to stop at", 
                "name": "upperBound"
            }
        ], 
        "path": "php/solrquery.settermsupperbound", 
        "type": "Solr"
    }, 
    "SolrQuery::setTimeAllowed": {
        "description": "The time allowed for a search to finish. This value only applies to the search and not to requests in general. Time is in milliseconds. Values less than or equal to zero implies no time restriction. Partial results may be returned, if there are any.", 
        "name": "SolrQuery::setTimeAllowed", 
        "overview": "public SolrQuery SolrQuery::setTimeAllowed ( int $timeAllowed )", 
        "parameters": [
            {
                "descr": "The time allowed for a search to finish.", 
                "name": "timeAllowed"
            }
        ], 
        "path": "php/solrquery.settimeallowed", 
        "type": "Solr"
    }, 
    "SolrQueryResponse": {
        "description": "", 
        "name": "SolrQueryResponse", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.solrqueryresponse", 
        "type": "Solr"
    }, 
    "SolrQueryResponse::__construct": {
        "description": "Constructor", 
        "name": "SolrQueryResponse::__construct", 
        "overview": "public SolrQueryResponse::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrqueryresponse.construct", 
        "type": "Solr"
    }, 
    "SolrQueryResponse::__destruct": {
        "description": "Destructor.", 
        "name": "SolrQueryResponse::__destruct", 
        "overview": "public void SolrQueryResponse::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrqueryresponse.destruct", 
        "type": "Solr"
    }, 
    "SolrResponse": {
        "description": "", 
        "name": "SolrResponse", 
        "overview": "public string getDigestedResponse ( void )", 
        "parameters": [], 
        "path": "php/class.solrresponse", 
        "type": "Solr"
    }, 
    "SolrResponse::getDigestedResponse": {
        "description": "Returns the XML response as serialized PHP data", 
        "name": "SolrResponse::getDigestedResponse", 
        "overview": "public string SolrResponse::getDigestedResponse ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.getdigestedresponse", 
        "type": "Solr"
    }, 
    "SolrResponse::getHttpStatus": {
        "description": "Returns the HTTP status of the response.", 
        "name": "SolrResponse::getHttpStatus", 
        "overview": "public int SolrResponse::getHttpStatus ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.gethttpstatus", 
        "type": "Solr"
    }, 
    "SolrResponse::getHttpStatusMessage": {
        "description": "Returns more details on the HTTP status.", 
        "name": "SolrResponse::getHttpStatusMessage", 
        "overview": "public string SolrResponse::getHttpStatusMessage ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.gethttpstatusmessage", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawRequest": {
        "description": "Returns the raw request sent to the Solr server.", 
        "name": "SolrResponse::getRawRequest", 
        "overview": "public string SolrResponse::getRawRequest ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.getrawrequest", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawRequestHeaders": {
        "description": "Returns the raw request headers sent to the Solr server.", 
        "name": "SolrResponse::getRawRequestHeaders", 
        "overview": "public string SolrResponse::getRawRequestHeaders ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.getrawrequestheaders", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawResponse": {
        "description": "Returns the raw response from the server.", 
        "name": "SolrResponse::getRawResponse", 
        "overview": "public string SolrResponse::getRawResponse ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.getrawresponse", 
        "type": "Solr"
    }, 
    "SolrResponse::getRawResponseHeaders": {
        "description": "Returns the raw response headers from the server.", 
        "name": "SolrResponse::getRawResponseHeaders", 
        "overview": "public string SolrResponse::getRawResponseHeaders ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.getrawresponseheaders", 
        "type": "Solr"
    }, 
    "SolrResponse::getRequestUrl": {
        "description": "Returns the full URL the request was sent to.", 
        "name": "SolrResponse::getRequestUrl", 
        "overview": "public string SolrResponse::getRequestUrl ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.getrequesturl", 
        "type": "Solr"
    }, 
    "SolrResponse::getResponse": {
        "description": "Returns a SolrObject representing the XML response from the server.", 
        "name": "SolrResponse::getResponse", 
        "overview": "public SolrObject SolrResponse::getResponse ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.getresponse", 
        "type": "Solr"
    }, 
    "SolrResponse::setParseMode": {
        "description": "Sets the parse mode.", 
        "name": "SolrResponse::setParseMode", 
        "overview": "public bool SolrResponse::setParseMode ([ int $parser_mode = 0 ] )", 
        "parameters": [
            {
                "descr": "SolrResponse::PARSE_SOLR_DOC parses documents in SolrDocument instances. ", 
                "name": "parser_mode"
            }
        ], 
        "path": "php/solrresponse.setparsemode", 
        "type": "Solr"
    }, 
    "SolrResponse::success": {
        "description": "Used to check if the request to the server was successful.", 
        "name": "SolrResponse::success", 
        "overview": "public bool SolrResponse::success ( void )", 
        "parameters": [], 
        "path": "php/solrresponse.success", 
        "type": "Solr"
    }, 
    "SolrUpdateResponse": {
        "description": "", 
        "name": "SolrUpdateResponse", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.solrupdateresponse", 
        "type": "Solr"
    }, 
    "SolrUpdateResponse::__construct": {
        "description": "Constructor", 
        "name": "SolrUpdateResponse::__construct", 
        "overview": "public SolrUpdateResponse::__construct ( void )", 
        "parameters": [], 
        "path": "php/solrupdateresponse.construct", 
        "type": "Solr"
    }, 
    "SolrUpdateResponse::__destruct": {
        "description": "Destructor", 
        "name": "SolrUpdateResponse::__destruct", 
        "overview": "public void SolrUpdateResponse::__destruct ( void )", 
        "parameters": [], 
        "path": "php/solrupdateresponse.destruct", 
        "type": "Solr"
    }, 
    "SolrUtils": {
        "description": "", 
        "name": "SolrUtils", 
        "overview": "public static SolrObject digestXmlResponse ( string $xmlresponse [, int $parse_mode = 0 ] )", 
        "parameters": [], 
        "path": "php/class.solrutils", 
        "type": "Solr"
    }, 
    "SolrUtils::digestXmlResponse": {
        "description": "This method parses an response XML string from the Apache Solr server into a SolrObject. It throws a SolrException if there was an error.", 
        "name": "SolrUtils::digestXmlResponse", 
        "overview": "public static SolrObject SolrUtils::digestXmlResponse ( string $xmlresponse [, int $parse_mode = 0 ] )", 
        "parameters": [
            {
                "descr": "The XML response string from the Solr server.", 
                "name": "xmlresponse"
            }, 
            {
                "descr": "Use SolrResponse::PARSE_SOLR_OBJ or SolrResponse::PARSE_SOLR_DOC", 
                "name": "parse_mode"
            }
        ], 
        "path": "php/solrutils.digestxmlresponse", 
        "type": "Solr"
    }, 
    "SolrUtils::escapeQueryChars": {
        "description": "Lucene supports escaping special characters that are part of the query syntax.", 
        "name": "SolrUtils::escapeQueryChars", 
        "overview": "public static string SolrUtils::escapeQueryChars ( string $str )", 
        "parameters": [
            {
                "descr": "This is the query string to be escaped.", 
                "name": "str"
            }
        ], 
        "path": "php/solrutils.escapequerychars", 
        "type": "Solr"
    }, 
    "SolrUtils::getSolrVersion": {
        "description": "Returns the current Solr version.", 
        "name": "SolrUtils::getSolrVersion", 
        "overview": "public static string SolrUtils::getSolrVersion ( void )", 
        "parameters": [], 
        "path": "php/solrutils.getsolrversion", 
        "type": "Solr"
    }, 
    "SolrUtils::queryPhrase": {
        "description": "Prepares a phrase from an unescaped lucene string.", 
        "name": "SolrUtils::queryPhrase", 
        "overview": "public static string SolrUtils::queryPhrase ( string $str )", 
        "parameters": [
            {
                "descr": "The lucene phrase.", 
                "name": "str"
            }
        ], 
        "path": "php/solrutils.queryphrase", 
        "type": "Solr"
    }, 
    "SphinxClient": {
        "description": "", 
        "name": "SphinxClient", 
        "overview": "public int addQuery ( string $query [, string $index = \"*\" [, string $comment = \"\" ]] )", 
        "parameters": [], 
        "path": "php/class.sphinxclient", 
        "type": "Sphinx"
    }, 
    "SphinxClient::__construct": {
        "description": "Creates a new SphinxClient object.", 
        "name": "SphinxClient::__construct", 
        "overview": "public SphinxClient::__construct ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.construct", 
        "type": "Sphinx"
    }, 
    "SphinxClient::addQuery": {
        "description": "Adds query with the current settings to multi-query batch. This method doesn't affect current settings (sorting, filtering, grouping etc.) in any way.", 
        "name": "SphinxClient::addQuery", 
        "overview": "public int SphinxClient::addQuery ( string $query [, string $index = \"*\" [, string $comment = \"\" ]] )", 
        "parameters": [
            {
                "descr": "Query string.", 
                "name": "query"
            }, 
            {
                "descr": "An index name (or names).", 
                "name": "index"
            }
        ], 
        "path": "php/sphinxclient.addquery", 
        "type": "Sphinx"
    }, 
    "SphinxClient::buildExcerpts": {
        "description": "Connects to searchd, requests it to generate excerpts (snippets) from the given documents, and returns the results.", 
        "name": "SphinxClient::buildExcerpts", 
        "overview": "public array SphinxClient::buildExcerpts ( array $docs , string $index , string $words [, array $opts ] )", 
        "parameters": [
            {
                "descr": "Array of strings with documents' contents.", 
                "name": "docs"
            }, 
            {
                "descr": "Index name.", 
                "name": "index"
            }, 
            {
                "descr": "Keywords to highlight.", 
                "name": "words"
            }, 
            {
                "descr": "Associative array of additional highlighting options (see below).", 
                "name": "opts"
            }
        ], 
        "path": "php/sphinxclient.buildexcerpts", 
        "type": "Sphinx"
    }, 
    "SphinxClient::buildKeywords": {
        "description": "Extracts keywords from query using tokenizer settings for the given index, optionally with per-keyword occurrence statistics.", 
        "name": "SphinxClient::buildKeywords", 
        "overview": "public array SphinxClient::buildKeywords ( string $query , string $index , bool $hits )", 
        "parameters": [
            {
                "descr": "A query to extract keywords from.", 
                "name": "query"
            }, 
            {
                "descr": "An index to get tokenizing settings and keyword occurrence statistics from.", 
                "name": "index"
            }, 
            {
                "descr": "A boolean flag to enable/disable keyword statistics generation.", 
                "name": "hits"
            }
        ], 
        "path": "php/sphinxclient.buildkeywords", 
        "type": "Sphinx"
    }, 
    "SphinxClient::close": {
        "description": "Closes previously opened persistent connection.", 
        "name": "SphinxClient::close", 
        "overview": "public bool SphinxClient::close ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.close", 
        "type": "Sphinx"
    }, 
    "SphinxClient::escapeString": {
        "description": "Escapes characters that are treated as special operators by the query language parser.", 
        "name": "SphinxClient::escapeString", 
        "overview": "public string SphinxClient::escapeString ( string $string )", 
        "parameters": [
            {
                "descr": "String to escape.", 
                "name": "string"
            }
        ], 
        "path": "php/sphinxclient.escapestring", 
        "type": "Sphinx"
    }, 
    "SphinxClient::getLastError": {
        "description": "Returns string with the last error message. If there were no errors during the previous API call, empty string is returned. This method doesn't reset the error message, so you can safely call it several times.", 
        "name": "SphinxClient::getLastError", 
        "overview": "public string SphinxClient::getLastError ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.getlasterror", 
        "type": "Sphinx"
    }, 
    "SphinxClient::getLastWarning": {
        "description": "Returns last warning message. If there were no warnings during the previous API call, empty string is returned. This method doesn't reset the warning, so you can safely call it several times.", 
        "name": "SphinxClient::getLastWarning", 
        "overview": "public string SphinxClient::getLastWarning ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.getlastwarning", 
        "type": "Sphinx"
    }, 
    "SphinxClient::open": {
        "description": "Opens persistent connection to the server.", 
        "name": "SphinxClient::open", 
        "overview": "public bool SphinxClient::open ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.open", 
        "type": "Sphinx"
    }, 
    "SphinxClient::query": {
        "description": "Connects to searchd server, runs the given search query with the current settings, obtains and returns the result set.", 
        "name": "SphinxClient::query", 
        "overview": "public array SphinxClient::query ( string $query [, string $index = \"*\" [, string $comment = \"\" ]] )", 
        "parameters": [
            {
                "descr": "Query string.", 
                "name": "query"
            }, 
            {
                "descr": "An index name (or names).", 
                "name": "index"
            }
        ], 
        "path": "php/sphinxclient.query", 
        "type": "Sphinx"
    }, 
    "SphinxClient::resetFilters": {
        "description": "Clears all currently set filters. This call is normally required when using multi-queries. You might want to set different filters for different queries in the batch. To do that, you should call SphinxClient::resetFilters() and add new filters using the respective calls.", 
        "name": "SphinxClient::resetFilters", 
        "overview": "public void SphinxClient::resetFilters ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.resetfilters", 
        "type": "Sphinx"
    }, 
    "SphinxClient::resetGroupBy": {
        "description": "Clears all currently group-by settings, and disables group-by. This call is normally required only when using multi-queries.", 
        "name": "SphinxClient::resetGroupBy", 
        "overview": "public void SphinxClient::resetGroupBy ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.resetgroupby", 
        "type": "Sphinx"
    }, 
    "SphinxClient::runQueries": {
        "description": "Connects to searchd, runs a batch of all queries added using SphinxClient::addQuery, obtains and returns the result sets.", 
        "name": "SphinxClient::runQueries", 
        "overview": "public array SphinxClient::runQueries ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.runqueries", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setArrayResult": {
        "description": "Controls the format of search results set arrays (whether matches should be returned as an array or a hash).", 
        "name": "SphinxClient::setArrayResult", 
        "overview": "public bool SphinxClient::setArrayResult ( bool $array_result = false )", 
        "parameters": [
            {
                "descr": "If array_result is FALSE, matches are returned as a hash with document IDs as keys, and other information (weight, attributes) as values. ", 
                "name": "array_result"
            }
        ], 
        "path": "php/sphinxclient.setarrayresult", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setConnectTimeout": {
        "description": "Sets connection timeout (in seconds) for searchd connection.", 
        "name": "SphinxClient::setConnectTimeout", 
        "overview": "public bool SphinxClient::setConnectTimeout ( float $timeout )", 
        "parameters": [
            {
                "descr": "Timeout in seconds.", 
                "name": "timeout"
            }
        ], 
        "path": "php/sphinxclient.setconnecttimeout", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFieldWeights": {
        "description": "Binds per-field weights by name.", 
        "name": "SphinxClient::setFieldWeights", 
        "overview": "public bool SphinxClient::setFieldWeights ( array $weights )", 
        "parameters": [
            {
                "descr": "Associative array of field names and field weights.", 
                "name": "weights"
            }
        ], 
        "path": "php/sphinxclient.setfieldweights", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFilter": {
        "description": "Adds new integer values set filter to the existing list of filters.", 
        "name": "SphinxClient::setFilter", 
        "overview": "public bool SphinxClient::setFilter ( string $attribute , array $values [, bool $exclude = false ] )", 
        "parameters": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Plain array of integer values.", 
                "name": "values"
            }, 
            {
                "descr": "If set to TRUE, matching documents are excluded from the result set.", 
                "name": "exclude"
            }
        ], 
        "path": "php/sphinxclient.setfilter", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFilterFloatRange": {
        "description": "Adds new float range filter to the existing list of filters. Only those documents which have attribute value stored in the index between min and max (including values that are exactly equal to min or max) will be matched (or rejected, if exclude is TRUE).", 
        "name": "SphinxClient::setFilterFloatRange", 
        "overview": "public bool SphinxClient::setFilterFloatRange ( string $attribute , float $min , float $max [, bool $exclude = false ] )", 
        "parameters": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Minimum value.", 
                "name": "min"
            }, 
            {
                "descr": "Maximum value.", 
                "name": "max"
            }, 
            {
                "descr": "If set to TRUE, matching documents are excluded from the result set.", 
                "name": "exclude"
            }
        ], 
        "path": "php/sphinxclient.setfilterfloatrange", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setFilterRange": {
        "description": "Adds new integer range filter to the existing list of filters. Only those documents which have attribute value stored in the index between min and max (including values that are exactly equal to min or max) will be matched (or rejected, if exclude is TRUE).", 
        "name": "SphinxClient::setFilterRange", 
        "overview": "public bool SphinxClient::setFilterRange ( string $attribute , int $min , int $max [, bool $exclude = false ] )", 
        "parameters": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Minimum value.", 
                "name": "min"
            }, 
            {
                "descr": "Maximum value.", 
                "name": "max"
            }, 
            {
                "descr": "If set to TRUE, matching documents are excluded from the result set.", 
                "name": "exclude"
            }
        ], 
        "path": "php/sphinxclient.setfilterrange", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setGeoAnchor": {
        "description": "Sets anchor point for a geosphere distance (geodistance) calculations and enables them.", 
        "name": "SphinxClient::setGeoAnchor", 
        "overview": "public bool SphinxClient::setGeoAnchor ( string $attrlat , string $attrlong , float $latitude , float $longitude )", 
        "parameters": [
            {
                "descr": "Name of a latitude attribute.", 
                "name": "attrlat"
            }, 
            {
                "descr": "Name of a longitude attribute.", 
                "name": "attrlong"
            }, 
            {
                "descr": "Anchor latitude in radians.", 
                "name": "latitude"
            }, 
            {
                "descr": "Anchor longitude in radians.", 
                "name": "longitude"
            }
        ], 
        "path": "php/sphinxclient.setgeoanchor", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setGroupBy": {
        "description": "Sets grouping attribute, function, and group sorting mode, and enables grouping.", 
        "name": "SphinxClient::setGroupBy", 
        "overview": "public bool SphinxClient::setGroupBy ( string $attribute , int $func [, string $groupsort = \"@group desc\" ] )", 
        "parameters": [
            {
                "descr": "A string containing group-by attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "Constant, which sets a function applied to the attribute value in order to compute group-by key.", 
                "name": "func"
            }, 
            {
                "descr": "An optional clause controlling how the groups are sorted.", 
                "name": "groupsort"
            }
        ], 
        "path": "php/sphinxclient.setgroupby", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setGroupDistinct": {
        "description": "Sets attribute name for per-group distinct values count calculations. Only available for grouping queries. For each group, all values of attribute will be stored, then the amount of distinct values will be calculated and returned to the client. This feature is similar to COUNT(DISTINCT) clause in SQL.", 
        "name": "SphinxClient::setGroupDistinct", 
        "overview": "public bool SphinxClient::setGroupDistinct ( string $attribute )", 
        "parameters": [
            {
                "descr": "A string containing group-by attribute name.", 
                "name": "attribute"
            }
        ], 
        "path": "php/sphinxclient.setgroupdistinct", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setIDRange": {
        "description": "Sets an accepted range of document IDs. Default range is from 0 to 0, i.e. no limit. Only those records that have document ID between min and max (including IDs exactly equal to min or max) will be matched.", 
        "name": "SphinxClient::setIDRange", 
        "overview": "public bool SphinxClient::setIDRange ( int $min , int $max )", 
        "parameters": [
            {
                "descr": "Minimum ID value.", 
                "name": "min"
            }, 
            {
                "descr": "Maximum ID value.", 
                "name": "max"
            }
        ], 
        "path": "php/sphinxclient.setidrange", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setIndexWeights": {
        "description": "Sets per-index weights and enables weighted summing of match weights across different indexes.", 
        "name": "SphinxClient::setIndexWeights", 
        "overview": "public bool SphinxClient::setIndexWeights ( array $weights )", 
        "parameters": [
            {
                "descr": "An associative array mapping string index names to integer weights. ", 
                "name": "weights"
            }
        ], 
        "path": "php/sphinxclient.setindexweights", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setLimits": {
        "description": "Sets offset into server-side result set and amount of matches to return to client starting from that offset (limit). Can additionally control maximum server-side result set size for current query (max_matches) and the threshold amount of matches to stop searching at (cutoff).", 
        "name": "SphinxClient::setLimits", 
        "overview": "public bool SphinxClient::setLimits ( int $offset , int $limit [, int $max_matches = 0 [, int $cutoff = 0 ]] )", 
        "parameters": [
            {
                "descr": "Result set offset.", 
                "name": "offset"
            }, 
            {
                "descr": "Amount of matches to return.", 
                "name": "limit"
            }, 
            {
                "descr": "Controls how much matches searchd will keep in RAM while searching.", 
                "name": "max_matches"
            }, 
            {
                "descr": "Used for advanced performance control. ", 
                "name": "cutoff"
            }
        ], 
        "path": "php/sphinxclient.setlimits", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setMatchMode": {
        "description": "Sets full-text query matching mode. mode is one of the constants listed below.", 
        "name": "SphinxClient::setMatchMode", 
        "overview": "public bool SphinxClient::setMatchMode ( int $mode )", 
        "parameters": [
            {
                "descr": "Matching mode.", 
                "name": "mode"
            }
        ], 
        "path": "php/sphinxclient.setmatchmode", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setMaxQueryTime": {
        "description": "Sets maximum search query time.", 
        "name": "SphinxClient::setMaxQueryTime", 
        "overview": "public bool SphinxClient::setMaxQueryTime ( int $qtime )", 
        "parameters": [
            {
                "descr": "Maximum query time, in milliseconds. ", 
                "name": "qtime"
            }
        ], 
        "path": "php/sphinxclient.setmaxquerytime", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setOverride": {
        "description": "Sets temporary (per-query) per-document attribute value overrides. Override feature lets you \"temporary\" update attribute values for some documents within a single query, leaving all other queries unaffected. This might be useful for personalized data", 
        "name": "SphinxClient::setOverride", 
        "overview": "public bool SphinxClient::setOverride ( string $attribute , int $type , array $values )", 
        "parameters": [
            {
                "descr": "An attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "An attribute type. Only supports scalar attributes.", 
                "name": "type"
            }, 
            {
                "descr": "Array of attribute values that maps document IDs to overridden attribute values.", 
                "name": "values"
            }
        ], 
        "path": "php/sphinxclient.setoverride", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setRankingMode": {
        "description": "Sets ranking mode. Only available in SPH_MATCH_EXTENDED2 matching mode.", 
        "name": "SphinxClient::setRankingMode", 
        "overview": "public bool SphinxClient::setRankingMode ( int $ranker )", 
        "parameters": [
            {
                "descr": "Ranking mode.", 
                "name": "ranker"
            }
        ], 
        "path": "php/sphinxclient.setrankingmode", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setRetries": {
        "description": "Sets distributed retry count and delay.", 
        "name": "SphinxClient::setRetries", 
        "overview": "public bool SphinxClient::setRetries ( int $count [, int $delay = 0 ] )", 
        "parameters": [
            {
                "descr": "Number of retries.", 
                "name": "count"
            }, 
            {
                "descr": "Delay between retries, in milliseconds.", 
                "name": "delay"
            }
        ], 
        "path": "php/sphinxclient.setretries", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setSelect": {
        "description": "Sets the select clause, listing specific attributes to fetch, and expressions to compute and fetch.", 
        "name": "SphinxClient::setSelect", 
        "overview": "public bool SphinxClient::setSelect ( string $clause )", 
        "parameters": [
            {
                "descr": "SQL-like clause.", 
                "name": "clause"
            }
        ], 
        "path": "php/sphinxclient.setselect", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setServer": {
        "description": "Sets searchd host name and TCP port. All subsequent requests will use the new host and port settings. Default host and port are 'localhost' and 3312, respectively.", 
        "name": "SphinxClient::setServer", 
        "overview": "public bool SphinxClient::setServer ( string $server , int $port )", 
        "parameters": [
            {
                "descr": "IP or hostname.", 
                "name": "server"
            }, 
            {
                "descr": "Port number.", 
                "name": "port"
            }
        ], 
        "path": "php/sphinxclient.setserver", 
        "type": "Sphinx"
    }, 
    "SphinxClient::setSortMode": {
        "description": "Sets matches sorting mode. See available modes below.", 
        "name": "SphinxClient::setSortMode", 
        "overview": "public bool SphinxClient::setSortMode ( int $mode [, string $sortby ] )", 
        "parameters": [
            {
                "descr": "Sorting mode.", 
                "name": "mode"
            }
        ], 
        "path": "php/sphinxclient.setsortmode", 
        "type": "Sphinx"
    }, 
    "SphinxClient::status": {
        "description": "Queries searchd status, and returns an array of status variable name and value pairs.", 
        "name": "SphinxClient::status", 
        "overview": "public array SphinxClient::status ( void )", 
        "parameters": [], 
        "path": "php/sphinxclient.status", 
        "type": "Sphinx"
    }, 
    "SphinxClient::updateAttributes": {
        "description": "Instantly updates given attribute values in given documents.", 
        "name": "SphinxClient::updateAttributes", 
        "overview": "public int SphinxClient::updateAttributes ( string $index , array $attributes , array $values [, bool $mva = false ] )", 
        "parameters": [
            {
                "descr": "Name of the index (or indexes) to be updated.", 
                "name": "index"
            }, 
            {
                "descr": "Array of attribute names, listing attributes that are updated.", 
                "name": "attributes"
            }, 
            {
                "descr": "Associative array containing document IDs as keys and array of attribute values as values.", 
                "name": "values"
            }
        ], 
        "path": "php/sphinxclient.updateattributes", 
        "type": "Sphinx"
    }, 
    "SplBool": {
        "description": "", 
        "name": "SplBool", 
        "overview": "public array SplEnum::getConstList ([ bool $include_default = false ] )", 
        "parameters": [], 
        "path": "php/class.splbool", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList": {
        "description": "", 
        "name": "SplDoublyLinkedList", 
        "overview": "public mixed bottom ( void )", 
        "parameters": [], 
        "path": "php/class.spldoublylinkedlist", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::bottom": {
        "description": "", 
        "name": "SplDoublyLinkedList::bottom", 
        "overview": "public mixed SplDoublyLinkedList::bottom ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.bottom", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::count": {
        "description": "", 
        "name": "SplDoublyLinkedList::count", 
        "overview": "public int SplDoublyLinkedList::count ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.count", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::current": {
        "description": "Get the current doubly linked list node.", 
        "name": "SplDoublyLinkedList::current", 
        "overview": "public mixed SplDoublyLinkedList::current ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.current", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::getIteratorMode": {
        "description": "", 
        "name": "SplDoublyLinkedList::getIteratorMode", 
        "overview": "public int SplDoublyLinkedList::getIteratorMode ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.getiteratormode", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::isEmpty": {
        "description": "", 
        "name": "SplDoublyLinkedList::isEmpty", 
        "overview": "public bool SplDoublyLinkedList::isEmpty ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.isempty", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::key": {
        "description": "This function returns the current node index", 
        "name": "SplDoublyLinkedList::key", 
        "overview": "public mixed SplDoublyLinkedList::key ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.key", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::next": {
        "description": "Move the iterator to the next node.", 
        "name": "SplDoublyLinkedList::next", 
        "overview": "public void SplDoublyLinkedList::next ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.next", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetExists": {
        "description": "", 
        "name": "SplDoublyLinkedList::offsetExists", 
        "overview": "public bool SplDoublyLinkedList::offsetExists ( mixed $index )", 
        "parameters": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetexists", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetGet": {
        "description": "", 
        "name": "SplDoublyLinkedList::offsetGet", 
        "overview": "public mixed SplDoublyLinkedList::offsetGet ( mixed $index )", 
        "parameters": [
            {
                "descr": "The index with the value.", 
                "name": "index"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetget", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetSet": {
        "description": "Sets the value at the specified index to newval.", 
        "name": "SplDoublyLinkedList::offsetSet", 
        "overview": "public void SplDoublyLinkedList::offsetSet ( mixed $index , mixed $newval )", 
        "parameters": [
            {
                "descr": "The index being set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetset", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::offsetUnset": {
        "description": "Unsets the value at the specified index.", 
        "name": "SplDoublyLinkedList::offsetUnset", 
        "overview": "public void SplDoublyLinkedList::offsetUnset ( mixed $index )", 
        "parameters": [
            {
                "descr": "The index being unset.", 
                "name": "index"
            }
        ], 
        "path": "php/spldoublylinkedlist.offsetunset", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::pop": {
        "description": "", 
        "name": "SplDoublyLinkedList::pop", 
        "overview": "public mixed SplDoublyLinkedList::pop ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.pop", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::prev": {
        "description": "Move the iterator to the previous node.", 
        "name": "SplDoublyLinkedList::prev", 
        "overview": "public void SplDoublyLinkedList::prev ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.prev", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::push": {
        "description": "Pushes value at the end of the doubly linked list.", 
        "name": "SplDoublyLinkedList::push", 
        "overview": "public void SplDoublyLinkedList::push ( mixed $value )", 
        "parameters": [
            {
                "descr": "The value to push.", 
                "name": "value"
            }
        ], 
        "path": "php/spldoublylinkedlist.push", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::rewind": {
        "description": "This rewinds the iterator to the beginning.", 
        "name": "SplDoublyLinkedList::rewind", 
        "overview": "public void SplDoublyLinkedList::rewind ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.rewind", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::serialize": {
        "description": "Serializes the storage.", 
        "name": "SplDoublyLinkedList::serialize", 
        "overview": "public string SplDoublyLinkedList::serialize ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.serialize", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::setIteratorMode": {
        "description": "", 
        "name": "SplDoublyLinkedList::setIteratorMode", 
        "overview": "public void SplDoublyLinkedList::setIteratorMode ( int $mode )", 
        "parameters": [
            {
                "descr": "There are two orthogonal sets of modes that can be set:   The direction of the iteration (either one or the other): SplDoublyLinkedList::IT_MODE_LIFO (Stack style) SplDoublyLinkedList::IT_MODE_FIFO (Queue style)   The behavior of the iterator (either one or the other): SplDoublyLinkedList::IT_MODE_DELETE (Elements are deleted by the iterator) SplDoublyLinkedList::IT_MODE_KEEP (Elements are traversed by the iterator)   The default mode is: SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_KEEP", 
                "name": "mode"
            }
        ], 
        "path": "php/spldoublylinkedlist.setiteratormode", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::shift": {
        "description": "", 
        "name": "SplDoublyLinkedList::shift", 
        "overview": "public mixed SplDoublyLinkedList::shift ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.shift", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::top": {
        "description": "", 
        "name": "SplDoublyLinkedList::top", 
        "overview": "public mixed SplDoublyLinkedList::top ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.top", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::unserialize": {
        "description": "Unserializes the storage, from SplDoublyLinkedList::serialize().", 
        "name": "SplDoublyLinkedList::unserialize", 
        "overview": "public void SplDoublyLinkedList::unserialize ( string $serialized )", 
        "parameters": [
            {
                "descr": "The serialized string.", 
                "name": "serialized"
            }
        ], 
        "path": "php/spldoublylinkedlist.unserialize", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::unshift": {
        "description": "Prepends value at the beginning of the doubly linked list.", 
        "name": "SplDoublyLinkedList::unshift", 
        "overview": "public void SplDoublyLinkedList::unshift ( mixed $value )", 
        "parameters": [
            {
                "descr": "The value to unshift.", 
                "name": "value"
            }
        ], 
        "path": "php/spldoublylinkedlist.unshift", 
        "type": "SPL"
    }, 
    "SplDoublyLinkedList::valid": {
        "description": "Checks if the doubly linked list contains any more nodes.", 
        "name": "SplDoublyLinkedList::valid", 
        "overview": "public bool SplDoublyLinkedList::valid ( void )", 
        "parameters": [], 
        "path": "php/spldoublylinkedlist.valid", 
        "type": "SPL"
    }, 
    "SplEnum": {
        "description": "", 
        "name": "SplEnum", 
        "overview": "public array getConstList ([ bool $include_default = false ] )", 
        "parameters": [], 
        "path": "php/class.splenum", 
        "type": "SPL"
    }, 
    "SplEnum::getConstList": {
        "description": "", 
        "name": "SplEnum::getConstList", 
        "overview": "public array SplEnum::getConstList ([ bool $include_default = false ] )", 
        "parameters": [
            {
                "descr": "Whether to include __default property.", 
                "name": "include_default"
            }
        ], 
        "path": "php/splenum.getconstlist", 
        "type": "SPL"
    }, 
    "SplFileInfo": {
        "description": "", 
        "name": "SplFileInfo", 
        "overview": "public __construct ( string $file_name )", 
        "parameters": [], 
        "path": "php/class.splfileinfo", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::__construct": {
        "description": "Creates a new SplFileInfo object for the file_name specified. The file does not need to exist, or be readable.", 
        "name": "SplFileInfo::__construct", 
        "overview": "public SplFileInfo::__construct ( string $file_name )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "file_name"
            }
        ], 
        "path": "php/splfileinfo.construct", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::__toString": {
        "description": "This method will return the file name of the referenced file.", 
        "name": "SplFileInfo::__toString", 
        "overview": "public void SplFileInfo::__toString ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.tostring", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getATime": {
        "description": "Gets the last access time for the file.", 
        "name": "SplFileInfo::getATime", 
        "overview": "public int SplFileInfo::getATime ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getatime", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getBasename": {
        "description": "This method returns the base name of the file, directory, or link without path info.", 
        "name": "SplFileInfo::getBasename", 
        "overview": "public string SplFileInfo::getBasename ([ string $suffix ] )", 
        "parameters": [
            {
                "descr": "Optional suffix to omit from the base name returned.", 
                "name": "suffix"
            }
        ], 
        "path": "php/splfileinfo.getbasename", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getCTime": {
        "description": "Returns the inode change time for the file. The time returned is a Unix timestamp.", 
        "name": "SplFileInfo::getCTime", 
        "overview": "public int SplFileInfo::getCTime ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getctime", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getExtension": {
        "description": "Retrieves the file extension.", 
        "name": "SplFileInfo::getExtension", 
        "overview": "public string SplFileInfo::getExtension ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getextension", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getFileInfo": {
        "description": "This method gets an SplFileInfo object for the referenced file.", 
        "name": "SplFileInfo::getFileInfo", 
        "overview": "public SplFileInfo SplFileInfo::getFileInfo ([ string $class_name ] )", 
        "parameters": [
            {
                "descr": "Name of an SplFileInfo derived class to use.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.getfileinfo", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getFilename": {
        "description": "Gets the filename without any path information.", 
        "name": "SplFileInfo::getFilename", 
        "overview": "public string SplFileInfo::getFilename ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getfilename", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getGroup": {
        "description": "Gets the file group. The group ID is returned in numerical format.", 
        "name": "SplFileInfo::getGroup", 
        "overview": "public int SplFileInfo::getGroup ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getgroup", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getInode": {
        "description": "Gets the inode number for the filesystem object.", 
        "name": "SplFileInfo::getInode", 
        "overview": "public int SplFileInfo::getInode ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getinode", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getLinkTarget": {
        "description": "Gets the target of a filesystem link.", 
        "name": "SplFileInfo::getLinkTarget", 
        "overview": "public string SplFileInfo::getLinkTarget ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getlinktarget", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getMTime": {
        "description": "Returns the time when the contents of the file were changed. The time returned is a Unix timestamp.", 
        "name": "SplFileInfo::getMTime", 
        "overview": "public int SplFileInfo::getMTime ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getmtime", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getOwner": {
        "description": "Gets the file owner. The owner ID is returned in numerical format.", 
        "name": "SplFileInfo::getOwner", 
        "overview": "public int SplFileInfo::getOwner ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getowner", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPath": {
        "description": "Returns the path to the file, omitting the filename and any trailing slash.", 
        "name": "SplFileInfo::getPath", 
        "overview": "public string SplFileInfo::getPath ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getpath", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPathInfo": {
        "description": "Gets an SplFileInfo object for the parent of the current file.", 
        "name": "SplFileInfo::getPathInfo", 
        "overview": "public SplFileInfo SplFileInfo::getPathInfo ([ string $class_name ] )", 
        "parameters": [
            {
                "descr": "Name of an SplFileInfo derived class to use.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.getpathinfo", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPathname": {
        "description": "Returns the path to the file.", 
        "name": "SplFileInfo::getPathname", 
        "overview": "public string SplFileInfo::getPathname ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getpathname", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getPerms": {
        "description": "Gets the file permissions for the file.", 
        "name": "SplFileInfo::getPerms", 
        "overview": "public int SplFileInfo::getPerms ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getperms", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getRealPath": {
        "description": "This method expands all symbolic links, resolves relative references and returns the real path to the file.", 
        "name": "SplFileInfo::getRealPath", 
        "overview": "public string SplFileInfo::getRealPath ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getrealpath", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getSize": {
        "description": "Returns the filesize in bytes for the file referenced.", 
        "name": "SplFileInfo::getSize", 
        "overview": "public int SplFileInfo::getSize ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.getsize", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::getType": {
        "description": "Returns the type of the file referenced.", 
        "name": "SplFileInfo::getType", 
        "overview": "public string SplFileInfo::getType ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.gettype", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isDir": {
        "description": "This method can be used to determine if the file is a directory.", 
        "name": "SplFileInfo::isDir", 
        "overview": "public bool SplFileInfo::isDir ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.isdir", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isExecutable": {
        "description": "Checks if the file is executable.", 
        "name": "SplFileInfo::isExecutable", 
        "overview": "public bool SplFileInfo::isExecutable ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.isexecutable", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isFile": {
        "description": "Checks if the file referenced by this SplFileInfo object exists and is a regular file.", 
        "name": "SplFileInfo::isFile", 
        "overview": "public bool SplFileInfo::isFile ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.isfile", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isLink": {
        "description": "Use this method to check if the file referenced by the SplFileInfo object is a link.", 
        "name": "SplFileInfo::isLink", 
        "overview": "public bool SplFileInfo::isLink ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.islink", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isReadable": {
        "description": "Check if the file is readable.", 
        "name": "SplFileInfo::isReadable", 
        "overview": "public bool SplFileInfo::isReadable ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.isreadable", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::isWritable": {
        "description": "Checks if the current entry is writable.", 
        "name": "SplFileInfo::isWritable", 
        "overview": "public bool SplFileInfo::isWritable ( void )", 
        "parameters": [], 
        "path": "php/splfileinfo.iswritable", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::openFile": {
        "description": "Creates an SplFileObject object of the file. This is useful because SplFileObject contains additional methods for manipulating the file whereas SplFileInfo is only useful for gaining information, like whether the file is writable.", 
        "name": "SplFileInfo::openFile", 
        "overview": "public SplFileObject SplFileInfo::openFile ([ string $open_mode = r [, bool $use_include_path = false [, resource $context = NULL ]]] )", 
        "parameters": [
            {
                "descr": "The mode for opening the file. See the fopen() documentation for descriptions of possible modes. ", 
                "name": "open_mode"
            }, 
            {
                "descr": "When set to TRUE, the filename is also searched for within the include_path", 
                "name": "use_include_path"
            }, 
            {
                "descr": "Refer to the context section of the manual for a description of contexts.", 
                "name": "context"
            }
        ], 
        "path": "php/splfileinfo.openfile", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::setFileClass": {
        "description": "Set the class name which SplFileInfo will use to open files with when openFile() is called. The class name passed to this method must be derived from SplFileObject.", 
        "name": "SplFileInfo::setFileClass", 
        "overview": "public void SplFileInfo::setFileClass ([ string $class_name ] )", 
        "parameters": [
            {
                "descr": "The class name to use when openFile() is called.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.setfileclass", 
        "type": "SPL/File"
    }, 
    "SplFileInfo::setInfoClass": {
        "description": "Use this method to set a custom class which will be used when getFileInfo and getPathInfo are called. The class name passed to this method must be derived from SplFileInfo.", 
        "name": "SplFileInfo::setInfoClass", 
        "overview": "public void SplFileInfo::setInfoClass ([ string $class_name ] )", 
        "parameters": [
            {
                "descr": "The class name to use.", 
                "name": "class_name"
            }
        ], 
        "path": "php/splfileinfo.setinfoclass", 
        "type": "SPL/File"
    }, 
    "SplFileObject": {
        "description": "", 
        "name": "SplFileObject", 
        "overview": "public __construct ( string $filename [, string $open_mode = \"r\" [, bool $use_include_path = false [, resource $context ]]] )", 
        "parameters": [], 
        "path": "php/class.splfileobject", 
        "type": "SPL/File"
    }, 
    "SplFileObject::__construct": {
        "description": "Construct a new file object.", 
        "name": "SplFileObject::__construct", 
        "overview": "public SplFileObject::__construct ( string $filename [, string $open_mode = \"r\" [, bool $use_include_path = false [, resource $context ]]] )", 
        "parameters": [
            {
                "descr": "The file to read.  TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. ", 
                "name": "filename"
            }, 
            {
                "descr": "The mode in which to open the file. ", 
                "name": "open_mode"
            }, 
            {
                "descr": "Whether to search in the include_path for filename.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/splfileobject.construct", 
        "type": "SPL/File"
    }, 
    "SplFileObject::__toString": {
        "description": "", 
        "name": "SplFileObject::__toString", 
        "overview": "public void SplFileObject::__toString ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.tostring", 
        "type": "SPL/File"
    }, 
    "SplFileObject::current": {
        "description": "Retrieves the current line of the file.", 
        "name": "SplFileObject::current", 
        "overview": "public string|array SplFileObject::current ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.current", 
        "type": "SPL/File"
    }, 
    "SplFileObject::eof": {
        "description": "Determine whether the end of file has been reached", 
        "name": "SplFileObject::eof", 
        "overview": "public bool SplFileObject::eof ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.eof", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fflush": {
        "description": "Forces a write of all buffered output to the file.", 
        "name": "SplFileObject::fflush", 
        "overview": "public bool SplFileObject::fflush ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.fflush", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgetc": {
        "description": "Gets a character from the file.", 
        "name": "SplFileObject::fgetc", 
        "overview": "public string SplFileObject::fgetc ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.fgetc", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgetcsv": {
        "description": "Gets a line from the file which is in CSV format and returns an array containing the fields read.", 
        "name": "SplFileObject::fgetcsv", 
        "overview": "public array SplFileObject::fgetcsv ([ string $delimiter = \",\" [, string $enclosure = \"\\\"\" [, string $escape = \"\\\\\" ]]] )", 
        "parameters": [
            {
                "descr": "The field delimiter (one character only). ", 
                "name": "delimiter"
            }, 
            {
                "descr": "The field enclosure character (one character only). ", 
                "name": "enclosure"
            }, 
            {
                "descr": "The escape character (one character only). ", 
                "name": "escape"
            }
        ], 
        "path": "php/splfileobject.fgetcsv", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgets": {
        "description": "Gets a line from the file.", 
        "name": "SplFileObject::fgets", 
        "overview": "public string SplFileObject::fgets ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.fgets", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fgetss": {
        "description": "Identical to SplFileObject::fgets(), except that SplFileObject::fgetss() attempts to strip any HTML and PHP tags from the text it reads.", 
        "name": "SplFileObject::fgetss", 
        "overview": "public string SplFileObject::fgetss ([ string $allowable_tags ] )", 
        "parameters": [
            {
                "descr": "Optional parameter to specify tags which should not be stripped.", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/splfileobject.fgetss", 
        "type": "SPL/File"
    }, 
    "SplFileObject::flock": {
        "description": "Locks or unlocks the file in the same portable way as flock().", 
        "name": "SplFileObject::flock", 
        "overview": "public bool SplFileObject::flock ( int $operation [, int &$wouldblock ] )", 
        "parameters": [
            {
                "descr": "operation is one of the following:   LOCK_SH to acquire a shared lock (reader). ", 
                "name": "operation"
            }, 
            {
                "descr": "Set to TRUE if the lock would block (EWOULDBLOCK errno condition).", 
                "name": "wouldblock"
            }
        ], 
        "path": "php/splfileobject.flock", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fpassthru": {
        "description": "Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.", 
        "name": "SplFileObject::fpassthru", 
        "overview": "public int SplFileObject::fpassthru ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.fpassthru", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fputcsv": {
        "description": "Writes the fields array to the file as a CSV line.", 
        "name": "SplFileObject::fputcsv", 
        "overview": "public int SplFileObject::fputcsv ( array $fields [, string $delimiter = ',' [, string $enclosure = '\"' ]] )", 
        "parameters": [
            {
                "descr": "An array of values.", 
                "name": "fields"
            }, 
            {
                "descr": "The optional delimiter parameter sets the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "The optional enclosure parameter sets the field enclosure (one character only).", 
                "name": "enclosure"
            }
        ], 
        "path": "php/splfileobject.fputcsv", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fscanf": {
        "description": "Reads a line from the file and interprets it according to the specified format, which is described in the documentation for sprintf().", 
        "name": "SplFileObject::fscanf", 
        "overview": "public mixed SplFileObject::fscanf ( string $format [, mixed &$... ] )", 
        "parameters": [
            {
                "descr": "The specified format as described in the sprintf() documentation.", 
                "name": "format"
            }, 
            {
                "descr": "The optional assigned values.", 
                "name": "..."
            }
        ], 
        "path": "php/splfileobject.fscanf", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fseek": {
        "description": "Seek to a position in the file measured in bytes from the beginning of the file, obtained by adding offset to the position specified by whence.", 
        "name": "SplFileObject::fseek", 
        "overview": "public int SplFileObject::fseek ( int $offset [, int $whence = SEEK_SET ] )", 
        "parameters": [
            {
                "descr": "The offset. A negative value can be used to move backwards through the file which is useful when SEEK_END is used as the whence value.", 
                "name": "offset"
            }, 
            {
                "descr": "whence values are: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/splfileobject.fseek", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fstat": {
        "description": "Gathers the statistics of the file. Behaves identically to fstat().", 
        "name": "SplFileObject::fstat", 
        "overview": "public array SplFileObject::fstat ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.fstat", 
        "type": "SPL/File"
    }, 
    "SplFileObject::ftell": {
        "description": "Returns the position of the file pointer which represents the current offset in the file stream.", 
        "name": "SplFileObject::ftell", 
        "overview": "public int SplFileObject::ftell ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.ftell", 
        "type": "SPL/File"
    }, 
    "SplFileObject::ftruncate": {
        "description": "Truncates the file to size bytes.", 
        "name": "SplFileObject::ftruncate", 
        "overview": "public bool SplFileObject::ftruncate ( int $size )", 
        "parameters": [
            {
                "descr": "The size to truncate to.  Note:  If size is larger than the file it is extended with null bytes. ", 
                "name": "size"
            }
        ], 
        "path": "php/splfileobject.ftruncate", 
        "type": "SPL/File"
    }, 
    "SplFileObject::fwrite": {
        "description": "Writes the contents of string to the file", 
        "name": "SplFileObject::fwrite", 
        "overview": "public int SplFileObject::fwrite ( string $str [, int $length ] )", 
        "parameters": [
            {
                "descr": "The string to be written to the file.", 
                "name": "str"
            }, 
            {
                "descr": "If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first.", 
                "name": "length"
            }
        ], 
        "path": "php/splfileobject.fwrite", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getChildren": {
        "description": "An SplFileObject does not have children so this method returns NULL.", 
        "name": "SplFileObject::getChildren", 
        "overview": "public void SplFileObject::getChildren ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.getchildren", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getCsvControl": {
        "description": "Gets the delimiter and enclosure character used for parsing CSV fields.", 
        "name": "SplFileObject::getCsvControl", 
        "overview": "public array SplFileObject::getCsvControl ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.getcsvcontrol", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getFlags": {
        "description": "Gets the flags set for an instance of SplFileObject as an integer.", 
        "name": "SplFileObject::getFlags", 
        "overview": "public int SplFileObject::getFlags ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.getflags", 
        "type": "SPL/File"
    }, 
    "SplFileObject::getMaxLineLen": {
        "description": "Gets the maximum line length as set by SplFileObject::setMaxLineLen().", 
        "name": "SplFileObject::getMaxLineLen", 
        "overview": "public int SplFileObject::getMaxLineLen ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.getmaxlinelen", 
        "type": "SPL/File"
    }, 
    "SplFileObject::hasChildren": {
        "description": "An SplFileObject does not have children so this method always return FALSE.", 
        "name": "SplFileObject::hasChildren", 
        "overview": "public bool SplFileObject::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.haschildren", 
        "type": "SPL/File"
    }, 
    "SplFileObject::key": {
        "description": "Gets the current line number.", 
        "name": "SplFileObject::key", 
        "overview": "public int SplFileObject::key ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.key", 
        "type": "SPL/File"
    }, 
    "SplFileObject::next": {
        "description": "Moves ahead to the next line in the file.", 
        "name": "SplFileObject::next", 
        "overview": "public void SplFileObject::next ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.next", 
        "type": "SPL/File"
    }, 
    "SplFileObject::rewind": {
        "description": "Rewinds the file back to the first line.", 
        "name": "SplFileObject::rewind", 
        "overview": "public void SplFileObject::rewind ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.rewind", 
        "type": "SPL/File"
    }, 
    "SplFileObject::seek": {
        "description": "Seek to specified line in the file.", 
        "name": "SplFileObject::seek", 
        "overview": "public void SplFileObject::seek ( int $line_pos )", 
        "parameters": [
            {
                "descr": "The zero-based line number to seek to.", 
                "name": "line_pos"
            }
        ], 
        "path": "php/splfileobject.seek", 
        "type": "SPL/File"
    }, 
    "SplFileObject::setCsvControl": {
        "description": "Sets the delimiter and enclosure character for parsing CSV fields.", 
        "name": "SplFileObject::setCsvControl", 
        "overview": "public void SplFileObject::setCsvControl ([ string $delimiter = \",\" [, string $enclosure = \"\\\"\" [, string $escape = \"\\\\\" ]]] )", 
        "parameters": [
            {
                "descr": "The field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "The field enclosure character (one character only).", 
                "name": "enclosure"
            }, 
            {
                "descr": "The field escape character (one character only).", 
                "name": "escape"
            }
        ], 
        "path": "php/splfileobject.setcsvcontrol", 
        "type": "SPL/File"
    }, 
    "SplFileObject::setFlags": {
        "description": "Sets the flags to be used by the SplFileObject.", 
        "name": "SplFileObject::setFlags", 
        "overview": "public void SplFileObject::setFlags ( int $flags )", 
        "parameters": [
            {
                "descr": "Bit mask of the flags to set. See SplFileObject constants for the available flags.", 
                "name": "flags"
            }
        ], 
        "path": "php/splfileobject.setflags", 
        "type": "SPL/File"
    }, 
    "SplFileObject::setMaxLineLen": {
        "description": "Sets the maximum length of a line to be read.", 
        "name": "SplFileObject::setMaxLineLen", 
        "overview": "public void SplFileObject::setMaxLineLen ( int $max_len )", 
        "parameters": [
            {
                "descr": "The maximum length of a line.", 
                "name": "max_len"
            }
        ], 
        "path": "php/splfileobject.setmaxlinelen", 
        "type": "SPL/File"
    }, 
    "SplFileObject::valid": {
        "description": "Check whether EOF has been reached.", 
        "name": "SplFileObject::valid", 
        "overview": "public bool SplFileObject::valid ( void )", 
        "parameters": [], 
        "path": "php/splfileobject.valid", 
        "type": "SPL/File"
    }, 
    "SplFixedArray": {
        "description": "", 
        "name": "SplFixedArray", 
        "overview": "public int count ( void )", 
        "parameters": [], 
        "path": "php/class.splfixedarray", 
        "type": "SPL"
    }, 
    "SplFixedArray::__wakeup": {
        "description": "Reinitialises the array after being unserialised.", 
        "name": "SplFixedArray::__wakeup", 
        "overview": "public void SplFixedArray::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.wakeup", 
        "type": "SPL"
    }, 
    "SplFixedArray::count": {
        "description": "Returns the size of the array.", 
        "name": "SplFixedArray::count", 
        "overview": "public int SplFixedArray::count ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.count", 
        "type": "SPL"
    }, 
    "SplFixedArray::current": {
        "description": "Get the current array element.", 
        "name": "SplFixedArray::current", 
        "overview": "public mixed SplFixedArray::current ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.current", 
        "type": "SPL"
    }, 
    "SplFixedArray::fromArray": {
        "description": "Import the PHP array array in a new SplFixedArray instance", 
        "name": "SplFixedArray::fromArray", 
        "overview": "public static SplFixedArray SplFixedArray::fromArray ( array $array [, bool $save_indexes = true ] )", 
        "parameters": [
            {
                "descr": "The array to import.", 
                "name": "array"
            }, 
            {
                "descr": "Try to save the numeric indexes used in the original array.", 
                "name": "save_indexes"
            }
        ], 
        "path": "php/splfixedarray.fromarray", 
        "type": "SPL"
    }, 
    "SplFixedArray::getSize": {
        "description": "Gets the size of the array.", 
        "name": "SplFixedArray::getSize", 
        "overview": "public int SplFixedArray::getSize ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.getsize", 
        "type": "SPL"
    }, 
    "SplFixedArray::key": {
        "description": "Returns the current array index.", 
        "name": "SplFixedArray::key", 
        "overview": "public int SplFixedArray::key ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.key", 
        "type": "SPL"
    }, 
    "SplFixedArray::next": {
        "description": "Move the iterator to the next array entry.", 
        "name": "SplFixedArray::next", 
        "overview": "public void SplFixedArray::next ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.next", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetExists": {
        "description": "Checks whether the requested index index exists.", 
        "name": "SplFixedArray::offsetExists", 
        "overview": "public bool SplFixedArray::offsetExists ( int $index )", 
        "parameters": [
            {
                "descr": "The index being checked.", 
                "name": "index"
            }
        ], 
        "path": "php/splfixedarray.offsetexists", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetGet": {
        "description": "Returns the value at the index index.", 
        "name": "SplFixedArray::offsetGet", 
        "overview": "public mixed SplFixedArray::offsetGet ( int $index )", 
        "parameters": [
            {
                "descr": "The index with the value.", 
                "name": "index"
            }
        ], 
        "path": "php/splfixedarray.offsetget", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetSet": {
        "description": "Sets the value at the specified index to newval.", 
        "name": "SplFixedArray::offsetSet", 
        "overview": "public void SplFixedArray::offsetSet ( int $index , mixed $newval )", 
        "parameters": [
            {
                "descr": "The index being set.", 
                "name": "index"
            }, 
            {
                "descr": "The new value for the index.", 
                "name": "newval"
            }
        ], 
        "path": "php/splfixedarray.offsetset", 
        "type": "SPL"
    }, 
    "SplFixedArray::offsetUnset": {
        "description": "Unsets the value at the specified index.", 
        "name": "SplFixedArray::offsetUnset", 
        "overview": "public void SplFixedArray::offsetUnset ( int $index )", 
        "parameters": [
            {
                "descr": "The index being unset.", 
                "name": "index"
            }
        ], 
        "path": "php/splfixedarray.offsetunset", 
        "type": "SPL"
    }, 
    "SplFixedArray::rewind": {
        "description": "Rewinds the iterator to the beginning.", 
        "name": "SplFixedArray::rewind", 
        "overview": "public void SplFixedArray::rewind ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.rewind", 
        "type": "SPL"
    }, 
    "SplFixedArray::setSize": {
        "description": "Change the size of an array to the new size of size. If size is less than the current array size, any values after the new size will be discarded. If size is greater than the current array size, the array will be padded with NULL values.", 
        "name": "SplFixedArray::setSize", 
        "overview": "public int SplFixedArray::setSize ( int $size )", 
        "parameters": [
            {
                "descr": "The new array size. This should be a value between 0 and PHP_INT_MAX.", 
                "name": "size"
            }
        ], 
        "path": "php/splfixedarray.setsize", 
        "type": "SPL"
    }, 
    "SplFixedArray::toArray": {
        "description": "Returns a PHP array from the fixed array.", 
        "name": "SplFixedArray::toArray", 
        "overview": "public array SplFixedArray::toArray ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.toarray", 
        "type": "SPL"
    }, 
    "SplFixedArray::valid": {
        "description": "Checks if the array contains any more elements.", 
        "name": "SplFixedArray::valid", 
        "overview": "public bool SplFixedArray::valid ( void )", 
        "parameters": [], 
        "path": "php/splfixedarray.valid", 
        "type": "SPL"
    }, 
    "SplFloat": {
        "description": "", 
        "name": "SplFloat", 
        "overview": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "parameters": [], 
        "path": "php/class.splfloat", 
        "type": "SPL"
    }, 
    "SplHeap": {
        "description": "", 
        "name": "SplHeap", 
        "overview": "abstract protected int compare ( mixed $value1 , mixed $value2 )", 
        "parameters": [], 
        "path": "php/class.splheap", 
        "type": "SPL"
    }, 
    "SplHeap::compare": {
        "description": "Compare value1 with value2.", 
        "name": "SplHeap::compare", 
        "overview": "abstract protected int SplHeap::compare ( mixed $value1 , mixed $value2 )", 
        "parameters": [
            {
                "descr": "The value of the first node being compared.", 
                "name": "value1"
            }, 
            {
                "descr": "The value of the second node being compared.", 
                "name": "value2"
            }
        ], 
        "path": "php/splheap.compare", 
        "type": "SPL"
    }, 
    "SplHeap::count": {
        "description": "", 
        "name": "SplHeap::count", 
        "overview": "public int SplHeap::count ( void )", 
        "parameters": [], 
        "path": "php/splheap.count", 
        "type": "SPL"
    }, 
    "SplHeap::current": {
        "description": "Get the current datastructure node.", 
        "name": "SplHeap::current", 
        "overview": "public mixed SplHeap::current ( void )", 
        "parameters": [], 
        "path": "php/splheap.current", 
        "type": "SPL"
    }, 
    "SplHeap::extract": {
        "description": "", 
        "name": "SplHeap::extract", 
        "overview": "public mixed SplHeap::extract ( void )", 
        "parameters": [], 
        "path": "php/splheap.extract", 
        "type": "SPL"
    }, 
    "SplHeap::insert": {
        "description": "Insert value in the heap.", 
        "name": "SplHeap::insert", 
        "overview": "public void SplHeap::insert ( mixed $value )", 
        "parameters": [
            {
                "descr": "The value to insert.", 
                "name": "value"
            }
        ], 
        "path": "php/splheap.insert", 
        "type": "SPL"
    }, 
    "SplHeap::isEmpty": {
        "description": "", 
        "name": "SplHeap::isEmpty", 
        "overview": "public bool SplHeap::isEmpty ( void )", 
        "parameters": [], 
        "path": "php/splheap.isempty", 
        "type": "SPL"
    }, 
    "SplHeap::key": {
        "description": "This function returns the current node index", 
        "name": "SplHeap::key", 
        "overview": "public mixed SplHeap::key ( void )", 
        "parameters": [], 
        "path": "php/splheap.key", 
        "type": "SPL"
    }, 
    "SplHeap::next": {
        "description": "Move to the next node.", 
        "name": "SplHeap::next", 
        "overview": "public void SplHeap::next ( void )", 
        "parameters": [], 
        "path": "php/splheap.next", 
        "type": "SPL"
    }, 
    "SplHeap::recoverFromCorruption": {
        "description": "", 
        "name": "SplHeap::recoverFromCorruption", 
        "overview": "public void SplHeap::recoverFromCorruption ( void )", 
        "parameters": [], 
        "path": "php/splheap.recoverfromcorruption", 
        "type": "SPL"
    }, 
    "SplHeap::rewind": {
        "description": "This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.", 
        "name": "SplHeap::rewind", 
        "overview": "public void SplHeap::rewind ( void )", 
        "parameters": [], 
        "path": "php/splheap.rewind", 
        "type": "SPL"
    }, 
    "SplHeap::top": {
        "description": "", 
        "name": "SplHeap::top", 
        "overview": "public mixed SplHeap::top ( void )", 
        "parameters": [], 
        "path": "php/splheap.top", 
        "type": "SPL"
    }, 
    "SplHeap::valid": {
        "description": "Checks if the heap contains any more nodes.", 
        "name": "SplHeap::valid", 
        "overview": "public bool SplHeap::valid ( void )", 
        "parameters": [], 
        "path": "php/splheap.valid", 
        "type": "SPL"
    }, 
    "SplInt": {
        "description": "", 
        "name": "SplInt", 
        "overview": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "parameters": [], 
        "path": "php/class.splint", 
        "type": "SPL"
    }, 
    "SplMaxHeap": {
        "description": "", 
        "name": "SplMaxHeap", 
        "overview": "protected int compare ( mixed $value1 , mixed $value2 )", 
        "parameters": [], 
        "path": "php/class.splmaxheap", 
        "type": "SPL"
    }, 
    "SplMaxHeap::compare": {
        "description": "Compare value1 with value2.", 
        "name": "SplMaxHeap::compare", 
        "overview": "protected int SplMaxHeap::compare ( mixed $value1 , mixed $value2 )", 
        "parameters": [
            {
                "descr": "The value of the first node being compared.", 
                "name": "value1"
            }, 
            {
                "descr": "The value of the second node being compared.", 
                "name": "value2"
            }
        ], 
        "path": "php/splmaxheap.compare", 
        "type": "SPL"
    }, 
    "SplMinHeap": {
        "description": "", 
        "name": "SplMinHeap", 
        "overview": "protected int compare ( mixed $value1 , mixed $value2 )", 
        "parameters": [], 
        "path": "php/class.splminheap", 
        "type": "SPL"
    }, 
    "SplMinHeap::compare": {
        "description": "Compare value1 with value2.", 
        "name": "SplMinHeap::compare", 
        "overview": "protected int SplMinHeap::compare ( mixed $value1 , mixed $value2 )", 
        "parameters": [
            {
                "descr": "The value of the first node being compared.", 
                "name": "value1"
            }, 
            {
                "descr": "The value of the second node being compared.", 
                "name": "value2"
            }
        ], 
        "path": "php/splminheap.compare", 
        "type": "SPL"
    }, 
    "SplObjectStorage": {
        "description": "", 
        "name": "SplObjectStorage", 
        "overview": "public void addAll ( SplObjectStorage $storage )", 
        "parameters": [], 
        "path": "php/class.splobjectstorage", 
        "type": "SPL"
    }, 
    "SplObjectStorage::addAll": {
        "description": "Adds all objects-data pairs from a different storage in the current storage.", 
        "name": "SplObjectStorage::addAll", 
        "overview": "public void SplObjectStorage::addAll ( SplObjectStorage $storage )", 
        "parameters": [
            {
                "descr": "The storage you want to import.", 
                "name": "storage"
            }
        ], 
        "path": "php/splobjectstorage.addall", 
        "type": "SPL"
    }, 
    "SplObjectStorage::attach": {
        "description": "Adds an object inside the storage, and optionally associate it to some data.", 
        "name": "SplObjectStorage::attach", 
        "overview": "public void SplObjectStorage::attach ( object $object [, mixed $data = NULL ] )", 
        "parameters": [
            {
                "descr": "The object to add.", 
                "name": "object"
            }, 
            {
                "descr": "The data to associate with the object.", 
                "name": "data"
            }
        ], 
        "path": "php/splobjectstorage.attach", 
        "type": "SPL"
    }, 
    "SplObjectStorage::contains": {
        "description": "Checks if the storage contains the object provided.", 
        "name": "SplObjectStorage::contains", 
        "overview": "public bool SplObjectStorage::contains ( object $object )", 
        "parameters": [
            {
                "descr": "The object to look for.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.contains", 
        "type": "SPL"
    }, 
    "SplObjectStorage::count": {
        "description": "Counts the number of objects in the storage.", 
        "name": "SplObjectStorage::count", 
        "overview": "public int SplObjectStorage::count ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.count", 
        "type": "SPL"
    }, 
    "SplObjectStorage::current": {
        "description": "Returns the current storage entry.", 
        "name": "SplObjectStorage::current", 
        "overview": "public object SplObjectStorage::current ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.current", 
        "type": "SPL"
    }, 
    "SplObjectStorage::detach": {
        "description": "Removes the object from the storage.", 
        "name": "SplObjectStorage::detach", 
        "overview": "public void SplObjectStorage::detach ( object $object )", 
        "parameters": [
            {
                "descr": "The object to remove.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.detach", 
        "type": "SPL"
    }, 
    "SplObjectStorage::getHash": {
        "description": "This method calculates an identifier for the objects added to an SplObjectStorage object.", 
        "name": "SplObjectStorage::getHash", 
        "overview": "public string SplObjectStorage::getHash ( object $object )", 
        "parameters": [
            {
                "descr": "The object whose identifier is to be calculated.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.gethash", 
        "type": "SPL"
    }, 
    "SplObjectStorage::getInfo": {
        "description": "Returns the data, or info, associated with the object pointed by the current iterator position.", 
        "name": "SplObjectStorage::getInfo", 
        "overview": "public mixed SplObjectStorage::getInfo ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.getinfo", 
        "type": "SPL"
    }, 
    "SplObjectStorage::key": {
        "description": "Returns the index at which the iterator currently is.", 
        "name": "SplObjectStorage::key", 
        "overview": "public int SplObjectStorage::key ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.key", 
        "type": "SPL"
    }, 
    "SplObjectStorage::next": {
        "description": "Moves the iterator to the next object in the storage.", 
        "name": "SplObjectStorage::next", 
        "overview": "public void SplObjectStorage::next ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.next", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetExists": {
        "description": "Checks whether an object exists in the storage.", 
        "name": "SplObjectStorage::offsetExists", 
        "overview": "public bool SplObjectStorage::offsetExists ( object $object )", 
        "parameters": [
            {
                "descr": "The object to look for.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.offsetexists", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetGet": {
        "description": "Returns the data associated with an object in the storage.", 
        "name": "SplObjectStorage::offsetGet", 
        "overview": "public mixed SplObjectStorage::offsetGet ( object $object )", 
        "parameters": [
            {
                "descr": "The object to look for.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.offsetget", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetSet": {
        "description": "Associate data to an object in the storage.", 
        "name": "SplObjectStorage::offsetSet", 
        "overview": "public void SplObjectStorage::offsetSet ( object $object [, mixed $data = NULL ] )", 
        "parameters": [
            {
                "descr": "The object to associate data with.", 
                "name": "object"
            }, 
            {
                "descr": "The data to associate with the object.", 
                "name": "data"
            }
        ], 
        "path": "php/splobjectstorage.offsetset", 
        "type": "SPL"
    }, 
    "SplObjectStorage::offsetUnset": {
        "description": "Removes an object from the storage.", 
        "name": "SplObjectStorage::offsetUnset", 
        "overview": "public void SplObjectStorage::offsetUnset ( object $object )", 
        "parameters": [
            {
                "descr": "The object to remove.", 
                "name": "object"
            }
        ], 
        "path": "php/splobjectstorage.offsetunset", 
        "type": "SPL"
    }, 
    "SplObjectStorage::removeAll": {
        "description": "Removes objects contained in another storage from the current storage.", 
        "name": "SplObjectStorage::removeAll", 
        "overview": "public void SplObjectStorage::removeAll ( SplObjectStorage $storage )", 
        "parameters": [
            {
                "descr": "The storage containing the elements to remove.", 
                "name": "storage"
            }
        ], 
        "path": "php/splobjectstorage.removeall", 
        "type": "SPL"
    }, 
    "SplObjectStorage::removeAllExcept": {
        "description": "Removes all objects except for those contained in another storage from the current storage.", 
        "name": "SplObjectStorage::removeAllExcept", 
        "overview": "public void SplObjectStorage::removeAllExcept ( SplObjectStorage $storage )", 
        "parameters": [
            {
                "descr": "The storage containing the elements to retain in the current storage.", 
                "name": "storage"
            }
        ], 
        "path": "php/splobjectstorage.removeallexcept", 
        "type": "SPL"
    }, 
    "SplObjectStorage::rewind": {
        "description": "Rewind the iterator to the first storage element.", 
        "name": "SplObjectStorage::rewind", 
        "overview": "public void SplObjectStorage::rewind ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.rewind", 
        "type": "SPL"
    }, 
    "SplObjectStorage::serialize": {
        "description": "Returns a string representation of the storage.", 
        "name": "SplObjectStorage::serialize", 
        "overview": "public string SplObjectStorage::serialize ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.serialize", 
        "type": "SPL"
    }, 
    "SplObjectStorage::setInfo": {
        "description": "Associates data, or info, with the object currently pointed to by the iterator.", 
        "name": "SplObjectStorage::setInfo", 
        "overview": "public void SplObjectStorage::setInfo ( mixed $data )", 
        "parameters": [
            {
                "descr": "The data to associate with the current iterator entry.", 
                "name": "data"
            }
        ], 
        "path": "php/splobjectstorage.setinfo", 
        "type": "SPL"
    }, 
    "SplObjectStorage::unserialize": {
        "description": "Unserializes storage entries and attach them to the current storage.", 
        "name": "SplObjectStorage::unserialize", 
        "overview": "public void SplObjectStorage::unserialize ( string $serialized )", 
        "parameters": [
            {
                "descr": "The serialized representation of a storage.", 
                "name": "serialized"
            }
        ], 
        "path": "php/splobjectstorage.unserialize", 
        "type": "SPL"
    }, 
    "SplObjectStorage::valid": {
        "description": "Returns if the current iterator entry is valid.", 
        "name": "SplObjectStorage::valid", 
        "overview": "public bool SplObjectStorage::valid ( void )", 
        "parameters": [], 
        "path": "php/splobjectstorage.valid", 
        "type": "SPL"
    }, 
    "SplObserver (interface": {
        "description": "", 
        "name": "SplObserver (interface", 
        "overview": "abstract public void update ( SplSubject $subject )", 
        "parameters": [], 
        "path": "php/class.splobserver", 
        "type": "SPL"
    }, 
    "SplObserver::update": {
        "description": "This method is called when any SplSubject to which the observer is attached calls SplSubject::notify().", 
        "name": "SplObserver::update", 
        "overview": "abstract public void SplObserver::update ( SplSubject $subject )", 
        "parameters": [
            {
                "descr": "The SplSubject notifying the observer of an update.", 
                "name": "subject"
            }
        ], 
        "path": "php/splobserver.update", 
        "type": "SPL"
    }, 
    "SplPriorityQueue": {
        "description": "", 
        "name": "SplPriorityQueue", 
        "overview": "public int compare ( mixed $priority1 , mixed $priority2 )", 
        "parameters": [], 
        "path": "php/class.splpriorityqueue", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::compare": {
        "description": "Compare priority1 with priority2.", 
        "name": "SplPriorityQueue::compare", 
        "overview": "public int SplPriorityQueue::compare ( mixed $priority1 , mixed $priority2 )", 
        "parameters": [
            {
                "descr": "The priority of the first node being compared.", 
                "name": "priority1"
            }, 
            {
                "descr": "The priority of the second node being compared.", 
                "name": "priority2"
            }
        ], 
        "path": "php/splpriorityqueue.compare", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::count": {
        "description": "", 
        "name": "SplPriorityQueue::count", 
        "overview": "public int SplPriorityQueue::count ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.count", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::current": {
        "description": "Get the current datastructure node.", 
        "name": "SplPriorityQueue::current", 
        "overview": "public mixed SplPriorityQueue::current ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.current", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::extract": {
        "description": "", 
        "name": "SplPriorityQueue::extract", 
        "overview": "public mixed SplPriorityQueue::extract ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.extract", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::insert": {
        "description": "Insert value with the priority priority in the queue.", 
        "name": "SplPriorityQueue::insert", 
        "overview": "public void SplPriorityQueue::insert ( mixed $value , mixed $priority )", 
        "parameters": [
            {
                "descr": "The value to insert.", 
                "name": "value"
            }, 
            {
                "descr": "The associated priority.", 
                "name": "priority"
            }
        ], 
        "path": "php/splpriorityqueue.insert", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::isEmpty": {
        "description": "", 
        "name": "SplPriorityQueue::isEmpty", 
        "overview": "public bool SplPriorityQueue::isEmpty ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.isempty", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::key": {
        "description": "This function returns the current node index", 
        "name": "SplPriorityQueue::key", 
        "overview": "public mixed SplPriorityQueue::key ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.key", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::next": {
        "description": "Extracts the top node from the queue.", 
        "name": "SplPriorityQueue::next", 
        "overview": "public void SplPriorityQueue::next ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.next", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::recoverFromCorruption": {
        "description": "", 
        "name": "SplPriorityQueue::recoverFromCorruption", 
        "overview": "public void SplPriorityQueue::recoverFromCorruption ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.recoverfromcorruption", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::rewind": {
        "description": "This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.", 
        "name": "SplPriorityQueue::rewind", 
        "overview": "public void SplPriorityQueue::rewind ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.rewind", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::setExtractFlags": {
        "description": "", 
        "name": "SplPriorityQueue::setExtractFlags", 
        "overview": "public void SplPriorityQueue::setExtractFlags ( int $flags )", 
        "parameters": [
            {
                "descr": "Defines what is extracted by SplPriorityQueue::current(), SplPriorityQueue::top() and SplPriorityQueue::extract(). ", 
                "name": "flags"
            }
        ], 
        "path": "php/splpriorityqueue.setextractflags", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::top": {
        "description": "", 
        "name": "SplPriorityQueue::top", 
        "overview": "public mixed SplPriorityQueue::top ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.top", 
        "type": "SPL"
    }, 
    "SplPriorityQueue::valid": {
        "description": "Checks if the queue contains any more nodes.", 
        "name": "SplPriorityQueue::valid", 
        "overview": "public bool SplPriorityQueue::valid ( void )", 
        "parameters": [], 
        "path": "php/splpriorityqueue.valid", 
        "type": "SPL"
    }, 
    "SplQueue": {
        "description": "", 
        "name": "SplQueue", 
        "overview": "mixed dequeue ( void )", 
        "parameters": [], 
        "path": "php/class.splqueue", 
        "type": "SPL"
    }, 
    "SplQueue::dequeue": {
        "description": "Dequeues value from the top of the queue.", 
        "name": "SplQueue::dequeue", 
        "overview": "mixed SplQueue::dequeue ( void )", 
        "parameters": [], 
        "path": "php/splqueue.dequeue", 
        "type": "SPL"
    }, 
    "SplQueue::enqueue": {
        "description": "Enqueues value at the end of the queue.", 
        "name": "SplQueue::enqueue", 
        "overview": "void SplQueue::enqueue ( mixed $value )", 
        "parameters": [
            {
                "descr": "The value to enqueue.", 
                "name": "value"
            }
        ], 
        "path": "php/splqueue.enqueue", 
        "type": "SPL"
    }, 
    "SplQueue::setIteratorMode": {
        "description": "", 
        "name": "SplQueue::setIteratorMode", 
        "overview": "void SplQueue::setIteratorMode ( int $mode )", 
        "parameters": [
            {
                "descr": "There is only one iteration parameter you can modify. ", 
                "name": "mode"
            }
        ], 
        "path": "php/splqueue.setiteratormode", 
        "type": "SPL"
    }, 
    "SplStack": {
        "description": "", 
        "name": "SplStack", 
        "overview": "void setIteratorMode ( int $mode )", 
        "parameters": [], 
        "path": "php/class.splstack", 
        "type": "SPL"
    }, 
    "SplStack::setIteratorMode": {
        "description": "", 
        "name": "SplStack::setIteratorMode", 
        "overview": "void SplStack::setIteratorMode ( int $mode )", 
        "parameters": [
            {
                "descr": "There is only one iteration parameter you can modify. ", 
                "name": "mode"
            }
        ], 
        "path": "php/splstack.setiteratormode", 
        "type": "SPL"
    }, 
    "SplString": {
        "description": "", 
        "name": "SplString", 
        "overview": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "parameters": [], 
        "path": "php/class.splstring", 
        "type": "SPL"
    }, 
    "SplSubject (interface": {
        "description": "", 
        "name": "SplSubject (interface", 
        "overview": "abstract public void attach ( SplObserver $observer )", 
        "parameters": [], 
        "path": "php/class.splsubject", 
        "type": "SPL"
    }, 
    "SplSubject::attach": {
        "description": "Attaches an SplObserver so that it can be notified of updates.", 
        "name": "SplSubject::attach", 
        "overview": "abstract public void SplSubject::attach ( SplObserver $observer )", 
        "parameters": [
            {
                "descr": "The SplObserver to attach.", 
                "name": "observer"
            }
        ], 
        "path": "php/splsubject.attach", 
        "type": "SPL"
    }, 
    "SplSubject::detach": {
        "description": "Detaches an observer from the subject to no longer notify it of updates.", 
        "name": "SplSubject::detach", 
        "overview": "abstract public void SplSubject::detach ( SplObserver $observer )", 
        "parameters": [
            {
                "descr": "The SplObserver to detach.", 
                "name": "observer"
            }
        ], 
        "path": "php/splsubject.detach", 
        "type": "SPL"
    }, 
    "SplSubject::notify": {
        "description": "Notifies all attached observers.", 
        "name": "SplSubject::notify", 
        "overview": "abstract public void SplSubject::notify ( void )", 
        "parameters": [], 
        "path": "php/splsubject.notify", 
        "type": "SPL"
    }, 
    "SplTempFileObject": {
        "description": "", 
        "name": "SplTempFileObject", 
        "overview": "public __construct ([ int $max_memory ] )", 
        "parameters": [], 
        "path": "php/class.spltempfileobject", 
        "type": "SPL/File"
    }, 
    "SplTempFileObject::__construct": {
        "description": "Construct a new temporary file object.", 
        "name": "SplTempFileObject::__construct", 
        "overview": "public SplTempFileObject::__construct ([ int $max_memory ] )", 
        "parameters": [
            {
                "descr": "The maximum amount of memory (in bytes, default is 2 MB) for the temporary file to use. ", 
                "name": "max_memory"
            }
        ], 
        "path": "php/spltempfileobject.construct", 
        "type": "SPL/File"
    }, 
    "SplType": {
        "description": "", 
        "name": "SplType", 
        "overview": "__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "parameters": [], 
        "path": "php/class.spltype", 
        "type": "SPL"
    }, 
    "SplType::__construct": {
        "description": "", 
        "name": "SplType::__construct", 
        "overview": "SplType::__construct ([ mixed $initial_value [, bool $strict ]] )", 
        "parameters": [
            {
                "descr": "Type and default value depends on the extension class.", 
                "name": "initial_value"
            }, 
            {
                "descr": "Whether to set the object's sctrictness.", 
                "name": "strict"
            }
        ], 
        "path": "php/spltype.construct", 
        "type": "SPL"
    }, 
    "Spoofchecker": {
        "description": "", 
        "name": "Spoofchecker", 
        "overview": "public bool areConfusable ( string $s1 , string $s2 [, string &$error ] )", 
        "parameters": [], 
        "path": "php/class.spoofchecker", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::__construct": {
        "description": "", 
        "name": "Spoofchecker::__construct", 
        "overview": "public Spoofchecker::__construct ( void )", 
        "parameters": [], 
        "path": "php/spoofchecker.construct", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::areConfusable": {
        "description": "", 
        "name": "Spoofchecker::areConfusable", 
        "overview": "public bool Spoofchecker::areConfusable ( string $s1 , string $s2 [, string &$error ] )", 
        "parameters": [], 
        "path": "php/spoofchecker.areconfusable", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::isSuspicious": {
        "description": "", 
        "name": "Spoofchecker::isSuspicious", 
        "overview": "public bool Spoofchecker::isSuspicious ( string $text [, string &$error ] )", 
        "parameters": [], 
        "path": "php/spoofchecker.issuspicious", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::setAllowedLocales": {
        "description": "", 
        "name": "Spoofchecker::setAllowedLocales", 
        "overview": "public void Spoofchecker::setAllowedLocales ( string $locale_list )", 
        "parameters": [], 
        "path": "php/spoofchecker.setallowedlocales", 
        "type": "Internationalization"
    }, 
    "Spoofchecker::setChecks": {
        "description": "", 
        "name": "Spoofchecker::setChecks", 
        "overview": "public void Spoofchecker::setChecks ( string $checks )", 
        "parameters": [], 
        "path": "php/spoofchecker.setchecks", 
        "type": "Internationalization"
    }, 
    "Stackable": {
        "description": "", 
        "name": "Stackable", 
        "overview": "final public boolean chunk ( long $size , boolean $preserve )", 
        "parameters": [], 
        "path": "php/class.stackable", 
        "type": "Process Control"
    }, 
    "Stackable::chunk": {
        "description": "Fetches a chunk of the objects properties table of the given size, optionally preserving keys", 
        "name": "Stackable::chunk", 
        "overview": "final public boolean Stackable::chunk ( long $size , boolean $preserve )", 
        "parameters": [
            {
                "descr": "The number of items to fetch", 
                "name": "size"
            }, 
            {
                "descr": "Preserve the keys of members, by default false", 
                "name": "preserve"
            }
        ], 
        "path": "php/stackable.chunk", 
        "type": "Process Control"
    }, 
    "Stackable::isRunning": {
        "description": "A Stackable is running when a Worker Thread is executing it", 
        "name": "Stackable::isRunning", 
        "overview": "final public boolean Stackable::isRunning ( void )", 
        "parameters": [], 
        "path": "php/stackable.isrunning", 
        "type": "Process Control"
    }, 
    "Stackable::isTerminated": {
        "description": "Tell if the referenced Stackable exited, suffered fatal errors, or threw uncaught exceptions during execution", 
        "name": "Stackable::isTerminated", 
        "overview": "final public boolean Stackable::isTerminated ( void )", 
        "parameters": [], 
        "path": "php/stackable.isterminated", 
        "type": "Process Control"
    }, 
    "Stackable::isWaiting": {
        "description": "Tell if the referenced Stackable is waiting for notification", 
        "name": "Stackable::isWaiting", 
        "overview": "final public boolean Stackable::isWaiting ( void )", 
        "parameters": [], 
        "path": "php/stackable.iswaiting", 
        "type": "Process Control"
    }, 
    "Stackable::lock": {
        "description": "Lock the referenced objects storage for the calling context", 
        "name": "Stackable::lock", 
        "overview": "final public boolean Stackable::lock ( void )", 
        "parameters": [], 
        "path": "php/stackable.lock", 
        "type": "Process Control"
    }, 
    "Stackable::merge": {
        "description": "Merges data into the current object", 
        "name": "Stackable::merge", 
        "overview": "final public boolean Stackable::merge ( mixed $from [, mixed $overwrite ] )", 
        "parameters": [
            {
                "descr": "The data to merge", 
                "name": "from"
            }, 
            {
                "descr": "Overwrite existing keys flag, by default true", 
                "name": "overwrite"
            }
        ], 
        "path": "php/stackable.merge", 
        "type": "Process Control"
    }, 
    "Stackable::notify": {
        "description": "Sends notification to a Stackable that is waiting", 
        "name": "Stackable::notify", 
        "overview": "final public boolean Stackable::notify ( void )", 
        "parameters": [], 
        "path": "php/stackable.notify", 
        "type": "Process Control"
    }, 
    "Stackable::pop": {
        "description": "Pops an item from the objects properties table", 
        "name": "Stackable::pop", 
        "overview": "final public boolean Stackable::pop ( void )", 
        "parameters": [], 
        "path": "php/stackable.pop", 
        "type": "Process Control"
    }, 
    "Stackable::run": {
        "description": "The run method of a Stackable is executed by the Worker Thread", 
        "name": "Stackable::run", 
        "overview": "abstract public void Stackable::run ( void )", 
        "parameters": [], 
        "path": "php/stackable.run", 
        "type": "Process Control"
    }, 
    "Stackable::shift": {
        "description": "Shifts an item from the objects properties table", 
        "name": "Stackable::shift", 
        "overview": "final public boolean Stackable::shift ( void )", 
        "parameters": [], 
        "path": "php/stackable.shift", 
        "type": "Process Control"
    }, 
    "Stackable::synchronized": {
        "description": "Executes the block while retaining the synchronization lock for the current context.", 
        "name": "Stackable::synchronized", 
        "overview": "final public mixed Stackable::synchronized ( Closure $block [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The block of code to execute", 
                "name": "block"
            }, 
            {
                "descr": "Variable length list of arguments to use as function arguments to the block", 
                "name": "..."
            }
        ], 
        "path": "php/stackable.synchronized", 
        "type": "Process Control"
    }, 
    "Stackable::unlock": {
        "description": "Unlock the referenced objects storage for the calling context", 
        "name": "Stackable::unlock", 
        "overview": "final public boolean Stackable::unlock ( void )", 
        "parameters": [], 
        "path": "php/stackable.unlock", 
        "type": "Process Control"
    }, 
    "Stackable::wait": {
        "description": "Waits for notification from the Stackable", 
        "name": "Stackable::wait", 
        "overview": "final public boolean Stackable::wait ([ string $timeout ] )", 
        "parameters": [
            {
                "descr": "An optional timeout in millionths of a second.", 
                "name": "timeout"
            }
        ], 
        "path": "php/stackable.wait", 
        "type": "Process Control"
    }, 
    "Thread": {
        "description": "", 
        "name": "Thread", 
        "overview": "final public boolean chunk ( long $size , boolean $preserve )", 
        "parameters": [], 
        "path": "php/class.thread", 
        "type": "Process Control"
    }, 
    "Thread::chunk": {
        "description": "Fetches a chunk of the objects properties table of the given size, optionally preserving keys", 
        "name": "Thread::chunk", 
        "overview": "final public boolean Thread::chunk ( long $size , boolean $preserve )", 
        "parameters": [
            {
                "descr": "The number of items to fetch", 
                "name": "size"
            }, 
            {
                "descr": "Preserve the keys of members, by default false", 
                "name": "preserve"
            }
        ], 
        "path": "php/thread.chunk", 
        "type": "Process Control"
    }, 
    "Thread::getCreatorId": {
        "description": "Will return the identity of the Thread that created the referenced Thread", 
        "name": "Thread::getCreatorId", 
        "overview": "final public long Thread::getCreatorId ( void )", 
        "parameters": [], 
        "path": "php/thread.getcreatorid", 
        "type": "Process Control"
    }, 
    "Thread::getCurrentThreadId": {
        "description": "Will return the identity of the currently executing thread", 
        "name": "Thread::getCurrentThreadId", 
        "overview": "final public static long Thread::getCurrentThreadId ( void )", 
        "parameters": [], 
        "path": "php/thread.getcurrentthreadid", 
        "type": "Process Control"
    }, 
    "Thread::getThreadId": {
        "description": "Will return the identity of the referenced Thread", 
        "name": "Thread::getThreadId", 
        "overview": "final public long Thread::getThreadId ( void )", 
        "parameters": [], 
        "path": "php/thread.getthreadid", 
        "type": "Process Control"
    }, 
    "Thread::isJoined": {
        "description": "Tell if the referenced Thread has been joined by another context", 
        "name": "Thread::isJoined", 
        "overview": "final public boolean Thread::isJoined ( void )", 
        "parameters": [], 
        "path": "php/thread.isjoined", 
        "type": "Process Control"
    }, 
    "Thread::isRunning": {
        "description": "Tell if the referenced Thread is executing", 
        "name": "Thread::isRunning", 
        "overview": "final public boolean Thread::isRunning ( void )", 
        "parameters": [], 
        "path": "php/thread.isrunning", 
        "type": "Process Control"
    }, 
    "Thread::isStarted": {
        "description": "Tell if the referenced Thread has been started", 
        "name": "Thread::isStarted", 
        "overview": "final public boolean Thread::isStarted ( void )", 
        "parameters": [], 
        "path": "php/thread.isstarted", 
        "type": "Process Control"
    }, 
    "Thread::isTerminated": {
        "description": "Tell if the referenced Thread exited, suffered fatal errors, or threw uncaught exceptions during execution", 
        "name": "Thread::isTerminated", 
        "overview": "final public boolean Thread::isTerminated ( void )", 
        "parameters": [], 
        "path": "php/thread.isterminated", 
        "type": "Process Control"
    }, 
    "Thread::isWaiting": {
        "description": "Tell if the referenced Thread is waiting for notification", 
        "name": "Thread::isWaiting", 
        "overview": "final public boolean Thread::isWaiting ( void )", 
        "parameters": [], 
        "path": "php/thread.iswaiting", 
        "type": "Process Control"
    }, 
    "Thread::join": {
        "description": "Causes the calling context to wait for the referenced Thread to finish executing", 
        "name": "Thread::join", 
        "overview": "final public boolean Thread::join ( void )", 
        "parameters": [], 
        "path": "php/thread.join", 
        "type": "Process Control"
    }, 
    "Thread::lock": {
        "description": "Lock the referenced objects storage for the calling context", 
        "name": "Thread::lock", 
        "overview": "final public boolean Thread::lock ( void )", 
        "parameters": [], 
        "path": "php/thread.lock", 
        "type": "Process Control"
    }, 
    "Thread::merge": {
        "description": "Merges data into the current object", 
        "name": "Thread::merge", 
        "overview": "final public boolean Thread::merge ( mixed $from [, mixed $overwrite ] )", 
        "parameters": [
            {
                "descr": "The data to merge", 
                "name": "from"
            }, 
            {
                "descr": "Overwrite existing keys flag, by default true", 
                "name": "overwrite"
            }
        ], 
        "path": "php/thread.merge", 
        "type": "Process Control"
    }, 
    "Thread::notify": {
        "description": "Send notification to the referenced Thread", 
        "name": "Thread::notify", 
        "overview": "final public boolean Thread::notify ( void )", 
        "parameters": [], 
        "path": "php/thread.notify", 
        "type": "Process Control"
    }, 
    "Thread::pop": {
        "description": "Pops an item from the objects properties table", 
        "name": "Thread::pop", 
        "overview": "final public boolean Thread::pop ( void )", 
        "parameters": [], 
        "path": "php/thread.pop", 
        "type": "Process Control"
    }, 
    "Thread::run": {
        "description": "The run method of a Thread is executed in a Thread when a call to Thread::start is made", 
        "name": "Thread::run", 
        "overview": "abstract public void Thread::run ( void )", 
        "parameters": [], 
        "path": "php/thread.run", 
        "type": "Process Control"
    }, 
    "Thread::shift": {
        "description": "Shifts an item from the objects properties table", 
        "name": "Thread::shift", 
        "overview": "final public boolean Thread::shift ( void )", 
        "parameters": [], 
        "path": "php/thread.shift", 
        "type": "Process Control"
    }, 
    "Thread::start": {
        "description": "Will start a new Thread to execute the implemented run method", 
        "name": "Thread::start", 
        "overview": "final public boolean Thread::start ([ long $options ] )", 
        "parameters": [
            {
                "descr": "An optional mask of inheritance constants, by default PTHREADS_INHERIT_ALL", 
                "name": "options"
            }
        ], 
        "path": "php/thread.start", 
        "type": "Process Control"
    }, 
    "Thread::synchronized": {
        "description": "Executes the block while retaining the synchronization lock for the current context.", 
        "name": "Thread::synchronized", 
        "overview": "final public mixed Thread::synchronized ( Closure $block [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The block of code to execute", 
                "name": "block"
            }, 
            {
                "descr": "Variable length list of arguments to use as function arguments to the block", 
                "name": "..."
            }
        ], 
        "path": "php/thread.synchronized", 
        "type": "Process Control"
    }, 
    "Thread::unlock": {
        "description": "Unlock the referenced objects storage for the calling context", 
        "name": "Thread::unlock", 
        "overview": "final public boolean Thread::unlock ( void )", 
        "parameters": [], 
        "path": "php/thread.unlock", 
        "type": "Process Control"
    }, 
    "Thread::wait": {
        "description": "Will cause the calling Thread to wait for notification from the referenced Thread", 
        "name": "Thread::wait", 
        "overview": "final public boolean Thread::wait ([ long $timeout ] )", 
        "parameters": [
            {
                "descr": "An optional timeout in millionths of a second", 
                "name": "timeout"
            }
        ], 
        "path": "php/thread.wait", 
        "type": "Process Control"
    }, 
    "Transliterator": {
        "description": "", 
        "name": "Transliterator", 
        "overview": "public static Transliterator create ( string $id [, int $direction ] )", 
        "parameters": [], 
        "path": "php/class.transliterator", 
        "type": "Internationalization"
    }, 
    "Transliterator::create": {
        "description": "Opens a Transliterator by id.", 
        "name": "Transliterator::create", 
        "overview": "public static Transliterator Transliterator::create ( string $id [, int $direction ] )", 
        "parameters": [
            {
                "descr": "The id.", 
                "name": "id"
            }, 
            {
                "descr": "The direction, defaults to >Transliterator::FORWARD. ", 
                "name": "direction"
            }
        ], 
        "path": "php/transliterator.create", 
        "type": "Internationalization"
    }, 
    "Transliterator::createFromRules": {
        "description": "Creates a Transliterator from rules.", 
        "name": "Transliterator::createFromRules", 
        "overview": "public static Transliterator Transliterator::createFromRules ( string $rules [, string $direction ] )", 
        "parameters": [
            {
                "descr": "The rules.", 
                "name": "rules"
            }, 
            {
                "descr": "The direction, defaults to >Transliterator::FORWARD. ", 
                "name": "direction"
            }
        ], 
        "path": "php/transliterator.createfromrules", 
        "type": "Internationalization"
    }, 
    "Transliterator::createInverse": {
        "description": "Opens the inverse transliterator transliterator.", 
        "name": "Transliterator::createInverse", 
        "overview": "public Transliterator Transliterator::createInverse ( void )", 
        "parameters": [], 
        "path": "php/transliterator.createinverse", 
        "type": "Internationalization"
    }, 
    "Transliterator::getErrorCode": {
        "description": "Gets the last error code for this transliterator.", 
        "name": "Transliterator::getErrorCode", 
        "overview": "public int Transliterator::getErrorCode ( void )", 
        "parameters": [], 
        "path": "php/transliterator.geterrorcode", 
        "type": "Internationalization"
    }, 
    "Transliterator::getErrorMessage": {
        "description": "Gets the last error message for this transliterator.", 
        "name": "Transliterator::getErrorMessage", 
        "overview": "public string Transliterator::getErrorMessage ( void )", 
        "parameters": [], 
        "path": "php/transliterator.geterrormessage", 
        "type": "Internationalization"
    }, 
    "Transliterator::listIDs": {
        "description": "Returns an array with the registered transliterator IDs.", 
        "name": "Transliterator::listIDs", 
        "overview": "public static array Transliterator::listIDs ( void )", 
        "parameters": [], 
        "path": "php/transliterator.listids", 
        "type": "Internationalization"
    }, 
    "Transliterator::transliterate": {
        "description": "Transforms a string or part thereof using an ICU transliterator.", 
        "name": "Transliterator::transliterate", 
        "overview": "public string Transliterator::transliterate ( string $subject [, int $start [, int $end ]] )", 
        "parameters": [
            {
                "descr": "In the procedural version, either a Transliterator or a string from which a Transliterator can be built.", 
                "name": "transliterator"
            }, 
            {
                "descr": "The string to be transformed.", 
                "name": "subject"
            }, 
            {
                "descr": "The start index (in UTF-16 code units) from which the string will start to be transformed, inclusive. ", 
                "name": "start"
            }, 
            {
                "descr": "The end index (in UTF-16 code units) until which the string will be transformed, exclusive. ", 
                "name": "end"
            }
        ], 
        "path": "php/transliterator.transliterate", 
        "type": "Internationalization"
    }, 
    "UConverter": {
        "description": "", 
        "name": "UConverter", 
        "overview": "public __construct ([ string $destination_encoding [, string $source_encoding ]] )", 
        "parameters": [], 
        "path": "php/class.uconverter", 
        "type": "Internationalization"
    }, 
    "UConverter::__construct": {
        "description": "", 
        "name": "UConverter::__construct", 
        "overview": "public UConverter::__construct ([ string $destination_encoding [, string $source_encoding ]] )", 
        "parameters": [], 
        "path": "php/uconverter.construct", 
        "type": "Internationalization"
    }, 
    "UConverter::convert": {
        "description": "", 
        "name": "UConverter::convert", 
        "overview": "public string UConverter::convert ( string $str [, bool $reverse ] )", 
        "parameters": [], 
        "path": "php/uconverter.convert", 
        "type": "Internationalization"
    }, 
    "UConverter::fromUCallback": {
        "description": "", 
        "name": "UConverter::fromUCallback", 
        "overview": "public mixed UConverter::fromUCallback ( integer $reason , string $source , string $codePoint , integer &$error )", 
        "parameters": [], 
        "path": "php/uconverter.fromucallback", 
        "type": "Internationalization"
    }, 
    "UConverter::getAliases": {
        "description": "", 
        "name": "UConverter::getAliases", 
        "overview": "public static array UConverter::getAliases ([ string $name ] )", 
        "parameters": [], 
        "path": "php/uconverter.getaliases", 
        "type": "Internationalization"
    }, 
    "UConverter::getAvailable": {
        "description": "", 
        "name": "UConverter::getAvailable", 
        "overview": "public static array UConverter::getAvailable ( void )", 
        "parameters": [], 
        "path": "php/uconverter.getavailable", 
        "type": "Internationalization"
    }, 
    "UConverter::getDestinationEncoding": {
        "description": "", 
        "name": "UConverter::getDestinationEncoding", 
        "overview": "public string UConverter::getDestinationEncoding ( void )", 
        "parameters": [], 
        "path": "php/uconverter.getdestinationencoding", 
        "type": "Internationalization"
    }, 
    "UConverter::getDestinationType": {
        "description": "", 
        "name": "UConverter::getDestinationType", 
        "overview": "public integer UConverter::getDestinationType ( void )", 
        "parameters": [], 
        "path": "php/uconverter.getdestinationtype", 
        "type": "Internationalization"
    }, 
    "UConverter::getErrorCode": {
        "description": "", 
        "name": "UConverter::getErrorCode", 
        "overview": "public integer UConverter::getErrorCode ( void )", 
        "parameters": [], 
        "path": "php/uconverter.geterrorcode", 
        "type": "Internationalization"
    }, 
    "UConverter::getErrorMessage": {
        "description": "", 
        "name": "UConverter::getErrorMessage", 
        "overview": "public string UConverter::getErrorMessage ( void )", 
        "parameters": [], 
        "path": "php/uconverter.geterrormessage", 
        "type": "Internationalization"
    }, 
    "UConverter::getSourceEncoding": {
        "description": "", 
        "name": "UConverter::getSourceEncoding", 
        "overview": "public string UConverter::getSourceEncoding ( void )", 
        "parameters": [], 
        "path": "php/uconverter.getsourceencoding", 
        "type": "Internationalization"
    }, 
    "UConverter::getSourceType": {
        "description": "", 
        "name": "UConverter::getSourceType", 
        "overview": "public integer UConverter::getSourceType ( void )", 
        "parameters": [], 
        "path": "php/uconverter.getsourcetype", 
        "type": "Internationalization"
    }, 
    "UConverter::getStandards": {
        "description": "", 
        "name": "UConverter::getStandards", 
        "overview": "public static array UConverter::getStandards ( void )", 
        "parameters": [], 
        "path": "php/uconverter.getstandards", 
        "type": "Internationalization"
    }, 
    "UConverter::getSubstChars": {
        "description": "", 
        "name": "UConverter::getSubstChars", 
        "overview": "public string UConverter::getSubstChars ( void )", 
        "parameters": [], 
        "path": "php/uconverter.getsubstchars", 
        "type": "Internationalization"
    }, 
    "UConverter::reasonText": {
        "description": "", 
        "name": "UConverter::reasonText", 
        "overview": "public static string UConverter::reasonText ([ integer $reason ] )", 
        "parameters": [], 
        "path": "php/uconverter.reasontext", 
        "type": "Internationalization"
    }, 
    "UConverter::setDestinationEncoding": {
        "description": "", 
        "name": "UConverter::setDestinationEncoding", 
        "overview": "public void UConverter::setDestinationEncoding ( string $encoding )", 
        "parameters": [], 
        "path": "php/uconverter.setdestinationencoding", 
        "type": "Internationalization"
    }, 
    "UConverter::setSourceEncoding": {
        "description": "", 
        "name": "UConverter::setSourceEncoding", 
        "overview": "public void UConverter::setSourceEncoding ( string $encoding )", 
        "parameters": [], 
        "path": "php/uconverter.setsourceencoding", 
        "type": "Internationalization"
    }, 
    "UConverter::setSubstChars": {
        "description": "", 
        "name": "UConverter::setSubstChars", 
        "overview": "public void UConverter::setSubstChars ( string $chars )", 
        "parameters": [], 
        "path": "php/uconverter.setsubstchars", 
        "type": "Internationalization"
    }, 
    "UConverter::toUCallback": {
        "description": "", 
        "name": "UConverter::toUCallback", 
        "overview": "public mixed UConverter::toUCallback ( integer $reason , string $source , string $codeUnits , integer &$error )", 
        "parameters": [], 
        "path": "php/uconverter.toucallback", 
        "type": "Internationalization"
    }, 
    "UConverter::transcode": {
        "description": "", 
        "name": "UConverter::transcode", 
        "overview": "public static string UConverter::transcode ( string $str , string $toEncoding , string $fromEncoding [, array $options ] )", 
        "parameters": [], 
        "path": "php/uconverter.transcode", 
        "type": "Internationalization"
    }, 
    "UnderflowException": {
        "description": "", 
        "name": "UnderflowException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.underflowexception", 
        "type": "SPL/Exceptions"
    }, 
    "UnexpectedValueException": {
        "description": "", 
        "name": "UnexpectedValueException", 
        "overview": "final public string Exception::getMessage ( void )", 
        "parameters": [], 
        "path": "php/class.unexpectedvalueexception", 
        "type": "SPL/Exceptions"
    }, 
    "VarnishAdmin": {
        "description": "", 
        "name": "VarnishAdmin", 
        "overview": "public bool auth ( void )", 
        "parameters": [], 
        "path": "php/class.varnishadmin", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::__construct": {
        "description": "", 
        "name": "VarnishAdmin::__construct", 
        "overview": "public VarnishAdmin::__construct ([ array $args ] )", 
        "parameters": [
            {
                "descr": "Configuration arguments. The possible keys are: VARNISH_CONFIG_IDENT - local varnish instance identVARNISH_CONFIG_HOST - varnish instance ipVARNISH_CONFIG_PORT - varnish instance portVARNISH_CONFIG_SECRET - varnish instance secretVARNISH_CONFIG_TIMEOUT - connection read timeoutVARNISH_CONFIG_COMPAT - varnish major version compatibility", 
                "name": "args"
            }
        ], 
        "path": "php/varnishadmin.construct", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::auth": {
        "description": "", 
        "name": "VarnishAdmin::auth", 
        "overview": "public bool VarnishAdmin::auth ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.auth", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::ban": {
        "description": "", 
        "name": "VarnishAdmin::ban", 
        "overview": "public int VarnishAdmin::ban ( string $vcl_regex )", 
        "parameters": [
            {
                "descr": "Varnish VCL expression. It's based on the varnish ban command.", 
                "name": "vcl_regex"
            }
        ], 
        "path": "php/varnishadmin.ban", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::banUrl": {
        "description": "", 
        "name": "VarnishAdmin::banUrl", 
        "overview": "public int VarnishAdmin::banUrl ( string $vcl_regex )", 
        "parameters": [
            {
                "descr": "URL regular expression in PCRE compatible syntax. ", 
                "name": "vcl_regex"
            }
        ], 
        "path": "php/varnishadmin.banurl", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::clearPanic": {
        "description": "", 
        "name": "VarnishAdmin::clearPanic", 
        "overview": "public int VarnishAdmin::clearPanic ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.clearpanic", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::connect": {
        "description": "", 
        "name": "VarnishAdmin::connect", 
        "overview": "public bool VarnishAdmin::connect ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.connect", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::disconnect": {
        "description": "", 
        "name": "VarnishAdmin::disconnect", 
        "overview": "public bool VarnishAdmin::disconnect ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.disconnect", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::getPanic": {
        "description": "", 
        "name": "VarnishAdmin::getPanic", 
        "overview": "public string VarnishAdmin::getPanic ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.getpanic", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::getParams": {
        "description": "", 
        "name": "VarnishAdmin::getParams", 
        "overview": "public array VarnishAdmin::getParams ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.getparams", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::isRunning": {
        "description": "", 
        "name": "VarnishAdmin::isRunning", 
        "overview": "public bool VarnishAdmin::isRunning ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.isrunning", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setCompat": {
        "description": "", 
        "name": "VarnishAdmin::setCompat", 
        "overview": "public void VarnishAdmin::setCompat ( int $compat )", 
        "parameters": [
            {
                "descr": "Varnish compatibility option.", 
                "name": "compat"
            }
        ], 
        "path": "php/varnishadmin.setcompat", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setHost": {
        "description": "", 
        "name": "VarnishAdmin::setHost", 
        "overview": "public void VarnishAdmin::setHost ( string $host )", 
        "parameters": [
            {
                "descr": "Connection host configuration parameter.", 
                "name": "host"
            }
        ], 
        "path": "php/varnishadmin.sethost", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setIdent": {
        "description": "", 
        "name": "VarnishAdmin::setIdent", 
        "overview": "public void VarnishAdmin::setIdent ( string $ident )", 
        "parameters": [
            {
                "descr": "Connection ident configuration parameter.", 
                "name": "ident"
            }
        ], 
        "path": "php/varnishadmin.setident", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setParam": {
        "description": "", 
        "name": "VarnishAdmin::setParam", 
        "overview": "public int VarnishAdmin::setParam ( string $name , string|integer $value )", 
        "parameters": [
            {
                "descr": "Varnish configuration param name.", 
                "name": "name"
            }, 
            {
                "descr": "Varnish configuration param value.", 
                "name": "value"
            }
        ], 
        "path": "php/varnishadmin.setparam", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setPort": {
        "description": "", 
        "name": "VarnishAdmin::setPort", 
        "overview": "public void VarnishAdmin::setPort ( int $port )", 
        "parameters": [
            {
                "descr": "Connection port configuration parameter.", 
                "name": "port"
            }
        ], 
        "path": "php/varnishadmin.setport", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setSecret": {
        "description": "", 
        "name": "VarnishAdmin::setSecret", 
        "overview": "public void VarnishAdmin::setSecret ( string $secret )", 
        "parameters": [
            {
                "descr": "Connection secret configuration parameter.", 
                "name": "secret"
            }
        ], 
        "path": "php/varnishadmin.setsecret", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::setTimeout": {
        "description": "", 
        "name": "VarnishAdmin::setTimeout", 
        "overview": "public void VarnishAdmin::setTimeout ( int $timeout )", 
        "parameters": [
            {
                "descr": "Connection timeout configuration parameter.", 
                "name": "timeout"
            }
        ], 
        "path": "php/varnishadmin.settimeout", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::start": {
        "description": "", 
        "name": "VarnishAdmin::start", 
        "overview": "public int VarnishAdmin::start ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.start", 
        "type": "Varnish"
    }, 
    "VarnishAdmin::stop": {
        "description": "", 
        "name": "VarnishAdmin::stop", 
        "overview": "public int VarnishAdmin::stop ( void )", 
        "parameters": [], 
        "path": "php/varnishadmin.stop", 
        "type": "Varnish"
    }, 
    "VarnishLog": {
        "description": "", 
        "name": "VarnishLog", 
        "overview": "public __construct ([ array $args ] )", 
        "parameters": [], 
        "path": "php/class.varnishlog", 
        "type": "Varnish"
    }, 
    "VarnishLog::__construct": {
        "description": "", 
        "name": "VarnishLog::__construct", 
        "overview": "public VarnishLog::__construct ([ array $args ] )", 
        "parameters": [
            {
                "descr": "Configuration arguments. The possible keys are: VARNISH_CONFIG_IDENT - local varnish instance ident path", 
                "name": "args"
            }
        ], 
        "path": "php/varnishlog.construct", 
        "type": "Varnish"
    }, 
    "VarnishLog::getLine": {
        "description": "", 
        "name": "VarnishLog::getLine", 
        "overview": "public array VarnishLog::getLine ( void )", 
        "parameters": [], 
        "path": "php/varnishlog.getline", 
        "type": "Varnish"
    }, 
    "VarnishLog::getTagName": {
        "description": "", 
        "name": "VarnishLog::getTagName", 
        "overview": "public static string VarnishLog::getTagName ( int $index )", 
        "parameters": [
            {
                "descr": "Log tag index.", 
                "name": "index"
            }
        ], 
        "path": "php/varnishlog.gettagname", 
        "type": "Varnish"
    }, 
    "VarnishStat": {
        "description": "", 
        "name": "VarnishStat", 
        "overview": "public __construct ([ array $args ] )", 
        "parameters": [], 
        "path": "php/class.varnishstat", 
        "type": "Varnish"
    }, 
    "VarnishStat::__construct": {
        "description": "", 
        "name": "VarnishStat::__construct", 
        "overview": "public VarnishStat::__construct ([ array $args ] )", 
        "parameters": [
            {
                "descr": "Configuration arguments. The possible keys are: VARNISH_CONFIG_IDENT - local varnish instance ident path", 
                "name": "args"
            }
        ], 
        "path": "php/varnishstat.construct", 
        "type": "Varnish"
    }, 
    "VarnishStat::getSnapshot": {
        "description": "", 
        "name": "VarnishStat::getSnapshot", 
        "overview": "public array VarnishStat::getSnapshot ( void )", 
        "parameters": [], 
        "path": "php/varnishstat.getsnapshot", 
        "type": "Varnish"
    }, 
    "Worker": {
        "description": "", 
        "name": "Worker", 
        "overview": "final public boolean chunk ( long $size , boolean $preserve )", 
        "parameters": [], 
        "path": "php/class.worker", 
        "type": "Process Control"
    }, 
    "Worker::chunk": {
        "description": "Fetches a chunk of the objects properties table of the given size, optionally preserving keys", 
        "name": "Worker::chunk", 
        "overview": "final public boolean Worker::chunk ( long $size , boolean $preserve )", 
        "parameters": [
            {
                "descr": "The number of items to fetch", 
                "name": "size"
            }, 
            {
                "descr": "Preserve the keys of members, by default false", 
                "name": "preserve"
            }
        ], 
        "path": "php/worker.chunk", 
        "type": "Process Control"
    }, 
    "Worker::getCreatorId": {
        "description": "Will return the identity of the Thread that created the referenced Thread", 
        "name": "Worker::getCreatorId", 
        "overview": "final public long Worker::getCreatorId ( void )", 
        "parameters": [], 
        "path": "php/worker.getcreatorid", 
        "type": "Process Control"
    }, 
    "Worker::getStacked": {
        "description": "Returns the number of Stackables waiting to be executed by the referenced Worker", 
        "name": "Worker::getStacked", 
        "overview": "final public int Worker::getStacked ( void )", 
        "parameters": [], 
        "path": "php/worker.getstacked", 
        "type": "Process Control"
    }, 
    "Worker::getThreadId": {
        "description": "Will return the identity of the referenced Worker", 
        "name": "Worker::getThreadId", 
        "overview": "final public long Worker::getThreadId ( void )", 
        "parameters": [], 
        "path": "php/worker.getthreadid", 
        "type": "Process Control"
    }, 
    "Worker::isShutdown": {
        "description": "Tell if the referenced Worker has been shutdown", 
        "name": "Worker::isShutdown", 
        "overview": "final public boolean Worker::isShutdown ( void )", 
        "parameters": [], 
        "path": "php/worker.isshutdown", 
        "type": "Process Control"
    }, 
    "Worker::isWorking": {
        "description": "Tell if a Worker is executing Stackables", 
        "name": "Worker::isWorking", 
        "overview": "final public boolean Worker::isWorking ( void )", 
        "parameters": [], 
        "path": "php/worker.isworking", 
        "type": "Process Control"
    }, 
    "Worker::merge": {
        "description": "Merges data into the current object", 
        "name": "Worker::merge", 
        "overview": "final public boolean Worker::merge ( mixed $from [, mixed $overwrite ] )", 
        "parameters": [
            {
                "descr": "The data to merge", 
                "name": "from"
            }, 
            {
                "descr": "Overwrite existing keys flag, by default true", 
                "name": "overwrite"
            }
        ], 
        "path": "php/worker.merge", 
        "type": "Process Control"
    }, 
    "Worker::pop": {
        "description": "Pops an item from the objects properties table", 
        "name": "Worker::pop", 
        "overview": "final public boolean Worker::pop ( void )", 
        "parameters": [], 
        "path": "php/worker.pop", 
        "type": "Process Control"
    }, 
    "Worker::run": {
        "description": "The run method should prepare the Workers members ( and resources ) - Stackables have access to the Worker and it's methods/members/resources during execution", 
        "name": "Worker::run", 
        "overview": "abstract public void Worker::run ( void )", 
        "parameters": [], 
        "path": "php/worker.run", 
        "type": "Process Control"
    }, 
    "Worker::shift": {
        "description": "Shifts an item from the objects properties table", 
        "name": "Worker::shift", 
        "overview": "final public boolean Worker::shift ( void )", 
        "parameters": [], 
        "path": "php/worker.shift", 
        "type": "Process Control"
    }, 
    "Worker::shutdown": {
        "description": "Shuts down the Worker after executing all the Stackables previously stacked", 
        "name": "Worker::shutdown", 
        "overview": "final public boolean Worker::shutdown ( void )", 
        "parameters": [], 
        "path": "php/worker.shutdown", 
        "type": "Process Control"
    }, 
    "Worker::stack": {
        "description": "Appends the referenced Stackable to the stack of the referenced Worker", 
        "name": "Worker::stack", 
        "overview": "final public int Worker::stack ( Stackable $work )", 
        "parameters": [
            {
                "descr": "An object of type Stackable to be executed by the referenced Worker", 
                "name": "work"
            }
        ], 
        "path": "php/worker.stack", 
        "type": "Process Control"
    }, 
    "Worker::start": {
        "description": "Will start a new Thread, executing Worker::run and then waiting for Stackables", 
        "name": "Worker::start", 
        "overview": "final public boolean Worker::start ([ long $options ] )", 
        "parameters": [
            {
                "descr": "An optional mask of inheritance constants, by default PTHREADS_INHERIT_ALL", 
                "name": "options"
            }
        ], 
        "path": "php/worker.start", 
        "type": "Process Control"
    }, 
    "Worker::unstack": {
        "description": "Removes the referenced Stackable ( or all Stackables if parameters are void ) from stack of the referenced Worker", 
        "name": "Worker::unstack", 
        "overview": "final public int Worker::unstack ([ Stackable $work ] )", 
        "parameters": [
            {
                "descr": "An object of type Stackable", 
                "name": "work"
            }
        ], 
        "path": "php/worker.unstack", 
        "type": "Process Control"
    }, 
    "XMLReader": {
        "description": "", 
        "name": "XMLReader", 
        "overview": "public bool close ( void )", 
        "parameters": [], 
        "path": "php/class.xmlreader", 
        "type": "XML"
    }, 
    "XMLReader::XML": {
        "description": "Set the data containing the XML to parse.", 
        "name": "XMLReader::XML", 
        "overview": "public bool XMLReader::xml ( string $source [, string $encoding [, int $options = 0 ]] )", 
        "parameters": [
            {
                "descr": "String containing the XML to be parsed.", 
                "name": "source"
            }, 
            {
                "descr": "The document encoding or NULL.", 
                "name": "encoding"
            }, 
            {
                "descr": "A bitmask of the LIBXML_* constants.", 
                "name": "options"
            }
        ], 
        "path": "php/xmlreader.xml", 
        "type": "XML"
    }, 
    "XMLReader::close": {
        "description": "Closes the input the XMLReader object is currently parsing.", 
        "name": "XMLReader::close", 
        "overview": "public bool XMLReader::close ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.close", 
        "type": "XML"
    }, 
    "XMLReader::expand": {
        "description": "This method copies the current node and returns the appropriate DOM object.", 
        "name": "XMLReader::expand", 
        "overview": "public DOMNode XMLReader::expand ([ DOMNode $basenode ] )", 
        "parameters": [], 
        "path": "php/xmlreader.expand", 
        "type": "XML"
    }, 
    "XMLReader::getAttribute": {
        "description": "Returns the value of a named attribute or NULL if the attribute does not exist or not positioned on an element node.", 
        "name": "XMLReader::getAttribute", 
        "overview": "public string XMLReader::getAttribute ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/xmlreader.getattribute", 
        "type": "XML"
    }, 
    "XMLReader::getAttributeNo": {
        "description": "Returns the value of an attribute based on its position or an empty string if attribute does not exist or not positioned on an element node.", 
        "name": "XMLReader::getAttributeNo", 
        "overview": "public string XMLReader::getAttributeNo ( int $index )", 
        "parameters": [
            {
                "descr": "The position of the attribute.", 
                "name": "index"
            }
        ], 
        "path": "php/xmlreader.getattributeno", 
        "type": "XML"
    }, 
    "XMLReader::getAttributeNs": {
        "description": "Returns the value of an attribute by name and namespace URI or an empty string if attribute does not exist or not positioned on an element node.", 
        "name": "XMLReader::getAttributeNs", 
        "overview": "public string XMLReader::getAttributeNs ( string $localName , string $namespaceURI )", 
        "parameters": [
            {
                "descr": "The local name.", 
                "name": "localName"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/xmlreader.getattributens", 
        "type": "XML"
    }, 
    "XMLReader::getParserProperty": {
        "description": "Indicates if specified property has been set.", 
        "name": "XMLReader::getParserProperty", 
        "overview": "public bool XMLReader::getParserProperty ( int $property )", 
        "parameters": [
            {
                "descr": "One of the parser option constants.", 
                "name": "property"
            }
        ], 
        "path": "php/xmlreader.getparserproperty", 
        "type": "XML"
    }, 
    "XMLReader::isValid": {
        "description": "Returns a boolean indicating if the document being parsed is currently valid.", 
        "name": "XMLReader::isValid", 
        "overview": "public bool XMLReader::isValid ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.isvalid", 
        "type": "XML"
    }, 
    "XMLReader::lookupNamespace": {
        "description": "Lookup in scope namespace for a given prefix.", 
        "name": "XMLReader::lookupNamespace", 
        "overview": "public bool XMLReader::lookupNamespace ( string $prefix )", 
        "parameters": [
            {
                "descr": "String containing the prefix.", 
                "name": "prefix"
            }
        ], 
        "path": "php/xmlreader.lookupnamespace", 
        "type": "XML"
    }, 
    "XMLReader::moveToAttribute": {
        "description": "Positions cursor on the named attribute.", 
        "name": "XMLReader::moveToAttribute", 
        "overview": "public bool XMLReader::moveToAttribute ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }
        ], 
        "path": "php/xmlreader.movetoattribute", 
        "type": "XML"
    }, 
    "XMLReader::moveToAttributeNo": {
        "description": "Positions cursor on attribute based on its position.", 
        "name": "XMLReader::moveToAttributeNo", 
        "overview": "public bool XMLReader::moveToAttributeNo ( int $index )", 
        "parameters": [
            {
                "descr": "The position of the attribute.", 
                "name": "index"
            }
        ], 
        "path": "php/xmlreader.movetoattributeno", 
        "type": "XML"
    }, 
    "XMLReader::moveToAttributeNs": {
        "description": "Positions cursor on the named attribute in specified namespace.", 
        "name": "XMLReader::moveToAttributeNs", 
        "overview": "public bool XMLReader::moveToAttributeNs ( string $localName , string $namespaceURI )", 
        "parameters": [
            {
                "descr": "The local name.", 
                "name": "localName"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "namespaceURI"
            }
        ], 
        "path": "php/xmlreader.movetoattributens", 
        "type": "XML"
    }, 
    "XMLReader::moveToElement": {
        "description": "Moves cursor to the parent Element of current Attribute.", 
        "name": "XMLReader::moveToElement", 
        "overview": "public bool XMLReader::moveToElement ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.movetoelement", 
        "type": "XML"
    }, 
    "XMLReader::moveToFirstAttribute": {
        "description": "Moves cursor to the first Attribute.", 
        "name": "XMLReader::moveToFirstAttribute", 
        "overview": "public bool XMLReader::moveToFirstAttribute ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.movetofirstattribute", 
        "type": "XML"
    }, 
    "XMLReader::moveToNextAttribute": {
        "description": "Moves cursor to the next Attribute if positioned on an Attribute or moves to first attribute if positioned on an Element.", 
        "name": "XMLReader::moveToNextAttribute", 
        "overview": "public bool XMLReader::moveToNextAttribute ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.movetonextattribute", 
        "type": "XML"
    }, 
    "XMLReader::next": {
        "description": "Positions cursor on the next node skipping all subtrees.", 
        "name": "XMLReader::next", 
        "overview": "public bool XMLReader::next ([ string $localname ] )", 
        "parameters": [
            {
                "descr": "The name of the next node to move to.", 
                "name": "localname"
            }
        ], 
        "path": "php/xmlreader.next", 
        "type": "XML"
    }, 
    "XMLReader::open": {
        "description": "Set the URI containing the XML document to be parsed.", 
        "name": "XMLReader::open", 
        "overview": "public bool XMLReader::open ( string $URI [, string $encoding [, int $options = 0 ]] )", 
        "parameters": [
            {
                "descr": "URI pointing to the document.", 
                "name": "URI"
            }, 
            {
                "descr": "The document encoding or NULL.", 
                "name": "encoding"
            }, 
            {
                "descr": "A bitmask of the LIBXML_* constants.", 
                "name": "options"
            }
        ], 
        "path": "php/xmlreader.open", 
        "type": "XML"
    }, 
    "XMLReader::read": {
        "description": "Moves cursor to the next node in the document.", 
        "name": "XMLReader::read", 
        "overview": "public bool XMLReader::read ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.read", 
        "type": "XML"
    }, 
    "XMLReader::readInnerXML": {
        "description": "Reads the contents of the current node, including child nodes and markup.", 
        "name": "XMLReader::readInnerXML", 
        "overview": "public string XMLReader::readInnerXML ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.readinnerxml", 
        "type": "XML"
    }, 
    "XMLReader::readOuterXML": {
        "description": "Reads the contents of the current node, including the node itself.", 
        "name": "XMLReader::readOuterXML", 
        "overview": "public string XMLReader::readOuterXML ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.readouterxml", 
        "type": "XML"
    }, 
    "XMLReader::readString": {
        "description": "Reads the contents of the current node as a string.", 
        "name": "XMLReader::readString", 
        "overview": "public string XMLReader::readString ( void )", 
        "parameters": [], 
        "path": "php/xmlreader.readstring", 
        "type": "XML"
    }, 
    "XMLReader::setParserProperty": {
        "description": "Set parser options. The options must be set after XMLReader::open() or XMLReader::xml() are called and before the first XMLReader::read() call.", 
        "name": "XMLReader::setParserProperty", 
        "overview": "public bool XMLReader::setParserProperty ( int $property , bool $value )", 
        "parameters": [
            {
                "descr": "One of the parser option constants.", 
                "name": "property"
            }, 
            {
                "descr": "If set to TRUE the option will be enabled otherwise will be disabled.", 
                "name": "value"
            }
        ], 
        "path": "php/xmlreader.setparserproperty", 
        "type": "XML"
    }, 
    "XMLReader::setRelaxNGSchema": {
        "description": "Set the filename or URI for the RelaxNG Schema to use for validation.", 
        "name": "XMLReader::setRelaxNGSchema", 
        "overview": "public bool XMLReader::setRelaxNGSchema ( string $filename )", 
        "parameters": [
            {
                "descr": "filename or URI pointing to a RelaxNG Schema.", 
                "name": "filename"
            }
        ], 
        "path": "php/xmlreader.setrelaxngschema", 
        "type": "XML"
    }, 
    "XMLReader::setRelaxNGSchemaSource": {
        "description": "Set the data containing a RelaxNG Schema to use for validation.", 
        "name": "XMLReader::setRelaxNGSchemaSource", 
        "overview": "public bool XMLReader::setRelaxNGSchemaSource ( string $source )", 
        "parameters": [
            {
                "descr": "String containing the RelaxNG Schema.", 
                "name": "source"
            }
        ], 
        "path": "php/xmlreader.setrelaxngschemasource", 
        "type": "XML"
    }, 
    "XMLReader::setSchema": {
        "description": "Use W3C XSD schema to validate the document as it is processed. Activation is only possible before the first Read().", 
        "name": "XMLReader::setSchema", 
        "overview": "public bool XMLReader::setSchema ( string $filename )", 
        "parameters": [
            {
                "descr": "The filename of the XSD schema.", 
                "name": "filename"
            }
        ], 
        "path": "php/xmlreader.setschema", 
        "type": "XML"
    }, 
    "XMLWriter::endAttribute": {
        "description": "Ends the current attribute.", 
        "name": "XMLWriter::endAttribute", 
        "overview": "bool XMLWriter::endAttribute ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-attribute", 
        "type": "XML"
    }, 
    "XMLWriter::endCData": {
        "description": "Ends the current CDATA section.", 
        "name": "XMLWriter::endCData", 
        "overview": "bool XMLWriter::endCData ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-cdata", 
        "type": "XML"
    }, 
    "XMLWriter::endComment": {
        "description": "Ends the current comment.", 
        "name": "XMLWriter::endComment", 
        "overview": "bool XMLWriter::endComment ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-comment", 
        "type": "XML"
    }, 
    "XMLWriter::endDTD": {
        "description": "Ends the DTD of the document.", 
        "name": "XMLWriter::endDTD", 
        "overview": "bool XMLWriter::endDTD ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd", 
        "type": "XML"
    }, 
    "XMLWriter::endDTDAttlist": {
        "description": "Ends the current DTD attribute list.", 
        "name": "XMLWriter::endDTDAttlist", 
        "overview": "bool XMLWriter::endDTDAttlist ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd-attlist", 
        "type": "XML"
    }, 
    "XMLWriter::endDTDElement": {
        "description": "Ends the current DTD element.", 
        "name": "XMLWriter::endDTDElement", 
        "overview": "bool XMLWriter::endDTDElement ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd-element", 
        "type": "XML"
    }, 
    "XMLWriter::endDTDEntity": {
        "description": "Ends the current DTD entity.", 
        "name": "XMLWriter::endDTDEntity", 
        "overview": "bool XMLWriter::endDTDEntity ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-dtd-entity", 
        "type": "XML"
    }, 
    "XMLWriter::endDocument": {
        "description": "Ends the current document.", 
        "name": "XMLWriter::endDocument", 
        "overview": "bool XMLWriter::endDocument ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-document", 
        "type": "XML"
    }, 
    "XMLWriter::endElement": {
        "description": "Ends the current element.", 
        "name": "XMLWriter::endElement", 
        "overview": "bool XMLWriter::endElement ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-element", 
        "type": "XML"
    }, 
    "XMLWriter::endPI": {
        "description": "Ends the current processing instruction.", 
        "name": "XMLWriter::endPI", 
        "overview": "bool XMLWriter::endPI ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-end-pi", 
        "type": "XML"
    }, 
    "XMLWriter::flush": {
        "description": "Flushes the current buffer.", 
        "name": "XMLWriter::flush", 
        "overview": "mixed XMLWriter::flush ([ bool $empty = true ] )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "Whether to empty the buffer or not. ", 
                "name": "empty"
            }
        ], 
        "path": "php/function.xmlwriter-flush", 
        "type": "XML"
    }, 
    "XMLWriter::fullEndElement": {
        "description": "End the current xml element. Writes an end tag even if the element is empty.", 
        "name": "XMLWriter::fullEndElement", 
        "overview": "bool XMLWriter::fullEndElement ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-full-end-element", 
        "type": "XML"
    }, 
    "XMLWriter::openMemory": {
        "description": "Creates a new XMLWriter using memory for string output.", 
        "name": "XMLWriter::openMemory", 
        "overview": "bool XMLWriter::openMemory ( void )", 
        "parameters": [], 
        "path": "php/function.xmlwriter-open-memory", 
        "type": "XML"
    }, 
    "XMLWriter::openURI": {
        "description": "Creates a new XMLWriter using uri for the output.", 
        "name": "XMLWriter::openURI", 
        "overview": "bool XMLWriter::openURI ( string $uri )", 
        "parameters": [
            {
                "descr": "The URI of the resource for the output.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xmlwriter-open-uri", 
        "type": "XML"
    }, 
    "XMLWriter::outputMemory": {
        "description": "Returns the current buffer.", 
        "name": "XMLWriter::outputMemory", 
        "overview": "string XMLWriter::outputMemory ([ bool $flush = true ] )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "Whether to flush the output buffer or not. ", 
                "name": "flush"
            }
        ], 
        "path": "php/function.xmlwriter-output-memory", 
        "type": "XML"
    }, 
    "XMLWriter::setIndent": {
        "description": "Toggles indentation on or off.", 
        "name": "XMLWriter::setIndent", 
        "overview": "bool XMLWriter::setIndent ( bool $indent )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "Whether indentation is enabled.", 
                "name": "indent"
            }
        ], 
        "path": "php/function.xmlwriter-set-indent", 
        "type": "XML"
    }, 
    "XMLWriter::setIndentString": {
        "description": "Sets the string which will be used to indent each element/attribute of the resulting xml.", 
        "name": "XMLWriter::setIndentString", 
        "overview": "bool XMLWriter::setIndentString ( string $indentString )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The indentation string.", 
                "name": "indentString"
            }
        ], 
        "path": "php/function.xmlwriter-set-indent-string", 
        "type": "XML"
    }, 
    "XMLWriter::startAttribute": {
        "description": "Starts an attribute.", 
        "name": "XMLWriter::startAttribute", 
        "overview": "bool XMLWriter::startAttribute ( string $name )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-attribute", 
        "type": "XML"
    }, 
    "XMLWriter::startAttributeNS": {
        "description": "Starts a namespaced attribute.", 
        "name": "XMLWriter::startAttributeNS", 
        "overview": "bool XMLWriter::startAttributeNS ( string $prefix , string $name , string $uri )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xmlwriter-start-attribute-ns", 
        "type": "XML"
    }, 
    "XMLWriter::startCData": {
        "description": "Starts a CDATA.", 
        "name": "XMLWriter::startCData", 
        "overview": "bool XMLWriter::startCData ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-start-cdata", 
        "type": "XML"
    }, 
    "XMLWriter::startComment": {
        "description": "Starts a comment.", 
        "name": "XMLWriter::startComment", 
        "overview": "bool XMLWriter::startComment ( void )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }
        ], 
        "path": "php/function.xmlwriter-start-comment", 
        "type": "XML"
    }, 
    "XMLWriter::startDTD": {
        "description": "Starts a DTD.", 
        "name": "XMLWriter::startDTD", 
        "overview": "bool XMLWriter::startDTD ( string $qualifiedName [, string $publicId [, string $systemId ]] )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The qualified name of the document type to create.", 
                "name": "qualifiedName"
            }, 
            {
                "descr": "The external subset public identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "The external subset system identifier.", 
                "name": "systemId"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd", 
        "type": "XML"
    }, 
    "XMLWriter::startDTDAttlist": {
        "description": "Starts a DTD attribute list.", 
        "name": "XMLWriter::startDTDAttlist", 
        "overview": "bool XMLWriter::startDTDAttlist ( string $name )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The attribute list name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd-attlist", 
        "type": "XML"
    }, 
    "XMLWriter::startDTDElement": {
        "description": "Starts a DTD element.", 
        "name": "XMLWriter::startDTDElement", 
        "overview": "bool XMLWriter::startDTDElement ( string $qualifiedName )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The qualified name of the document type to create.", 
                "name": "qualifiedName"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd-element", 
        "type": "XML"
    }, 
    "XMLWriter::startDTDEntity": {
        "description": "Starts a DTD entity.", 
        "name": "XMLWriter::startDTDEntity", 
        "overview": "bool XMLWriter::startDTDEntity ( string $name , bool $isparam )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the entity.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-dtd-entity", 
        "type": "XML"
    }, 
    "XMLWriter::startDocument": {
        "description": "Starts a document.", 
        "name": "XMLWriter::startDocument", 
        "overview": "bool XMLWriter::startDocument ([ string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The version number of the document as part of the XML declaration.", 
                "name": "version"
            }, 
            {
                "descr": "The encoding of the document as part of the XML declaration.", 
                "name": "encoding"
            }, 
            {
                "descr": "yes or no.", 
                "name": "standalone"
            }
        ], 
        "path": "php/function.xmlwriter-start-document", 
        "type": "XML"
    }, 
    "XMLWriter::startElement": {
        "description": "Starts an element.", 
        "name": "XMLWriter::startElement", 
        "overview": "bool XMLWriter::startElement ( string $name )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xmlwriter-start-element", 
        "type": "XML"
    }, 
    "XMLWriter::startElementNS": {
        "description": "Starts a namespaced element.", 
        "name": "XMLWriter::startElementNS", 
        "overview": "bool XMLWriter::startElementNS ( string $prefix , string $name , string $uri )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xmlwriter-start-element-ns", 
        "type": "XML"
    }, 
    "XMLWriter::startPI": {
        "description": "Starts a processing instruction tag.", 
        "name": "XMLWriter::startPI", 
        "overview": "bool XMLWriter::startPI ( string $target )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The target of the processing instruction.", 
                "name": "target"
            }
        ], 
        "path": "php/function.xmlwriter-start-pi", 
        "type": "XML"
    }, 
    "XMLWriter::text": {
        "description": "Writes a text.", 
        "name": "XMLWriter::text", 
        "overview": "bool XMLWriter::text ( string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The contents of the text.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-text", 
        "type": "XML"
    }, 
    "XMLWriter::writeAttribute": {
        "description": "Writes a full attribute.", 
        "name": "XMLWriter::writeAttribute", 
        "overview": "bool XMLWriter::writeAttribute ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the attribute.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the attribute.", 
                "name": "value"
            }
        ], 
        "path": "php/function.xmlwriter-write-attribute", 
        "type": "XML"
    }, 
    "XMLWriter::writeAttributeNS": {
        "description": "Writes a full namespaced attribute.", 
        "name": "XMLWriter::writeAttributeNS", 
        "overview": "bool XMLWriter::writeAttributeNS ( string $prefix , string $name , string $uri , string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }, 
            {
                "descr": "The attribute value.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-attribute-ns", 
        "type": "XML"
    }, 
    "XMLWriter::writeCData": {
        "description": "Writes a full CDATA.", 
        "name": "XMLWriter::writeCData", 
        "overview": "bool XMLWriter::writeCData ( string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The contents of the CDATA.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-cdata", 
        "type": "XML"
    }, 
    "XMLWriter::writeComment": {
        "description": "Writes a full comment.", 
        "name": "XMLWriter::writeComment", 
        "overview": "bool XMLWriter::writeComment ( string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The contents of the comment.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-comment", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTD": {
        "description": "Writes a full DTD.", 
        "name": "XMLWriter::writeDTD", 
        "overview": "bool XMLWriter::writeDTD ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The DTD name.", 
                "name": "name"
            }, 
            {
                "descr": "The external subset public identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "The external subset system identifier.", 
                "name": "systemId"
            }, 
            {
                "descr": "The content of the DTD.", 
                "name": "subset"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTDAttlist": {
        "description": "Writes a DTD attribute list.", 
        "name": "XMLWriter::writeDTDAttlist", 
        "overview": "bool XMLWriter::writeDTDAttlist ( string $name , string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the DTD attribute list.", 
                "name": "name"
            }, 
            {
                "descr": "The content of the DTD attribute list.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd-attlist", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTDElement": {
        "description": "Writes a full DTD element.", 
        "name": "XMLWriter::writeDTDElement", 
        "overview": "bool XMLWriter::writeDTDElement ( string $name , string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the DTD element.", 
                "name": "name"
            }, 
            {
                "descr": "The content of the element.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd-element", 
        "type": "XML"
    }, 
    "XMLWriter::writeDTDEntity": {
        "description": "Writes a full DTD entity.", 
        "name": "XMLWriter::writeDTDEntity", 
        "overview": "bool XMLWriter::writeDTDEntity ( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The name of the entity.", 
                "name": "name"
            }, 
            {
                "descr": "The content of the entity.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-dtd-entity", 
        "type": "XML"
    }, 
    "XMLWriter::writeElement": {
        "description": "Writes a full element tag.", 
        "name": "XMLWriter::writeElement", 
        "overview": "bool XMLWriter::writeElement ( string $name [, string $content ] )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }, 
            {
                "descr": "The element contents.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-element", 
        "type": "XML"
    }, 
    "XMLWriter::writeElementNS": {
        "description": "Writes a full namespaced element tag.", 
        "name": "XMLWriter::writeElementNS", 
        "overview": "bool XMLWriter::writeElementNS ( string $prefix , string $name , string $uri [, string $content ] )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The namespace prefix.", 
                "name": "prefix"
            }, 
            {
                "descr": "The element name.", 
                "name": "name"
            }, 
            {
                "descr": "The namespace URI.", 
                "name": "uri"
            }, 
            {
                "descr": "The element contents.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-element-ns", 
        "type": "XML"
    }, 
    "XMLWriter::writePI": {
        "description": "Writes a processing instruction.", 
        "name": "XMLWriter::writePI", 
        "overview": "bool XMLWriter::writePI ( string $target , string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The target of the processing instruction.", 
                "name": "target"
            }, 
            {
                "descr": "The content of the processing instruction.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-pi", 
        "type": "XML"
    }, 
    "XMLWriter::writeRaw": {
        "description": "Writes a raw xml text.", 
        "name": "XMLWriter::writeRaw", 
        "overview": "bool XMLWriter::writeRaw ( string $content )", 
        "parameters": [
            {
                "descr": "Only for procedural calls. The XMLWriter resource that is being modified. ", 
                "name": "xmlwriter"
            }, 
            {
                "descr": "The text string to write.", 
                "name": "content"
            }
        ], 
        "path": "php/function.xmlwriter-write-raw", 
        "type": "XML"
    }, 
    "XSLTProcessor": {
        "description": "", 
        "name": "XSLTProcessor", 
        "overview": "string getParameter ( string $namespaceURI , string $localName )", 
        "parameters": [], 
        "path": "php/class.xsltprocessor", 
        "type": "XML"
    }, 
    "XSLTProcessor::getParameter": {
        "description": "Gets a parameter if previously set by XSLTProcessor::setParameter().", 
        "name": "XSLTProcessor::getParameter", 
        "overview": "string XSLTProcessor::getParameter ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI of the XSLT parameter.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the XSLT parameter.", 
                "name": "localName"
            }
        ], 
        "path": "php/xsltprocessor.getparameter", 
        "type": "XML"
    }, 
    "XSLTProcessor::hasExsltSupport": {
        "description": "This method determines if PHP was built with the \u00bb EXSLT library.", 
        "name": "XSLTProcessor::hasExsltSupport", 
        "overview": "bool XSLTProcessor::hasExsltSupport ( void )", 
        "parameters": [], 
        "path": "php/xsltprocessor.hasexsltsupport", 
        "type": "XML"
    }, 
    "XSLTProcessor::importStylesheet": {
        "description": "This method imports the stylesheet into the XSLTProcessor for transformations.", 
        "name": "XSLTProcessor::importStylesheet", 
        "overview": "void XSLTProcessor::importStylesheet ( object $stylesheet )", 
        "parameters": [
            {
                "descr": "The imported style sheet as a DOMDocument or SimpleXMLElement object.", 
                "name": "stylesheet"
            }
        ], 
        "path": "php/xsltprocessor.importstylesheet", 
        "type": "XML"
    }, 
    "XSLTProcessor::registerPHPFunctions": {
        "description": "This method enables the ability to use PHP functions as XSLT functions within XSL stylesheets.", 
        "name": "XSLTProcessor::registerPHPFunctions", 
        "overview": "void XSLTProcessor::registerPHPFunctions ([ mixed $restrict ] )", 
        "parameters": [
            {
                "descr": "Use this parameter to only allow certain functions to be called from XSLT. ", 
                "name": "restrict"
            }
        ], 
        "path": "php/xsltprocessor.registerphpfunctions", 
        "type": "XML"
    }, 
    "XSLTProcessor::removeParameter": {
        "description": "Removes a parameter, if set. This will make the processor use the default value for the parameter as specified in the stylesheet.", 
        "name": "XSLTProcessor::removeParameter", 
        "overview": "bool XSLTProcessor::removeParameter ( string $namespaceURI , string $localName )", 
        "parameters": [
            {
                "descr": "The namespace URI of the XSLT parameter.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "The local name of the XSLT parameter.", 
                "name": "localName"
            }
        ], 
        "path": "php/xsltprocessor.removeparameter", 
        "type": "XML"
    }, 
    "XSLTProcessor::setParameter": {
        "description": "Sets the value of one or more parameters to be used in subsequent transformations with XSLTProcessor. If the parameter doesn't exist in the stylesheet it will be ignored.", 
        "name": "XSLTProcessor::setParameter", 
        "overview": "bool XSLTProcessor::setParameter ( string $namespace , string $name , string $value )", 
        "parameters": [
            {
                "descr": "The namespace URI of the XSLT parameter.", 
                "name": "namespace"
            }, 
            {
                "descr": "The local name of the XSLT parameter.", 
                "name": "name"
            }, 
            {
                "descr": "The new value of the XSLT parameter.", 
                "name": "value"
            }, 
            {
                "descr": "An array of name => value pairs. ", 
                "name": "options"
            }
        ], 
        "path": "php/xsltprocessor.setparameter", 
        "type": "XML"
    }, 
    "XSLTProcessor::setProfiling": {
        "description": "Sets the file to output profiling information when processing a stylesheet.", 
        "name": "XSLTProcessor::setProfiling", 
        "overview": "bool XSLTProcessor::setProfiling ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file to dump profiling information.", 
                "name": "filename"
            }
        ], 
        "path": "php/xsltprocessor.setprofiling", 
        "type": "XML"
    }, 
    "XSLTProcessor::transformToDoc": {
        "description": "Transforms the source node to a DOMDocument applying the stylesheet given by the XSLTProcessor::importStylesheet() method.", 
        "name": "XSLTProcessor::transformToDoc", 
        "overview": "DOMDocument XSLTProcessor::transformToDoc ( DOMNode $doc )", 
        "parameters": [
            {
                "descr": "The node to be transformed.", 
                "name": "doc"
            }
        ], 
        "path": "php/xsltprocessor.transformtodoc", 
        "type": "XML"
    }, 
    "XSLTProcessor::transformToUri": {
        "description": "Transforms the source node to an URI applying the stylesheet given by the XSLTProcessor::importStylesheet() method.", 
        "name": "XSLTProcessor::transformToUri", 
        "overview": "int XSLTProcessor::transformToURI ( DOMDocument $doc , string $uri )", 
        "parameters": [
            {
                "descr": "The document to transform.", 
                "name": "doc"
            }, 
            {
                "descr": "The target URI for the transformation.", 
                "name": "uri"
            }
        ], 
        "path": "php/xsltprocessor.transformtouri", 
        "type": "XML"
    }, 
    "XSLTProcessor::transformToXML": {
        "description": "Transforms the source node to a string applying the stylesheet given by the xsltprocessor::importStylesheet() method.", 
        "name": "XSLTProcessor::transformToXML", 
        "overview": "string XSLTProcessor::transformToXML ( DOMDocument $doc )", 
        "parameters": [
            {
                "descr": "The transformed document.", 
                "name": "doc"
            }
        ], 
        "path": "php/xsltprocessor.transformtoxml", 
        "type": "XML"
    }, 
    "XsltProcessor::getSecurityPrefs": {
        "description": "", 
        "name": "XsltProcessor::getSecurityPrefs", 
        "overview": "public int XsltProcessor::getSecurityPrefs ( void )", 
        "parameters": [], 
        "path": "php/xsltprocessor.getsecurityprefs", 
        "type": "XML"
    }, 
    "XsltProcessor::setSecurityPrefs": {
        "description": "", 
        "name": "XsltProcessor::setSecurityPrefs", 
        "overview": "public int XsltProcessor::setSecurityPrefs ( int $securityPrefs )", 
        "parameters": [], 
        "path": "php/xsltprocessor.setsecurityprefs", 
        "type": "XML"
    }, 
    "Yaf_Action_Abstract": {
        "description": "", 
        "name": "Yaf_Action_Abstract", 
        "overview": "abstract publicmixed execute ([ mixed $arg [, mixed $... ]] )", 
        "parameters": [], 
        "path": "php/class.yaf-action-abstract", 
        "type": "Yaf"
    }, 
    "Yaf_Action_Abstract::execute": {
        "description": "user should always define this method for a action, this is the entry point of an action. Yaf_Action_Abstract::execute() may have agruments.", 
        "name": "Yaf_Action_Abstract::execute", 
        "overview": "abstract publicmixed Yaf_Action_Abstract::execute ([ mixed $arg [, mixed $... ]] )", 
        "parameters": [], 
        "path": "php/yaf-action-abstract.execute", 
        "type": "Yaf"
    }, 
    "Yaf_Action_Abstract::getController": {
        "description": "retrieve current controller object.", 
        "name": "Yaf_Action_Abstract::getController", 
        "overview": "publicYaf_Controller_Abstract Yaf_Action_Abstract::getController ( void )", 
        "parameters": [], 
        "path": "php/yaf-action-abstract.getcontroller", 
        "type": "Yaf"
    }, 
    "Yaf_Application": {
        "description": "", 
        "name": "Yaf_Application", 
        "overview": "public static void app ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-application", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__clone": {
        "description": "", 
        "name": "Yaf_Application::__clone", 
        "overview": "private void Yaf_Application::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__construct": {
        "description": "Instance a Yaf_Application.", 
        "name": "Yaf_Application::__construct", 
        "overview": "publicYaf_Application::__construct ( mixed $config [, string $envrion ] )", 
        "parameters": [
            {
                "descr": "A ini config file path, or a config array   If is a ini config file, there should be a section named as the one defined by yaf.environ, which is \"product\" by default. ", 
                "name": "config"
            }, 
            {
                "descr": "Which section will be loaded as the final config", 
                "name": "envrion"
            }
        ], 
        "path": "php/yaf-application.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__destruct": {
        "description": "", 
        "name": "Yaf_Application::__destruct", 
        "overview": "public void Yaf_Application::__destruct ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.destruct", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__sleep": {
        "description": "", 
        "name": "Yaf_Application::__sleep", 
        "overview": "private void Yaf_Application::__sleep ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.sleep", 
        "type": "Yaf"
    }, 
    "Yaf_Application::__wakeup": {
        "description": "", 
        "name": "Yaf_Application::__wakeup", 
        "overview": "private void Yaf_Application::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.wakeup", 
        "type": "Yaf"
    }, 
    "Yaf_Application::app": {
        "description": "Retrieve the Yaf_Application instance. Alternatively, we also could use Yaf_Dispatcher::getApplication().", 
        "name": "Yaf_Application::app", 
        "overview": "public static void Yaf_Application::app ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.app", 
        "type": "Yaf"
    }, 
    "Yaf_Application::bootstrap": {
        "description": "Run a Bootstrap, all the methods defined in the Bootstrap and named with prefix \"_init\" will be called according to their declaration order, if the parameter bootstrap is not supplied, Yaf will look for a Bootstrap under application.directory.", 
        "name": "Yaf_Application::bootstrap", 
        "overview": "public void Yaf_Application::bootstrap ([ Yaf_Bootstrap_Abstract $bootstrap ] )", 
        "parameters": [
            {
                "descr": "A Yaf_Bootstrap_Abstract instance", 
                "name": "bootstrap"
            }
        ], 
        "path": "php/yaf-application.bootstrap", 
        "type": "Yaf"
    }, 
    "Yaf_Application::clearLastError": {
        "description": "", 
        "name": "Yaf_Application::clearLastError", 
        "overview": "public Yaf_Application Yaf_Application::clearLastError ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.clearlasterror", 
        "type": "Yaf"
    }, 
    "Yaf_Application::environ": {
        "description": "Retrive environ which was defined in yaf.environ which has a default value \"product\".", 
        "name": "Yaf_Application::environ", 
        "overview": "public void Yaf_Application::environ ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.environ", 
        "type": "Yaf"
    }, 
    "Yaf_Application::execute": {
        "description": "This method is typically used to run Yaf_Application in a crontab work. Make the crontab work can also use the autoloader and Bootstrap mechanism.", 
        "name": "Yaf_Application::execute", 
        "overview": "public void Yaf_Application::execute ( callable $entry , string $... )", 
        "parameters": [
            {
                "descr": "a valid callback", 
                "name": "entry"
            }, 
            {
                "descr": "parameters will pass to the callback", 
                "name": "..."
            }
        ], 
        "path": "php/yaf-application.execute", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getAppDirectory": {
        "description": "", 
        "name": "Yaf_Application::getAppDirectory", 
        "overview": "public Yaf_Application Yaf_Application::getAppDirectory ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.getappdirectory", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getConfig": {
        "description": "", 
        "name": "Yaf_Application::getConfig", 
        "overview": "public Yaf_Config_Abstract Yaf_Application::getConfig ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.getconfig", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getDispatcher": {
        "description": "", 
        "name": "Yaf_Application::getDispatcher", 
        "overview": "public Yaf_Dispatcher Yaf_Application::getDispatcher ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.getdispatcher", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getLastErrorMsg": {
        "description": "", 
        "name": "Yaf_Application::getLastErrorMsg", 
        "overview": "public string Yaf_Application::getLastErrorMsg ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.getlasterrormsg", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getLastErrorNo": {
        "description": "", 
        "name": "Yaf_Application::getLastErrorNo", 
        "overview": "public int Yaf_Application::getLastErrorNo ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.getlasterrorno", 
        "type": "Yaf"
    }, 
    "Yaf_Application::getModules": {
        "description": "Get the modules list defined in config, if no one defined, there will always be a module named \"Index\".", 
        "name": "Yaf_Application::getModules", 
        "overview": "public array Yaf_Application::getModules ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.getmodules", 
        "type": "Yaf"
    }, 
    "Yaf_Application::run": {
        "description": "Run a Yaf_Application, let the Yaf_Application accept a request and route this request, dispatch to controller/action and render response. Finally, return the response to the client.", 
        "name": "Yaf_Application::run", 
        "overview": "public void Yaf_Application::run ( void )", 
        "parameters": [], 
        "path": "php/yaf-application.run", 
        "type": "Yaf"
    }, 
    "Yaf_Application::setAppDirectory": {
        "description": "", 
        "name": "Yaf_Application::setAppDirectory", 
        "overview": "public Yaf_Application Yaf_Application::setAppDirectory ( string $directory )", 
        "parameters": [], 
        "path": "php/yaf-application.setappdirectory", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract": {
        "description": "", 
        "name": "Yaf_Config_Abstract", 
        "overview": "abstract public mixed get ( string $name , mixed $value )", 
        "parameters": [], 
        "path": "php/class.yaf-config-abstract", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::get": {
        "description": "", 
        "name": "Yaf_Config_Abstract::get", 
        "overview": "abstract public mixed Yaf_Config_Abstract::get ( string $name , mixed $value )", 
        "parameters": [], 
        "path": "php/yaf-config-abstract.get", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::readonly": {
        "description": "", 
        "name": "Yaf_Config_Abstract::readonly", 
        "overview": "abstract public bool Yaf_Config_Abstract::readonly ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-abstract.readonly", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::set": {
        "description": "", 
        "name": "Yaf_Config_Abstract::set", 
        "overview": "abstract public Yaf_Config_Abstract Yaf_Config_Abstract::set ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-abstract.set", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Abstract::toArray": {
        "description": "", 
        "name": "Yaf_Config_Abstract::toArray", 
        "overview": "abstract public array Yaf_Config_Abstract::toArray ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-abstract.toarray", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini": {
        "description": "", 
        "name": "Yaf_Config_Ini", 
        "overview": "public __construct ( string $config_file [, string $section ] )", 
        "parameters": [], 
        "path": "php/class.yaf-config-ini", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__construct": {
        "description": "Yaf_Config_Ini constructor", 
        "name": "Yaf_Config_Ini::__construct", 
        "overview": "public Yaf_Config_Ini::__construct ( string $config_file [, string $section ] )", 
        "parameters": [
            {
                "descr": "path to an INI configure file", 
                "name": "config_file"
            }, 
            {
                "descr": "which section in that INI file you want to be parsed", 
                "name": "section"
            }
        ], 
        "path": "php/yaf-config-ini.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__get": {
        "description": "", 
        "name": "Yaf_Config_Ini::__get", 
        "overview": "public void Yaf_Config_Ini::__get ([ string $name ] )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.get", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__isset": {
        "description": "", 
        "name": "Yaf_Config_Ini::__isset", 
        "overview": "public void Yaf_Config_Ini::__isset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.isset", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::__set": {
        "description": "", 
        "name": "Yaf_Config_Ini::__set", 
        "overview": "public void Yaf_Config_Ini::__set ( string $name , mixed $value )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.set", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::count": {
        "description": "", 
        "name": "Yaf_Config_Ini::count", 
        "overview": "public void Yaf_Config_Ini::count ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.count", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::current": {
        "description": "", 
        "name": "Yaf_Config_Ini::current", 
        "overview": "public void Yaf_Config_Ini::current ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.current", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::key": {
        "description": "", 
        "name": "Yaf_Config_Ini::key", 
        "overview": "public void Yaf_Config_Ini::key ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.key", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::next": {
        "description": "", 
        "name": "Yaf_Config_Ini::next", 
        "overview": "public void Yaf_Config_Ini::next ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.next", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetExists": {
        "description": "", 
        "name": "Yaf_Config_Ini::offsetExists", 
        "overview": "public void Yaf_Config_Ini::offsetExists ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.offsetexists", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetGet": {
        "description": "", 
        "name": "Yaf_Config_Ini::offsetGet", 
        "overview": "public void Yaf_Config_Ini::offsetGet ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.offsetget", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetSet": {
        "description": "", 
        "name": "Yaf_Config_Ini::offsetSet", 
        "overview": "public void Yaf_Config_Ini::offsetSet ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.offsetset", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::offsetUnset": {
        "description": "", 
        "name": "Yaf_Config_Ini::offsetUnset", 
        "overview": "public void Yaf_Config_Ini::offsetUnset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.offsetunset", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::readonly": {
        "description": "", 
        "name": "Yaf_Config_Ini::readonly", 
        "overview": "public void Yaf_Config_Ini::readonly ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.readonly", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::rewind": {
        "description": "", 
        "name": "Yaf_Config_Ini::rewind", 
        "overview": "public void Yaf_Config_Ini::rewind ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.rewind", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::toArray": {
        "description": "Returns a PHP array from the Yaf_Config_Ini", 
        "name": "Yaf_Config_Ini::toArray", 
        "overview": "public array Yaf_Config_Ini::toArray ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.toarray", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Ini::valid": {
        "description": "", 
        "name": "Yaf_Config_Ini::valid", 
        "overview": "public void Yaf_Config_Ini::valid ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-ini.valid", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple": {
        "description": "", 
        "name": "Yaf_Config_Simple", 
        "overview": "public __construct ( string $config_file [, string $section ] )", 
        "parameters": [], 
        "path": "php/class.yaf-config-simple", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__construct": {
        "description": "", 
        "name": "Yaf_Config_Simple::__construct", 
        "overview": "public Yaf_Config_Simple::__construct ( string $config_file [, string $section ] )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__get": {
        "description": "", 
        "name": "Yaf_Config_Simple::__get", 
        "overview": "public void Yaf_Config_Simple::__get ([ string $name ] )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.get", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__isset": {
        "description": "", 
        "name": "Yaf_Config_Simple::__isset", 
        "overview": "public void Yaf_Config_Simple::__isset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.isset", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::__set": {
        "description": "", 
        "name": "Yaf_Config_Simple::__set", 
        "overview": "public void Yaf_Config_Simple::__set ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.set", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::count": {
        "description": "", 
        "name": "Yaf_Config_Simple::count", 
        "overview": "public void Yaf_Config_Simple::count ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.count", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::current": {
        "description": "", 
        "name": "Yaf_Config_Simple::current", 
        "overview": "public void Yaf_Config_Simple::current ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.current", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::key": {
        "description": "", 
        "name": "Yaf_Config_Simple::key", 
        "overview": "public void Yaf_Config_Simple::key ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.key", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::next": {
        "description": "", 
        "name": "Yaf_Config_Simple::next", 
        "overview": "public void Yaf_Config_Simple::next ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.next", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetExists": {
        "description": "", 
        "name": "Yaf_Config_Simple::offsetExists", 
        "overview": "public void Yaf_Config_Simple::offsetExists ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.offsetexists", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetGet": {
        "description": "", 
        "name": "Yaf_Config_Simple::offsetGet", 
        "overview": "public void Yaf_Config_Simple::offsetGet ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.offsetget", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetSet": {
        "description": "", 
        "name": "Yaf_Config_Simple::offsetSet", 
        "overview": "public void Yaf_Config_Simple::offsetSet ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.offsetset", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::offsetUnset": {
        "description": "", 
        "name": "Yaf_Config_Simple::offsetUnset", 
        "overview": "public void Yaf_Config_Simple::offsetUnset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.offsetunset", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::readonly": {
        "description": "", 
        "name": "Yaf_Config_Simple::readonly", 
        "overview": "public void Yaf_Config_Simple::readonly ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.readonly", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::rewind": {
        "description": "", 
        "name": "Yaf_Config_Simple::rewind", 
        "overview": "public void Yaf_Config_Simple::rewind ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.rewind", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::toArray": {
        "description": "Returns a PHP array from the Yaf_Config_Simple", 
        "name": "Yaf_Config_Simple::toArray", 
        "overview": "public array Yaf_Config_Simple::toArray ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.toarray", 
        "type": "Yaf"
    }, 
    "Yaf_Config_Simple::valid": {
        "description": "", 
        "name": "Yaf_Config_Simple::valid", 
        "overview": "public void Yaf_Config_Simple::valid ( void )", 
        "parameters": [], 
        "path": "php/yaf-config-simple.valid", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract": {
        "description": "", 
        "name": "Yaf_Controller_Abstract", 
        "overview": "final private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-controller-abstract", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::__clone": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::__clone", 
        "overview": "final private void Yaf_Controller_Abstract::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::__construct": {
        "description": "Yaf_Controller_Abstract::__construct() is final, which means it can not be overridden. You may want to see Yaf_Controller_Abstract::init() instead.", 
        "name": "Yaf_Controller_Abstract::__construct", 
        "overview": "final private Yaf_Controller_Abstract::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::display": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::display", 
        "overview": "protected bool Yaf_Controller_Abstract::display ( string $tpl [, array $parameters ] )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.display", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::forward": {
        "description": "forward current execution process to other action.", 
        "name": "Yaf_Controller_Abstract::forward", 
        "overview": "public void Yaf_Controller_Abstract::forward ( string $action [, array $paramters ] )", 
        "parameters": [
            {
                "descr": "destination module name, if NULL was given, then default module name is assumed", 
                "name": "module"
            }, 
            {
                "descr": "destination controller name", 
                "name": "controller"
            }, 
            {
                "descr": "destination action name", 
                "name": "action"
            }, 
            {
                "descr": "calling arguments", 
                "name": "paramters"
            }
        ], 
        "path": "php/yaf-controller-abstract.forward", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getInvokeArg": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::getInvokeArg", 
        "overview": "public void Yaf_Controller_Abstract::getInvokeArg ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.getinvokearg", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getInvokeArgs": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::getInvokeArgs", 
        "overview": "public void Yaf_Controller_Abstract::getInvokeArgs ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.getinvokeargs", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getModuleName": {
        "description": "get the controller's module name", 
        "name": "Yaf_Controller_Abstract::getModuleName", 
        "overview": "public string Yaf_Controller_Abstract::getModuleName ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.getmodulename", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getRequest": {
        "description": "retrieve current request object", 
        "name": "Yaf_Controller_Abstract::getRequest", 
        "overview": "public Yaf_Request_Abstract Yaf_Controller_Abstract::getRequest ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.getrequest", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getResponse": {
        "description": "retrieve current response object", 
        "name": "Yaf_Controller_Abstract::getResponse", 
        "overview": "public Yaf_Response_Abstract Yaf_Controller_Abstract::getResponse ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.getresponse", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getView": {
        "description": "retrieve view engine", 
        "name": "Yaf_Controller_Abstract::getView", 
        "overview": "public Yaf_View_Interface Yaf_Controller_Abstract::getView ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.getview", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::getViewpath": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::getViewpath", 
        "overview": "public void Yaf_Controller_Abstract::getViewpath ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.getviewpath", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::init": {
        "description": "Yaf_Controller_Abstract::__construct() is final, which means users can not override it. but users can define Yaf_Controller_Abstract::init(), which will be called after controller object is instantiated.", 
        "name": "Yaf_Controller_Abstract::init", 
        "overview": "public void Yaf_Controller_Abstract::init ( void )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.init", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::initView": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::initView", 
        "overview": "public void Yaf_Controller_Abstract::initView ([ array $options ] )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.initview", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::redirect": {
        "description": "redirect to a URL by sending a 302 header", 
        "name": "Yaf_Controller_Abstract::redirect", 
        "overview": "public bool Yaf_Controller_Abstract::redirect ( string $url )", 
        "parameters": [
            {
                "descr": "a location URL", 
                "name": "url"
            }
        ], 
        "path": "php/yaf-controller-abstract.redirect", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::render": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::render", 
        "overview": "protected string Yaf_Controller_Abstract::render ( string $tpl [, array $parameters ] )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.render", 
        "type": "Yaf"
    }, 
    "Yaf_Controller_Abstract::setViewpath": {
        "description": "", 
        "name": "Yaf_Controller_Abstract::setViewpath", 
        "overview": "public void Yaf_Controller_Abstract::setViewpath ( string $view_directory )", 
        "parameters": [], 
        "path": "php/yaf-controller-abstract.setviewpath", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher": {
        "description": "", 
        "name": "Yaf_Dispatcher", 
        "overview": "public Yaf_Dispatcher autoRender ([ bool $flag ] )", 
        "parameters": [], 
        "path": "php/class.yaf-dispatcher", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__clone": {
        "description": "", 
        "name": "Yaf_Dispatcher::__clone", 
        "overview": "private void Yaf_Dispatcher::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__construct": {
        "description": "", 
        "name": "Yaf_Dispatcher::__construct", 
        "overview": "publicYaf_Dispatcher::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__sleep": {
        "description": "", 
        "name": "Yaf_Dispatcher::__sleep", 
        "overview": "private void Yaf_Dispatcher::__sleep ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.sleep", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::__wakeup": {
        "description": "", 
        "name": "Yaf_Dispatcher::__wakeup", 
        "overview": "private void Yaf_Dispatcher::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.wakeup", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::autoRender": {
        "description": "Yaf_Dispatcher will render automatically after dispatches a incoming request, you can prevent the rendering by calling this method with flag TRUE", 
        "name": "Yaf_Dispatcher::autoRender", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::autoRender ([ bool $flag ] )", 
        "parameters": [
            {
                "descr": "bool Note:  since 2.2.0, if this parameter is not given, then the current state will be renturned", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.autorender", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::catchException": {
        "description": "While the application.dispatcher.throwException is On(you can also calling to Yaf_Dispatcher::throwException(TRUE)() to enable it), Yaf will throw Exception whe error occurrs instead of trigger error.", 
        "name": "Yaf_Dispatcher::catchException", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::catchException ([ bool $flag ] )", 
        "parameters": [
            {
                "descr": "bool", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.catchexception", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::disableView": {
        "description": "disable view engine, used in some app that user will output by theirself", 
        "name": "Yaf_Dispatcher::disableView", 
        "overview": "public bool Yaf_Dispatcher::disableView ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.disableview", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::dispatch": {
        "description": "This method does the heavy work of the Yaf_Dispatcher. It take a request object.", 
        "name": "Yaf_Dispatcher::dispatch", 
        "overview": "public Yaf_Response_Abstract Yaf_Dispatcher::dispatch ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.dispatch", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::enableView": {
        "description": "", 
        "name": "Yaf_Dispatcher::enableView", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::enableView ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.enableview", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::flushInstantly": {
        "description": "", 
        "name": "Yaf_Dispatcher::flushInstantly", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::flushInstantly ([ bool $flag ] )", 
        "parameters": [
            {
                "descr": "bool Note:  since 2.2.0, if this parameter is not given, then the current state will be renturned", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.flushinstantly", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getApplication": {
        "description": "Retrive the Yaf_Application instance. same as Yaf_Application::app().", 
        "name": "Yaf_Dispatcher::getApplication", 
        "overview": "public Yaf_Application Yaf_Dispatcher::getApplication ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.getapplication", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getInstance": {
        "description": "", 
        "name": "Yaf_Dispatcher::getInstance", 
        "overview": "public static Yaf_Dispatcher Yaf_Dispatcher::getInstance ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.getinstance", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getRequest": {
        "description": "", 
        "name": "Yaf_Dispatcher::getRequest", 
        "overview": "public Yaf_Request_Abstract Yaf_Dispatcher::getRequest ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.getrequest", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::getRouter": {
        "description": "", 
        "name": "Yaf_Dispatcher::getRouter", 
        "overview": "public Yaf_Router Yaf_Dispatcher::getRouter ( void )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.getrouter", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::initView": {
        "description": "", 
        "name": "Yaf_Dispatcher::initView", 
        "overview": "public Yaf_View_Interface Yaf_Dispatcher::initView ( string $templates_dir [, array $options ] )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.initview", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::registerPlugin": {
        "description": "Register a plugin(see Yaf_Plugin_Abstract). Generally, we register plugins in Bootstrap(see Yaf_Bootstrap_Abstract).", 
        "name": "Yaf_Dispatcher::registerPlugin", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::registerPlugin ( Yaf_Plugin_Abstract $plugin )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.registerplugin", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::returnResponse": {
        "description": "", 
        "name": "Yaf_Dispatcher::returnResponse", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::returnResponse ( bool $flag )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.returnresponse", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setDefaultAction": {
        "description": "", 
        "name": "Yaf_Dispatcher::setDefaultAction", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::setDefaultAction ( string $action )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.setdefaultaction", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setDefaultController": {
        "description": "", 
        "name": "Yaf_Dispatcher::setDefaultController", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::setDefaultController ( string $controller )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.setdefaultcontroller", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setDefaultModule": {
        "description": "", 
        "name": "Yaf_Dispatcher::setDefaultModule", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::setDefaultModule ( string $module )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.setdefaultmodule", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setErrorHandler": {
        "description": "Set error handler for Yaf. when application.dispatcher.throwException is off, Yaf will trigger catchable error while unexpected errors occrred.", 
        "name": "Yaf_Dispatcher::setErrorHandler", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::setErrorHandler ( call $callback , int $error_types )", 
        "parameters": [
            {
                "descr": "A callable callback", 
                "name": "callback"
            }
        ], 
        "path": "php/yaf-dispatcher.seterrorhandler", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setRequest": {
        "description": "", 
        "name": "Yaf_Dispatcher::setRequest", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::setRequest ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-dispatcher.setrequest", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::setView": {
        "description": "This method proviods a solution for that if you want use a custom view engine instead of Yaf_View_Simple", 
        "name": "Yaf_Dispatcher::setView", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::setView ( Yaf_View_Interface $view )", 
        "parameters": [
            {
                "descr": "A Yaf_View_Interface instance", 
                "name": "view"
            }
        ], 
        "path": "php/yaf-dispatcher.setview", 
        "type": "Yaf"
    }, 
    "Yaf_Dispatcher::throwException": {
        "description": "Siwtch on/off exception throwing while unexpected error occurring. When this is on, Yaf will throwing exceptions instead of triggering catchable errors.", 
        "name": "Yaf_Dispatcher::throwException", 
        "overview": "public Yaf_Dispatcher Yaf_Dispatcher::throwException ([ bool $flag ] )", 
        "parameters": [
            {
                "descr": "bool", 
                "name": "flag"
            }
        ], 
        "path": "php/yaf-dispatcher.throwexception", 
        "type": "Yaf"
    }, 
    "Yaf_Exception": {
        "description": "", 
        "name": "Yaf_Exception", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception", 
        "type": "Yaf"
    }, 
    "Yaf_Exception::__construct": {
        "description": "", 
        "name": "Yaf_Exception::__construct", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-exception.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Exception::getPrevious": {
        "description": "", 
        "name": "Yaf_Exception::getPrevious", 
        "overview": "public void Yaf_Exception::getPrevious ( void )", 
        "parameters": [], 
        "path": "php/yaf-exception.getprevious", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_DispatchFailed": {
        "description": "", 
        "name": "Yaf_Exception_DispatchFailed", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-dispatchfailed", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed": {
        "description": "", 
        "name": "Yaf_Exception_LoadFailed", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-loadfailed", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_Action": {
        "description": "", 
        "name": "Yaf_Exception_LoadFailed_Action", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-loadfailed-action", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_Controller": {
        "description": "", 
        "name": "Yaf_Exception_LoadFailed_Controller", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-loadfailed-controller", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_Module": {
        "description": "", 
        "name": "Yaf_Exception_LoadFailed_Module", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-loadfailed-module", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_LoadFailed_View": {
        "description": "", 
        "name": "Yaf_Exception_LoadFailed_View", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-loadfailed-view", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_RouterFailed": {
        "description": "", 
        "name": "Yaf_Exception_RouterFailed", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-routerfailed", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_StartupError": {
        "description": "", 
        "name": "Yaf_Exception_StartupError", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-startuperror", 
        "type": "Yaf"
    }, 
    "Yaf_Exception_TypeError": {
        "description": "", 
        "name": "Yaf_Exception_TypeError", 
        "overview": "public Yaf_Exception::__construct ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-exception-typeerror", 
        "type": "Yaf"
    }, 
    "Yaf_Loader": {
        "description": "", 
        "name": "Yaf_Loader", 
        "overview": "public void autoload ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-loader", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__clone": {
        "description": "", 
        "name": "Yaf_Loader::__clone", 
        "overview": "private void Yaf_Loader::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__construct": {
        "description": "", 
        "name": "Yaf_Loader::__construct", 
        "overview": "publicYaf_Loader::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__sleep": {
        "description": "", 
        "name": "Yaf_Loader::__sleep", 
        "overview": "private void Yaf_Loader::__sleep ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.sleep", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::__wakeup": {
        "description": "", 
        "name": "Yaf_Loader::__wakeup", 
        "overview": "private void Yaf_Loader::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.wakeup", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::autoload": {
        "description": "", 
        "name": "Yaf_Loader::autoload", 
        "overview": "public void Yaf_Loader::autoload ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.autoload", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::clearLocalNamespace": {
        "description": "", 
        "name": "Yaf_Loader::clearLocalNamespace", 
        "overview": "public void Yaf_Loader::clearLocalNamespace ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.clearlocalnamespace", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::getInstance": {
        "description": "", 
        "name": "Yaf_Loader::getInstance", 
        "overview": "public static void Yaf_Loader::getInstance ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.getinstance", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::getLibraryPath": {
        "description": "", 
        "name": "Yaf_Loader::getLibraryPath", 
        "overview": "public Yaf_Loader Yaf_Loader::getLibraryPath ([ bool $is_global = false ] )", 
        "parameters": [], 
        "path": "php/yaf-loader.getlibrarypath", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::getLocalNamespace": {
        "description": "", 
        "name": "Yaf_Loader::getLocalNamespace", 
        "overview": "public void Yaf_Loader::getLocalNamespace ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.getlocalnamespace", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::import": {
        "description": "", 
        "name": "Yaf_Loader::import", 
        "overview": "public static void Yaf_Loader::import ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.import", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::isLocalName": {
        "description": "", 
        "name": "Yaf_Loader::isLocalName", 
        "overview": "public void Yaf_Loader::isLocalName ( void )", 
        "parameters": [], 
        "path": "php/yaf-loader.islocalname", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::registerLocalNamespace": {
        "description": "Register local class prefix name, Yaf_Loader search classes in two library directories, the one is configured via application.library.directory(in application.ini) which is called local libraray directory; the other is configured via yaf.library (in php.ini) which is callled global library directory, since it can be shared by many applications in the same server.", 
        "name": "Yaf_Loader::registerLocalNamespace", 
        "overview": "public void Yaf_Loader::registerLocalNamespace ( mixed $prefix )", 
        "parameters": [
            {
                "descr": "a string or a array of class name prefix. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/yaf-loader.registerlocalnamespace", 
        "type": "Yaf"
    }, 
    "Yaf_Loader::setLibraryPath": {
        "description": "", 
        "name": "Yaf_Loader::setLibraryPath", 
        "overview": "public Yaf_Loader Yaf_Loader::setLibraryPath ( string $directory [, bool $is_global = false ] )", 
        "parameters": [], 
        "path": "php/yaf-loader.setlibrarypath", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract": {
        "description": "", 
        "name": "Yaf_Plugin_Abstract", 
        "overview": "public void dispatchLoopShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/class.yaf-plugin-abstract", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::dispatchLoopShutdown": {
        "description": "This is the latest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called after the dispatch loop finished.", 
        "name": "Yaf_Plugin_Abstract::dispatchLoopShutdown", 
        "overview": "public void Yaf_Plugin_Abstract::dispatchLoopShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/yaf-plugin-abstract.dispatchloopshutdown", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::dispatchLoopStartup": {
        "description": "", 
        "name": "Yaf_Plugin_Abstract::dispatchLoopStartup", 
        "overview": "public void Yaf_Plugin_Abstract::dispatchLoopStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/yaf-plugin-abstract.dispatchloopstartup", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::postDispatch": {
        "description": "", 
        "name": "Yaf_Plugin_Abstract::postDispatch", 
        "overview": "public void Yaf_Plugin_Abstract::postDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/yaf-plugin-abstract.postdispatch", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::preDispatch": {
        "description": "", 
        "name": "Yaf_Plugin_Abstract::preDispatch", 
        "overview": "public void Yaf_Plugin_Abstract::preDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/yaf-plugin-abstract.predispatch", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::preResponse": {
        "description": "", 
        "name": "Yaf_Plugin_Abstract::preResponse", 
        "overview": "public void Yaf_Plugin_Abstract::preResponse ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/yaf-plugin-abstract.preresponse", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::routerShutdown": {
        "description": "This hook will be trigged after the route process finished, this hook is usually used for login check.", 
        "name": "Yaf_Plugin_Abstract::routerShutdown", 
        "overview": "public void Yaf_Plugin_Abstract::routerShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/yaf-plugin-abstract.routershutdown", 
        "type": "Yaf"
    }, 
    "Yaf_Plugin_Abstract::routerStartup": {
        "description": "This is the earliest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called before routing a request.", 
        "name": "Yaf_Plugin_Abstract::routerStartup", 
        "overview": "public void Yaf_Plugin_Abstract::routerStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )", 
        "parameters": [], 
        "path": "php/yaf-plugin-abstract.routerstartup", 
        "type": "Yaf"
    }, 
    "Yaf_Registry": {
        "description": "", 
        "name": "Yaf_Registry", 
        "overview": "private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-registry", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::__clone": {
        "description": "", 
        "name": "Yaf_Registry::__clone", 
        "overview": "private void Yaf_Registry::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-registry.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::__construct": {
        "description": "", 
        "name": "Yaf_Registry::__construct", 
        "overview": "Yaf_Registry::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-registry.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::del": {
        "description": "Remove an item from registry", 
        "name": "Yaf_Registry::del", 
        "overview": "public static void Yaf_Registry::del ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-registry.del", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::get": {
        "description": "Retrieve an item from registry", 
        "name": "Yaf_Registry::get", 
        "overview": "public static mixed Yaf_Registry::get ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-registry.get", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::has": {
        "description": "Check whether an item exists", 
        "name": "Yaf_Registry::has", 
        "overview": "public static bool Yaf_Registry::has ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-registry.has", 
        "type": "Yaf"
    }, 
    "Yaf_Registry::set": {
        "description": "Add an item into registry", 
        "name": "Yaf_Registry::set", 
        "overview": "public static bool Yaf_Registry::set ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/yaf-registry.set", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract": {
        "description": "", 
        "name": "Yaf_Request_Abstract", 
        "overview": "public void getActionName ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-request-abstract", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getActionName": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getActionName", 
        "overview": "public void Yaf_Request_Abstract::getActionName ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getactionname", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getBaseUri": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getBaseUri", 
        "overview": "public void Yaf_Request_Abstract::getBaseUri ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getbaseuri", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getControllerName": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getControllerName", 
        "overview": "public void Yaf_Request_Abstract::getControllerName ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getcontrollername", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getEnv": {
        "description": "Retrieve ENV variable", 
        "name": "Yaf_Request_Abstract::getEnv", 
        "overview": "public void Yaf_Request_Abstract::getEnv ( string $name [, string $default ] )", 
        "parameters": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the varialbe can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-abstract.getenv", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getException": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getException", 
        "overview": "public void Yaf_Request_Abstract::getException ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getexception", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getLanguage": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getLanguage", 
        "overview": "public void Yaf_Request_Abstract::getLanguage ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getlanguage", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getMethod": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getMethod", 
        "overview": "public void Yaf_Request_Abstract::getMethod ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getmethod", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getModuleName": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getModuleName", 
        "overview": "public void Yaf_Request_Abstract::getModuleName ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getmodulename", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getParam": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getParam", 
        "overview": "public void Yaf_Request_Abstract::getParam ( string $name [, string $default ] )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getparam", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getParams": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getParams", 
        "overview": "public void Yaf_Request_Abstract::getParams ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getparams", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getRequestUri": {
        "description": "", 
        "name": "Yaf_Request_Abstract::getRequestUri", 
        "overview": "public void Yaf_Request_Abstract::getRequestUri ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.getrequesturi", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::getServer": {
        "description": "Retrieve SERVER variable", 
        "name": "Yaf_Request_Abstract::getServer", 
        "overview": "public void Yaf_Request_Abstract::getServer ( string $name [, string $default ] )", 
        "parameters": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the variable can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-abstract.getserver", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isCli": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isCli", 
        "overview": "public void Yaf_Request_Abstract::isCli ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.iscli", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isDispatched": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isDispatched", 
        "overview": "public void Yaf_Request_Abstract::isDispatched ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.isdispatched", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isGet": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isGet", 
        "overview": "public void Yaf_Request_Abstract::isGet ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.isget", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isHead": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isHead", 
        "overview": "public void Yaf_Request_Abstract::isHead ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.ishead", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isOptions": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isOptions", 
        "overview": "public void Yaf_Request_Abstract::isOptions ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.isoptions", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isPost": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isPost", 
        "overview": "public void Yaf_Request_Abstract::isPost ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.ispost", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isPut": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isPut", 
        "overview": "public void Yaf_Request_Abstract::isPut ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.isput", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isRouted": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isRouted", 
        "overview": "public void Yaf_Request_Abstract::isRouted ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.isrouted", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::isXmlHttpRequest": {
        "description": "", 
        "name": "Yaf_Request_Abstract::isXmlHttpRequest", 
        "overview": "public void Yaf_Request_Abstract::isXmlHttpRequest ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.isxmlhttprequest", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setActionName": {
        "description": "", 
        "name": "Yaf_Request_Abstract::setActionName", 
        "overview": "public void Yaf_Request_Abstract::setActionName ( string $action )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.setactionname", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setBaseUri": {
        "description": "Set base URI, base URI is used when doing routing, in routing phase request URI is used to route a request, while base URI is used to skip the leadding part(base URI) of request URI. That is, if comes a request with request URI a/b/c, then if you set base URI to \"a/b\", only \"/c\" will be used in routing phase.", 
        "name": "Yaf_Request_Abstract::setBaseUri", 
        "overview": "public bool Yaf_Request_Abstract::setBaseUri ( string $uir )", 
        "parameters": [
            {
                "descr": "base URI", 
                "name": "uir"
            }
        ], 
        "path": "php/yaf-request-abstract.setbaseuri", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setControllerName": {
        "description": "", 
        "name": "Yaf_Request_Abstract::setControllerName", 
        "overview": "public void Yaf_Request_Abstract::setControllerName ( string $controller )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.setcontrollername", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setDispatched": {
        "description": "", 
        "name": "Yaf_Request_Abstract::setDispatched", 
        "overview": "public void Yaf_Request_Abstract::setDispatched ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.setdispatched", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setModuleName": {
        "description": "", 
        "name": "Yaf_Request_Abstract::setModuleName", 
        "overview": "public void Yaf_Request_Abstract::setModuleName ( string $module )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.setmodulename", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setParam": {
        "description": "", 
        "name": "Yaf_Request_Abstract::setParam", 
        "overview": "public void Yaf_Request_Abstract::setParam ( string $name [, string $value ] )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.setparam", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setRequestUri": {
        "description": "", 
        "name": "Yaf_Request_Abstract::setRequestUri", 
        "overview": "public void Yaf_Request_Abstract::setRequestUri ( string $uir )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.setrequesturi", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Abstract::setRouted": {
        "description": "", 
        "name": "Yaf_Request_Abstract::setRouted", 
        "overview": "public void Yaf_Request_Abstract::setRouted ([ string $flag ] )", 
        "parameters": [], 
        "path": "php/yaf-request-abstract.setrouted", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http": {
        "description": "", 
        "name": "Yaf_Request_Http", 
        "overview": "private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-request-http", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::__clone": {
        "description": "", 
        "name": "Yaf_Request_Http::__clone", 
        "overview": "private void Yaf_Request_Http::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-http.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::__construct": {
        "description": "", 
        "name": "Yaf_Request_Http::__construct", 
        "overview": "Yaf_Request_Http::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-http.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::get": {
        "description": "Retrieve variable from client, this method will search the name in request pramas, if the name is not found, then will search in POST, GET, Cookie, Server", 
        "name": "Yaf_Request_Http::get", 
        "overview": "public mixed Yaf_Request_Http::get ( string $name [, string $default ] )", 
        "parameters": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the varialbe can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.get", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getCookie": {
        "description": "Retrieve Cookie variable", 
        "name": "Yaf_Request_Http::getCookie", 
        "overview": "public mixed Yaf_Request_Http::getCookie ( string $name [, string $default ] )", 
        "parameters": [
            {
                "descr": "the cookie name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the cookie can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.getcookie", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getFiles": {
        "description": "", 
        "name": "Yaf_Request_Http::getFiles", 
        "overview": "public void Yaf_Request_Http::getFiles ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-http.getfiles", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getPost": {
        "description": "Retrieve POST variable", 
        "name": "Yaf_Request_Http::getPost", 
        "overview": "public mixed Yaf_Request_Http::getPost ( string $name [, string $default ] )", 
        "parameters": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the varialbe can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.getpost", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getQuery": {
        "description": "Retrieve GET variable", 
        "name": "Yaf_Request_Http::getQuery", 
        "overview": "public mixed Yaf_Request_Http::getQuery ( string $name [, string $default ] )", 
        "parameters": [
            {
                "descr": "the variable name", 
                "name": "name"
            }, 
            {
                "descr": "if this parameter is provide, this will be returned if the variable can not be found", 
                "name": "default"
            }
        ], 
        "path": "php/yaf-request-http.getquery", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::getRequest": {
        "description": "", 
        "name": "Yaf_Request_Http::getRequest", 
        "overview": "public void Yaf_Request_Http::getRequest ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-http.getrequest", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Http::isXmlHttpRequest": {
        "description": "Check the request whether it is a Ajax Request.", 
        "name": "Yaf_Request_Http::isXmlHttpRequest", 
        "overview": "public bool Yaf_Request_Http::isXmlHttpRequest ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-http.isxmlhttprequest", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple": {
        "description": "", 
        "name": "Yaf_Request_Simple", 
        "overview": "private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-request-simple", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::__clone": {
        "description": "", 
        "name": "Yaf_Request_Simple::__clone", 
        "overview": "private void Yaf_Request_Simple::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::__construct": {
        "description": "", 
        "name": "Yaf_Request_Simple::__construct", 
        "overview": "Yaf_Request_Simple::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::get": {
        "description": "", 
        "name": "Yaf_Request_Simple::get", 
        "overview": "public void Yaf_Request_Simple::get ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.get", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getCookie": {
        "description": "", 
        "name": "Yaf_Request_Simple::getCookie", 
        "overview": "public void Yaf_Request_Simple::getCookie ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.getcookie", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getFiles": {
        "description": "", 
        "name": "Yaf_Request_Simple::getFiles", 
        "overview": "public void Yaf_Request_Simple::getFiles ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.getfiles", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getPost": {
        "description": "", 
        "name": "Yaf_Request_Simple::getPost", 
        "overview": "public void Yaf_Request_Simple::getPost ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.getpost", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getQuery": {
        "description": "", 
        "name": "Yaf_Request_Simple::getQuery", 
        "overview": "public void Yaf_Request_Simple::getQuery ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.getquery", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::getRequest": {
        "description": "", 
        "name": "Yaf_Request_Simple::getRequest", 
        "overview": "public void Yaf_Request_Simple::getRequest ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.getrequest", 
        "type": "Yaf"
    }, 
    "Yaf_Request_Simple::isXmlHttpRequest": {
        "description": "", 
        "name": "Yaf_Request_Simple::isXmlHttpRequest", 
        "overview": "public void Yaf_Request_Simple::isXmlHttpRequest ( void )", 
        "parameters": [], 
        "path": "php/yaf-request-simple.isxmlhttprequest", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract": {
        "description": "", 
        "name": "Yaf_Response_Abstract", 
        "overview": "public bool appendBody ( string $content [, string $key ] )", 
        "parameters": [], 
        "path": "php/class.yaf-response-abstract", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__clone": {
        "description": "", 
        "name": "Yaf_Response_Abstract::__clone", 
        "overview": "private void Yaf_Response_Abstract::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__construct": {
        "description": "", 
        "name": "Yaf_Response_Abstract::__construct", 
        "overview": "public Yaf_Response_Abstract::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__destruct": {
        "description": "", 
        "name": "Yaf_Response_Abstract::__destruct", 
        "overview": "public void Yaf_Response_Abstract::__destruct ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.destruct", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::__toString": {
        "description": "", 
        "name": "Yaf_Response_Abstract::__toString", 
        "overview": "private void Yaf_Response_Abstract::__toString ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.tostring", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::appendBody": {
        "description": "append a content to a exists content block", 
        "name": "Yaf_Response_Abstract::appendBody", 
        "overview": "public bool Yaf_Response_Abstract::appendBody ( string $content [, string $key ] )", 
        "parameters": [
            {
                "descr": "content string", 
                "name": "body"
            }, 
            {
                "descr": "the content key, you can set a content with a key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used Note:  this parameter is introduced as of 2.2.0", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.appendbody", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::clearBody": {
        "description": "Clear existsed content", 
        "name": "Yaf_Response_Abstract::clearBody", 
        "overview": "public bool Yaf_Response_Abstract::clearBody ([ string $key ] )", 
        "parameters": [
            {
                "descr": "the content key, if you don't specific, then all contents will be cleared. ", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.clearbody", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::clearHeaders": {
        "description": "", 
        "name": "Yaf_Response_Abstract::clearHeaders", 
        "overview": "public void Yaf_Response_Abstract::clearHeaders ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.clearheaders", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::getBody": {
        "description": "Retrieve a exists content", 
        "name": "Yaf_Response_Abstract::getBody", 
        "overview": "public mixed Yaf_Response_Abstract::getBody ([ string $key ] )", 
        "parameters": [
            {
                "descr": "the content key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used. ", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.getbody", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::getHeader": {
        "description": "", 
        "name": "Yaf_Response_Abstract::getHeader", 
        "overview": "public void Yaf_Response_Abstract::getHeader ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.getheader", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::prependBody": {
        "description": "prepend a content to a exists content block", 
        "name": "Yaf_Response_Abstract::prependBody", 
        "overview": "public bool Yaf_Response_Abstract::prependBody ( string $content [, string $key ] )", 
        "parameters": [
            {
                "descr": "content string", 
                "name": "body"
            }, 
            {
                "descr": "the content key, you can set a content with a key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used Note:  this parameter is introduced as of 2.2.0", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.prependbody", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::response": {
        "description": "send response", 
        "name": "Yaf_Response_Abstract::response", 
        "overview": "public void Yaf_Response_Abstract::response ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.response", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setAllHeaders": {
        "description": "", 
        "name": "Yaf_Response_Abstract::setAllHeaders", 
        "overview": "protected void Yaf_Response_Abstract::setAllHeaders ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.setallheaders", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setBody": {
        "description": "Set content to response", 
        "name": "Yaf_Response_Abstract::setBody", 
        "overview": "public bool Yaf_Response_Abstract::setBody ( string $content [, string $key ] )", 
        "parameters": [
            {
                "descr": "content string", 
                "name": "body"
            }, 
            {
                "descr": "the content key, you can set a content with a key, if you don't specific, then Yaf_Response_Abstract::DEFAULT_BODY will be used Note:  this parameter is introduced as of 2.2.0", 
                "name": "key"
            }
        ], 
        "path": "php/yaf-response-abstract.setbody", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setHeader": {
        "description": "", 
        "name": "Yaf_Response_Abstract::setHeader", 
        "overview": "public void Yaf_Response_Abstract::setHeader ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.setheader", 
        "type": "Yaf"
    }, 
    "Yaf_Response_Abstract::setRedirect": {
        "description": "", 
        "name": "Yaf_Response_Abstract::setRedirect", 
        "overview": "public void Yaf_Response_Abstract::setRedirect ( void )", 
        "parameters": [], 
        "path": "php/yaf-response-abstract.setredirect", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Interface": {
        "description": "", 
        "name": "Yaf_Route_Interface", 
        "overview": "abstract public string assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/class.yaf-route-interface", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Interface::assemble": {
        "description": "this method returns a url according to the argument info, and append query strings to the url according to the argument query.", 
        "name": "Yaf_Route_Interface::assemble", 
        "overview": "abstract public string Yaf_Route_Interface::assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/yaf-assemble-interface.assemble", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Interface::route": {
        "description": "Yaf_Route_Interface::route() is the only method that a custom route should implement.", 
        "name": "Yaf_Route_Interface::route", 
        "overview": "abstract public bool Yaf_Route_Interface::route ( Yaf_Request_Abstract $request )", 
        "parameters": [
            {
                "descr": "A Yaf_Request_Abstract instance.", 
                "name": "request"
            }
        ], 
        "path": "php/yaf-route-interface.route", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map": {
        "description": "", 
        "name": "Yaf_Route_Map", 
        "overview": "public string assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/class.yaf-route-map", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map::__construct": {
        "description": "", 
        "name": "Yaf_Route_Map::__construct", 
        "overview": "public Yaf_Route_Map::__construct ([ string $controller_prefer = false [, string $delimiter = '' ]] )", 
        "parameters": [
            {
                "descr": "Whether the result should considering as controller or action", 
                "name": "controller_prefer"
            }
        ], 
        "path": "php/yaf-route-map.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map::assemble": {
        "description": "Assmeble a url.", 
        "name": "Yaf_Route_Map::assemble", 
        "overview": "public string Yaf_Route_Map::assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/yaf-assemble-map.assemble", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Map::route": {
        "description": "", 
        "name": "Yaf_Route_Map::route", 
        "overview": "public bool Yaf_Route_Map::route ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-route-map.route", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex": {
        "description": "", 
        "name": "Yaf_Route_Regex", 
        "overview": "public string assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/class.yaf-route-regex", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex::__construct": {
        "description": "", 
        "name": "Yaf_Route_Regex::__construct", 
        "overview": "publicYaf_Route_Regex::__construct ( string $match , array $route [, array $map [, array $verify [, string $reverse ]]] )", 
        "parameters": [
            {
                "descr": "A complete Regex pattern, will be used to match a request uri, if doesn't matched, Yaf_Route_Regex will return FALSE.", 
                "name": "match"
            }, 
            {
                "descr": "When the match pattern matches the request uri, Yaf_Route_Regex will use this to decide which m/c/a to routed. ", 
                "name": "route"
            }, 
            {
                "descr": "A array to assign name to the captrues in the match result.", 
                "name": "map"
            }, 
            {
                "descr": "a string, used to assemble url, see Yaf_Route_Regex::assemble(). ", 
                "name": "verify   reverse"
            }
        ], 
        "path": "php/yaf-route-regex.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex::assemble": {
        "description": "Assmeble a url.", 
        "name": "Yaf_Route_Regex::assemble", 
        "overview": "public string Yaf_Route_Regex::assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/yaf-assemble-regex.assemble", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Regex::route": {
        "description": "Route a incoming request.", 
        "name": "Yaf_Route_Regex::route", 
        "overview": "public bool Yaf_Route_Regex::route ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-route-regex.route", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite": {
        "description": "", 
        "name": "Yaf_Route_Rewrite", 
        "overview": "public string assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/class.yaf-route-rewrite", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite::__construct": {
        "description": "", 
        "name": "Yaf_Route_Rewrite::__construct", 
        "overview": "publicYaf_Route_Rewrite::__construct ( string $match , array $route [, array $verify ] )", 
        "parameters": [
            {
                "descr": "A pattern, will be used to match a request uri, if doesn't matched, Yaf_Route_Rewrite will return FALSE. ", 
                "name": "match"
            }, 
            {
                "descr": "When the match pattern matches the request uri, Yaf_Route_Rewrite will use this to decide which m/c/a to routed. ", 
                "name": "route"
            }
        ], 
        "path": "php/yaf-route-rewrite.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite::assemble": {
        "description": "Assmeble a url.", 
        "name": "Yaf_Route_Rewrite::assemble", 
        "overview": "public string Yaf_Route_Rewrite::assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/yaf-assemble-rewrite.assemble", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Rewrite::route": {
        "description": "", 
        "name": "Yaf_Route_Rewrite::route", 
        "overview": "public bool Yaf_Route_Rewrite::route ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-route-rewrite.route", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple": {
        "description": "", 
        "name": "Yaf_Route_Simple", 
        "overview": "public string assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/class.yaf-route-simple", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple::__construct": {
        "description": "Yaf_Route_Simple will get route info from query string. and the parameters of this constructor will used as keys while searching for the route info in $_GET.", 
        "name": "Yaf_Route_Simple::__construct", 
        "overview": "publicYaf_Route_Simple::__construct ( string $module_name , string $controller_name , string $action_name )", 
        "parameters": [
            {
                "descr": "The key name of the module info.", 
                "name": "module_name"
            }, 
            {
                "descr": "the key name of the controller info.", 
                "name": "controller_name"
            }, 
            {
                "descr": "the key name of the action info.", 
                "name": "action_name"
            }
        ], 
        "path": "php/yaf-route-simple.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple::assemble": {
        "description": "Assmeble a url.", 
        "name": "Yaf_Route_Simple::assemble", 
        "overview": "public string Yaf_Route_Simple::assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/yaf-assemble-simple.assemble", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Simple::route": {
        "description": "see Yaf_Route_Simple::__construct()", 
        "name": "Yaf_Route_Simple::route", 
        "overview": "public bool Yaf_Route_Simple::route ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-route-simple.route", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static": {
        "description": "", 
        "name": "Yaf_Route_Static", 
        "overview": "public string assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/class.yaf-route-static", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static::assemble": {
        "description": "Assmeble a url.", 
        "name": "Yaf_Route_Static::assemble", 
        "overview": "public string Yaf_Route_Static::assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/yaf-assemble-static.assemble", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static::match": {
        "description": "", 
        "name": "Yaf_Route_Static::match", 
        "overview": "public void Yaf_Route_Static::match ( string $uri )", 
        "parameters": [], 
        "path": "php/yaf-route-static.match", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Static::route": {
        "description": "", 
        "name": "Yaf_Route_Static::route", 
        "overview": "public bool Yaf_Route_Static::route ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-route-static.route", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar": {
        "description": "", 
        "name": "Yaf_Route_Supervar", 
        "overview": "public string assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/class.yaf-route-supervar", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar::__construct": {
        "description": "Yaf_Route_Supervar is similar with Yaf_Route_Static, the difference is Yaf_Route_Supervar will look for path info in query string, and the parameter supervar_name is the key.", 
        "name": "Yaf_Route_Supervar::__construct", 
        "overview": "publicYaf_Route_Supervar::__construct ( string $supervar_name )", 
        "parameters": [
            {
                "descr": "The name of key.", 
                "name": "supervar_name"
            }
        ], 
        "path": "php/yaf-route-supervar.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar::assemble": {
        "description": "Assmeble a url.", 
        "name": "Yaf_Route_Supervar::assemble", 
        "overview": "public string Yaf_Route_Supervar::assemble ( array $info [, array $query ] )", 
        "parameters": [], 
        "path": "php/yaf-assemble-supervar.assemble", 
        "type": "Yaf"
    }, 
    "Yaf_Route_Supervar::route": {
        "description": "", 
        "name": "Yaf_Route_Supervar::route", 
        "overview": "public bool Yaf_Route_Supervar::route ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-route-supervar.route", 
        "type": "Yaf"
    }, 
    "Yaf_Router": {
        "description": "", 
        "name": "Yaf_Router", 
        "overview": "public bool addConfig ( Yaf_Config_Abstract $config )", 
        "parameters": [], 
        "path": "php/class.yaf-router", 
        "type": "Yaf"
    }, 
    "Yaf_Router::__construct": {
        "description": "", 
        "name": "Yaf_Router::__construct", 
        "overview": "publicYaf_Router::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-router.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Router::addConfig": {
        "description": "Add routes defined by configs into Yaf_Router's route stack", 
        "name": "Yaf_Router::addConfig", 
        "overview": "public bool Yaf_Router::addConfig ( Yaf_Config_Abstract $config )", 
        "parameters": [], 
        "path": "php/yaf-router.addconfig", 
        "type": "Yaf"
    }, 
    "Yaf_Router::addRoute": {
        "description": "defaultly, Yaf_Router using a Yaf_Route_Static as its defualt route. you can add new routes into router's route stack by calling this method.", 
        "name": "Yaf_Router::addRoute", 
        "overview": "public bool Yaf_Router::addRoute ( string $name , Yaf_Route_Abstract $route )", 
        "parameters": [], 
        "path": "php/yaf-router.addroute", 
        "type": "Yaf"
    }, 
    "Yaf_Router::getCurrentRoute": {
        "description": "Get the name of the route which is effective in the route process.", 
        "name": "Yaf_Router::getCurrentRoute", 
        "overview": "public string Yaf_Router::getCurrentRoute ( void )", 
        "parameters": [], 
        "path": "php/yaf-router.getcurrentroute", 
        "type": "Yaf"
    }, 
    "Yaf_Router::getRoute": {
        "description": "Retrieve a route by name, see also Yaf_Router::getCurrentRoute()", 
        "name": "Yaf_Router::getRoute", 
        "overview": "public Yaf_Route_Interface Yaf_Router::getRoute ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-router.getroute", 
        "type": "Yaf"
    }, 
    "Yaf_Router::getRoutes": {
        "description": "Retrieve registered routes", 
        "name": "Yaf_Router::getRoutes", 
        "overview": "public mixed Yaf_Router::getRoutes ( void )", 
        "parameters": [], 
        "path": "php/yaf-router.getroutes", 
        "type": "Yaf"
    }, 
    "Yaf_Router::route": {
        "description": "", 
        "name": "Yaf_Router::route", 
        "overview": "public bool Yaf_Router::route ( Yaf_Request_Abstract $request )", 
        "parameters": [], 
        "path": "php/yaf-router.route", 
        "type": "Yaf"
    }, 
    "Yaf_Session": {
        "description": "", 
        "name": "Yaf_Session", 
        "overview": "private void __clone ( void )", 
        "parameters": [], 
        "path": "php/class.yaf-session", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__clone": {
        "description": "", 
        "name": "Yaf_Session::__clone", 
        "overview": "private void Yaf_Session::__clone ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.clone", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__construct": {
        "description": "", 
        "name": "Yaf_Session::__construct", 
        "overview": "Yaf_Session::__construct ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.construct", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__get": {
        "description": "", 
        "name": "Yaf_Session::__get", 
        "overview": "public void Yaf_Session::__get ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.get", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__isset": {
        "description": "", 
        "name": "Yaf_Session::__isset", 
        "overview": "public void Yaf_Session::__isset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.isset", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__set": {
        "description": "", 
        "name": "Yaf_Session::__set", 
        "overview": "public void Yaf_Session::__set ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/yaf-session.set", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__sleep": {
        "description": "", 
        "name": "Yaf_Session::__sleep", 
        "overview": "private void Yaf_Session::__sleep ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.sleep", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__unset": {
        "description": "", 
        "name": "Yaf_Session::__unset", 
        "overview": "public void Yaf_Session::__unset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.unset", 
        "type": "Yaf"
    }, 
    "Yaf_Session::__wakeup": {
        "description": "", 
        "name": "Yaf_Session::__wakeup", 
        "overview": "private void Yaf_Session::__wakeup ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.wakeup", 
        "type": "Yaf"
    }, 
    "Yaf_Session::count": {
        "description": "", 
        "name": "Yaf_Session::count", 
        "overview": "public void Yaf_Session::count ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.count", 
        "type": "Yaf"
    }, 
    "Yaf_Session::current": {
        "description": "", 
        "name": "Yaf_Session::current", 
        "overview": "public void Yaf_Session::current ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.current", 
        "type": "Yaf"
    }, 
    "Yaf_Session::del": {
        "description": "", 
        "name": "Yaf_Session::del", 
        "overview": "public void Yaf_Session::del ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.del", 
        "type": "Yaf"
    }, 
    "Yaf_Session::getInstance": {
        "description": "", 
        "name": "Yaf_Session::getInstance", 
        "overview": "public static void Yaf_Session::getInstance ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.getinstance", 
        "type": "Yaf"
    }, 
    "Yaf_Session::has": {
        "description": "", 
        "name": "Yaf_Session::has", 
        "overview": "public void Yaf_Session::has ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.has", 
        "type": "Yaf"
    }, 
    "Yaf_Session::key": {
        "description": "", 
        "name": "Yaf_Session::key", 
        "overview": "public void Yaf_Session::key ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.key", 
        "type": "Yaf"
    }, 
    "Yaf_Session::next": {
        "description": "", 
        "name": "Yaf_Session::next", 
        "overview": "public void Yaf_Session::next ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.next", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetExists": {
        "description": "", 
        "name": "Yaf_Session::offsetExists", 
        "overview": "public void Yaf_Session::offsetExists ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.offsetexists", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetGet": {
        "description": "", 
        "name": "Yaf_Session::offsetGet", 
        "overview": "public void Yaf_Session::offsetGet ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.offsetget", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetSet": {
        "description": "", 
        "name": "Yaf_Session::offsetSet", 
        "overview": "public void Yaf_Session::offsetSet ( string $name , string $value )", 
        "parameters": [], 
        "path": "php/yaf-session.offsetset", 
        "type": "Yaf"
    }, 
    "Yaf_Session::offsetUnset": {
        "description": "", 
        "name": "Yaf_Session::offsetUnset", 
        "overview": "public void Yaf_Session::offsetUnset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-session.offsetunset", 
        "type": "Yaf"
    }, 
    "Yaf_Session::rewind": {
        "description": "", 
        "name": "Yaf_Session::rewind", 
        "overview": "public void Yaf_Session::rewind ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.rewind", 
        "type": "Yaf"
    }, 
    "Yaf_Session::start": {
        "description": "", 
        "name": "Yaf_Session::start", 
        "overview": "public void Yaf_Session::start ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.start", 
        "type": "Yaf"
    }, 
    "Yaf_Session::valid": {
        "description": "", 
        "name": "Yaf_Session::valid", 
        "overview": "public void Yaf_Session::valid ( void )", 
        "parameters": [], 
        "path": "php/yaf-session.valid", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface": {
        "description": "", 
        "name": "Yaf_View_Interface", 
        "overview": "abstract public bool assign ( string $name [, string $value ] )", 
        "parameters": [], 
        "path": "php/class.yaf-view-interface", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::assign": {
        "description": "Assigan values to View engine, then the value can access directly by name in template.", 
        "name": "Yaf_View_Interface::assign", 
        "overview": "abstract public bool Yaf_View_Interface::assign ( string $name [, string $value ] )", 
        "parameters": [], 
        "path": "php/yaf-view-interface.assign", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::display": {
        "description": "Render a template and output the result immediatly.", 
        "name": "Yaf_View_Interface::display", 
        "overview": "abstract public bool Yaf_View_Interface::display ( string $tpl [, array $tpl_vars ] )", 
        "parameters": [], 
        "path": "php/yaf-view-interface.display", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::getScriptPath": {
        "description": "", 
        "name": "Yaf_View_Interface::getScriptPath", 
        "overview": "abstract public void Yaf_View_Interface::getScriptPath ( void )", 
        "parameters": [], 
        "path": "php/yaf-view-interface.getscriptpath", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::render": {
        "description": "Render a template and return the result.", 
        "name": "Yaf_View_Interface::render", 
        "overview": "abstract public string Yaf_View_Interface::render ( string $tpl [, array $tpl_vars ] )", 
        "parameters": [], 
        "path": "php/yaf-view-interface.render", 
        "type": "Yaf"
    }, 
    "Yaf_View_Interface::setScriptPath": {
        "description": "Set the templates base directory, this is usually called by Yaf_Dispatcher", 
        "name": "Yaf_View_Interface::setScriptPath", 
        "overview": "abstract public void Yaf_View_Interface::setScriptPath ( string $template_dir )", 
        "parameters": [
            {
                "descr": "A absolute path to the template directory, by default, Yaf_Dispatcher use application.directory . ", 
                "name": "template_dir"
            }
        ], 
        "path": "php/yaf-view-interface.setscriptpath", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple": {
        "description": "", 
        "name": "Yaf_View_Simple", 
        "overview": "public bool assign ( string $name [, mixed $value ] )", 
        "parameters": [], 
        "path": "php/class.yaf-view-simple", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__construct": {
        "description": "", 
        "name": "Yaf_View_Simple::__construct", 
        "overview": "final public Yaf_View_Simple::__construct ( string $tempalte_dir [, array $options ] )", 
        "parameters": [
            {
                "descr": "The base directory of the templates, by default, it is APPLICATOIN . ", 
                "name": "tempalte_dir"
            }, 
            {
                "descr": "Options for the engine, as of Yaf 2.1.13, you can use short tag      \"<?=$var?>\" in your template(regardless of \"short_open_tag\"),       so comes a option named \"short_tag\",  you can switch this off       to prevent use short_tag in template.", 
                "name": "options"
            }
        ], 
        "path": "php/yaf-view-simple.construct", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__get": {
        "description": "Retrieve assigned varaiable", 
        "name": "Yaf_View_Simple::__get", 
        "overview": "public void Yaf_View_Simple::__get ([ string $name ] )", 
        "parameters": [
            {
                "descr": "the assigned variable name   if this is empty, all assigned variables will be returned", 
                "name": "name"
            }
        ], 
        "path": "php/yaf-view-simple.get", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__isset": {
        "description": "", 
        "name": "Yaf_View_Simple::__isset", 
        "overview": "public void Yaf_View_Simple::__isset ( string $name )", 
        "parameters": [], 
        "path": "php/yaf-view-simple.isset", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::__set": {
        "description": "This is a alternative and easier way to Yaf_View_Simple::assign().", 
        "name": "Yaf_View_Simple::__set", 
        "overview": "public void Yaf_View_Simple::__set ( string $name , mixed $value )", 
        "parameters": [
            {
                "descr": "A string value name.", 
                "name": "name"
            }, 
            {
                "descr": "Mixed value.", 
                "name": "value"
            }
        ], 
        "path": "php/yaf-view-simple.set", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::assign": {
        "description": "assign variable to view engine", 
        "name": "Yaf_View_Simple::assign", 
        "overview": "public bool Yaf_View_Simple::assign ( string $name [, mixed $value ] )", 
        "parameters": [
            {
                "descr": "A string or an array.   if is string, then the next argument $value is required.", 
                "name": "name"
            }, 
            {
                "descr": "mixed value", 
                "name": "value"
            }
        ], 
        "path": "php/yaf-view-simple.assign", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::assignRef": {
        "description": "unlike Yaf_View_Simple::assign(), this method assign a ref value to engine.", 
        "name": "Yaf_View_Simple::assignRef", 
        "overview": "public bool Yaf_View_Simple::assignRef ( string $name , mixed &$value )", 
        "parameters": [
            {
                "descr": "A string name which will be used to access the value in the tempalte.", 
                "name": "name"
            }, 
            {
                "descr": "mixed value", 
                "name": "value"
            }
        ], 
        "path": "php/yaf-view-simple.assignref", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::clear": {
        "description": "clear assigned variable", 
        "name": "Yaf_View_Simple::clear", 
        "overview": "public bool Yaf_View_Simple::clear ([ string $name ] )", 
        "parameters": [
            {
                "descr": "assigned variable name   if empty, will clear all assigned variables", 
                "name": "name"
            }
        ], 
        "path": "php/yaf-view-simple.clear", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::display": {
        "description": "Render a template and display the result instantly.", 
        "name": "Yaf_View_Simple::display", 
        "overview": "public bool Yaf_View_Simple::display ( string $tpl [, array $tpl_vars ] )", 
        "parameters": [], 
        "path": "php/yaf-view-simple.display", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::eval": {
        "description": "Render a string tempalte and return the result.", 
        "name": "Yaf_View_Simple::eval", 
        "overview": "public string Yaf_View_Simple::eval ( string $tpl_content [, array $tpl_vars ] )", 
        "parameters": [
            {
                "descr": "string template", 
                "name": "tpl_content"
            }
        ], 
        "path": "php/yaf-view-simple.eval", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::getScriptPath": {
        "description": "", 
        "name": "Yaf_View_Simple::getScriptPath", 
        "overview": "public string Yaf_View_Simple::getScriptPath ( void )", 
        "parameters": [], 
        "path": "php/yaf-view-simple.getscriptpath", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::render": {
        "description": "Render a tempalte and return the result.", 
        "name": "Yaf_View_Simple::render", 
        "overview": "public string Yaf_View_Simple::render ( string $tpl [, array $tpl_vars ] )", 
        "parameters": [], 
        "path": "php/yaf-view-simple.render", 
        "type": "Yaf"
    }, 
    "Yaf_View_Simple::setScriptPath": {
        "description": "", 
        "name": "Yaf_View_Simple::setScriptPath", 
        "overview": "public bool Yaf_View_Simple::setScriptPath ( string $template_dir )", 
        "parameters": [], 
        "path": "php/yaf-view-simple.setscriptpath", 
        "type": "Yaf"
    }, 
    "ZipArchive": {
        "description": "", 
        "name": "ZipArchive", 
        "overview": "bool addEmptyDir ( string $dirname )", 
        "parameters": [], 
        "path": "php/class.ziparchive", 
        "type": "Compression"
    }, 
    "ZipArchive::addEmptyDir": {
        "description": "Adds an empty directory in the archive.", 
        "name": "ZipArchive::addEmptyDir", 
        "overview": "bool ZipArchive::addEmptyDir ( string $dirname )", 
        "parameters": [
            {
                "descr": "The directory to add.", 
                "name": "dirname"
            }
        ], 
        "path": "php/ziparchive.addemptydir", 
        "type": "Compression"
    }, 
    "ZipArchive::addFile": {
        "description": "Adds a file to a ZIP archive from a given path.", 
        "name": "ZipArchive::addFile", 
        "overview": "bool ZipArchive::addFile ( string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The path to the file to add.", 
                "name": "filename"
            }, 
            {
                "descr": "If supplied, this is the local name inside the ZIP archive that will override the filename.", 
                "name": "localname"
            }, 
            {
                "descr": "This parameter is not used but is required to extend ZipArchive.", 
                "name": "start"
            }, 
            {
                "descr": "This parameter is not used but is required to extend ZipArchive.", 
                "name": "length"
            }
        ], 
        "path": "php/ziparchive.addfile", 
        "type": "Compression"
    }, 
    "ZipArchive::addFromString": {
        "description": "Add a file to a ZIP archive using its contents.", 
        "name": "ZipArchive::addFromString", 
        "overview": "bool ZipArchive::addFromString ( string $localname , string $contents )", 
        "parameters": [
            {
                "descr": "The name of the entry to create.", 
                "name": "localname"
            }, 
            {
                "descr": "The contents to use to create the entry. ", 
                "name": "contents"
            }
        ], 
        "path": "php/ziparchive.addfromstring", 
        "type": "Compression"
    }, 
    "ZipArchive::addGlob": {
        "description": "Add files from a directory which match the glob pattern.", 
        "name": "ZipArchive::addGlob", 
        "overview": "bool ZipArchive::addGlob ( string $pattern [, int $flags = 0 [, array $options = array() ]] )", 
        "parameters": [
            {
                "descr": "A glob() pattern against which files will be matched.", 
                "name": "pattern"
            }, 
            {
                "descr": "A bit mask of glob() flags.", 
                "name": "flags"
            }, 
            {
                "descr": "An associative array of options. ", 
                "name": "options"
            }
        ], 
        "path": "php/ziparchive.addglob", 
        "type": "Compression"
    }, 
    "ZipArchive::addPattern": {
        "description": "Add files from a directory which match the regular expression pattern. The operation is not recursive. The pattern will be matched against the file name only.", 
        "name": "ZipArchive::addPattern", 
        "overview": "bool ZipArchive::addPattern ( string $pattern [, string $path = '.' [, array $options = array() ]] )", 
        "parameters": [
            {
                "descr": "A PCRE pattern against which files will be matched.", 
                "name": "pattern"
            }, 
            {
                "descr": "The directory that will be scanned. ", 
                "name": "path"
            }, 
            {
                "descr": "An associative array of options accepted by ZipArchive::addGlob().", 
                "name": "options"
            }
        ], 
        "path": "php/ziparchive.addpattern", 
        "type": "Compression"
    }, 
    "ZipArchive::close": {
        "description": "Close opened or created archive and save changes. This method is automatically called at the end of the script.", 
        "name": "ZipArchive::close", 
        "overview": "bool ZipArchive::close ( void )", 
        "parameters": [], 
        "path": "php/ziparchive.close", 
        "type": "Compression"
    }, 
    "ZipArchive::deleteIndex": {
        "description": "Delete an entry in the archive using its index.", 
        "name": "ZipArchive::deleteIndex", 
        "overview": "bool ZipArchive::deleteIndex ( int $index )", 
        "parameters": [
            {
                "descr": "Index of the entry to delete.", 
                "name": "index"
            }
        ], 
        "path": "php/ziparchive.deleteindex", 
        "type": "Compression"
    }, 
    "ZipArchive::deleteName": {
        "description": "Delete an entry in the archive using its name.", 
        "name": "ZipArchive::deleteName", 
        "overview": "bool ZipArchive::deleteName ( string $name )", 
        "parameters": [
            {
                "descr": "Name of the entry to delete.", 
                "name": "name"
            }
        ], 
        "path": "php/ziparchive.deletename", 
        "type": "Compression"
    }, 
    "ZipArchive::extractTo": {
        "description": "Extract the complete archive or the given files to the specified destination.", 
        "name": "ZipArchive::extractTo", 
        "overview": "bool ZipArchive::extractTo ( string $destination [, mixed $entries ] )", 
        "parameters": [
            {
                "descr": "Location where to extract the files.", 
                "name": "destination"
            }, 
            {
                "descr": "The entries to extract. It accepts either a single entry name or an array of names.", 
                "name": "entries"
            }
        ], 
        "path": "php/ziparchive.extractto", 
        "type": "Compression"
    }, 
    "ZipArchive::getArchiveComment": {
        "description": "Returns the Zip archive comment.", 
        "name": "ZipArchive::getArchiveComment", 
        "overview": "string ZipArchive::getArchiveComment ([ int $flags ] )", 
        "parameters": [
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getarchivecomment", 
        "type": "Compression"
    }, 
    "ZipArchive::getCommentIndex": {
        "description": "Returns the comment of an entry using the entry index.", 
        "name": "ZipArchive::getCommentIndex", 
        "overview": "string ZipArchive::getCommentIndex ( int $index [, int $flags ] )", 
        "parameters": [
            {
                "descr": "Index of the entry", 
                "name": "index"
            }, 
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getcommentindex", 
        "type": "Compression"
    }, 
    "ZipArchive::getCommentName": {
        "description": "Returns the comment of an entry using the entry name.", 
        "name": "ZipArchive::getCommentName", 
        "overview": "string ZipArchive::getCommentName ( string $name [, int $flags ] )", 
        "parameters": [
            {
                "descr": "Name of the entry", 
                "name": "name"
            }, 
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getcommentname", 
        "type": "Compression"
    }, 
    "ZipArchive::getFromIndex": {
        "description": "Returns the entry contents using its index.", 
        "name": "ZipArchive::getFromIndex", 
        "overview": "string ZipArchive::getFromIndex ( int $index [, int $length = 0 [, int $flags ]] )", 
        "parameters": [
            {
                "descr": "Index of the entry", 
                "name": "index"
            }, 
            {
                "descr": "The length to be read from the entry. ", 
                "name": "length"
            }, 
            {
                "descr": "The flags to use to open the archive. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getfromindex", 
        "type": "Compression"
    }, 
    "ZipArchive::getFromName": {
        "description": "Returns the entry contents using its name.", 
        "name": "ZipArchive::getFromName", 
        "overview": "string ZipArchive::getFromName ( string $name [, int $length = 0 [, int $flags ]] )", 
        "parameters": [
            {
                "descr": "Name of the entry", 
                "name": "name"
            }, 
            {
                "descr": "The length to be read from the entry. ", 
                "name": "length"
            }, 
            {
                "descr": "The flags to use to open the archive. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getfromname", 
        "type": "Compression"
    }, 
    "ZipArchive::getNameIndex": {
        "description": "Returns the name of an entry using its index.", 
        "name": "ZipArchive::getNameIndex", 
        "overview": "string ZipArchive::getNameIndex ( int $index [, int $flags ] )", 
        "parameters": [
            {
                "descr": "Index of the entry.", 
                "name": "index"
            }, 
            {
                "descr": "If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged name is returned.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.getnameindex", 
        "type": "Compression"
    }, 
    "ZipArchive::getStatusString": {
        "description": "Returns the status error message, system and/or zip messages.", 
        "name": "ZipArchive::getStatusString", 
        "overview": "string ZipArchive::getStatusString ( void )", 
        "parameters": [], 
        "path": "php/ziparchive.getstatusstring", 
        "type": "Compression"
    }, 
    "ZipArchive::getStream": {
        "description": "Get a file handler to the entry defined by its name. For now it only supports read operations.", 
        "name": "ZipArchive::getStream", 
        "overview": "resource ZipArchive::getStream ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the entry to use.", 
                "name": "name"
            }
        ], 
        "path": "php/ziparchive.getstream", 
        "type": "Compression"
    }, 
    "ZipArchive::locateName": {
        "description": "Locates an entry using its name.", 
        "name": "ZipArchive::locateName", 
        "overview": "int ZipArchive::locateName ( string $name [, int $flags ] )", 
        "parameters": [
            {
                "descr": "The name of the entry to look up", 
                "name": "name"
            }, 
            {
                "descr": "The flags are specified by ORing the following values, or 0 for none of them. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.locatename", 
        "type": "Compression"
    }, 
    "ZipArchive::open": {
        "description": "Opens a new zip archive for reading, writing or modifying.", 
        "name": "ZipArchive::open", 
        "overview": "mixed ZipArchive::open ( string $filename [, int $flags ] )", 
        "parameters": [
            {
                "descr": "The file name of the ZIP archive to open.", 
                "name": "filename"
            }, 
            {
                "descr": "The mode to use to open the archive. ", 
                "name": "flags"
            }, 
            {
                "descr": "Returns TRUE on success or the error code. ", 
                "name": "Error codes"
            }
        ], 
        "path": "php/ziparchive.open", 
        "type": "Compression"
    }, 
    "ZipArchive::renameIndex": {
        "description": "Renames an entry defined by its index.", 
        "name": "ZipArchive::renameIndex", 
        "overview": "bool ZipArchive::renameIndex ( int $index , string $newname )", 
        "parameters": [
            {
                "descr": "Index of the entry to rename.", 
                "name": "index"
            }, 
            {
                "descr": "New name.", 
                "name": "newname"
            }
        ], 
        "path": "php/ziparchive.renameindex", 
        "type": "Compression"
    }, 
    "ZipArchive::renameName": {
        "description": "Renames an entry defined by its name.", 
        "name": "ZipArchive::renameName", 
        "overview": "bool ZipArchive::renameName ( string $name , string $newname )", 
        "parameters": [
            {
                "descr": "Name of the entry to rename.", 
                "name": "name"
            }, 
            {
                "descr": "New name.", 
                "name": "newname"
            }
        ], 
        "path": "php/ziparchive.renamename", 
        "type": "Compression"
    }, 
    "ZipArchive::setArchiveComment": {
        "description": "Set the comment of a ZIP archive.", 
        "name": "ZipArchive::setArchiveComment", 
        "overview": "bool ZipArchive::setArchiveComment ( string $comment )", 
        "parameters": [
            {
                "descr": "The contents of the comment.", 
                "name": "comment"
            }
        ], 
        "path": "php/ziparchive.setarchivecomment", 
        "type": "Compression"
    }, 
    "ZipArchive::setCommentIndex": {
        "description": "Set the comment of an entry defined by its index.", 
        "name": "ZipArchive::setCommentIndex", 
        "overview": "bool ZipArchive::setCommentIndex ( int $index , string $comment )", 
        "parameters": [
            {
                "descr": "Index of the entry.", 
                "name": "index"
            }, 
            {
                "descr": "The contents of the comment.", 
                "name": "comment"
            }
        ], 
        "path": "php/ziparchive.setcommentindex", 
        "type": "Compression"
    }, 
    "ZipArchive::setCommentName": {
        "description": "Set the comment of an entry defined by its name.", 
        "name": "ZipArchive::setCommentName", 
        "overview": "bool ZipArchive::setCommentName ( string $name , string $comment )", 
        "parameters": [
            {
                "descr": "Name of the entry.", 
                "name": "name"
            }, 
            {
                "descr": "The contents of the comment.", 
                "name": "comment"
            }
        ], 
        "path": "php/ziparchive.setcommentname", 
        "type": "Compression"
    }, 
    "ZipArchive::statIndex": {
        "description": "The function obtains information about the entry defined by its index.", 
        "name": "ZipArchive::statIndex", 
        "overview": "array ZipArchive::statIndex ( int $index [, int $flags ] )", 
        "parameters": [
            {
                "descr": "Index of the entry", 
                "name": "index"
            }, 
            {
                "descr": "ZipArchive::FL_UNCHANGED may be ORed to it to request information about the original file in the archive, ignoring any changes made.", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.statindex", 
        "type": "Compression"
    }, 
    "ZipArchive::statName": {
        "description": "The function obtains information about the entry defined by its name.", 
        "name": "ZipArchive::statName", 
        "overview": "array ZipArchive::statName ( string $name [, int $flags ] )", 
        "parameters": [
            {
                "descr": "Name of the entry", 
                "name": "name"
            }, 
            {
                "descr": "The flags argument specifies how the name lookup should be done. ", 
                "name": "flags"
            }
        ], 
        "path": "php/ziparchive.statname", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeAll": {
        "description": "Undo all changes done in the archive.", 
        "name": "ZipArchive::unchangeAll", 
        "overview": "bool ZipArchive::unchangeAll ( void )", 
        "parameters": [], 
        "path": "php/ziparchive.unchangeall", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeArchive": {
        "description": "Revert all global changes to the archive. For now, this only reverts archive comment changes.", 
        "name": "ZipArchive::unchangeArchive", 
        "overview": "bool ZipArchive::unchangeArchive ( void )", 
        "parameters": [], 
        "path": "php/ziparchive.unchangearchive", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeIndex": {
        "description": "Revert all changes done to an entry at the given index.", 
        "name": "ZipArchive::unchangeIndex", 
        "overview": "bool ZipArchive::unchangeIndex ( int $index )", 
        "parameters": [
            {
                "descr": "Index of the entry.", 
                "name": "index"
            }
        ], 
        "path": "php/ziparchive.unchangeindex", 
        "type": "Compression"
    }, 
    "ZipArchive::unchangeName": {
        "description": "Revert all changes done to an entry.", 
        "name": "ZipArchive::unchangeName", 
        "overview": "bool ZipArchive::unchangeName ( string $name )", 
        "parameters": [
            {
                "descr": "Name of the entry.", 
                "name": "name"
            }
        ], 
        "path": "php/ziparchive.unchangename", 
        "type": "Compression"
    }, 
    "__autoload": {
        "description": "You can define this function to enable classes autoloading.", 
        "name": "__autoload", 
        "overview": "void __autoload ( string $class )", 
        "parameters": [
            {
                "descr": "Name of the class to load", 
                "name": "class"
            }
        ], 
        "path": "php/function.autoload", 
        "type": "Classes and Functions"
    }, 
    "__halt_compiler": {
        "description": "Halts the execution of the compiler. This can be useful to embed data in PHP scripts, like the installation files.", 
        "name": "__halt_compiler", 
        "overview": "void __halt_compiler ( void )", 
        "parameters": [], 
        "path": "php/function.halt-compiler", 
        "type": "Language"
    }, 
    "abs": {
        "description": "Returns the absolute value of number.", 
        "name": "abs", 
        "overview": "number abs ( mixed $number )", 
        "parameters": [
            {
                "descr": "The numeric value to process", 
                "name": "number"
            }
        ], 
        "path": "php/function.abs", 
        "type": "Mathematics"
    }, 
    "acos": {
        "description": "Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()' range.", 
        "name": "acos", 
        "overview": "float acos ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.acos", 
        "type": "Mathematics"
    }, 
    "acosh": {
        "description": "Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg.", 
        "name": "acosh", 
        "overview": "float acosh ( float $arg )", 
        "parameters": [
            {
                "descr": "The value to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.acosh", 
        "type": "Mathematics"
    }, 
    "addcslashes": {
        "description": "Returns a string with backslashes before characters that are listed in charlist parameter.", 
        "name": "addcslashes", 
        "overview": "string addcslashes ( string $str , string $charlist )", 
        "parameters": [
            {
                "descr": "The string to be escaped.", 
                "name": "str"
            }, 
            {
                "descr": "A list of characters to be escaped. ", 
                "name": "charlist"
            }
        ], 
        "path": "php/function.addcslashes", 
        "type": "String"
    }, 
    "addslashes": {
        "description": "Returns a string with backslashes before characters that need to be escaped. These characters are single quote ('), double quote (\"), backslash (\\) and NUL (the NULL byte).", 
        "name": "addslashes", 
        "overview": "string addslashes ( string $str )", 
        "parameters": [
            {
                "descr": "The string to be escaped.", 
                "name": "str"
            }
        ], 
        "path": "php/function.addslashes", 
        "type": "String"
    }, 
    "apache_child_terminate": {
        "description": "apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.", 
        "name": "apache_child_terminate", 
        "overview": "bool apache_child_terminate ( void )", 
        "parameters": [], 
        "path": "php/function.apache-child-terminate", 
        "type": "Apache"
    }, 
    "apache_get_modules": {
        "description": "Get a list of loaded Apache modules.", 
        "name": "apache_get_modules", 
        "overview": "array apache_get_modules ( void )", 
        "parameters": [], 
        "path": "php/function.apache-get-modules", 
        "type": "Apache"
    }, 
    "apache_get_version": {
        "description": "Fetch the Apache version.", 
        "name": "apache_get_version", 
        "overview": "string apache_get_version ( void )", 
        "parameters": [], 
        "path": "php/function.apache-get-version", 
        "type": "Apache"
    }, 
    "apache_getenv": {
        "description": "Retrieve an Apache environment variable specified by variable.", 
        "name": "apache_getenv", 
        "overview": "string apache_getenv ( string $variable [, bool $walk_to_top = false ] )", 
        "parameters": [
            {
                "descr": "The Apache environment variable", 
                "name": "variable"
            }, 
            {
                "descr": "Whether to get the top-level variable available to all Apache layers.", 
                "name": "walk_to_top"
            }
        ], 
        "path": "php/function.apache-getenv", 
        "type": "Apache"
    }, 
    "apache_lookup_uri": {
        "description": "This performs a partial request for a URI. It goes just far enough to obtain all the important information about the given resource.", 
        "name": "apache_lookup_uri", 
        "overview": "object apache_lookup_uri ( string $filename )", 
        "parameters": [
            {
                "descr": "The filename (URI) that's being requested.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.apache-lookup-uri", 
        "type": "Apache"
    }, 
    "apache_note": {
        "description": "This function is a wrapper for Apache's table_get and table_set. It edits the table of notes that exists during a request. The table's purpose is to allow Apache modules to communicate.", 
        "name": "apache_note", 
        "overview": "string apache_note ( string $note_name [, string $note_value = \"\" ] )", 
        "parameters": [
            {
                "descr": "The name of the note.", 
                "name": "note_name"
            }, 
            {
                "descr": "The value of the note.", 
                "name": "note_value"
            }
        ], 
        "path": "php/function.apache-note", 
        "type": "Apache"
    }, 
    "apache_request_headers": {
        "description": "Fetches all HTTP request headers from the current request.", 
        "name": "apache_request_headers", 
        "overview": "array apache_request_headers ( void )", 
        "parameters": [], 
        "path": "php/function.apache-request-headers", 
        "type": "Apache"
    }, 
    "apache_reset_timeout": {
        "description": "apache_reset_timeout() resets the Apache write timer, which defaults to 300 seconds. With set_time_limit(0); ignore_user_abort(true) and periodic apache_reset_timeout() calls, Apache can theoretically run forever.", 
        "name": "apache_reset_timeout", 
        "overview": "bool apache_reset_timeout ( void )", 
        "parameters": [], 
        "path": "php/function.apache-reset-timeout", 
        "type": "Apache"
    }, 
    "apache_response_headers": {
        "description": "Fetch all HTTP response headers.", 
        "name": "apache_response_headers", 
        "overview": "array apache_response_headers ( void )", 
        "parameters": [], 
        "path": "php/function.apache-response-headers", 
        "type": "Apache"
    }, 
    "apache_setenv": {
        "description": "apache_setenv() sets the value of the Apache environment variable specified by variable.", 
        "name": "apache_setenv", 
        "overview": "bool apache_setenv ( string $variable , string $value [, bool $walk_to_top = false ] )", 
        "parameters": [
            {
                "descr": "The environment variable that's being set.", 
                "name": "variable"
            }, 
            {
                "descr": "The new variable value.", 
                "name": "value"
            }, 
            {
                "descr": "Whether to set the top-level variable available to all Apache layers.", 
                "name": "walk_to_top"
            }
        ], 
        "path": "php/function.apache-setenv", 
        "type": "Apache"
    }, 
    "apc_add": {
        "description": "Caches a variable in the data store, only if it's not already stored.", 
        "name": "apc_add", 
        "overview": "bool apc_add ( string $key , mixed $var [, int $ttl = 0 ] )", 
        "parameters": [
            {
                "descr": "Store the variable using this name. ", 
                "name": "key"
            }, 
            {
                "descr": "The variable to store", 
                "name": "var"
            }, 
            {
                "descr": "Time To Live; store var in the cache for ttl seconds. ", 
                "name": "ttl"
            }, 
            {
                "descr": "Names in key, variables in value.", 
                "name": "values"
            }
        ], 
        "path": "php/function.apc-add", 
        "type": "APC"
    }, 
    "apc_bin_dump": {
        "description": "Returns a binary dump of the given files and user variables from the APC cache. A NULL for files or user_vars signals a dump of every entry, whereas array() will dump nothing.", 
        "name": "apc_bin_dump", 
        "overview": "string apc_bin_dump ([ array $files = NULL [, array $user_vars = NULL ]] )", 
        "parameters": [
            {
                "descr": "The files. Passing in NULL signals a dump of every entry, while passing in array() will dump nothing.", 
                "name": "files"
            }, 
            {
                "descr": "The user vars. Passing in NULL signals a dump of every entry, while passing in array() will dump nothing.", 
                "name": "user_vars"
            }
        ], 
        "path": "php/function.apc-bin-dump", 
        "type": "APC"
    }, 
    "apc_bin_dumpfile": {
        "description": "Outputs a binary dump of the given files and user variables from the APC cache to the named file.", 
        "name": "apc_bin_dumpfile", 
        "overview": "int apc_bin_dumpfile ( array $files , array $user_vars , string $filename [, int $flags = 0 [, resource $context = NULL ]] )", 
        "parameters": [
            {
                "descr": "The file names being dumped.", 
                "name": "files"
            }, 
            {
                "descr": "The user variables being dumped.", 
                "name": "user_vars"
            }, 
            {
                "descr": "The filename where the dump is being saved.", 
                "name": "filename"
            }, 
            {
                "descr": "Flags passed to the filename stream. ", 
                "name": "flags"
            }, 
            {
                "descr": "The context passed to the filename stream. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.apc-bin-dumpfile", 
        "type": "APC"
    }, 
    "apc_bin_load": {
        "description": "Loads the given binary dump into the APC file/user cache.", 
        "name": "apc_bin_load", 
        "overview": "bool apc_bin_load ( string $data [, int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "The binary dump being loaded, likely from apc_bin_dump().", 
                "name": "data"
            }, 
            {
                "descr": "Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or both.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.apc-bin-load", 
        "type": "APC"
    }, 
    "apc_bin_loadfile": {
        "description": "Loads a binary dump from a file into the APC file/user cache.", 
        "name": "apc_bin_loadfile", 
        "overview": "bool apc_bin_loadfile ( string $filename [, resource $context = NULL [, int $flags = 0 ]] )", 
        "parameters": [
            {
                "descr": "The file name containing the dump, likely from apc_bin_dumpfile().", 
                "name": "filename"
            }, 
            {
                "descr": "The files context.", 
                "name": "context"
            }, 
            {
                "descr": "Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or both.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.apc-bin-loadfile", 
        "type": "APC"
    }, 
    "apc_cache_info": {
        "description": "Retrieves cached information and meta-data from APC's data store.", 
        "name": "apc_cache_info", 
        "overview": "array apc_cache_info ([ string $cache_type = \"\" [, bool $limited = false ]] )", 
        "parameters": [
            {
                "descr": "If cache_type is \"user\", information about the user cache will be returned. ", 
                "name": "cache_type"
            }, 
            {
                "descr": "If limited is TRUE, the return value will exclude the individual list of cache entries. ", 
                "name": "limited"
            }
        ], 
        "path": "php/function.apc-cache-info", 
        "type": "APC"
    }, 
    "apc_cas": {
        "description": "apc_cas() updates an already existing integer value if the old parameter matches the currently stored value with the value of the new parameter.", 
        "name": "apc_cas", 
        "overview": "bool apc_cas ( string $key , int $old , int $new )", 
        "parameters": [
            {
                "descr": "The key of the value being updated.", 
                "name": "key"
            }, 
            {
                "descr": "The old value (the value currently stored).", 
                "name": "old"
            }, 
            {
                "descr": "The new value to update to.", 
                "name": "new"
            }
        ], 
        "path": "php/function.apc-cas", 
        "type": "APC"
    }, 
    "apc_clear_cache": {
        "description": "Clears the user/system cache.", 
        "name": "apc_clear_cache", 
        "overview": "bool apc_clear_cache ([ string $cache_type = \"\" ] )", 
        "parameters": [
            {
                "descr": "If cache_type is \"user\", the user cache will be cleared; otherwise, the system cache (cached files) will be cleared.", 
                "name": "cache_type"
            }
        ], 
        "path": "php/function.apc-clear-cache", 
        "type": "APC"
    }, 
    "apc_compile_file": {
        "description": "Stores a file in the bytecode cache, bypassing all filters.", 
        "name": "apc_compile_file", 
        "overview": "mixed apc_compile_file ( string $filename [, bool $atomic = true ] )", 
        "parameters": [
            {
                "descr": "Full or relative path to a PHP file that will be compiled and stored in the bytecode cache.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.apc-compile-file", 
        "type": "APC"
    }, 
    "apc_dec": {
        "description": "Decreases a stored integer value.", 
        "name": "apc_dec", 
        "overview": "int apc_dec ( string $key [, int $step = 1 [, bool &$success ]] )", 
        "parameters": [
            {
                "descr": "The key of the value being decreased.", 
                "name": "key"
            }, 
            {
                "descr": "The step, or value to decrease.", 
                "name": "step"
            }, 
            {
                "descr": "Optionally pass the success or fail boolean value to this referenced variable.", 
                "name": "success"
            }
        ], 
        "path": "php/function.apc-dec", 
        "type": "APC"
    }, 
    "apc_define_constants": {
        "description": "define() is notoriously slow. Since the main benefit of APC is to increase the performance of scripts/applications, this mechanism is provided to streamline the process of mass constant definition. However, this function does not perform as well as anticipated.", 
        "name": "apc_define_constants", 
        "overview": "bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive = true ] )", 
        "parameters": [
            {
                "descr": "The key serves as the name of the constant set being stored. ", 
                "name": "key"
            }, 
            {
                "descr": "An associative array of constant_name => value pairs. ", 
                "name": "constants"
            }, 
            {
                "descr": "The default behaviour for constants is to be declared case-sensitive; i.e. ", 
                "name": "case_sensitive"
            }
        ], 
        "path": "php/function.apc-define-constants", 
        "type": "APC"
    }, 
    "apc_delete": {
        "description": "Removes a stored variable from the cache.", 
        "name": "apc_delete", 
        "overview": "mixed apc_delete ( string $key )", 
        "parameters": [
            {
                "descr": "The key used to store the value (with apc_store()).", 
                "name": "key"
            }
        ], 
        "path": "php/function.apc-delete", 
        "type": "APC"
    }, 
    "apc_delete_file": {
        "description": "Deletes the given files from the opcode cache.", 
        "name": "apc_delete_file", 
        "overview": "mixed apc_delete_file ( mixed $keys )", 
        "parameters": [
            {
                "descr": "The files to be deleted. Accepts a string, array of strings, or an APCIterator object.", 
                "name": "keys"
            }
        ], 
        "path": "php/function.apc-delete-file", 
        "type": "APC"
    }, 
    "apc_exists": {
        "description": "Checks if one or more APC keys exist.", 
        "name": "apc_exists", 
        "overview": "mixed apc_exists ( mixed $keys )", 
        "parameters": [
            {
                "descr": "A string, or an array of strings, that contain keys.", 
                "name": "keys"
            }
        ], 
        "path": "php/function.apc-exists", 
        "type": "APC"
    }, 
    "apc_fetch": {
        "description": "Fetchs a stored variable from the cache.", 
        "name": "apc_fetch", 
        "overview": "mixed apc_fetch ( mixed $key [, bool &$success ] )", 
        "parameters": [
            {
                "descr": "The key used to store the value (with apc_store()). ", 
                "name": "key"
            }, 
            {
                "descr": "Set to TRUE in success and FALSE in failure.", 
                "name": "success"
            }
        ], 
        "path": "php/function.apc-fetch", 
        "type": "APC"
    }, 
    "apc_inc": {
        "description": "Increases a stored number.", 
        "name": "apc_inc", 
        "overview": "int apc_inc ( string $key [, int $step = 1 [, bool &$success ]] )", 
        "parameters": [
            {
                "descr": "The key of the value being increased.", 
                "name": "key"
            }, 
            {
                "descr": "The step, or value to increase.", 
                "name": "step"
            }, 
            {
                "descr": "Optionally pass the success or fail boolean value to this referenced variable.", 
                "name": "success"
            }
        ], 
        "path": "php/function.apc-inc", 
        "type": "APC"
    }, 
    "apc_load_constants": {
        "description": "Loads a set of constants from the cache.", 
        "name": "apc_load_constants", 
        "overview": "bool apc_load_constants ( string $key [, bool $case_sensitive = true ] )", 
        "parameters": [
            {
                "descr": "The name of the constant set (that was stored with apc_define_constants()) to be retrieved.", 
                "name": "key"
            }, 
            {
                "descr": "The default behaviour for constants is to be declared case-sensitive; i.e. ", 
                "name": "case_sensitive"
            }
        ], 
        "path": "php/function.apc-load-constants", 
        "type": "APC"
    }, 
    "apc_sma_info": {
        "description": "Retrieves APC's Shared Memory Allocation information.", 
        "name": "apc_sma_info", 
        "overview": "array apc_sma_info ([ bool $limited = false ] )", 
        "parameters": [
            {
                "descr": "When set to FALSE (default) apc_sma_info() will return a detailed information about each segment.", 
                "name": "limited"
            }
        ], 
        "path": "php/function.apc-sma-info", 
        "type": "APC"
    }, 
    "apc_store": {
        "description": "Cache a variable in the data store.", 
        "name": "apc_store", 
        "overview": "bool apc_store ( string $key , mixed $var [, int $ttl = 0 ] )", 
        "parameters": [
            {
                "descr": "Store the variable using this name. ", 
                "name": "key"
            }, 
            {
                "descr": "The variable to store", 
                "name": "var"
            }, 
            {
                "descr": "Time To Live; store var in the cache for ttl seconds. ", 
                "name": "ttl"
            }, 
            {
                "descr": "Names in key, variables in value.", 
                "name": "values"
            }
        ], 
        "path": "php/function.apc-store", 
        "type": "APC"
    }, 
    "array": {
        "description": "Creates an array. Read the section on the array type for more information on what an array is.", 
        "name": "array", 
        "overview": "array array ([ mixed $... ] )", 
        "parameters": [
            {
                "descr": "Syntax \"index => values\", separated by commas, define index and values. ", 
                "name": "..."
            }
        ], 
        "path": "php/function.array", 
        "type": "Array"
    }, 
    "array_change_key_case": {
        "description": "Returns an array with all keys from array lowercased or uppercased. Numbered indices are left as is.", 
        "name": "array_change_key_case", 
        "overview": "array array_change_key_case ( array $array [, int $case = CASE_LOWER ] )", 
        "parameters": [
            {
                "descr": "The array to work on", 
                "name": "array"
            }, 
            {
                "descr": "Either CASE_UPPER or CASE_LOWER (default)", 
                "name": "case"
            }
        ], 
        "path": "php/function.array-change-key-case", 
        "type": "Array"
    }, 
    "array_chunk": {
        "description": "Chunks an array into arrays with size elements. The last chunk may contain less than size elements.", 
        "name": "array_chunk", 
        "overview": "array array_chunk ( array $array , int $size [, bool $preserve_keys = false ] )", 
        "parameters": [
            {
                "descr": "The array to work on", 
                "name": "array"
            }, 
            {
                "descr": "The size of each chunk", 
                "name": "size"
            }, 
            {
                "descr": "When set to TRUE keys will be preserved. ", 
                "name": "preserve_keys"
            }
        ], 
        "path": "php/function.array-chunk", 
        "type": "Array"
    }, 
    "array_column": {
        "description": "array_column() returns the values from a single column of the array, identified by the column_key. Optionally, you may provide an index_key to index the values in the returned array by the values from the index_key column in the input array.", 
        "name": "array_column", 
        "overview": "array array_column ( array $array , mixed $column_key [, mixed $index_key = null ] )", 
        "parameters": [
            {
                "descr": "A multi-dimensional array (record set) from which to pull a column of values.", 
                "name": "array"
            }, 
            {
                "descr": "The column of values to return. ", 
                "name": "column_key"
            }, 
            {
                "descr": "The column to use as the index/keys for the returned array. ", 
                "name": "index_key"
            }
        ], 
        "path": "php/function.array-column", 
        "type": "Array"
    }, 
    "array_combine": {
        "description": "Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values.", 
        "name": "array_combine", 
        "overview": "array array_combine ( array $keys , array $values )", 
        "parameters": [
            {
                "descr": "Array of keys to be used. Illegal values for key will be converted to string.", 
                "name": "keys"
            }, 
            {
                "descr": "Array of values to be used", 
                "name": "values"
            }
        ], 
        "path": "php/function.array-combine", 
        "type": "Array"
    }, 
    "array_count_values": {
        "description": "array_count_values() returns an array using the values of array as keys and their frequency in array as values.", 
        "name": "array_count_values", 
        "overview": "array array_count_values ( array $array )", 
        "parameters": [
            {
                "descr": "The array of values to count", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-count-values", 
        "type": "Array"
    }, 
    "array_diff": {
        "description": "Compares array1 against one or more other arrays and returns the values in array1 that are not present in any of the other arrays.", 
        "name": "array_diff", 
        "overview": "array array_diff ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-diff", 
        "type": "Array"
    }, 
    "array_diff_assoc": {
        "description": "Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are also used in the comparison.", 
        "name": "array_diff_assoc", 
        "overview": "array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-diff-assoc", 
        "type": "Array"
    }, 
    "array_diff_key": {
        "description": "Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.", 
        "name": "array_diff_key", 
        "overview": "array array_diff_key ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-diff-key", 
        "type": "Array"
    }, 
    "array_diff_uassoc": {
        "description": "Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparison.", 
        "name": "array_diff_uassoc", 
        "overview": "array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "parameters": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-diff-uassoc", 
        "type": "Array"
    }, 
    "array_diff_ukey": {
        "description": "Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.", 
        "name": "array_diff_ukey", 
        "overview": "array array_diff_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "parameters": [
            {
                "descr": "The array to compare from", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare against", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays to compare against", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-diff-ukey", 
        "type": "Array"
    }, 
    "array_fill": {
        "description": "Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.", 
        "name": "array_fill", 
        "overview": "array array_fill ( int $start_index , int $num , mixed $value )", 
        "parameters": [
            {
                "descr": "The first index of the returned array. ", 
                "name": "start_index"
            }, 
            {
                "descr": "Number of elements to insert. Must be greater than zero.", 
                "name": "num"
            }, 
            {
                "descr": "Value to use for filling", 
                "name": "value"
            }
        ], 
        "path": "php/function.array-fill", 
        "type": "Array"
    }, 
    "array_fill_keys": {
        "description": "Fills an array with the value of the value parameter, using the values of the keys array as keys.", 
        "name": "array_fill_keys", 
        "overview": "array array_fill_keys ( array $keys , mixed $value )", 
        "parameters": [
            {
                "descr": "Array of values that will be used as keys. ", 
                "name": "keys"
            }, 
            {
                "descr": "Value to use for filling", 
                "name": "value"
            }
        ], 
        "path": "php/function.array-fill-keys", 
        "type": "Array"
    }, 
    "array_filter": {
        "description": "Iterates over each value in the array passing them to the callback function. If the callback function returns true, the current value from array is returned into the result array. Array keys are preserved.", 
        "name": "array_filter", 
        "overview": "array array_filter ( array $array [, callable $callback ] )", 
        "parameters": [
            {
                "descr": "The array to iterate over", 
                "name": "array"
            }, 
            {
                "descr": "The callback function to use   If no callback is supplied, all entries of array equal to FALSE (see converting to boolean) will be removed.", 
                "name": "callback"
            }
        ], 
        "path": "php/function.array-filter", 
        "type": "Array"
    }, 
    "array_flip": {
        "description": "array_flip() returns an array in flip order, i.e. keys from array become values and values from array become keys.", 
        "name": "array_flip", 
        "overview": "array array_flip ( array $array )", 
        "parameters": [
            {
                "descr": "An array of key/value pairs to be flipped.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-flip", 
        "type": "Array"
    }, 
    "array_intersect": {
        "description": "array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved.", 
        "name": "array_intersect", 
        "overview": "array array_intersect ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array with master values to check.", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare values against.", 
                "name": "array2"
            }, 
            {
                "descr": "A variable list of arrays to compare.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-intersect", 
        "type": "Array"
    }, 
    "array_intersect_assoc": {
        "description": "", 
        "name": "array_intersect_assoc", 
        "overview": "array array_intersect_assoc ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array with master values to check.", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare values against.", 
                "name": "array2"
            }, 
            {
                "descr": "A variable list of arrays to compare.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-intersect-assoc", 
        "type": "Array"
    }, 
    "array_intersect_key": {
        "description": "array_intersect_key() returns an array containing all the entries of array1 which have keys that are present in all the arguments.", 
        "name": "array_intersect_key", 
        "overview": "array array_intersect_key ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array with master keys to check.", 
                "name": "array1"
            }, 
            {
                "descr": "An array to compare keys against.", 
                "name": "array2"
            }, 
            {
                "descr": "A variable list of arrays to compare.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-intersect-key", 
        "type": "Array"
    }, 
    "array_intersect_uassoc": {
        "description": "array_intersect_uassoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect().", 
        "name": "array_intersect_uassoc", 
        "overview": "array array_intersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "parameters": [
            {
                "descr": "Initial array for comparison of the arrays.", 
                "name": "array1"
            }, 
            {
                "descr": "First array to compare keys against.", 
                "name": "array2"
            }, 
            {
                "descr": "Variable list of array arguments to compare values against.", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-intersect-uassoc", 
        "type": "Array"
    }, 
    "array_intersect_ukey": {
        "description": "array_intersect_ukey() returns an array containing all the values of array1 which have matching keys that are present in all the arguments.", 
        "name": "array_intersect_ukey", 
        "overview": "array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )", 
        "parameters": [
            {
                "descr": "Initial array for comparison of the arrays.", 
                "name": "array1"
            }, 
            {
                "descr": "First array to compare keys against.", 
                "name": "array2"
            }, 
            {
                "descr": "Variable list of array arguments to compare keys against.", 
                "name": "..."
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-intersect-ukey", 
        "type": "Array"
    }, 
    "array_key_exists": {
        "description": "array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.", 
        "name": "array_key_exists", 
        "overview": "bool array_key_exists ( mixed $key , array $array )", 
        "parameters": [
            {
                "descr": "Value to check.", 
                "name": "key"
            }, 
            {
                "descr": "An array with keys to check.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-key-exists", 
        "type": "Array"
    }, 
    "array_keys": {
        "description": "array_keys() returns the keys, numeric and string, from the array.", 
        "name": "array_keys", 
        "overview": "array array_keys ( array $array [, mixed $search_value [, bool $strict = false ]] )", 
        "parameters": [
            {
                "descr": "An array containing keys to return.", 
                "name": "array"
            }, 
            {
                "descr": "If specified, then only keys containing these values are returned.", 
                "name": "search_value"
            }, 
            {
                "descr": "Determines if strict comparison (===) should be used during the search.", 
                "name": "strict"
            }
        ], 
        "path": "php/function.array-keys", 
        "type": "Array"
    }, 
    "array_map": {
        "description": "array_map() returns an array containing all the elements of array1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()", 
        "name": "array_map", 
        "overview": "array array_map ( callable $callback , array $array1 [, array $... ] )", 
        "parameters": [
            {
                "descr": "Callback function to run for each element in each array.", 
                "name": "callback"
            }, 
            {
                "descr": "An array to run through the callback function.", 
                "name": "array1"
            }, 
            {
                "descr": "Variable list of array arguments to run through the callback function.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-map", 
        "type": "Array"
    }, 
    "array_merge": {
        "description": "Merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.", 
        "name": "array_merge", 
        "overview": "array array_merge ( array $array1 [, array $... ] )", 
        "parameters": [
            {
                "descr": "Initial array to merge.", 
                "name": "array1"
            }, 
            {
                "descr": "Variable list of arrays to merge.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-merge", 
        "type": "Array"
    }, 
    "array_merge_recursive": {
        "description": "array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.", 
        "name": "array_merge_recursive", 
        "overview": "array array_merge_recursive ( array $array1 [, array $... ] )", 
        "parameters": [
            {
                "descr": "Initial array to merge.", 
                "name": "array1"
            }, 
            {
                "descr": "Variable list of arrays to recursively merge.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-merge-recursive", 
        "type": "Array"
    }, 
    "array_multisort": {
        "description": "array_multisort() can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions.", 
        "name": "array_multisort", 
        "overview": "bool array_multisort ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] )", 
        "parameters": [
            {
                "descr": "An array being sorted.", 
                "name": "array1"
            }, 
            {
                "descr": "The order used to sort the previous array argument. ", 
                "name": "array1_sort_order"
            }, 
            {
                "descr": "Sort options for the previous array argument:   Sorting type flags:  SORT_REGULAR - compare items normally (don't change types)   SORT_NUMERIC - compare items numerically   SORT_STRING - compare items as strings    SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale()     SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort()     SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively    This argument can be swapped with array1_sort_order or omitted entirely, in which case SORT_REGULAR is assumed.", 
                "name": "array1_sort_flags"
            }, 
            {
                "descr": "More arrays, optionally followed by sort order and flags.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-multisort", 
        "type": "Array"
    }, 
    "array_pad": {
        "description": "array_pad() returns a copy of the array padded to size specified by size with value value. If size is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of size is less than or equal to the length of the array then no padding takes place. It is possible to add at most 1048576 elements at a time.", 
        "name": "array_pad", 
        "overview": "array array_pad ( array $array , int $size , mixed $value )", 
        "parameters": [
            {
                "descr": "Initial array of values to pad.", 
                "name": "array"
            }, 
            {
                "descr": "New size of the array.", 
                "name": "size"
            }, 
            {
                "descr": "Value to pad if array is less than size.", 
                "name": "value"
            }
        ], 
        "path": "php/function.array-pad", 
        "type": "Array"
    }, 
    "array_pop": {
        "description": "array_pop() pops and returns the last value of the array, shortening the array by one element. If array is empty (or is not an array), NULL will be returned. Will additionally produce a Warning when called on a non-array.", 
        "name": "array_pop", 
        "overview": "mixed array_pop ( array &$array )", 
        "parameters": [
            {
                "descr": "The array to get the value from.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-pop", 
        "type": "Array"
    }, 
    "array_product": {
        "description": "array_product() returns the product of values in an array.", 
        "name": "array_product", 
        "overview": "number array_product ( array $array )", 
        "parameters": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-product", 
        "type": "Array"
    }, 
    "array_push": {
        "description": "array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as:", 
        "name": "array_push", 
        "overview": "int array_push ( array &$array , mixed $value1 [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The first value to push onto the end of the array.", 
                "name": "value1"
            }
        ], 
        "path": "php/function.array-push", 
        "type": "Array"
    }, 
    "array_rand": {
        "description": "Picks one or more random entries out of an array, and returns the key (or keys) of the random entries.", 
        "name": "array_rand", 
        "overview": "mixed array_rand ( array $array [, int $num = 1 ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "Specifies how many entries should be picked.", 
                "name": "num"
            }
        ], 
        "path": "php/function.array-rand", 
        "type": "Array"
    }, 
    "array_reduce": {
        "description": "array_reduce() applies iteratively the callback function to the elements of the array, so as to reduce the array to a single value.", 
        "name": "array_reduce", 
        "overview": "mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The callback function.   mixed callback ( mixed &$result , mixed $item )", 
                "name": "callback"
            }, 
            {
                "descr": "If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty.", 
                "name": "initial"
            }
        ], 
        "path": "php/function.array-reduce", 
        "type": "Array"
    }, 
    "array_replace": {
        "description": "array_replace() replaces the values of array1 with values having the same keys in each of the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values.", 
        "name": "array_replace", 
        "overview": "array array_replace ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array in which elements are replaced.", 
                "name": "array1"
            }, 
            {
                "descr": "The array from which elements will be extracted.", 
                "name": "array2"
            }, 
            {
                "descr": "More arrays from which elements will be extracted. ", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-replace", 
        "type": "Array"
    }, 
    "array_replace_recursive": {
        "description": "array_replace_recursive() replaces the values of array1 with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.", 
        "name": "array_replace_recursive", 
        "overview": "array array_replace_recursive ( array $array1 , array $array2 [, array $... ] )", 
        "parameters": [
            {
                "descr": "The array in which elements are replaced.", 
                "name": "array1"
            }, 
            {
                "descr": "The array from which elements will be extracted.", 
                "name": "array2"
            }, 
            {
                "descr": "Optional. More arrays from which elements will be extracted.", 
                "name": "..."
            }
        ], 
        "path": "php/function.array-replace-recursive", 
        "type": "Array"
    }, 
    "array_reverse": {
        "description": "Takes an input array and returns a new array with the order of the elements reversed.", 
        "name": "array_reverse", 
        "overview": "array array_reverse ( array $array [, bool $preserve_keys = false ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "If set to TRUE numeric keys are preserved. ", 
                "name": "preserve_keys"
            }
        ], 
        "path": "php/function.array-reverse", 
        "type": "Array"
    }, 
    "array_search": {
        "description": "Searches haystack for needle.", 
        "name": "array_search", 
        "overview": "mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] )", 
        "parameters": [
            {
                "descr": "The searched value.  Note:  If needle is a string, the comparison is done in a case-sensitive manner.", 
                "name": "needle"
            }, 
            {
                "descr": "The array.", 
                "name": "haystack"
            }, 
            {
                "descr": "If the third parameter strict is set to TRUE then the array_search() function will search for identical elements in the haystack. ", 
                "name": "strict"
            }
        ], 
        "path": "php/function.array-search", 
        "type": "Array"
    }, 
    "array_shift": {
        "description": "array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.", 
        "name": "array_shift", 
        "overview": "mixed array_shift ( array &$array )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-shift", 
        "type": "Array"
    }, 
    "array_slice": {
        "description": "array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.", 
        "name": "array_slice", 
        "overview": "array array_slice ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "If offset is non-negative, the sequence will start at that offset in the array. ", 
                "name": "offset"
            }, 
            {
                "descr": "If length is given and is positive, then the sequence will have up to that many elements in it. ", 
                "name": "length"
            }, 
            {
                "descr": "Note that array_slice() will reorder and reset the numeric array indices by default. ", 
                "name": "preserve_keys"
            }
        ], 
        "path": "php/function.array-slice", 
        "type": "Array"
    }, 
    "array_splice": {
        "description": "Removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied.", 
        "name": "array_splice", 
        "overview": "array array_splice ( array &$input , int $offset [, int $length [, mixed $replacement = array() ]] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "input"
            }, 
            {
                "descr": "If offset is positive then the start of removed portion is at that offset from the beginning of the input array. ", 
                "name": "offset"
            }, 
            {
                "descr": "If length is omitted, removes everything from offset to the end of the array. ", 
                "name": "length"
            }, 
            {
                "descr": "If replacement array is specified, then the removed elements are replaced with elements from this array. ", 
                "name": "replacement"
            }
        ], 
        "path": "php/function.array-splice", 
        "type": "Array"
    }, 
    "array_sum": {
        "description": "array_sum() returns the sum of values in an array.", 
        "name": "array_sum", 
        "overview": "number array_sum ( array $array )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-sum", 
        "type": "Array"
    }, 
    "array_udiff": {
        "description": "Computes the difference of arrays by using a callback function for data comparison. This is unlike array_diff() which uses an internal function for comparing the data.", 
        "name": "array_udiff", 
        "overview": "array array_udiff ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "parameters": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The callback comparison function. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-udiff", 
        "type": "Array"
    }, 
    "array_udiff_assoc": {
        "description": "Computes the difference of arrays with additional index check, compares data by a callback function.", 
        "name": "array_udiff_assoc", 
        "overview": "array array_udiff_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "parameters": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-udiff-assoc", 
        "type": "Array"
    }, 
    "array_udiff_uassoc": {
        "description": "Computes the difference of arrays with additional index check, compares data and indexes by a callback function.", 
        "name": "array_udiff_uassoc", 
        "overview": "array array_udiff_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )", 
        "parameters": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }, 
            {
                "descr": "The comparison of keys (indices) is done also by the callback function key_compare_func. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-udiff-uassoc", 
        "type": "Array"
    }, 
    "array_uintersect": {
        "description": "Computes the intersection of arrays, compares data by a callback function.", 
        "name": "array_uintersect", 
        "overview": "array array_uintersect ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "parameters": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-uintersect", 
        "type": "Array"
    }, 
    "array_uintersect_assoc": {
        "description": "Computes the intersection of arrays with additional index check, compares data by a callback function.", 
        "name": "array_uintersect_assoc", 
        "overview": "array array_uintersect_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )", 
        "parameters": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.array-uintersect-assoc", 
        "type": "Array"
    }, 
    "array_uintersect_uassoc": {
        "description": "Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions Note that the keys are used in the comparison unlike in array_uintersect(). Both the data and the indexes are compared by using separate callback functions.", 
        "name": "array_uintersect_uassoc", 
        "overview": "array array_uintersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )", 
        "parameters": [
            {
                "descr": "The first array.", 
                "name": "array1"
            }, 
            {
                "descr": "The second array.", 
                "name": "array2"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }, 
            {
                "descr": "Key comparison callback function.", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.array-uintersect-uassoc", 
        "type": "Array"
    }, 
    "array_unique": {
        "description": "Takes an input array and returns a new array without duplicate values.", 
        "name": "array_unique", 
        "overview": "array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The optional second parameter sort_flags may be used to modify the sorting behavior using these values:   Sorting type flags:  SORT_REGULAR - compare items normally (don't change types)   SORT_NUMERIC - compare items numerically   SORT_STRING - compare items as strings   SORT_LOCALE_STRING - compare items as strings, based on the current locale.", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.array-unique", 
        "type": "Array"
    }, 
    "array_unshift": {
        "description": "array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.", 
        "name": "array_unshift", 
        "overview": "int array_unshift ( array &$array , mixed $value1 [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "First value to prepend.", 
                "name": "value1"
            }
        ], 
        "path": "php/function.array-unshift", 
        "type": "Array"
    }, 
    "array_values": {
        "description": "array_values() returns all the values from the array and indexes the array numerically.", 
        "name": "array_values", 
        "overview": "array array_values ( array $array )", 
        "parameters": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.array-values", 
        "type": "Array"
    }, 
    "array_walk": {
        "description": "", 
        "name": "array_walk", 
        "overview": "bool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "Typically, callback takes on two parameters. ", 
                "name": "callback"
            }, 
            {
                "descr": "If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback.", 
                "name": "userdata"
            }
        ], 
        "path": "php/function.array-walk", 
        "type": "Array"
    }, 
    "array_walk_recursive": {
        "description": "Applies the user-defined callback function to each element of the array. This function will recurse into deeper arrays.", 
        "name": "array_walk_recursive", 
        "overview": "bool array_walk_recursive ( array &$array , callable $callback [, mixed $userdata = NULL ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "Typically, callback takes on two parameters. ", 
                "name": "callback"
            }, 
            {
                "descr": "If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback.", 
                "name": "userdata"
            }
        ], 
        "path": "php/function.array-walk-recursive", 
        "type": "Array"
    }, 
    "arsort": {
        "description": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.", 
        "name": "arsort", 
        "overview": "bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.arsort", 
        "type": "Array"
    }, 
    "asin": {
        "description": "Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()'s range.", 
        "name": "asin", 
        "overview": "float asin ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.asin", 
        "type": "Mathematics"
    }, 
    "asinh": {
        "description": "Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg.", 
        "name": "asinh", 
        "overview": "float asinh ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.asinh", 
        "type": "Mathematics"
    }, 
    "asort": {
        "description": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.", 
        "name": "asort", 
        "overview": "bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.asort", 
        "type": "Array"
    }, 
    "assert": {
        "description": "assert() will check the given assertion and take appropriate action if its result is FALSE.", 
        "name": "assert", 
        "overview": "bool assert ( mixed $assertion [, string $description ] )", 
        "parameters": [
            {
                "descr": "The assertion.", 
                "name": "assertion"
            }, 
            {
                "descr": "An optional description that will be included in the failure message if the assertion fails.", 
                "name": "description"
            }
        ], 
        "path": "php/function.assert", 
        "type": "Language"
    }, 
    "assert_options": {
        "description": "Set the various assert() control options or just query their current settings.", 
        "name": "assert_options", 
        "overview": "mixed assert_options ( int $what [, mixed $value ] )", 
        "parameters": [
            {
                "descr": "Assert Options Option INI Setting Default value Description ASSERT_ACTIVE assert.active 1 enable assert() evaluation ASSERT_WARNING assert.warning 1 issue a PHP warning for each failed assertion ASSERT_BAIL assert.bail 0 terminate execution on failed assertions ASSERT_QUIET_EVAL assert.quiet_eval 0  disable error_reporting during assertion expression evaluation  ASSERT_CALLBACK assert.callback (NULL) Callback to call on failed assertions", 
                "name": "what"
            }, 
            {
                "descr": "An optional new value for the option.", 
                "name": "value"
            }
        ], 
        "path": "php/function.assert-options", 
        "type": "Language"
    }, 
    "atan": {
        "description": "Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()'s range.", 
        "name": "atan", 
        "overview": "float atan ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.atan", 
        "type": "Mathematics"
    }, 
    "atan2": {
        "description": "", 
        "name": "atan2", 
        "overview": "float atan2 ( float $y , float $x )", 
        "parameters": [
            {
                "descr": "Dividend parameter", 
                "name": "y"
            }, 
            {
                "descr": "Divisor parameter", 
                "name": "x"
            }
        ], 
        "path": "php/function.atan2", 
        "type": "Mathematics"
    }, 
    "atanh": {
        "description": "Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg.", 
        "name": "atanh", 
        "overview": "float atanh ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.atanh", 
        "type": "Mathematics"
    }, 
    "base64_decode": {
        "description": "Decodes a base64 encoded data.", 
        "name": "base64_decode", 
        "overview": "string base64_decode ( string $data [, bool $strict = false ] )", 
        "parameters": [
            {
                "descr": "The encoded data.", 
                "name": "data"
            }, 
            {
                "descr": "Returns FALSE if input contains character from outside the base64 alphabet.", 
                "name": "strict"
            }
        ], 
        "path": "php/function.base64-decode", 
        "type": "Networking"
    }, 
    "base64_encode": {
        "description": "Encodes the given data with base64.", 
        "name": "base64_encode", 
        "overview": "string base64_encode ( string $data )", 
        "parameters": [
            {
                "descr": "The data to encode.", 
                "name": "data"
            }
        ], 
        "path": "php/function.base64-encode", 
        "type": "Networking"
    }, 
    "base_convert": {
        "description": "Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.", 
        "name": "base_convert", 
        "overview": "string base_convert ( string $number , int $frombase , int $tobase )", 
        "parameters": [
            {
                "descr": "The number to convert", 
                "name": "number"
            }, 
            {
                "descr": "The base number is in", 
                "name": "frombase"
            }, 
            {
                "descr": "The base to convert number to", 
                "name": "tobase"
            }
        ], 
        "path": "php/function.base-convert", 
        "type": "Mathematics"
    }, 
    "basename": {
        "description": "Given a string containing the path to a file or directory, this function will return the trailing name component.", 
        "name": "basename", 
        "overview": "string basename ( string $path [, string $suffix ] )", 
        "parameters": [
            {
                "descr": "A path.   On Windows, both slash (/) and backslash (\\) are used as directory separator character. ", 
                "name": "path"
            }, 
            {
                "descr": "If the name component ends in suffix this will also be cut off.", 
                "name": "suffix"
            }
        ], 
        "path": "php/function.basename", 
        "type": "File System"
    }, 
    "bcadd": {
        "description": "Sums left_operand and right_operand.", 
        "name": "bcadd", 
        "overview": "string bcadd ( string $left_operand , string $right_operand [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcadd", 
        "type": "Mathematics"
    }, 
    "bccomp": {
        "description": "Compares the left_operand to the right_operand and returns the result as an integer.", 
        "name": "bccomp", 
        "overview": "int bccomp ( string $left_operand , string $right_operand [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "The optional scale parameter is used to set the number of digits after the decimal place which will be used in the comparison.", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bccomp", 
        "type": "Mathematics"
    }, 
    "bcdiv": {
        "description": "Divides the left_operand by the right_operand.", 
        "name": "bcdiv", 
        "overview": "string bcdiv ( string $left_operand , string $right_operand [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcdiv", 
        "type": "Mathematics"
    }, 
    "bcmod": {
        "description": "Get the modulus of the left_operand using modulus.", 
        "name": "bcmod", 
        "overview": "string bcmod ( string $left_operand , string $modulus )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The modulus, as a string.", 
                "name": "modulus"
            }
        ], 
        "path": "php/function.bcmod", 
        "type": "Mathematics"
    }, 
    "bcmul": {
        "description": "Multiply the left_operand by the right_operand.", 
        "name": "bcmul", 
        "overview": "string bcmul ( string $left_operand , string $right_operand [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcmul", 
        "type": "Mathematics"
    }, 
    "bcpow": {
        "description": "Raise left_operand to the power right_operand.", 
        "name": "bcpow", 
        "overview": "string bcpow ( string $left_operand , string $right_operand [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcpow", 
        "type": "Mathematics"
    }, 
    "bcpowmod": {
        "description": "Use the fast-exponentiation method to raise left_operand to the power right_operand with respect to the modulus modulus.", 
        "name": "bcpowmod", 
        "overview": "string bcpowmod ( string $left_operand , string $right_operand , string $modulus [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "The modulus, as a string.", 
                "name": "modulus"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcpowmod", 
        "type": "Mathematics"
    }, 
    "bcscale": {
        "description": "Sets the default scale parameter for all subsequent calls to bc math functions that do not explicitly specify a scale parameter.", 
        "name": "bcscale", 
        "overview": "bool bcscale ( int $scale )", 
        "parameters": [
            {
                "descr": "The scale factor.", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcscale", 
        "type": "Mathematics"
    }, 
    "bcsqrt": {
        "description": "Return the square root of the operand.", 
        "name": "bcsqrt", 
        "overview": "string bcsqrt ( string $operand [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The operand, as a string.", 
                "name": "operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcsqrt", 
        "type": "Mathematics"
    }, 
    "bcsub": {
        "description": "Subtracts the right_operand from the left_operand.", 
        "name": "bcsub", 
        "overview": "string bcsub ( string $left_operand , string $right_operand [, int $scale ] )", 
        "parameters": [
            {
                "descr": "The left operand, as a string.", 
                "name": "left_operand"
            }, 
            {
                "descr": "The right operand, as a string.", 
                "name": "right_operand"
            }, 
            {
                "descr": "This optional parameter is used to set the number of digits after the decimal place in the result. ", 
                "name": "scale"
            }
        ], 
        "path": "php/function.bcsub", 
        "type": "Mathematics"
    }, 
    "bin2hex": {
        "description": "Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first.", 
        "name": "bin2hex", 
        "overview": "string bin2hex ( string $str )", 
        "parameters": [
            {
                "descr": "A string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.bin2hex", 
        "type": "String"
    }, 
    "bind_textdomain_codeset": {
        "description": "With bind_textdomain_codeset(), you can set in which encoding will be messages from domain returned by gettext() and similar functions.", 
        "name": "bind_textdomain_codeset", 
        "overview": "string bind_textdomain_codeset ( string $domain , string $codeset )", 
        "parameters": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The code set", 
                "name": "codeset"
            }
        ], 
        "path": "php/function.bind-textdomain-codeset", 
        "type": "Encoding"
    }, 
    "bindec": {
        "description": "Returns the decimal equivalent of the binary number represented by the binary_string argument.", 
        "name": "bindec", 
        "overview": "number bindec ( string $binary_string )", 
        "parameters": [
            {
                "descr": "The binary string to convert", 
                "name": "binary_string"
            }
        ], 
        "path": "php/function.bindec", 
        "type": "Mathematics"
    }, 
    "bindtextdomain": {
        "description": "The bindtextdomain() function sets the path for a domain.", 
        "name": "bindtextdomain", 
        "overview": "string bindtextdomain ( string $domain , string $directory )", 
        "parameters": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The directory path", 
                "name": "directory"
            }
        ], 
        "path": "php/function.bindtextdomain", 
        "type": "Encoding"
    }, 
    "boolval": {
        "description": "Returns the boolean value of var.", 
        "name": "boolval", 
        "overview": "boolean boolval ( mixed $var )", 
        "parameters": [
            {
                "descr": "The scalar value being converted to a boolean.", 
                "name": "var"
            }
        ], 
        "path": "php/function.boolval", 
        "type": "Variables"
    }, 
    "bzclose": {
        "description": "Closes the given bzip2 file pointer.", 
        "name": "bzclose", 
        "overview": "int bzclose ( resource $bz )", 
        "parameters": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzclose", 
        "type": "Compression"
    }, 
    "bzcompress": {
        "description": "bzcompress() compresses the given string and returns it as bzip2 encoded data.", 
        "name": "bzcompress", 
        "overview": "mixed bzcompress ( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]] )", 
        "parameters": [
            {
                "descr": "The string to compress.", 
                "name": "source"
            }, 
            {
                "descr": "Specifies the blocksize used during compression and should be a number from 1 to 9 with 9 giving the best compression, but using more resources to do so.", 
                "name": "blocksize"
            }, 
            {
                "descr": "Controls how the compression phase behaves when presented with worst case, highly repetitive, input data. ", 
                "name": "workfactor"
            }
        ], 
        "path": "php/function.bzcompress", 
        "type": "Compression"
    }, 
    "bzdecompress": {
        "description": "bzdecompress() decompresses the given string containing bzip2 encoded data.", 
        "name": "bzdecompress", 
        "overview": "mixed bzdecompress ( string $source [, int $small = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to decompress.", 
                "name": "source"
            }, 
            {
                "descr": "If TRUE, an alternative decompression algorithm will be used which uses less memory (the maximum memory requirement drops to around 2300K) but works at roughly half the speed. ", 
                "name": "small"
            }
        ], 
        "path": "php/function.bzdecompress", 
        "type": "Compression"
    }, 
    "bzerrno": {
        "description": "Returns the error number of any bzip2 error returned by the given file pointer.", 
        "name": "bzerrno", 
        "overview": "int bzerrno ( resource $bz )", 
        "parameters": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzerrno", 
        "type": "Compression"
    }, 
    "bzerror": {
        "description": "Returns the error number and error string of any bzip2 error returned by the given file pointer.", 
        "name": "bzerror", 
        "overview": "array bzerror ( resource $bz )", 
        "parameters": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzerror", 
        "type": "Compression"
    }, 
    "bzerrstr": {
        "description": "Gets the error string of any bzip2 error returned by the given file pointer.", 
        "name": "bzerrstr", 
        "overview": "string bzerrstr ( resource $bz )", 
        "parameters": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzerrstr", 
        "type": "Compression"
    }, 
    "bzflush": {
        "description": "Forces a write of all buffered bzip2 data for the file pointer bz.", 
        "name": "bzflush", 
        "overview": "int bzflush ( resource $bz )", 
        "parameters": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }
        ], 
        "path": "php/function.bzflush", 
        "type": "Compression"
    }, 
    "bzopen": {
        "description": "bzopen() opens a bzip2 (.bz2) file for reading or writing.", 
        "name": "bzopen", 
        "overview": "resource bzopen ( string $filename , string $mode )", 
        "parameters": [
            {
                "descr": "The name of the file to open, or an existing stream resource.", 
                "name": "filename"
            }, 
            {
                "descr": "Similar to the fopen() function, only 'r' (read) and 'w' (write) are supported. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.bzopen", 
        "type": "Compression"
    }, 
    "bzread": {
        "description": "bzread() reads from the given bzip2 file pointer.", 
        "name": "bzread", 
        "overview": "string bzread ( resource $bz [, int $length = 1024 ] )", 
        "parameters": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }, 
            {
                "descr": "If not specified, bzread() will read 1024 (uncompressed) bytes at a time. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.bzread", 
        "type": "Compression"
    }, 
    "bzwrite": {
        "description": "bzwrite() writes a string into the given bzip2 file stream.", 
        "name": "bzwrite", 
        "overview": "int bzwrite ( resource $bz , string $data [, int $length ] )", 
        "parameters": [
            {
                "descr": "The file pointer. It must be valid and must point to a file successfully opened by bzopen().", 
                "name": "bz"
            }, 
            {
                "descr": "The written data.", 
                "name": "data"
            }, 
            {
                "descr": "If supplied, writing will stop after length (uncompressed) bytes have been written or the end of data is reached, whichever comes first.", 
                "name": "length"
            }
        ], 
        "path": "php/function.bzwrite", 
        "type": "Compression"
    }, 
    "cal_days_in_month": {
        "description": "This function will return the number of days in the month of year for the specified calendar.", 
        "name": "cal_days_in_month", 
        "overview": "int cal_days_in_month ( int $calendar , int $month , int $year )", 
        "parameters": [
            {
                "descr": "Calendar to use for calculation", 
                "name": "calendar"
            }, 
            {
                "descr": "Month in the selected calendar", 
                "name": "month"
            }, 
            {
                "descr": "Year in the selected calendar", 
                "name": "year"
            }
        ], 
        "path": "php/function.cal-days-in-month", 
        "type": "Date and Time"
    }, 
    "cal_from_jd": {
        "description": "cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.", 
        "name": "cal_from_jd", 
        "overview": "array cal_from_jd ( int $jd , int $calendar )", 
        "parameters": [
            {
                "descr": "Julian day as integer", 
                "name": "jd"
            }, 
            {
                "descr": "Calendar to convert to", 
                "name": "calendar"
            }
        ], 
        "path": "php/function.cal-from-jd", 
        "type": "Date and Time"
    }, 
    "cal_info": {
        "description": "cal_info() returns information on the specified calendar.", 
        "name": "cal_info", 
        "overview": "array cal_info ([ int $calendar = -1 ] )", 
        "parameters": [
            {
                "descr": "Calendar to return information for. ", 
                "name": "calendar"
            }
        ], 
        "path": "php/function.cal-info", 
        "type": "Date and Time"
    }, 
    "cal_to_jd": {
        "description": "cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.", 
        "name": "cal_to_jd", 
        "overview": "int cal_to_jd ( int $calendar , int $month , int $day , int $year )", 
        "parameters": [
            {
                "descr": "Calendar to convert from, one of CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH or CAL_FRENCH.", 
                "name": "calendar"
            }, 
            {
                "descr": "The month as a number, the valid range depends on the calendar", 
                "name": "month"
            }, 
            {
                "descr": "The day as a number, the valid range depends on the calendar", 
                "name": "day"
            }, 
            {
                "descr": "The year as a number, the valid range depends on the calendar", 
                "name": "year"
            }
        ], 
        "path": "php/function.cal-to-jd", 
        "type": "Date and Time"
    }, 
    "call_user_func": {
        "description": "Calls the callback given by the first parameter and passes the remaining parameters as arguments.", 
        "name": "call_user_func", 
        "overview": "mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The callable to be called.", 
                "name": "callback"
            }, 
            {
                "descr": "Zero or more parameters to be passed to the callback. ", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.call-user-func", 
        "type": "Classes and Functions"
    }, 
    "call_user_func_array": {
        "description": "Calls the callback given by the first parameter with the parameters in param_arr.", 
        "name": "call_user_func_array", 
        "overview": "mixed call_user_func_array ( callable $callback , array $param_arr )", 
        "parameters": [
            {
                "descr": "The callable to be called.", 
                "name": "callback"
            }, 
            {
                "descr": "The parameters to be passed to the callback, as an indexed array.", 
                "name": "param_arr"
            }
        ], 
        "path": "php/function.call-user-func-array", 
        "type": "Classes and Functions"
    }, 
    "call_user_method": {
        "description": "", 
        "name": "call_user_method", 
        "overview": "mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The method name being called.", 
                "name": "method_name"
            }, 
            {
                "descr": "The object that method_name is being called on.", 
                "name": "obj"
            }, 
            {
                "descr": "The optional parameters.", 
                "name": "parameter ..."
            }
        ], 
        "path": "php/function.call-user-method", 
        "type": "Classes and Functions"
    }, 
    "call_user_method_array": {
        "description": "", 
        "name": "call_user_method_array", 
        "overview": "mixed call_user_method_array ( string $method_name , object &$obj , array $params )", 
        "parameters": [
            {
                "descr": "The method name being called.", 
                "name": "method_name"
            }, 
            {
                "descr": "The object that method_name is being called on.", 
                "name": "obj"
            }, 
            {
                "descr": "An array of parameters.", 
                "name": "params"
            }
        ], 
        "path": "php/function.call-user-method-array", 
        "type": "Classes and Functions"
    }, 
    "ceil": {
        "description": "", 
        "name": "ceil", 
        "overview": "float ceil ( float $value )", 
        "parameters": [
            {
                "descr": "The value to round", 
                "name": "value"
            }
        ], 
        "path": "php/function.ceil", 
        "type": "Mathematics"
    }, 
    "chdir": {
        "description": "Changes PHP's current directory to directory.", 
        "name": "chdir", 
        "overview": "bool chdir ( string $directory )", 
        "parameters": [
            {
                "descr": "The new current directory", 
                "name": "directory"
            }
        ], 
        "path": "php/function.chdir", 
        "type": "File System"
    }, 
    "checkdate": {
        "description": "Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.", 
        "name": "checkdate", 
        "overview": "bool checkdate ( int $month , int $day , int $year )", 
        "parameters": [
            {
                "descr": "The month is between 1 and 12 inclusive.", 
                "name": "month"
            }, 
            {
                "descr": "The day is within the allowed number of days for the given month. ", 
                "name": "day"
            }, 
            {
                "descr": "The year is between 1 and 32767 inclusive.", 
                "name": "year"
            }
        ], 
        "path": "php/function.checkdate", 
        "type": "Date and Time"
    }, 
    "checkdnsrr": {
        "description": "Searches DNS for records of type type corresponding to host.", 
        "name": "checkdnsrr", 
        "overview": "bool checkdnsrr ( string $host [, string $type = \"MX\" ] )", 
        "parameters": [
            {
                "descr": "host may either be the IP address in dotted-quad notation or the host name.", 
                "name": "host"
            }, 
            {
                "descr": "type may be any one of: A, MX, NS, SOA, PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.", 
                "name": "type"
            }
        ], 
        "path": "php/function.checkdnsrr", 
        "type": "Networking"
    }, 
    "chgrp": {
        "description": "Attempts to change the group of the file filename to group.", 
        "name": "chgrp", 
        "overview": "bool chgrp ( string $filename , mixed $group )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "A group name or number.", 
                "name": "group"
            }
        ], 
        "path": "php/function.chgrp", 
        "type": "File System"
    }, 
    "chmod": {
        "description": "Attempts to change the mode of the specified file to that given in mode.", 
        "name": "chmod", 
        "overview": "bool chmod ( string $filename , int $mode )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Note that mode is not automatically assumed to be an octal value, so strings (such as \"g+w\") will not work properly. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.chmod", 
        "type": "File System"
    }, 
    "chown": {
        "description": "Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file.", 
        "name": "chown", 
        "overview": "bool chown ( string $filename , mixed $user )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "A user name or number.", 
                "name": "user"
            }
        ], 
        "path": "php/function.chown", 
        "type": "File System"
    }, 
    "chr": {
        "description": "Returns a one-character string containing the character specified by ascii.", 
        "name": "chr", 
        "overview": "string chr ( int $ascii )", 
        "parameters": [
            {
                "descr": "The ascii code.", 
                "name": "ascii"
            }
        ], 
        "path": "php/function.chr", 
        "type": "String"
    }, 
    "chroot": {
        "description": "Changes the root directory of the current process to directory, and changes the current working directory to \"/\".", 
        "name": "chroot", 
        "overview": "bool chroot ( string $directory )", 
        "parameters": [
            {
                "descr": "The path to change the root directory to.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.chroot", 
        "type": "File System"
    }, 
    "chunk_split": {
        "description": "Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode() output to match RFC 2045 semantics. It inserts end every chunklen characters.", 
        "name": "chunk_split", 
        "overview": "string chunk_split ( string $body [, int $chunklen = 76 [, string $end = \"\\r\\n\" ]] )", 
        "parameters": [
            {
                "descr": "The string to be chunked.", 
                "name": "body"
            }, 
            {
                "descr": "The chunk length.", 
                "name": "chunklen"
            }, 
            {
                "descr": "The line ending sequence.", 
                "name": "end"
            }
        ], 
        "path": "php/function.chunk-split", 
        "type": "String"
    }, 
    "class_alias": {
        "description": "Creates an alias named alias based on the user defined class original. The aliased class is exactly the same as the original class.", 
        "name": "class_alias", 
        "overview": "bool class_alias ( string $original , string $alias [, bool $autoload = TRUE ] )", 
        "parameters": [
            {
                "descr": "The original class.", 
                "name": "original"
            }, 
            {
                "descr": "The alias name for the class.", 
                "name": "alias"
            }, 
            {
                "descr": "Whether do autoload if the original class is not found.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-alias", 
        "type": "Classes and Functions"
    }, 
    "class_exists": {
        "description": "This function checks whether or not the given class has been defined.", 
        "name": "class_exists", 
        "overview": "bool class_exists ( string $class_name [, bool $autoload = true ] )", 
        "parameters": [
            {
                "descr": "The class name. The name is matched in a case-insensitive manner.", 
                "name": "class_name"
            }, 
            {
                "descr": "Whether or not to call __autoload by default.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-exists", 
        "type": "Classes and Functions"
    }, 
    "class_implements": {
        "description": "This function returns an array with the names of the interfaces that the given class and its parents implement.", 
        "name": "class_implements", 
        "overview": "array class_implements ( mixed $class [, bool $autoload = true ] )", 
        "parameters": [
            {
                "descr": "An object (class instance) or a string (class name).", 
                "name": "class"
            }, 
            {
                "descr": "Whether to allow this function to load the class automatically through the __autoload() magic method.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-implements", 
        "type": "SPL"
    }, 
    "class_parents": {
        "description": "This function returns an array with the name of the parent classes of the given class.", 
        "name": "class_parents", 
        "overview": "array class_parents ( mixed $class [, bool $autoload = true ] )", 
        "parameters": [
            {
                "descr": "An object (class instance) or a string (class name).", 
                "name": "class"
            }, 
            {
                "descr": "Whether to allow this function to load the class automatically through the __autoload() magic method.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-parents", 
        "type": "SPL"
    }, 
    "class_uses": {
        "description": "This function returns an array with the names of the traits that the given class uses. This does however not include any traits used by a parent class.", 
        "name": "class_uses", 
        "overview": "array class_uses ( mixed $class [, bool $autoload = true ] )", 
        "parameters": [
            {
                "descr": "An object (class instance) or a string (class name).", 
                "name": "class"
            }, 
            {
                "descr": "Whether to allow this function to load the class automatically through the __autoload() magic method.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.class-uses", 
        "type": "SPL"
    }, 
    "clearstatcache": {
        "description": "When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script's operation, you may elect to clear the status cache. In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file.", 
        "name": "clearstatcache", 
        "overview": "void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]] )", 
        "parameters": [
            {
                "descr": "Whether to clear the realpath cache or not.", 
                "name": "clear_realpath_cache"
            }, 
            {
                "descr": "Clear the realpath and the stat cache for a specific filename only; only used if clear_realpath_cache is TRUE.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.clearstatcache", 
        "type": "File System"
    }, 
    "cli_get_process_title": {
        "description": "Returns the current process title, as set by cli_set_process_title(). Note that this may not exactly match what is shown in ps or top, depending on your operating system.", 
        "name": "cli_get_process_title", 
        "overview": "string cli_get_process_title ( void )", 
        "parameters": [], 
        "path": "php/function.cli-get-process-title", 
        "type": "Language"
    }, 
    "cli_set_process_title": {
        "description": "Sets the process title visible in tools such as top and ps. This function is available only in CLI mode.", 
        "name": "cli_set_process_title", 
        "overview": "bool cli_set_process_title ( string $title )", 
        "parameters": [
            {
                "descr": "The new title.", 
                "name": "title"
            }
        ], 
        "path": "php/function.cli-set-process-title", 
        "type": "Language"
    }, 
    "closedir": {
        "description": "Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir().", 
        "name": "closedir", 
        "overview": "void closedir ([ resource $dir_handle ] )", 
        "parameters": [
            {
                "descr": "The directory handle resource previously opened with opendir(). ", 
                "name": "dir_handle"
            }
        ], 
        "path": "php/function.closedir", 
        "type": "File System"
    }, 
    "closelog": {
        "description": "closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional.", 
        "name": "closelog", 
        "overview": "bool closelog ( void )", 
        "parameters": [], 
        "path": "php/function.closelog", 
        "type": "Networking"
    }, 
    "compact": {
        "description": "Creates an array containing variables and their values.", 
        "name": "compact", 
        "overview": "array compact ( mixed $varname1 [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "compact() takes a variable number of parameters. ", 
                "name": "varname1"
            }
        ], 
        "path": "php/function.compact", 
        "type": "Array"
    }, 
    "connection_aborted": {
        "description": "Checks whether the client disconnected.", 
        "name": "connection_aborted", 
        "overview": "int connection_aborted ( void )", 
        "parameters": [], 
        "path": "php/function.connection-aborted", 
        "type": "Language"
    }, 
    "connection_status": {
        "description": "Gets the connection status bitfield.", 
        "name": "connection_status", 
        "overview": "int connection_status ( void )", 
        "parameters": [], 
        "path": "php/function.connection-status", 
        "type": "Language"
    }, 
    "connection_timeout": {
        "description": "Determines whether the script timed out.", 
        "name": "connection_timeout", 
        "overview": "int connection_timeout ( void )", 
        "parameters": [], 
        "path": "php/function.connection-timeout", 
        "type": "Language"
    }, 
    "constant": {
        "description": "", 
        "name": "constant", 
        "overview": "mixed constant ( string $name )", 
        "parameters": [
            {
                "descr": "The constant name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.constant", 
        "type": "Language"
    }, 
    "convert_cyr_string": {
        "description": "Converts from one Cyrillic character set to another.", 
        "name": "convert_cyr_string", 
        "overview": "string convert_cyr_string ( string $str , string $from , string $to )", 
        "parameters": [
            {
                "descr": "The string to be converted.", 
                "name": "str"
            }, 
            {
                "descr": "The source Cyrillic character set, as a single character.", 
                "name": "from"
            }, 
            {
                "descr": "The target Cyrillic character set, as a single character.", 
                "name": "to"
            }
        ], 
        "path": "php/function.convert-cyr-string", 
        "type": "String"
    }, 
    "convert_uudecode": {
        "description": "convert_uudecode() decodes a uuencoded string.", 
        "name": "convert_uudecode", 
        "overview": "string convert_uudecode ( string $data )", 
        "parameters": [
            {
                "descr": "The uuencoded data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.convert-uudecode", 
        "type": "String"
    }, 
    "convert_uuencode": {
        "description": "convert_uuencode() encodes a string using the uuencode algorithm.", 
        "name": "convert_uuencode", 
        "overview": "string convert_uuencode ( string $data )", 
        "parameters": [
            {
                "descr": "The data to be encoded or FALSE on failure.", 
                "name": "data"
            }
        ], 
        "path": "php/function.convert-uuencode", 
        "type": "String"
    }, 
    "copy": {
        "description": "Makes a copy of the file source to dest.", 
        "name": "copy", 
        "overview": "bool copy ( string $source , string $dest [, resource $context ] )", 
        "parameters": [
            {
                "descr": "Path to the source file.", 
                "name": "source"
            }, 
            {
                "descr": "The destination path. If dest is a URL, the copy operation may fail if the wrapper does not support overwriting of existing files. ", 
                "name": "dest"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/function.copy", 
        "type": "File System"
    }, 
    "cos": {
        "description": "cos() returns the cosine of the arg parameter. The arg parameter is in radians.", 
        "name": "cos", 
        "overview": "float cos ( float $arg )", 
        "parameters": [
            {
                "descr": "An angle in radians", 
                "name": "arg"
            }
        ], 
        "path": "php/function.cos", 
        "type": "Mathematics"
    }, 
    "cosh": {
        "description": "Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2.", 
        "name": "cosh", 
        "overview": "float cosh ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.cosh", 
        "type": "Mathematics"
    }, 
    "count": {
        "description": "Counts all elements in an array, or something in an object.", 
        "name": "count", 
        "overview": "int count ( mixed $array_or_countable [, int $mode = COUNT_NORMAL ] )", 
        "parameters": [
            {
                "descr": "An array or Countable object.", 
                "name": "array_or_countable"
            }, 
            {
                "descr": "If the optional mode parameter is set to COUNT_RECURSIVE (or 1), count() will recursively count the array. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.count", 
        "type": "Array"
    }, 
    "count_chars": {
        "description": "Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.", 
        "name": "count_chars", 
        "overview": "mixed count_chars ( string $string [, int $mode = 0 ] )", 
        "parameters": [
            {
                "descr": "The examined string.", 
                "name": "string"
            }, 
            {
                "descr": "See return values.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.count-chars", 
        "type": "String"
    }, 
    "crc32": {
        "description": "Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted.", 
        "name": "crc32", 
        "overview": "int crc32 ( string $str )", 
        "parameters": [
            {
                "descr": "The data.", 
                "name": "str"
            }
        ], 
        "path": "php/function.crc32", 
        "type": "String"
    }, 
    "create_function": {
        "description": "Creates an anonymous function from the parameters passed, and returns a unique name for it.", 
        "name": "create_function", 
        "overview": "string create_function ( string $args , string $code )", 
        "parameters": [
            {
                "descr": "The function arguments.", 
                "name": "args"
            }, 
            {
                "descr": "The function code.", 
                "name": "code"
            }
        ], 
        "path": "php/function.create-function", 
        "type": "Classes and Functions"
    }, 
    "crypt": {
        "description": "crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system.", 
        "name": "crypt", 
        "overview": "string crypt ( string $str [, string $salt ] )", 
        "parameters": [
            {
                "descr": "The string to be hashed.  Caution  Using the CRYPT_BLOWFISH algorithm, will result in the str parameter being truncated to a maximum length of 72 characters. ", 
                "name": "str"
            }, 
            {
                "descr": "An optional salt string to base the hashing on. ", 
                "name": "salt"
            }
        ], 
        "path": "php/function.crypt", 
        "type": "String"
    }, 
    "ctype_alnum": {
        "description": "Checks if all of the characters in the provided string, text, are alphanumeric.", 
        "name": "ctype_alnum", 
        "overview": "bool ctype_alnum ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-alnum", 
        "type": "String"
    }, 
    "ctype_alpha": {
        "description": "Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.", 
        "name": "ctype_alpha", 
        "overview": "bool ctype_alpha ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-alpha", 
        "type": "String"
    }, 
    "ctype_cntrl": {
        "description": "Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape.", 
        "name": "ctype_cntrl", 
        "overview": "bool ctype_cntrl ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-cntrl", 
        "type": "String"
    }, 
    "ctype_digit": {
        "description": "Checks if all of the characters in the provided string, text, are numerical.", 
        "name": "ctype_digit", 
        "overview": "bool ctype_digit ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-digit", 
        "type": "String"
    }, 
    "ctype_graph": {
        "description": "Checks if all of the characters in the provided string, text, creates visible output.", 
        "name": "ctype_graph", 
        "overview": "bool ctype_graph ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-graph", 
        "type": "String"
    }, 
    "ctype_lower": {
        "description": "Checks if all of the characters in the provided string, text, are lowercase letters.", 
        "name": "ctype_lower", 
        "overview": "bool ctype_lower ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-lower", 
        "type": "String"
    }, 
    "ctype_print": {
        "description": "Checks if all of the characters in the provided string, text, are printable.", 
        "name": "ctype_print", 
        "overview": "bool ctype_print ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-print", 
        "type": "String"
    }, 
    "ctype_punct": {
        "description": "Checks if all of the characters in the provided string, text, are punctuation character.", 
        "name": "ctype_punct", 
        "overview": "bool ctype_punct ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-punct", 
        "type": "String"
    }, 
    "ctype_space": {
        "description": "Checks if all of the characters in the provided string, text, creates whitespace.", 
        "name": "ctype_space", 
        "overview": "bool ctype_space ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-space", 
        "type": "String"
    }, 
    "ctype_upper": {
        "description": "Checks if all of the characters in the provided string, text, are uppercase characters.", 
        "name": "ctype_upper", 
        "overview": "bool ctype_upper ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-upper", 
        "type": "String"
    }, 
    "ctype_xdigit": {
        "description": "Checks if all of the characters in the provided string, text, are hexadecimal 'digits'.", 
        "name": "ctype_xdigit", 
        "overview": "bool ctype_xdigit ( string $text )", 
        "parameters": [
            {
                "descr": "The tested string.", 
                "name": "text"
            }
        ], 
        "path": "php/function.ctype-xdigit", 
        "type": "String"
    }, 
    "curl_close": {
        "description": "Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.", 
        "name": "curl_close", 
        "overview": "void curl_close ( resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-close", 
        "type": "cURL"
    }, 
    "curl_copy_handle": {
        "description": "Copies a cURL handle keeping the same preferences.", 
        "name": "curl_copy_handle", 
        "overview": "resource curl_copy_handle ( resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-copy-handle", 
        "type": "cURL"
    }, 
    "curl_errno": {
        "description": "Returns the error number for the last cURL operation.", 
        "name": "curl_errno", 
        "overview": "int curl_errno ( resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-errno", 
        "type": "cURL"
    }, 
    "curl_error": {
        "description": "Returns a clear text error message for the last cURL operation.", 
        "name": "curl_error", 
        "overview": "string curl_error ( resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-error", 
        "type": "cURL"
    }, 
    "curl_escape": {
        "description": "This function URL encodes the given string according to \u00bb RFC 3986.", 
        "name": "curl_escape", 
        "overview": "string curl_escape ( resource $ch , string $str )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "The string to be encoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.curl-escape", 
        "type": "cURL"
    }, 
    "curl_exec": {
        "description": "Execute the given cURL session.", 
        "name": "curl_exec", 
        "overview": "mixed curl_exec ( resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-exec", 
        "type": "cURL"
    }, 
    "curl_getinfo": {
        "description": "Gets information about the last transfer.", 
        "name": "curl_getinfo", 
        "overview": "mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "This may be one of the following constants:   CURLINFO_EFFECTIVE_URL - Last effective URL     CURLINFO_HTTP_CODE - Last received HTTP code     CURLINFO_FILETIME - Remote time of the retrieved document, if -1 is returned the time of the document is unknown     CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer     CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete     CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection     CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins     CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred     CURLINFO_REDIRECT_COUNT - Number of redirects     CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started     CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded     CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded     CURLINFO_SPEED_DOWNLOAD - Average download speed     CURLINFO_SPEED_UPLOAD - Average upload speed     CURLINFO_HEADER_SIZE - Total size of all headers received     CURLINFO_HEADER_OUT - The request string sent. For this to work, add the CURLINFO_HEADER_OUT option to the handle by calling curl_setopt()     CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests     CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER     CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of download, read from Content-Length: field     CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload     CURLINFO_CONTENT_TYPE - Content-Type: of the requested document, NULL indicates server did not send valid Content-Type: header", 
                "name": "opt"
            }
        ], 
        "path": "php/function.curl-getinfo", 
        "type": "cURL"
    }, 
    "curl_init": {
        "description": "Initializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions.", 
        "name": "curl_init", 
        "overview": "resource curl_init ([ string $url = NULL ] )", 
        "parameters": [
            {
                "descr": "If provided, the CURLOPT_URL option will be set to its value. ", 
                "name": "url"
            }
        ], 
        "path": "php/function.curl-init", 
        "type": "cURL"
    }, 
    "curl_multi_add_handle": {
        "description": "Adds the ch handle to the multi handle mh", 
        "name": "curl_multi_add_handle", 
        "overview": "int curl_multi_add_handle ( resource $mh , resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-multi-add-handle", 
        "type": "cURL"
    }, 
    "curl_multi_close": {
        "description": "Closes a set of cURL handles.", 
        "name": "curl_multi_close", 
        "overview": "void curl_multi_close ( resource $mh )", 
        "parameters": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }
        ], 
        "path": "php/function.curl-multi-close", 
        "type": "cURL"
    }, 
    "curl_multi_exec": {
        "description": "Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.", 
        "name": "curl_multi_exec", 
        "overview": "int curl_multi_exec ( resource $mh , int &$still_running )", 
        "parameters": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "A reference to a flag to tell whether the operations are still running.", 
                "name": "still_running"
            }
        ], 
        "path": "php/function.curl-multi-exec", 
        "type": "cURL"
    }, 
    "curl_multi_getcontent": {
        "description": "If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.", 
        "name": "curl_multi_getcontent", 
        "overview": "string curl_multi_getcontent ( resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-multi-getcontent", 
        "type": "cURL"
    }, 
    "curl_multi_info_read": {
        "description": "Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed.", 
        "name": "curl_multi_info_read", 
        "overview": "array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )", 
        "parameters": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "Number of messages that are still in the queue", 
                "name": "msgs_in_queue"
            }
        ], 
        "path": "php/function.curl-multi-info-read", 
        "type": "cURL"
    }, 
    "curl_multi_init": {
        "description": "Allows the processing of multiple cURL handles in parallel.", 
        "name": "curl_multi_init", 
        "overview": "resource curl_multi_init ( void )", 
        "parameters": [], 
        "path": "php/function.curl-multi-init", 
        "type": "cURL"
    }, 
    "curl_multi_remove_handle": {
        "description": "Removes a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress involving that handle.", 
        "name": "curl_multi_remove_handle", 
        "overview": "int curl_multi_remove_handle ( resource $mh , resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-multi-remove-handle", 
        "type": "cURL"
    }, 
    "curl_multi_select": {
        "description": "Blocks until there is activity on any of the curl_multi connections.", 
        "name": "curl_multi_select", 
        "overview": "int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )", 
        "parameters": [
            {
                "descr": "A cURL multi handle returned by curl_multi_init().", 
                "name": "mh"
            }, 
            {
                "descr": "Time, in seconds, to wait for a response.", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.curl-multi-select", 
        "type": "cURL"
    }, 
    "curl_multi_setopt": {
        "description": "", 
        "name": "curl_multi_setopt", 
        "overview": "bool curl_multi_setopt ( resource $mh , int $option , mixed $value )", 
        "parameters": [
            {
                "descr": "One of the CURLMOPT_* constants.", 
                "name": "mh   option"
            }, 
            {
                "descr": "The value to be set on option.   value should be an int for the following values of the option parameter: Option Set value to CURLMOPT_PIPELINING  Pass 1 to enable or 0 to disable. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.curl-multi-setopt", 
        "type": "cURL"
    }, 
    "curl_multi_strerror": {
        "description": "Returns a text error message describing the given CURLM error code.", 
        "name": "curl_multi_strerror", 
        "overview": "string curl_multi_strerror ( int $errornum )", 
        "parameters": [
            {
                "descr": "One of the \u00bb CURLM error codes constants.", 
                "name": "errornum"
            }
        ], 
        "path": "php/function.curl-multi-strerror", 
        "type": "cURL"
    }, 
    "curl_pause": {
        "description": "", 
        "name": "curl_pause", 
        "overview": "int curl_pause ( resource $ch , int $bitmask )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "One of CURLPAUSE_* constants.", 
                "name": "bitmask"
            }
        ], 
        "path": "php/function.curl-pause", 
        "type": "cURL"
    }, 
    "curl_reset": {
        "description": "This function re-initializes all options set on the given cURL handle to the default values.", 
        "name": "curl_reset", 
        "overview": "void curl_reset ( resource $ch )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }
        ], 
        "path": "php/function.curl-reset", 
        "type": "cURL"
    }, 
    "curl_setopt": {
        "description": "Sets an option on the given cURL session handle.", 
        "name": "curl_setopt", 
        "overview": "bool curl_setopt ( resource $ch , int $option , mixed $value )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "The CURLOPT_XXX option to set.", 
                "name": "option"
            }, 
            {
                "descr": "The value to be set on option.   value should be a bool for the following values of the option parameter: Option Set value to Notes CURLOPT_AUTOREFERER  TRUE to automatically set the Referer: field in requests where it follows a Location: redirect.    CURLOPT_BINARYTRANSFER  TRUE to return the raw output when CURLOPT_RETURNTRANSFER is used.   From PHP 5.1.3, this option has no effect: the raw output will always be returned when CURLOPT_RETURNTRANSFER is used.  CURLOPT_COOKIESESSION  TRUE to mark this as a new cookie \"session\". It will force libcurl to ignore all cookies it is about to load that are \"session cookies\" from the previous session. By default, libcurl always stores and loads all cookies, independent if they are session cookies or not. Session cookies are cookies without expiry date and they are meant to be alive and existing for this \"session\" only.    CURLOPT_CERTINFO  TRUE to output SSL certification information to STDERR on secure transfers.   Added in cURL 7.19.1. Available since PHP 5.3.2. Requires CURLOPT_VERBOSE to be on to have an effect.  CURLOPT_CONNECT_ONLY  TRUE tells the library to perform all the required proxy authentication and connection setup, but no data transfer. This option is implemented for HTTP, SMTP and POP3.   Added in 7.15.2. Available since PHP 5.5.0.  CURLOPT_CRLF  TRUE to convert Unix newlines to CRLF newlines on transfers.    CURLOPT_DNS_USE_GLOBAL_CACHE  TRUE to use a global DNS cache. This option is not thread-safe and is enabled by default.    CURLOPT_FAILONERROR  TRUE to fail verbosely if the HTTP code returned is greater than or equal to 400. The default behavior is to return the page normally, ignoring the code.    CURLOPT_FILETIME  TRUE to attempt to retrieve the modification date of the remote document. This value can be retrieved using the CURLINFO_FILETIME option with curl_getinfo().    CURLOPT_FOLLOWLOCATION  TRUE to follow any \"Location: \" header that the server sends as part of the HTTP header (note this is recursive, PHP will follow as many \"Location: \" headers that it is sent, unless CURLOPT_MAXREDIRS is set).    CURLOPT_FORBID_REUSE  TRUE to force the connection to explicitly close when it has finished processing, and not be pooled for reuse.    CURLOPT_FRESH_CONNECT  TRUE to force the use of a new connection instead of a cached one.    CURLOPT_FTP_USE_EPRT  TRUE to use EPRT (and LPRT) when doing active FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT only.    CURLOPT_FTP_USE_EPSV  TRUE to first try an EPSV command for FTP transfers before reverting back to PASV. Set to FALSE to disable EPSV.    CURLOPT_FTP_CREATE_MISSING_DIRS  TRUE to create missing directories when an FTP operation encounters a path that currently doesn't exist.    CURLOPT_FTPAPPEND  TRUE to append to the remote file instead of overwriting it.    CURLOPT_FTPASCII  An alias of CURLOPT_TRANSFERTEXT. Use that instead.    CURLOPT_FTPLISTONLY  TRUE to only list the names of an FTP directory.    CURLOPT_HEADER  TRUE to include the header in the output.    CURLINFO_HEADER_OUT  TRUE to track the handle's request string.   Available since PHP 5.1.3. The CURLINFO_ prefix is intentional.  CURLOPT_HTTPGET  TRUE to reset the HTTP request method to GET. Since GET is the default, this is only necessary if the request method has been changed.    CURLOPT_HTTPPROXYTUNNEL  TRUE to tunnel through a given HTTP proxy.    CURLOPT_MUTE  TRUE to be completely silent with regards to the cURL functions.   Removed in cURL 7.15.5 (You can use CURLOPT_RETURNTRANSFER instead)  CURLOPT_NETRC  TRUE to scan the ~/.netrc file to find a username and password for the remote site that a connection is being established with.    CURLOPT_NOBODY  TRUE to exclude the body from the output. Request method is then set to HEAD. Changing this to FALSE does not change it to GET.    CURLOPT_NOPROGRESS  TRUE to disable the progress meter for cURL transfers. Note:  PHP automatically sets this option to TRUE, this should only be changed for debugging purposes.      CURLOPT_NOSIGNAL  TRUE to ignore any cURL function that causes a signal to be sent to the PHP process. This is turned on by default in multi-threaded SAPIs so timeout options can still be used.   Added in cURL 7.10.  CURLOPT_POST  TRUE to do a regular HTTP POST. This POST is the normal application/x-www-form-urlencoded kind, most commonly used by HTML forms.    CURLOPT_PUT  TRUE to HTTP PUT a file. The file to PUT must be set with CURLOPT_INFILE and CURLOPT_INFILESIZE.    CURLOPT_RETURNTRANSFER  TRUE to return the transfer as a string of the return value of curl_exec() instead of outputting it out directly.    CURLOPT_SSL_VERIFYPEER  FALSE to stop cURL from verifying the peer's certificate. Alternate certificates to verify against can be specified with the CURLOPT_CAINFO option or a certificate directory can be specified with the CURLOPT_CAPATH option.   TRUE by default as of cURL 7.10. Default bundle installed as of cURL 7.10.  CURLOPT_TRANSFERTEXT  TRUE to use ASCII mode for FTP transfers. For LDAP, it retrieves data in plain text instead of HTML. On Windows systems, it will not set STDOUT to binary mode.    CURLOPT_UNRESTRICTED_AUTH  TRUE to keep sending the username and password when following locations (using CURLOPT_FOLLOWLOCATION), even when the hostname has changed.    CURLOPT_UPLOAD  TRUE to prepare for an upload.    CURLOPT_VERBOSE  TRUE to output verbose information. Writes output to STDERR, or the file specified using CURLOPT_STDERR.     value should be an integer for the following values of the option parameter: Option Set value to Notes CURLOPT_BUFFERSIZE  The size of the buffer to use for each read. There is no guarantee this request will be fulfilled, however.   Added in cURL 7.10.  CURLOPT_CLOSEPOLICY  Either CURLCLOSEPOLICY_LEAST_RECENTLY_USED or CURLCLOSEPOLICY_OLDEST. There are three other CURLCLOSEPOLICY_ constants, but cURL does not support them yet.    CURLOPT_CONNECTTIMEOUT  The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.    CURLOPT_CONNECTTIMEOUT_MS  The number of milliseconds to wait while trying to connect. Use 0 to wait indefinitely. If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.   Added in cURL 7.16.2. Available since PHP 5.2.3.  CURLOPT_DNS_CACHE_TIMEOUT  The number of seconds to keep DNS entries in memory. This option is set to 120 (2 minutes) by default.    CURLOPT_FTPSSLAUTH  The FTP authentication method (when is activated): CURLFTPAUTH_SSL (try SSL first), CURLFTPAUTH_TLS (try TLS first), or CURLFTPAUTH_DEFAULT (let cURL decide).   Added in cURL 7.12.2.  CURLOPT_HTTP_VERSION  CURL_HTTP_VERSION_NONE (default, lets CURL decide which version to use), CURL_HTTP_VERSION_1_0 (forces HTTP/1.0), or CURL_HTTP_VERSION_1_1 (forces HTTP/1.1).    CURLOPT_HTTPAUTH   The HTTP authentication method(s) to use. The options are: CURLAUTH_BASIC, CURLAUTH_DIGEST, CURLAUTH_GSSNEGOTIATE, CURLAUTH_NTLM, CURLAUTH_ANY, and CURLAUTH_ANYSAFE.   The bitwise | (or) operator can be used to combine more than one method. If this is done, cURL will poll the server to see what methods it supports and pick the best one.   CURLAUTH_ANY is an alias for CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.   CURLAUTH_ANYSAFE is an alias for CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.     CURLOPT_INFILESIZE  The expected size, in bytes, of the file when uploading a file to a remote site. Note that using this option will not stop libcurl from sending more data, as exactly what is sent depends on CURLOPT_READFUNCTION.    CURLOPT_LOW_SPEED_LIMIT  The transfer speed, in bytes per second, that the transfer should be below during the count of CURLOPT_LOW_SPEED_TIME seconds before PHP considers the transfer too slow and aborts.    CURLOPT_LOW_SPEED_TIME  The number of seconds the transfer speed should be below CURLOPT_LOW_SPEED_LIMIT before PHP considers the transfer too slow and aborts.    CURLOPT_MAXCONNECTS  The maximum amount of persistent connections that are allowed. When the limit is reached, CURLOPT_CLOSEPOLICY is used to determine which connection to close.    CURLOPT_MAXREDIRS  The maximum amount of HTTP redirections to follow. Use this option alongside CURLOPT_FOLLOWLOCATION.    CURLOPT_PORT  An alternative port number to connect to.    CURLOPT_PROTOCOLS   Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl may use in the transfer. This allows you to have a libcurl built to support a wide range of protocols but still limit specific transfers to only be allowed to use a subset of them. By default libcurl will accept all protocols it supports. See also CURLOPT_REDIR_PROTOCOLS.   Valid protocol options are: CURLPROTO_HTTP, CURLPROTO_HTTPS, CURLPROTO_FTP, CURLPROTO_FTPS, CURLPROTO_SCP, CURLPROTO_SFTP, CURLPROTO_TELNET, CURLPROTO_LDAP, CURLPROTO_LDAPS, CURLPROTO_DICT, CURLPROTO_FILE, CURLPROTO_TFTP, CURLPROTO_ALL    Added in cURL 7.19.4.  CURLOPT_PROXYAUTH  The HTTP authentication method(s) to use for the proxy connection. Use the same bitmasks as described in CURLOPT_HTTPAUTH. For proxy authentication, only CURLAUTH_BASIC and CURLAUTH_NTLM are currently supported.   Added in cURL 7.10.7.  CURLOPT_PROXYPORT  The port number of the proxy to connect to. This port number can also be set in CURLOPT_PROXY.    CURLOPT_PROXYTYPE  Either CURLPROXY_HTTP (default) or CURLPROXY_SOCKS5.   Added in cURL 7.10.  CURLOPT_REDIR_PROTOCOLS  Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl may use in a transfer that it follows to in a redirect when CURLOPT_FOLLOWLOCATION is enabled. This allows you to limit specific transfers to only be allowed to use a subset of protocols in redirections. By default libcurl will allow all protocols except for FILE and SCP. This is a difference compared to pre-7.19.4 versions which unconditionally would follow to all protocols supported. See also CURLOPT_PROTOCOLS for protocol constant values.   Added in cURL 7.19.4.  CURLOPT_RESUME_FROM  The offset, in bytes, to resume a transfer from.    CURLOPT_SSL_VERIFYHOST  1 to check the existence of a common name in the SSL peer certificate. 2 to check the existence of a common name and also verify that it matches the hostname provided. In production environments the value of this option should be kept at 2 (default value).   Support for value 1 removed in cURL 7.28.1  CURLOPT_SSLVERSION  The SSL version (2 or 3) to use. By default PHP will try to determine this itself, although in some cases this must be set manually.    CURLOPT_TIMECONDITION  How CURLOPT_TIMEVALUE is treated. Use CURL_TIMECOND_IFMODSINCE to return the page only if it has been modified since the time specified in CURLOPT_TIMEVALUE. If it hasn't been modified, a \"304 Not Modified\" header will be returned assuming CURLOPT_HEADER is TRUE. Use CURL_TIMECOND_IFUNMODSINCE for the reverse effect. CURL_TIMECOND_IFMODSINCE is the default.    CURLOPT_TIMEOUT  The maximum number of seconds to allow cURL functions to execute.    CURLOPT_TIMEOUT_MS  The maximum number of milliseconds to allow cURL functions to execute. If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.   Added in cURL 7.16.2. Available since PHP 5.2.3.  CURLOPT_TIMEVALUE  The time in seconds since January 1st, 1970. The time will be used by CURLOPT_TIMECONDITION. By default, CURL_TIMECOND_IFMODSINCE is used.    CURLOPT_MAX_RECV_SPEED_LARGE  If a download exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.   Added in cURL 7.15.5. Available since PHP 5.4.0.  CURLOPT_MAX_SEND_SPEED_LARGE  If an upload exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.   Added in cURL 7.15.5. Available since PHP 5.4.0.  CURLOPT_SSH_AUTH_TYPES  A bitmask consisting of one or more of CURLSSH_AUTH_PUBLICKEY, CURLSSH_AUTH_PASSWORD, CURLSSH_AUTH_HOST, CURLSSH_AUTH_KEYBOARD. Set to CURLSSH_AUTH_ANY to let libcurl pick one.   Added in cURL 7.16.1.  CURLOPT_IPRESOLVE  Allows an application to select what kind of IP addresses to use when resolving host names. This is only interesting when using host names that resolve addresses using more than one version of IP, possible values are CURL_IPRESOLVE_WHATEVER, CURL_IPRESOLVE_V4, CURL_IPRESOLVE_V6, by default CURL_IPRESOLVE_WHATEVER.   Added in cURL 7.10.8.   value should be a string for the following values of the option parameter: Option Set value to Notes CURLOPT_CAINFO  The name of a file holding one or more certificates to verify the peer with. This only makes sense when used in combination with CURLOPT_SSL_VERIFYPEER.   Requires absolute path.  CURLOPT_CAPATH  A directory that holds multiple CA certificates. Use this option alongside CURLOPT_SSL_VERIFYPEER.    CURLOPT_COOKIE  The contents of the \"Cookie: \" header to be used in the HTTP request. Note that multiple cookies are separated with a semicolon followed by a space (e.g., \"fruit=apple; colour=red\")    CURLOPT_COOKIEFILE  The name of the file containing the cookie data. The cookie file can be in Netscape format, or just plain HTTP-style headers dumped into a file. If the name is an empty string, no cookies are loaded, but cookie handling is still enabled.    CURLOPT_COOKIEJAR  The name of a file to save all internal cookies to when the handle is closed, e.g. after a call to curl_close.    CURLOPT_CUSTOMREQUEST  A custom request method to use instead of \"GET\" or \"HEAD\" when doing a HTTP request. This is useful for doing \"DELETE\" or other, more obscure HTTP requests. Valid values are things like \"GET\", \"POST\", \"CONNECT\" and so on; i.e. Do not enter a whole HTTP request line here. For instance, entering \"GET /index.html HTTP/1.0\\r\\n\\r\\n\" would be incorrect. Note:  Don't do this without making sure the server supports the custom request method first.      CURLOPT_EGDSOCKET  Like CURLOPT_RANDOM_FILE, except a filename to an Entropy Gathering Daemon socket.    CURLOPT_ENCODING  The contents of the \"Accept-Encoding: \" header. This enables decoding of the response. Supported encodings are \"identity\", \"deflate\", and \"gzip\". If an empty string, \"\", is set, a header containing all supported encoding types is sent.   Added in cURL 7.10.  CURLOPT_FTPPORT  The value which will be used to get the IP address to use for the FTP \"PORT\" instruction. The \"PORT\" instruction tells the remote server to connect to our specified IP address. The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain '-' to use the systems default IP address.    CURLOPT_INTERFACE  The name of the outgoing network interface to use. This can be an interface name, an IP address or a host name.    CURLOPT_KEYPASSWD  The password required to use the CURLOPT_SSLKEY or CURLOPT_SSH_PRIVATE_KEYFILE private key.   Added in cURL 7.16.1.  CURLOPT_KRB4LEVEL  The KRB4 (Kerberos 4) security level. Any of the following values (in order from least to most powerful) are valid: \"clear\", \"safe\", \"confidential\", \"private\".. If the string does not match one of these, \"private\" is used. Setting this option to NULL will disable KRB4 security. Currently KRB4 security only works with FTP transactions.    CURLOPT_POSTFIELDS   The full data to post in a HTTP \"POST\" operation. To post a file, prepend a filename with @ and use the full path. The filetype can be explicitly specified by following the filename with the type in the format ';type=mimetype'. This parameter can either be passed as a urlencoded string like 'para1=val1&para2=val2&...' or as an array with the field name as key and field data as value. If value is an array, the Content-Type header will be set to multipart/form-data.   As of PHP 5.2.0, value must be an array if files are passed to this option with the @ prefix.   As of PHP 5.5.0, the @ prefix is deprecated and files can be sent using CURLFile.     CURLOPT_PROXY  The HTTP proxy to tunnel requests through.    CURLOPT_PROXYUSERPWD  A username and password formatted as \"[username]:[password]\" to use for the connection to the proxy.    CURLOPT_RANDOM_FILE  A filename to be used to seed the random number generator for SSL.    CURLOPT_RANGE  Range(s) of data to retrieve in the format \"X-Y\" where X or Y are optional. HTTP transfers also support several intervals, separated with commas in the format \"X-Y,N-M\".    CURLOPT_REFERER  The contents of the \"Referer: \" header to be used in a HTTP request.    CURLOPT_SSH_HOST_PUBLIC_KEY_MD5  A string containing 32 hexadecimal digits. The string should be the MD5 checksum of the remote host's public key, and libcurl will reject the connection to the host unless the md5sums match. This option is only for SCP and SFTP transfers.   Added in cURL 7.17.1.  CURLOPT_SSH_PUBLIC_KEYFILE  The file name for your public key. If not used, libcurl defaults to $HOME/.ssh/id_dsa.pub if the HOME environment variable is set, and just \"id_dsa.pub\" in the current directory if HOME is not set.   Added in cURL 7.16.1.  CURLOPT_SSH_PRIVATE_KEYFILE  The file name for your private key. If not used, libcurl defaults to $HOME/.ssh/id_dsa if the HOME environment variable is set, and just \"id_dsa\" in the current directory if HOME is not set. If the file is password-protected, set the password with CURLOPT_KEYPASSWD.   Added in cURL 7.16.1.  CURLOPT_SSL_CIPHER_LIST  A list of ciphers to use for SSL. For example, RC4-SHA and TLSv1 are valid cipher lists.    CURLOPT_SSLCERT  The name of a file containing a PEM formatted certificate.    CURLOPT_SSLCERTPASSWD  The password required to use the CURLOPT_SSLCERT certificate.    CURLOPT_SSLCERTTYPE  The format of the certificate. Supported formats are \"PEM\" (default), \"DER\", and \"ENG\".   Added in cURL 7.9.3.  CURLOPT_SSLENGINE  The identifier for the crypto engine of the private SSL key specified in CURLOPT_SSLKEY.    CURLOPT_SSLENGINE_DEFAULT  The identifier for the crypto engine used for asymmetric crypto operations.    CURLOPT_SSLKEY  The name of a file containing a private SSL key.    CURLOPT_SSLKEYPASSWD  The secret password needed to use the private SSL key specified in CURLOPT_SSLKEY. Note:  Since this option contains a sensitive password, remember to keep the PHP script it is contained within safe.      CURLOPT_SSLKEYTYPE  The key type of the private SSL key specified in CURLOPT_SSLKEY. Supported key types are \"PEM\" (default), \"DER\", and \"ENG\".    CURLOPT_URL  The URL to fetch. This can also be set when initializing a session with curl_init().    CURLOPT_USERAGENT  The contents of the \"User-Agent: \" header to be used in a HTTP request.    CURLOPT_USERPWD  A username and password formatted as \"[username]:[password]\" to use for the connection.     value should be an array for the following values of the option parameter: Option Set value to Notes CURLOPT_HTTP200ALIASES  An array of HTTP 200 responses that will be treated as valid responses and not as errors.   Added in cURL 7.10.3.  CURLOPT_HTTPHEADER  An array of HTTP header fields to set, in the format              array('Content-type: text/plain', 'Content-length: 100')                CURLOPT_POSTQUOTE  An array of FTP commands to execute on the server after the FTP request has been performed.    CURLOPT_QUOTE  An array of FTP commands to execute on the server prior to the FTP request.     value should be a stream resource (using fopen(), for example) for the following values of the option parameter: Option Set value to CURLOPT_FILE  The file that the transfer should be written to. The default is STDOUT (the browser window).  CURLOPT_INFILE  The file that the transfer should be read from when uploading.  CURLOPT_STDERR  An alternative location to output errors to instead of STDERR.  CURLOPT_WRITEHEADER  The file that the header part of the transfer is written to.   value should be the name of a valid function or a Closure for the following values of the option parameter: Option Set value to CURLOPT_HEADERFUNCTION  A callback accepting two parameters. The first is the cURL resource, the second is a string with the header data to be written. The header data must be written when by this callback. Return the number of bytes written.  CURLOPT_PASSWDFUNCTION  A callback accepting three parameters. The first is the cURL resource, the second is a string containing a password prompt, and the third is the maximum password length. Return the string containing the password.  CURLOPT_PROGRESSFUNCTION   A callback accepting five parameters. The first is the cURL resource, the second is the total number of bytes expected to be downloaded in this transfer, the third is the number of bytes downloaded so far, the fourth is the total number of bytes expected to be uploaded in this transfer, and the fifth is the number of bytes uploaded so far.  Note:  The callback is only called when the CURLOPT_NOPROGRESS option is set to FALSE.    Return a non-zero value to abort the transfer. In which case, the transfer will set a CURLE_ABORTED_BY_CALLBACK error.   CURLOPT_READFUNCTION  A callback accepting three parameters. The first is the cURL resource, the second is a stream resource provided to cURL through the option CURLOPT_INFILE, and the third is the maximum amount of data to be read. The callback must return a string with a length equal or smaller than the amount of data requested, typically by reading it from the passed stream resource. It should return an empty string to signal EOF.  CURLOPT_WRITEFUNCTION  A callback accepting two parameters. The first is the cURL resource, and the second is a string with the data to be written. The data must be saved by this callback. It must return the exact number of bytes written or the transfer will be aborted with an error.   Other values: Option Set value to CURLOPT_SHARE  A result of curl_share_init(). Makes the cURL handle to use the data from the shared handle.", 
                "name": "value"
            }
        ], 
        "path": "php/function.curl-setopt", 
        "type": "cURL"
    }, 
    "curl_setopt_array": {
        "description": "Sets multiple options for a cURL session. This function is useful for setting a large amount of cURL options without repetitively calling curl_setopt().", 
        "name": "curl_setopt_array", 
        "overview": "bool curl_setopt_array ( resource $ch , array $options )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "An array specifying which options to set and their values. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.curl-setopt-array", 
        "type": "cURL"
    }, 
    "curl_share_close": {
        "description": "Closes a cURL share handle and frees all resources.", 
        "name": "curl_share_close", 
        "overview": "void curl_share_close ( resource $sh )", 
        "parameters": [
            {
                "descr": "A cURL share handle returned by curl_share_init()", 
                "name": "sh"
            }
        ], 
        "path": "php/function.curl-share-close", 
        "type": "cURL"
    }, 
    "curl_share_init": {
        "description": "Allows to share data between cURL handles.", 
        "name": "curl_share_init", 
        "overview": "resource curl_share_init ( void )", 
        "parameters": [], 
        "path": "php/function.curl-share-init", 
        "type": "cURL"
    }, 
    "curl_share_setopt": {
        "description": "Sets an option on the given cURL share handle.", 
        "name": "curl_share_setopt", 
        "overview": "bool curl_share_setopt ( resource $sh , int $option , string $value )", 
        "parameters": [
            {
                "descr": "A cURL share handle returned by curl_share_init().", 
                "name": "sh"
            }, 
            {
                "descr": "Option Description CURLSHOPT_SHARE  Specifies a type of data that should be shared. ", 
                "name": "option"
            }, 
            {
                "descr": "Value Description CURL_LOCK_DATA_COOKIE  Shares cookie data. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.curl-share-setopt", 
        "type": "cURL"
    }, 
    "curl_strerror": {
        "description": "Returns a text error message describing the given error code.", 
        "name": "curl_strerror", 
        "overview": "string curl_strerror ( int $errornum )", 
        "parameters": [
            {
                "descr": "One of the \u00bb cURL error codes constants.", 
                "name": "errornum"
            }
        ], 
        "path": "php/function.curl-strerror", 
        "type": "cURL"
    }, 
    "curl_unescape": {
        "description": "This function decodes the given URL encoded string.", 
        "name": "curl_unescape", 
        "overview": "string curl_unescape ( resource $ch , string $str )", 
        "parameters": [
            {
                "descr": "A cURL handle returned by curl_init().", 
                "name": "ch"
            }, 
            {
                "descr": "The URL encoded string to be decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.curl-unescape", 
        "type": "cURL"
    }, 
    "curl_version": {
        "description": "Returns information about the cURL version.", 
        "name": "curl_version", 
        "overview": "array curl_version ([ int $age = CURLVERSION_NOW ] )", 
        "parameters": [], 
        "path": "php/function.curl-version", 
        "type": "cURL"
    }, 
    "current": {
        "description": "Every array has an internal pointer to its \"current\" element, which is initialized to the first element inserted into the array.", 
        "name": "current", 
        "overview": "mixed current ( array &$array )", 
        "parameters": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.current", 
        "type": "Array"
    }, 
    "date": {
        "description": "Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().", 
        "name": "date", 
        "overview": "string date ( string $format [, int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "The format of the outputted date string. ", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.date", 
        "type": "Date and Time"
    }, 
    "date_default_timezone_get": {
        "description": "In order of preference, this function returns the default timezone by:", 
        "name": "date_default_timezone_get", 
        "overview": "string date_default_timezone_get ( void )", 
        "parameters": [], 
        "path": "php/function.date-default-timezone-get", 
        "type": "Date and Time"
    }, 
    "date_default_timezone_set": {
        "description": "date_default_timezone_set() sets the default timezone used by all date/time functions.", 
        "name": "date_default_timezone_set", 
        "overview": "bool date_default_timezone_set ( string $timezone_identifier )", 
        "parameters": [
            {
                "descr": "The timezone identifier, like UTC or Europe/Lisbon. ", 
                "name": "timezone_identifier"
            }
        ], 
        "path": "php/function.date-default-timezone-set", 
        "type": "Date and Time"
    }, 
    "date_parse": {
        "description": "", 
        "name": "date_parse", 
        "overview": "array date_parse ( string $date )", 
        "parameters": [
            {
                "descr": "Date in format accepted by strtotime().", 
                "name": "date"
            }
        ], 
        "path": "php/function.date-parse", 
        "type": "Date and Time"
    }, 
    "date_parse_from_format": {
        "description": "Returns associative array with detailed info about given date.", 
        "name": "date_parse_from_format", 
        "overview": "array date_parse_from_format ( string $format , string $date )", 
        "parameters": [
            {
                "descr": "Format accepted by DateTime::createFromFormat().", 
                "name": "format"
            }, 
            {
                "descr": "String representing the date.", 
                "name": "date"
            }
        ], 
        "path": "php/function.date-parse-from-format", 
        "type": "Date and Time"
    }, 
    "date_sun_info": {
        "description": "", 
        "name": "date_sun_info", 
        "overview": "array date_sun_info ( int $time , float $latitude , float $longitude )", 
        "parameters": [
            {
                "descr": "Timestamp.", 
                "name": "time"
            }, 
            {
                "descr": "Latitude in degrees.", 
                "name": "latitude"
            }, 
            {
                "descr": "Longitude in degrees.", 
                "name": "longitude"
            }
        ], 
        "path": "php/function.date-sun-info", 
        "type": "Date and Time"
    }, 
    "date_sunrise": {
        "description": "date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.", 
        "name": "date_sunrise", 
        "overview": "mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunrise_zenith\") [, float $gmt_offset = 0 ]]]]] )", 
        "parameters": [
            {
                "descr": "The timestamp of the day from which the sunrise time is taken.", 
                "name": "timestamp"
            }, 
            {
                "descr": "format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606", 
                "name": "format"
            }, 
            {
                "descr": "Defaults to North, pass in a negative value for South. ", 
                "name": "latitude"
            }, 
            {
                "descr": "Defaults to East, pass in a negative value for West. ", 
                "name": "longitude"
            }, 
            {
                "descr": "Default: date.sunrise_zenith", 
                "name": "zenith"
            }, 
            {
                "descr": "Specified in hours.", 
                "name": "gmtoffset"
            }
        ], 
        "path": "php/function.date-sunrise", 
        "type": "Date and Time"
    }, 
    "date_sunset": {
        "description": "date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.", 
        "name": "date_sunset", 
        "overview": "mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunset_zenith\") [, float $gmt_offset = 0 ]]]]] )", 
        "parameters": [
            {
                "descr": "The timestamp of the day from which the sunset time is taken.", 
                "name": "timestamp"
            }, 
            {
                "descr": "format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606", 
                "name": "format"
            }, 
            {
                "descr": "Defaults to North, pass in a negative value for South. ", 
                "name": "latitude"
            }, 
            {
                "descr": "Defaults to East, pass in a negative value for West. ", 
                "name": "longitude"
            }, 
            {
                "descr": "Default: date.sunset_zenith", 
                "name": "zenith"
            }, 
            {
                "descr": "Specified in hours.", 
                "name": "gmtoffset"
            }
        ], 
        "path": "php/function.date-sunset", 
        "type": "Date and Time"
    }, 
    "dba_close": {
        "description": "dba_close() closes the established database and frees all resources of the specified database handle.", 
        "name": "dba_close", 
        "overview": "void dba_close ( resource $handle )", 
        "parameters": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-close", 
        "type": "Database"
    }, 
    "dba_delete": {
        "description": "dba_delete() deletes the specified entry from the database.", 
        "name": "dba_delete", 
        "overview": "bool dba_delete ( string $key , resource $handle )", 
        "parameters": [
            {
                "descr": "The key of the entry which is deleted.", 
                "name": "key"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-delete", 
        "type": "Database"
    }, 
    "dba_exists": {
        "description": "dba_exists() checks whether the specified key exists in the database.", 
        "name": "dba_exists", 
        "overview": "bool dba_exists ( string $key , resource $handle )", 
        "parameters": [
            {
                "descr": "The key the check is performed for.", 
                "name": "key"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-exists", 
        "type": "Database"
    }, 
    "dba_fetch": {
        "description": "dba_fetch() fetches the data specified by key from the database specified with handle.", 
        "name": "dba_fetch", 
        "overview": "string dba_fetch ( string $key , resource $handle )", 
        "parameters": [
            {
                "descr": "The key the data is specified by. ", 
                "name": "key"
            }, 
            {
                "descr": "The number of key-value pairs to ignore when using cdb databases. ", 
                "name": "skip"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-fetch", 
        "type": "Database"
    }, 
    "dba_firstkey": {
        "description": "dba_firstkey() returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.", 
        "name": "dba_firstkey", 
        "overview": "string dba_firstkey ( resource $handle )", 
        "parameters": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-firstkey", 
        "type": "Database"
    }, 
    "dba_handlers": {
        "description": "dba_handlers() list all the handlers supported by this extension.", 
        "name": "dba_handlers", 
        "overview": "array dba_handlers ([ bool $full_info = false ] )", 
        "parameters": [
            {
                "descr": "Turns on/off full information display in the result.", 
                "name": "full_info"
            }
        ], 
        "path": "php/function.dba-handlers", 
        "type": "Database"
    }, 
    "dba_insert": {
        "description": "dba_insert() inserts the entry described with key and value into the database.", 
        "name": "dba_insert", 
        "overview": "bool dba_insert ( string $key , string $value , resource $handle )", 
        "parameters": [
            {
                "descr": "The key of the entry to be inserted. ", 
                "name": "key"
            }, 
            {
                "descr": "The value to be inserted.", 
                "name": "value"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-insert", 
        "type": "Database"
    }, 
    "dba_key_split": {
        "description": "dba_key_split() splits a key (string representation) into an array representation.", 
        "name": "dba_key_split", 
        "overview": "mixed dba_key_split ( mixed $key )", 
        "parameters": [
            {
                "descr": "The key in string representation.", 
                "name": "key"
            }
        ], 
        "path": "php/function.dba-key-split", 
        "type": "Database"
    }, 
    "dba_list": {
        "description": "dba_list() list all open database files.", 
        "name": "dba_list", 
        "overview": "array dba_list ( void )", 
        "parameters": [], 
        "path": "php/function.dba-list", 
        "type": "Database"
    }, 
    "dba_nextkey": {
        "description": "dba_nextkey() returns the next key of the database and advances the internal key pointer.", 
        "name": "dba_nextkey", 
        "overview": "string dba_nextkey ( resource $handle )", 
        "parameters": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-nextkey", 
        "type": "Database"
    }, 
    "dba_open": {
        "description": "dba_open() establishes a database instance for path with mode using handler.", 
        "name": "dba_open", 
        "overview": "resource dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "Commonly a regular path in your filesystem.", 
                "name": "path"
            }, 
            {
                "descr": "It is r for read access, w for read/write access to an already existing database, c for read/write access and database creation if it doesn't currently exist, and n for create, truncate and read/write access. The database is created in BTree mode, other modes (like Hash or Queue) are not supported.   Additionally you can set the database lock method with the next char. Use l to lock the database with a .lck file or d to lock the databasefile itself. It is important that all of your applications do this consistently.   If you want to test the access and do not want to wait for the lock you can add t as third character. When you are absolutely sure that you do not require database locking you can do so by using - instead of l or d. When none of d, l or - is used, dba will lock on the database file as it would with d.  Note:  There can only be one writer for one database file. When you use dba on a web server and more than one request requires write operations they can only be done one after another. Also read during write is not allowed. The dba extension uses locks to prevent this. See the following table: DBA locking already open mode = \"rl\" mode = \"rlt\" mode = \"wl\" mode = \"wlt\" mode = \"rd\" mode = \"rdt\" mode = \"wd\" mode = \"wdt\" not open ok ok ok ok ok ok ok ok mode = \"rl\" ok ok wait false illegal illegal illegal illegal mode = \"wl\" wait false wait false illegal illegal illegal illegal mode = \"rd\" illegal illegal illegal illegal ok ok wait false mode = \"wd\" illegal illegal illegal illegal wait false wait false ok: the second call will be successfull. wait: the second call waits until dba_close() is called for the first. false: the second call returns false. illegal: you must not mix \"l\" and \"d\" modifiers for mode parameter.", 
                "name": "mode"
            }, 
            {
                "descr": "The name of the handler which shall be used for accessing path. ", 
                "name": "handler"
            }
        ], 
        "path": "php/function.dba-open", 
        "type": "Database"
    }, 
    "dba_optimize": {
        "description": "dba_optimize() optimizes the underlying database.", 
        "name": "dba_optimize", 
        "overview": "bool dba_optimize ( resource $handle )", 
        "parameters": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-optimize", 
        "type": "Database"
    }, 
    "dba_popen": {
        "description": "dba_popen() establishes a persistent database instance for path with mode using handler.", 
        "name": "dba_popen", 
        "overview": "resource dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "Commonly a regular path in your filesystem.", 
                "name": "path"
            }, 
            {
                "descr": "It is r for read access, w for read/write access to an already existing database, c for read/write access and database creation if it doesn't currently exist, and n for create, truncate and read/write access.", 
                "name": "mode"
            }, 
            {
                "descr": "The name of the handler which shall be used for accessing path. ", 
                "name": "handler"
            }
        ], 
        "path": "php/function.dba-popen", 
        "type": "Database"
    }, 
    "dba_replace": {
        "description": "dba_replace() replaces or inserts the entry described with key and value into the database specified by handle.", 
        "name": "dba_replace", 
        "overview": "bool dba_replace ( string $key , string $value , resource $handle )", 
        "parameters": [
            {
                "descr": "The key of the entry to be replaced.", 
                "name": "key"
            }, 
            {
                "descr": "The value to be replaced.", 
                "name": "value"
            }, 
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-replace", 
        "type": "Database"
    }, 
    "dba_sync": {
        "description": "dba_sync() synchronizes the database. This will probably trigger a physical write to the disk, if supported.", 
        "name": "dba_sync", 
        "overview": "bool dba_sync ( resource $handle )", 
        "parameters": [
            {
                "descr": "The database handler, returned by dba_open() or dba_popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.dba-sync", 
        "type": "Database"
    }, 
    "dcgettext": {
        "description": "This function allows you to override the current domain for a single message lookup.", 
        "name": "dcgettext", 
        "overview": "string dcgettext ( string $domain , string $message , int $category )", 
        "parameters": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The message", 
                "name": "message"
            }, 
            {
                "descr": "The category", 
                "name": "category"
            }
        ], 
        "path": "php/function.dcgettext", 
        "type": "Encoding"
    }, 
    "dcngettext": {
        "description": "This function allows you to override the current domain for a single plural message lookup.", 
        "name": "dcngettext", 
        "overview": "string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )", 
        "parameters": [
            {
                "descr": "The domain", 
                "name": "domain"
            }
        ], 
        "path": "php/function.dcngettext", 
        "type": "Encoding"
    }, 
    "debug_backtrace": {
        "description": "debug_backtrace() generates a PHP backtrace.", 
        "name": "debug_backtrace", 
        "overview": "array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )", 
        "parameters": [
            {
                "descr": "As of 5.3.6, this parameter is a bitmask for the following options: debug_backtrace() options DEBUG_BACKTRACE_PROVIDE_OBJECT  Whether or not to populate the \"object\" index. ", 
                "name": "options"
            }, 
            {
                "descr": "As of 5.4.0, this parameter can be used to limit the number of stack frames returned. ", 
                "name": "limit"
            }
        ], 
        "path": "php/function.debug-backtrace", 
        "type": "Errors"
    }, 
    "debug_print_backtrace": {
        "description": "debug_print_backtrace() prints a PHP backtrace. It prints the function calls, included/required files and eval()ed stuff.", 
        "name": "debug_print_backtrace", 
        "overview": "void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )", 
        "parameters": [
            {
                "descr": "As of 5.3.6, this parameter is a bitmask for the following options: debug_print_backtrace() options DEBUG_BACKTRACE_IGNORE_ARGS  Whether or not to omit the \"args\" index, and thus all the function/method arguments, to save memory.", 
                "name": "options"
            }, 
            {
                "descr": "As of 5.4.0, this parameter can be used to limit the number of stack frames printed. ", 
                "name": "limit"
            }
        ], 
        "path": "php/function.debug-print-backtrace", 
        "type": "Errors"
    }, 
    "debug_zval_dump": {
        "description": "Dumps a string representation of an internal zend value to output.", 
        "name": "debug_zval_dump", 
        "overview": "void debug_zval_dump ( mixed $variable [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "variable"
            }
        ], 
        "path": "php/function.debug-zval-dump", 
        "type": "Variables"
    }, 
    "decbin": {
        "description": "Returns a string containing a binary representation of the given number argument.", 
        "name": "decbin", 
        "overview": "string decbin ( int $number )", 
        "parameters": [
            {
                "descr": "Decimal value to convert  Range of inputs on 32-bit machines positive number negative number return value 0   0 1   1 2   10 ... ", 
                "name": "number"
            }
        ], 
        "path": "php/function.decbin", 
        "type": "Mathematics"
    }, 
    "dechex": {
        "description": "Returns a string containing a hexadecimal representation of the given unsigned number argument.", 
        "name": "dechex", 
        "overview": "string dechex ( int $number )", 
        "parameters": [
            {
                "descr": "The decimal value to convert.   As PHP's integer type is signed, but dechex() deals with unsigned integers, negative integers will be treated as though they were unsigned.", 
                "name": "number"
            }
        ], 
        "path": "php/function.dechex", 
        "type": "Mathematics"
    }, 
    "decoct": {
        "description": "Returns a string containing an octal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to \"37777777777\".", 
        "name": "decoct", 
        "overview": "string decoct ( int $number )", 
        "parameters": [
            {
                "descr": "Decimal value to convert", 
                "name": "number"
            }
        ], 
        "path": "php/function.decoct", 
        "type": "Mathematics"
    }, 
    "define": {
        "description": "Defines a named constant at runtime.", 
        "name": "define", 
        "overview": "bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )", 
        "parameters": [
            {
                "descr": "The name of the constant.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the constant; only scalar and null values are allowed. ", 
                "name": "value"
            }, 
            {
                "descr": "If set to TRUE, the constant will be defined case-insensitive. ", 
                "name": "case_insensitive"
            }
        ], 
        "path": "php/function.define", 
        "type": "Language"
    }, 
    "define_syslog_variables": {
        "description": "Initializes all variables used in the syslog functions.", 
        "name": "define_syslog_variables", 
        "overview": "void define_syslog_variables ( void )", 
        "parameters": [], 
        "path": "php/function.define-syslog-variables", 
        "type": "Networking"
    }, 
    "defined": {
        "description": "Checks whether the given constant exists and is defined.", 
        "name": "defined", 
        "overview": "bool defined ( string $name )", 
        "parameters": [
            {
                "descr": "The constant name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.defined", 
        "type": "Language"
    }, 
    "deg2rad": {
        "description": "This function converts number from degrees to the radian equivalent.", 
        "name": "deg2rad", 
        "overview": "float deg2rad ( float $number )", 
        "parameters": [
            {
                "descr": "Angular value in degrees", 
                "name": "number"
            }
        ], 
        "path": "php/function.deg2rad", 
        "type": "Mathematics"
    }, 
    "dgettext": {
        "description": "The dgettext() function allows you to override the current domain for a single message lookup.", 
        "name": "dgettext", 
        "overview": "string dgettext ( string $domain , string $message )", 
        "parameters": [
            {
                "descr": "The domain", 
                "name": "domain"
            }, 
            {
                "descr": "The message", 
                "name": "message"
            }
        ], 
        "path": "php/function.dgettext", 
        "type": "Encoding"
    }, 
    "dir": {
        "description": "A pseudo-object oriented mechanism for reading a directory. The given directory is opened.", 
        "name": "dir", 
        "overview": "Directory dir ( string $directory [, resource $context ] )", 
        "parameters": [
            {
                "descr": "Directory to open", 
                "name": "directory"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.dir", 
        "type": "File System"
    }, 
    "dirname": {
        "description": "Given a string containing the path of a file or directory, this function will return the parent directory's path.", 
        "name": "dirname", 
        "overview": "string dirname ( string $path )", 
        "parameters": [
            {
                "descr": "A path.   On Windows, both slash (/) and backslash (\\) are used as directory separator character. ", 
                "name": "path"
            }
        ], 
        "path": "php/function.dirname", 
        "type": "File System"
    }, 
    "disk_free_space": {
        "description": "Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.", 
        "name": "disk_free_space", 
        "overview": "float disk_free_space ( string $directory )", 
        "parameters": [
            {
                "descr": "A directory of the filesystem or disk partition. ", 
                "name": "directory"
            }
        ], 
        "path": "php/function.disk-free-space", 
        "type": "File System"
    }, 
    "disk_total_space": {
        "description": "Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.", 
        "name": "disk_total_space", 
        "overview": "float disk_total_space ( string $directory )", 
        "parameters": [
            {
                "descr": "A directory of the filesystem or disk partition.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.disk-total-space", 
        "type": "File System"
    }, 
    "dl": {
        "description": "Loads the PHP extension given by the parameter library.", 
        "name": "dl", 
        "overview": "bool dl ( string $library )", 
        "parameters": [
            {
                "descr": "This parameter is only the filename of the extension to load which also depends on your platform. ", 
                "name": "library"
            }
        ], 
        "path": "php/function.dl", 
        "type": "Language"
    }, 
    "dngettext": {
        "description": "The dngettext() function allows you to override the current domain for a single plural message lookup.", 
        "name": "dngettext", 
        "overview": "string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )", 
        "parameters": [
            {
                "descr": "The domain", 
                "name": "domain"
            }
        ], 
        "path": "php/function.dngettext", 
        "type": "Encoding"
    }, 
    "dns_get_record": {
        "description": "Fetch DNS Resource Records associated with the given hostname.", 
        "name": "dns_get_record", 
        "overview": "array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool &$raw = false ]]]] )", 
        "parameters": [
            {
                "descr": "hostname should be a valid DNS hostname such as \"www.example.com\". ", 
                "name": "hostname"
            }, 
            {
                "descr": "By default, dns_get_record() will search for any resource records associated with hostname. ", 
                "name": "type"
            }, 
            {
                "descr": "Passed by reference and, if given, will be populated with Resource Records for the Authoritative Name Servers.", 
                "name": "authns"
            }, 
            {
                "descr": "Passed by reference and, if given, will be populated with any Additional Records.", 
                "name": "addtl"
            }, 
            {
                "descr": "In case of raw mode, we query only the requestd type instead of looping type by type before going with the additional info stuff.", 
                "name": "raw"
            }
        ], 
        "path": "php/function.dns-get-record", 
        "type": "Networking"
    }, 
    "dom_import_simplexml": {
        "description": "This function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node.", 
        "name": "dom_import_simplexml", 
        "overview": "DOMElement dom_import_simplexml ( SimpleXMLElement $node )", 
        "parameters": [
            {
                "descr": "The SimpleXMLElement node.", 
                "name": "node"
            }
        ], 
        "path": "php/function.dom-import-simplexml", 
        "type": "HTML"
    }, 
    "each": {
        "description": "Return the current key and value pair from an array and advance the array cursor.", 
        "name": "each", 
        "overview": "array each ( array &$array )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.each", 
        "type": "Array"
    }, 
    "easter_date": {
        "description": "Returns the Unix timestamp corresponding to midnight on Easter of the given year.", 
        "name": "easter_date", 
        "overview": "int easter_date ([ int $year ] )", 
        "parameters": [
            {
                "descr": "The year as a number between 1970 an 2037", 
                "name": "year"
            }
        ], 
        "path": "php/function.easter-date", 
        "type": "Date and Time"
    }, 
    "easter_days": {
        "description": "Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed.", 
        "name": "easter_days", 
        "overview": "int easter_days ([ int $year [, int $method = CAL_EASTER_DEFAULT ]] )", 
        "parameters": [
            {
                "descr": "The year as a positive number", 
                "name": "year"
            }, 
            {
                "descr": "Allows to calculate easter dates based on the Gregorian calendar during the years 1582 - 1752 when set to CAL_EASTER_ROMAN. ", 
                "name": "method"
            }
        ], 
        "path": "php/function.easter-days", 
        "type": "Date and Time"
    }, 
    "echo": {
        "description": "", 
        "name": "echo", 
        "overview": "void echo ( string $arg1 [, string $... ] )", 
        "parameters": [
            {
                "descr": "The parameter to output.", 
                "name": "arg1"
            }
        ], 
        "path": "php/function.echo", 
        "type": "String"
    }, 
    "eio_busy": {
        "description": "eio_busy() artificially increases load taking delay seconds to execute. May be used for debugging, or benchmarking.", 
        "name": "eio_busy", 
        "overview": "resource eio_busy ( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Delay in seconds", 
                "name": "delay"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "This callback is called when all the group requests are done.", 
                "name": "callback"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-busy", 
        "type": "Process Control"
    }, 
    "eio_cancel": {
        "description": "eio_cancel() cancels a request specified by req", 
        "name": "eio_cancel", 
        "overview": "void eio_cancel ( resource $req )", 
        "parameters": [
            {
                "descr": "The request resource", 
                "name": "req"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-cancel", 
        "type": "Process Control"
    }, 
    "eio_chmod": {
        "description": "eio_chmod() changes file, or direcrory permissions. The new permissions are specified by mode.", 
        "name": "eio_chmod", 
        "overview": "resource eio_chmod ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Path to the target file or directory WarningAvoid relative paths", 
                "name": "path"
            }, 
            {
                "descr": "The new permissions. E.g. 0644.", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-chmod", 
        "type": "Process Control"
    }, 
    "eio_chown": {
        "description": "Changes file, or directory permissions.", 
        "name": "eio_chown", 
        "overview": "resource eio_chown ( string $path , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "parameters": [
            {
                "descr": "Path to file or directory. WarningAvoid relative paths", 
                "name": "path"
            }, 
            {
                "descr": "User ID. Is ignored when equal to -1.", 
                "name": "uid"
            }, 
            {
                "descr": "Group ID. Is ignored when equal to -1.", 
                "name": "gid"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-chown", 
        "type": "Process Control"
    }, 
    "eio_close": {
        "description": "eio_close() closes file specified by fd.", 
        "name": "eio_close", 
        "overview": "resource eio_close ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-close", 
        "type": "Process Control"
    }, 
    "eio_custom": {
        "description": "eio_custom() executes custom function specified by execute processing it just like any other eio_* call.", 
        "name": "eio_custom", 
        "overview": "resource eio_custom ( callable $execute , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "parameters": [
            {
                "descr": "Specifies the request function that should match the following prototype:       mixed execute(mixed data);       callback is event completion callback that should match the following prototype:       void callback(mixed data, mixed result);       data is the data passed to execute via data argument without modifications result value returned by execute", 
                "name": "execute"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-custom", 
        "type": "Process Control"
    }, 
    "eio_dup2": {
        "description": "eio_dup2() duplicates file descriptor.", 
        "name": "eio_dup2", 
        "overview": "resource eio_dup2 ( mixed $fd , mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Source stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Target stream, Socket resource, or numeric file descriptor", 
                "name": "fd2"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-dup2", 
        "type": "Process Control"
    }, 
    "eio_event_loop": {
        "description": "eio_event_loop() polls libeio until all requests proceeded.", 
        "name": "eio_event_loop", 
        "overview": "bool eio_event_loop ( void )", 
        "parameters": [], 
        "path": "php/function.eio-event-loop", 
        "type": "Process Control"
    }, 
    "eio_fallocate": {
        "description": "eio_fallocate() allows the caller to directly manipulate the allocated disk space for the file specified by fd file descriptor for the byte range starting at offset and continuing for length bytes.", 
        "name": "eio_fallocate", 
        "overview": "resource eio_fallocate ( mixed $fd , int $mode , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "Currently only one flag is supported for mode: EIO_FALLOC_FL_KEEP_SIZE (the same as POSIX constant FALLOC_FL_KEEP_SIZE).", 
                "name": "mode"
            }, 
            {
                "descr": "Specifies start of the byte range.", 
                "name": "offset"
            }, 
            {
                "descr": "Specifies length the byte range.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fallocate", 
        "type": "Process Control"
    }, 
    "eio_fchmod": {
        "description": "eio_fchmod() changes permissions for the file specified by fd file descriptor.", 
        "name": "eio_fchmod", 
        "overview": "resource eio_fchmod ( mixed $fd , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "The new permissions. E.g. 0644.", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fchmod", 
        "type": "Process Control"
    }, 
    "eio_fchown": {
        "description": "eio_fchown() changes ownership of the file specified by fd file descriptor.", 
        "name": "eio_fchown", 
        "overview": "resource eio_fchown ( mixed $fd , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "User ID. Is ignored when equal to -1.", 
                "name": "uid"
            }, 
            {
                "descr": "Group ID. Is ignored when equal to -1.", 
                "name": "gid"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fchown", 
        "type": "Process Control"
    }, 
    "eio_fdatasync": {
        "description": "eio_fdatasync() synchronizes a file's in-core state with storage device.", 
        "name": "eio_fdatasync", 
        "overview": "resource eio_fdatasync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fdatasync", 
        "type": "Process Control"
    }, 
    "eio_fstat": {
        "description": "eio_fstat() returns file status information in result argument of callback", 
        "name": "eio_fstat", 
        "overview": "resource eio_fstat ( mixed $fd , int $pri , callable $callback [, mixed $data ] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fstat", 
        "type": "Process Control"
    }, 
    "eio_fstatvfs": {
        "description": "eio_fstatvfs() returns file system statistics in result of callback.", 
        "name": "eio_fstatvfs", 
        "overview": "resource eio_fstatvfs ( mixed $fd , int $pri , callable $callback [, mixed $data ] )", 
        "parameters": [
            {
                "descr": "A file descriptor of a file within the mounted file system.", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fstatvfs", 
        "type": "Process Control"
    }, 
    "eio_fsync": {
        "description": "Synchronize a file's in-core state with storage device", 
        "name": "eio_fsync", 
        "overview": "resource eio_fsync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-fsync", 
        "type": "Process Control"
    }, 
    "eio_ftruncate": {
        "description": "eio_ftruncate() causes a regular file referenced by fd file descriptor to be truncated to precisely length bytes.", 
        "name": "eio_ftruncate", 
        "overview": "resource eio_ftruncate ( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor.", 
                "name": "fd"
            }, 
            {
                "descr": "Offset from beginning of the file", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-ftruncate", 
        "type": "Process Control"
    }, 
    "eio_futime": {
        "description": "eio_futime() changes file last access and modification times.", 
        "name": "eio_futime", 
        "overview": "resource eio_futime ( mixed $fd , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "Access time", 
                "name": "atime"
            }, 
            {
                "descr": "Modification time", 
                "name": "mtime"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-futime", 
        "type": "Process Control"
    }, 
    "eio_get_event_stream": {
        "description": "eio_get_event_stream() acquires stream representing a variable used in internal communications with libeio. Could be used to bind with some event loop provided by other PECL extension, for example libevent.", 
        "name": "eio_get_event_stream", 
        "overview": "mixed eio_get_event_stream ( void )", 
        "parameters": [], 
        "path": "php/function.eio-get-event-stream", 
        "type": "Process Control"
    }, 
    "eio_get_last_error": {
        "description": "eio_get_last_error() returns string describing the last error associated with req.", 
        "name": "eio_get_last_error", 
        "overview": "string eio_get_last_error ( resource $req )", 
        "parameters": [
            {
                "descr": "The request resource", 
                "name": "req"
            }
        ], 
        "path": "php/function.eio-get-last-error", 
        "type": "Process Control"
    }, 
    "eio_grp": {
        "description": "eio_grp() creates a request group.", 
        "name": "eio_grp", 
        "overview": "resource eio_grp ( callable $callback [, string $data = NULL ] )", 
        "parameters": [
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-grp", 
        "type": "Process Control"
    }, 
    "eio_grp_add": {
        "description": "eio_grp_add() adds a request to the request group.", 
        "name": "eio_grp_add", 
        "overview": "void eio_grp_add ( resource $grp , resource $req )", 
        "parameters": [
            {
                "descr": "The request group resource returned by eio_grp()", 
                "name": "grp"
            }, 
            {
                "descr": "The request resource", 
                "name": "req"
            }
        ], 
        "path": "php/function.eio-grp-add", 
        "type": "Process Control"
    }, 
    "eio_grp_cancel": {
        "description": "eio_grp_cancel() cancels a group request specified by grp request group resource.", 
        "name": "eio_grp_cancel", 
        "overview": "void eio_grp_cancel ( resource $grp )", 
        "parameters": [
            {
                "descr": "The request group resource returned by eio_grp().", 
                "name": "grp"
            }
        ], 
        "path": "php/function.eio-grp-cancel", 
        "type": "Process Control"
    }, 
    "eio_grp_limit": {
        "description": "Limit number of requests in the request group.", 
        "name": "eio_grp_limit", 
        "overview": "void eio_grp_limit ( resource $grp , int $limit )", 
        "parameters": [
            {
                "descr": "The request group resource.", 
                "name": "grp"
            }, 
            {
                "descr": "Number of requests in the group.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.eio-grp-limit", 
        "type": "Process Control"
    }, 
    "eio_init": {
        "description": "eio_init() (re-)initializes Eio. It allocates memory for internal structures of libeio and Eio itself. You may call eio_init() before using Eio functions. Otherwise it will be called internally first time you invoke an Eio function in a process.", 
        "name": "eio_init", 
        "overview": "void eio_init ( void )", 
        "parameters": [], 
        "path": "php/function.eio-init", 
        "type": "Process Control"
    }, 
    "eio_link": {
        "description": "eio_link() creates a hardlink new_path for a file specified by path.", 
        "name": "eio_link", 
        "overview": "resource eio_link ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Source file path.", 
                "name": "path"
            }, 
            {
                "descr": "Target file path.", 
                "name": "new_path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-link", 
        "type": "Process Control"
    }, 
    "eio_lstat": {
        "description": "eio_lstat() returns file status information in result argument of callback", 
        "name": "eio_lstat", 
        "overview": "resource eio_lstat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "parameters": [
            {
                "descr": "The file path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-lstat", 
        "type": "Process Control"
    }, 
    "eio_mkdir": {
        "description": "eio_mkdir() creates directory with specified access mode.", 
        "name": "eio_mkdir", 
        "overview": "resource eio_mkdir ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Path for the new directory.", 
                "name": "path"
            }, 
            {
                "descr": "Access mode, e.g. 0755", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-mkdir", 
        "type": "Process Control"
    }, 
    "eio_mknod": {
        "description": "eio_mknod() creates ordinary or special(often) file.", 
        "name": "eio_mknod", 
        "overview": "resource eio_mknod ( string $path , int $mode , int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Path for the new node(file).", 
                "name": "path"
            }, 
            {
                "descr": "Specifies both the permissions to use and the type of node to be created. ", 
                "name": "mode"
            }, 
            {
                "descr": "If the file type is EIO_S_IFCHR or EIO_S_IFBLK then dev specifies the major and minor numbers of the newly created device special file. ", 
                "name": "dev"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-mknod", 
        "type": "Process Control"
    }, 
    "eio_nop": {
        "description": "eio_nop() does nothing, except go through the whole request cycle. Could be useful in debugging.", 
        "name": "eio_nop", 
        "overview": "resource eio_nop ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-nop", 
        "type": "Process Control"
    }, 
    "eio_npending": {
        "description": "eio_npending() returns number of finished, but unhandled requests", 
        "name": "eio_npending", 
        "overview": "int eio_npending ( void )", 
        "parameters": [], 
        "path": "php/function.eio-npending", 
        "type": "Process Control"
    }, 
    "eio_nready": {
        "description": "", 
        "name": "eio_nready", 
        "overview": "int eio_nready ( void )", 
        "parameters": [], 
        "path": "php/function.eio-nready", 
        "type": "Process Control"
    }, 
    "eio_nreqs": {
        "description": "eio_nreqs() could be called in a custom loop calling eio_poll().", 
        "name": "eio_nreqs", 
        "overview": "int eio_nreqs ( void )", 
        "parameters": [], 
        "path": "php/function.eio-nreqs", 
        "type": "Process Control"
    }, 
    "eio_nthreads": {
        "description": "", 
        "name": "eio_nthreads", 
        "overview": "int eio_nthreads ( void )", 
        "parameters": [], 
        "path": "php/function.eio-nthreads", 
        "type": "Process Control"
    }, 
    "eio_open": {
        "description": "eio_open() opens file specified by path in access mode mode with", 
        "name": "eio_open", 
        "overview": "resource eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "parameters": [
            {
                "descr": "Path of the file to be opened. Warning In some SAPIs(e.g. ", 
                "name": "path"
            }, 
            {
                "descr": "One of EIO_O_* constants, or their combinations. ", 
                "name": "flags"
            }, 
            {
                "descr": "One of EIO_S_I* constants, or their combination (via bitwise OR operator). ", 
                "name": "mode"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-open", 
        "type": "Process Control"
    }, 
    "eio_poll": {
        "description": "eio_poll() can be used to implement special event loop. For this eio_nreqs() could be used to test if there are unprocessed requests.", 
        "name": "eio_poll", 
        "overview": "int eio_poll ( void )", 
        "parameters": [], 
        "path": "php/function.eio-poll", 
        "type": "Process Control"
    }, 
    "eio_read": {
        "description": "eio_read() reads up to length bytes from fd file descriptor at offset. The read bytes are stored in result argument of callback.", 
        "name": "eio_read", 
        "overview": "resource eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Maximum number of bytes to read.", 
                "name": "length"
            }, 
            {
                "descr": "Offset within the file.", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-read", 
        "type": "Process Control"
    }, 
    "eio_readahead": {
        "description": "eio_readahead() populates the page cache with data from a file so that subsequent reads from that file will not block on disk I/O. See READAHEAD(2) man page for details.", 
        "name": "eio_readahead", 
        "overview": "resource eio_readahead ( mixed $fd , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Starting point from which data is to be read.", 
                "name": "offset"
            }, 
            {
                "descr": "Number of bytes to be read.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-readahead", 
        "type": "Process Control"
    }, 
    "eio_readdir": {
        "description": "Reads through a whole directory(via the opendir, readdir and closedir system calls) and returns either the names or an array in result argument of callback function, depending on the flags argument.", 
        "name": "eio_readdir", 
        "overview": "resource eio_readdir ( string $path , int $flags , int $pri , callable $callback [, string $data = NULL ] )", 
        "parameters": [
            {
                "descr": "Directory path.", 
                "name": "path"
            }, 
            {
                "descr": "Combination of EIO_READDIR_* constants.", 
                "name": "flags"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }, 
            {
                "descr": "eio_readdir() flag. If specified, the result argument of the callback becomes an array with the following keys: 'names' - array of directory names 'dents' - array of struct eio_dirent-like arrays having the following keys each: 'name' - the directory name; 'type' - one of EIO_DT_* constants; 'inode' - the inode number, if available, otherwise unspecified;", 
                "name": "EIO_READDIR_DENTS (integer)"
            }, 
            {
                "descr": "When this flag is specified, the names will be returned in an order where likely directories come first, in optimal stat order.", 
                "name": "EIO_READDIR_DIRS_FIRST (integer)"
            }, 
            {
                "descr": "When this flag is specified, then the names will be returned in an order suitable for stat'ing each one. ", 
                "name": "EIO_READDIR_STAT_ORDER (integer)"
            }, 
            {
                "descr": "Unknown node type(very common). ", 
                "name": "EIO_READDIR_FOUND_UNKNOWN (integer)   Node types:  EIO_DT_UNKNOWN (integer)"
            }, 
            {
                "descr": "FIFO node type", 
                "name": "EIO_DT_FIFO (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_CHR (integer)"
            }, 
            {
                "descr": "Multiplexed char device (v7+coherent) node type", 
                "name": "EIO_DT_MPC (integer)"
            }, 
            {
                "descr": "Directory node type", 
                "name": "EIO_DT_DIR (integer)"
            }, 
            {
                "descr": "Xenix special named file node type", 
                "name": "EIO_DT_NAM (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_BLK (integer)"
            }, 
            {
                "descr": "Multiplexed block device (v7+coherent)", 
                "name": "EIO_DT_MPB (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_REG (integer)"
            }, 
            {
                "descr": "HP-UX network special node type", 
                "name": "EIO_DT_NWK (integer)    EIO_DT_CMP (integer)"
            }, 
            {
                "descr": "Link node type", 
                "name": "EIO_DT_LNK (integer)"
            }, 
            {
                "descr": "Socket node type", 
                "name": "EIO_DT_SOCK (integer)"
            }, 
            {
                "descr": "Solaris door node type", 
                "name": "EIO_DT_DOOR (integer)"
            }, 
            {
                "descr": "Node type", 
                "name": "EIO_DT_WHT (integer)"
            }, 
            {
                "descr": "Highest node type value", 
                "name": "EIO_DT_MAX (integer)"
            }
        ], 
        "path": "php/function.eio-readdir", 
        "type": "Process Control"
    }, 
    "eio_readlink": {
        "description": "", 
        "name": "eio_readlink", 
        "overview": "resource eio_readlink ( string $path , int $pri , callable $callback [, string $data = NULL ] )", 
        "parameters": [
            {
                "descr": "Source symbolic link path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-readlink", 
        "type": "Process Control"
    }, 
    "eio_realpath": {
        "description": "eio_realpath() returns the canonicalized absolute pathname in result argument of callback function.", 
        "name": "eio_realpath", 
        "overview": "resource eio_realpath ( string $path , int $pri , callable $callback [, string $data = NULL ] )", 
        "parameters": [
            {
                "descr": "Short pathname", 
                "name": "path"
            }
        ], 
        "path": "php/function.eio-realpath", 
        "type": "Process Control"
    }, 
    "eio_rename": {
        "description": "eio_rename() renames or moves a file to new location.", 
        "name": "eio_rename", 
        "overview": "resource eio_rename ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Source path", 
                "name": "path"
            }, 
            {
                "descr": "Target path", 
                "name": "new_path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-rename", 
        "type": "Process Control"
    }, 
    "eio_rmdir": {
        "description": "eio_rmdir() removes a directory.", 
        "name": "eio_rmdir", 
        "overview": "resource eio_rmdir ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Directory path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-rmdir", 
        "type": "Process Control"
    }, 
    "eio_seek": {
        "description": "eio_seek() repositions the offset of the open file associated with stream, Socket resource, or file descriptor specified by fd to the argument offset according to the directive whence as follows:", 
        "name": "eio_seek", 
        "overview": "resource eio_seek ( mixed $fd , int $offset , int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "Starting point from which data is to be read.", 
                "name": "offset"
            }, 
            {
                "descr": "Number of bytes to be read.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-seek", 
        "type": "Process Control"
    }, 
    "eio_sendfile": {
        "description": "eio_sendfile() copies data between one file descriptor and another. See SENDFILE(2) man page for details.", 
        "name": "eio_sendfile", 
        "overview": "resource eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length [, int $pri [, callable $callback [, string $data ]]] )", 
        "parameters": [
            {
                "descr": "Output stream, Socket resource, or file descriptor. ", 
                "name": "out_fd"
            }, 
            {
                "descr": "Input stream, Socket resource, or file descriptor. ", 
                "name": "in_fd"
            }, 
            {
                "descr": "Offset within the source file.", 
                "name": "offset"
            }, 
            {
                "descr": "Number of bytes to copy.", 
                "name": "length"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-sendfile", 
        "type": "Process Control"
    }, 
    "eio_set_max_idle": {
        "description": "", 
        "name": "eio_set_max_idle", 
        "overview": "void eio_set_max_idle ( int $nthreads )", 
        "parameters": [
            {
                "descr": "Number of idle threads.", 
                "name": "nthreads"
            }
        ], 
        "path": "php/function.eio-set-max-idle", 
        "type": "Process Control"
    }, 
    "eio_set_max_parallel": {
        "description": "", 
        "name": "eio_set_max_parallel", 
        "overview": "void eio_set_max_parallel ( int $nthreads )", 
        "parameters": [
            {
                "descr": "Number of parallel threads", 
                "name": "nthreads"
            }
        ], 
        "path": "php/function.eio-set-max-parallel", 
        "type": "Process Control"
    }, 
    "eio_set_max_poll_reqs": {
        "description": "", 
        "name": "eio_set_max_poll_reqs", 
        "overview": "void eio_set_max_poll_reqs ( int $nreqs )", 
        "parameters": [
            {
                "descr": "Number of requests", 
                "name": "nreqs"
            }
        ], 
        "path": "php/function.eio-set-max-poll-reqs", 
        "type": "Process Control"
    }, 
    "eio_set_max_poll_time": {
        "description": "Polling stops, if poll took longer than nseconds seconds.", 
        "name": "eio_set_max_poll_time", 
        "overview": "void eio_set_max_poll_time ( float $nseconds )", 
        "parameters": [
            {
                "descr": "Number of seconds", 
                "name": "nseconds"
            }
        ], 
        "path": "php/function.eio-set-max-poll-time", 
        "type": "Process Control"
    }, 
    "eio_set_min_parallel": {
        "description": "", 
        "name": "eio_set_min_parallel", 
        "overview": "void eio_set_min_parallel ( string $nthreads )", 
        "parameters": [
            {
                "descr": "Number of parallel threads.", 
                "name": "nthreads"
            }
        ], 
        "path": "php/function.eio-set-min-parallel", 
        "type": "Process Control"
    }, 
    "eio_stat": {
        "description": "eio_stat() returns file status information in result argument of callback", 
        "name": "eio_stat", 
        "overview": "resource eio_stat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )", 
        "parameters": [
            {
                "descr": "The file path", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-stat", 
        "type": "Process Control"
    }, 
    "eio_statvfs": {
        "description": "eio_statvfs() returns file system statistics information in result argument of callback", 
        "name": "eio_statvfs", 
        "overview": "resource eio_statvfs ( string $path , int $pri , callable $callback [, mixed $data ] )", 
        "parameters": [
            {
                "descr": "Pathname of any file within the mounted file system", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-statvfs", 
        "type": "Process Control"
    }, 
    "eio_symlink": {
        "description": "eio_symlink() creates a symbolic link new_path to path.", 
        "name": "eio_symlink", 
        "overview": "resource eio_symlink ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Source path", 
                "name": "path"
            }, 
            {
                "descr": "Target path", 
                "name": "new_path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-symlink", 
        "type": "Process Control"
    }, 
    "eio_sync": {
        "description": "", 
        "name": "eio_sync", 
        "overview": "resource eio_sync ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [], 
        "path": "php/function.eio-sync", 
        "type": "Process Control"
    }, 
    "eio_sync_file_range": {
        "description": "eio_sync_file_range() permits fine control when synchronizing the open file referred to by the file descriptor fd with disk.", 
        "name": "eio_sync_file_range", 
        "overview": "resource eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "File descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "The starting byte of the file range to be synchronized", 
                "name": "offset"
            }, 
            {
                "descr": "Specifies the length of the range to be synchronized, in bytes. ", 
                "name": "nbytes"
            }, 
            {
                "descr": "A bit-mask. Can include any of the following values: EIO_SYNC_FILE_RANGE_WAIT_BEFORE, EIO_SYNC_FILE_RANGE_WRITE, EIO_SYNC_FILE_RANGE_WAIT_AFTER. ", 
                "name": "flags"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-sync-file-range", 
        "type": "Process Control"
    }, 
    "eio_syncfs": {
        "description": "", 
        "name": "eio_syncfs", 
        "overview": "resource eio_syncfs ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "File descriptor", 
                "name": "fd"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-syncfs", 
        "type": "Process Control"
    }, 
    "eio_truncate": {
        "description": "eio_truncate() causes the regular file named by path to be truncated to a size of precisely length bytes", 
        "name": "eio_truncate", 
        "overview": "resource eio_truncate ( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )", 
        "parameters": [
            {
                "descr": "File path", 
                "name": "path"
            }, 
            {
                "descr": "Offset from beginning of the file.", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-truncate", 
        "type": "Process Control"
    }, 
    "eio_unlink": {
        "description": "eio_unlink() deletes a name from the file system.", 
        "name": "eio_unlink", 
        "overview": "resource eio_unlink ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Path to file", 
                "name": "path"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-unlink", 
        "type": "Process Control"
    }, 
    "eio_utime": {
        "description": "", 
        "name": "eio_utime", 
        "overview": "resource eio_utime ( string $path , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "path"
            }, 
            {
                "descr": "Access time", 
                "name": "atime"
            }, 
            {
                "descr": "Modification time", 
                "name": "mtime"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-utime", 
        "type": "Process Control"
    }, 
    "eio_write": {
        "description": "eio_write() writes up to length bytes from str at offset offset from the beginning of the file.", 
        "name": "eio_write", 
        "overview": "resource eio_write ( mixed $fd , string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]] )", 
        "parameters": [
            {
                "descr": "Stream, Socket resource, or numeric file descriptor, e.g. ", 
                "name": "fd"
            }, 
            {
                "descr": "Source string", 
                "name": "str"
            }, 
            {
                "descr": "Maximum number of bytes to write.", 
                "name": "length"
            }, 
            {
                "descr": "Offset from the beginning of file.", 
                "name": "offset"
            }, 
            {
                "descr": "The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. ", 
                "name": "pri"
            }, 
            {
                "descr": "callback function is called when the request is done. ", 
                "name": "callback"
            }, 
            {
                "descr": "request-specific result value; basically, the value returned by corresponding system call.", 
                "name": "result"
            }, 
            {
                "descr": "is optional request resource which can be used with functions like eio_get_last_error()", 
                "name": "req"
            }, 
            {
                "descr": "Arbitrary variable passed to callback.", 
                "name": "data"
            }
        ], 
        "path": "php/function.eio-write", 
        "type": "Process Control"
    }, 
    "empty": {
        "description": "Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its value equals FALSE. empty() does not generate a warning if the variable does not exist.", 
        "name": "empty", 
        "overview": "bool empty ( mixed $var )", 
        "parameters": [
            {
                "descr": "Variable to be checked  Note:  Prior to PHP 5.5, empty() only supports variables; anything else will result in a parse error. ", 
                "name": "var"
            }
        ], 
        "path": "php/function.empty", 
        "type": "Variables"
    }, 
    "end": {
        "description": "end() advances array's internal pointer to the last element, and returns its value.", 
        "name": "end", 
        "overview": "mixed end ( array &$array )", 
        "parameters": [
            {
                "descr": "The array. This array is passed by reference because it is modified by the function. ", 
                "name": "array"
            }
        ], 
        "path": "php/function.end", 
        "type": "Array"
    }, 
    "ereg": {
        "description": "", 
        "name": "ereg", 
        "overview": "int ereg ( string $pattern , string $string [, array &$regs ] )", 
        "parameters": [
            {
                "descr": "Case sensitive regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. ", 
                "name": "regs"
            }
        ], 
        "path": "php/function.ereg", 
        "type": "String"
    }, 
    "ereg_replace": {
        "description": "", 
        "name": "ereg_replace", 
        "overview": "string ereg_replace ( string $pattern , string $replacement , string $string )", 
        "parameters": [
            {
                "descr": "A POSIX extended regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "If pattern contains parenthesized substrings, replacement may contain substrings of the form \\digit, which will be replaced by the text matching the digit'th parenthesized substring; \\0 will produce the entire contents of string. Up to nine substrings may be used. Parentheses may be nested, in which case they are counted by the opening parenthesis.", 
                "name": "replacement"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.ereg-replace", 
        "type": "String"
    }, 
    "eregi": {
        "description": "This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters.", 
        "name": "eregi", 
        "overview": "int eregi ( string $pattern , string $string [, array &$regs ] )", 
        "parameters": [
            {
                "descr": "Case insensitive regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. ", 
                "name": "regs"
            }
        ], 
        "path": "php/function.eregi", 
        "type": "String"
    }, 
    "eregi_replace": {
        "description": "This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters.", 
        "name": "eregi_replace", 
        "overview": "string eregi_replace ( string $pattern , string $replacement , string $string )", 
        "parameters": [
            {
                "descr": "A POSIX extended regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "If pattern contains parenthesized substrings, replacement may contain substrings of the form \\digit, which will be replaced by the text matching the digit'th parenthesized substring; \\0 will produce the entire contents of string. Up to nine substrings may be used. Parentheses may be nested, in which case they are counted by the opening parenthesis.", 
                "name": "replacement"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.eregi-replace", 
        "type": "String"
    }, 
    "error_get_last": {
        "description": "Gets information about the last error that occurred.", 
        "name": "error_get_last", 
        "overview": "array error_get_last ( void )", 
        "parameters": [], 
        "path": "php/function.error-get-last", 
        "type": "Errors"
    }, 
    "error_log": {
        "description": "Sends an error message to the web server's error log or to a file.", 
        "name": "error_log", 
        "overview": "bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )", 
        "parameters": [
            {
                "descr": "The error message that should be logged.", 
                "name": "message"
            }, 
            {
                "descr": "Says where the error should go. ", 
                "name": "message_type"
            }, 
            {
                "descr": "The destination. Its meaning depends on the message_type parameter as described above.", 
                "name": "destination"
            }, 
            {
                "descr": "The extra headers. It's used when the message_type parameter is set to 1. ", 
                "name": "extra_headers"
            }
        ], 
        "path": "php/function.error-log", 
        "type": "Errors"
    }, 
    "error_reporting": {
        "description": "The error_reporting() function sets the error_reporting directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. If the optional level is not set, error_reporting() will just return the current error reporting level.", 
        "name": "error_reporting", 
        "overview": "int error_reporting ([ int $level ] )", 
        "parameters": [
            {
                "descr": "The new error_reporting level. It takes on either a bitmask, or named constants. ", 
                "name": "level"
            }
        ], 
        "path": "php/function.error-reporting", 
        "type": "Errors"
    }, 
    "escapeshellarg": {
        "description": "escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include exec(), system() and the backtick operator.", 
        "name": "escapeshellarg", 
        "overview": "string escapeshellarg ( string $arg )", 
        "parameters": [
            {
                "descr": "The argument that will be escaped.", 
                "name": "arg"
            }
        ], 
        "path": "php/function.escapeshellarg", 
        "type": "Process Control"
    }, 
    "escapeshellcmd": {
        "description": "escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator.", 
        "name": "escapeshellcmd", 
        "overview": "string escapeshellcmd ( string $command )", 
        "parameters": [
            {
                "descr": "The command that will be escaped.", 
                "name": "command"
            }
        ], 
        "path": "php/function.escapeshellcmd", 
        "type": "Process Control"
    }, 
    "eval": {
        "description": "Evaluates the given code as PHP.", 
        "name": "eval", 
        "overview": "mixed eval ( string $code )", 
        "parameters": [
            {
                "descr": "Valid PHP code to be evaluated. ", 
                "name": "code"
            }
        ], 
        "path": "php/function.eval", 
        "type": "Language"
    }, 
    "event_add": {
        "description": "event_add() schedules the execution of the event when the event specified in event_set() occurs or in at least the time specified by the timeout argument. If timeout was not specified, not timeout is set. The event must be already initalized by event_set() and event_base_set() functions. If the event already has a timeout set, it is replaced by the new one.", 
        "name": "event_add", 
        "overview": "bool event_add ( resource $event [, int $timeout = -1 ] )", 
        "parameters": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Optional timeout (in microseconds).", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.event-add", 
        "type": "Process Control"
    }, 
    "event_base_free": {
        "description": "Destroys the specified event_base and frees all the resources associated. Note that it's not possible to destroy an event base with events attached to it.", 
        "name": "event_base_free", 
        "overview": "void event_base_free ( resource $event_base )", 
        "parameters": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-base-free", 
        "type": "Process Control"
    }, 
    "event_base_loop": {
        "description": "Starts event loop for the specified event base.", 
        "name": "event_base_loop", 
        "overview": "int event_base_loop ( resource $event_base [, int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }, 
            {
                "descr": "Optional parameter, which can take any combination of EVLOOP_ONCE and EVLOOP_NONBLOCK.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.event-base-loop", 
        "type": "Process Control"
    }, 
    "event_base_loopbreak": {
        "description": "Abort the active event loop immediately. The behaviour is similar to break statement.", 
        "name": "event_base_loopbreak", 
        "overview": "bool event_base_loopbreak ( resource $event_base )", 
        "parameters": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-base-loopbreak", 
        "type": "Process Control"
    }, 
    "event_base_loopexit": {
        "description": "The next event loop iteration after the given timer expires will complete normally, then exit without blocking for events again.", 
        "name": "event_base_loopexit", 
        "overview": "bool event_base_loopexit ( resource $event_base [, int $timeout = -1 ] )", 
        "parameters": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }, 
            {
                "descr": "Optional timeout parameter (in microseconds).", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.event-base-loopexit", 
        "type": "Process Control"
    }, 
    "event_base_new": {
        "description": "Returns new event base, which can be used later in event_base_set(), event_base_loop() and other functions.", 
        "name": "event_base_new", 
        "overview": "resource event_base_new ( void )", 
        "parameters": [], 
        "path": "php/function.event-base-new", 
        "type": "Process Control"
    }, 
    "event_base_priority_init": {
        "description": "Sets the number of different event priority levels.", 
        "name": "event_base_priority_init", 
        "overview": "bool event_base_priority_init ( resource $event_base , int $npriorities )", 
        "parameters": [
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }, 
            {
                "descr": "The number of event priority levels.", 
                "name": "npriorities"
            }
        ], 
        "path": "php/function.event-base-priority-init", 
        "type": "Process Control"
    }, 
    "event_base_set": {
        "description": "Associates the event_base with the event.", 
        "name": "event_base_set", 
        "overview": "bool event_base_set ( resource $event , resource $event_base )", 
        "parameters": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-base-set", 
        "type": "Process Control"
    }, 
    "event_buffer_base_set": {
        "description": "Assign the specified bevent to the event_base.", 
        "name": "event_buffer_base_set", 
        "overview": "bool event_buffer_base_set ( resource $bevent , resource $event_base )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Valid event base resource.", 
                "name": "event_base"
            }
        ], 
        "path": "php/function.event-buffer-base-set", 
        "type": "Process Control"
    }, 
    "event_buffer_disable": {
        "description": "Disables the specified buffered event.", 
        "name": "event_buffer_disable", 
        "overview": "bool event_buffer_disable ( resource $bevent , int $events )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Any combination of EV_READ and EV_WRITE.", 
                "name": "events"
            }
        ], 
        "path": "php/function.event-buffer-disable", 
        "type": "Process Control"
    }, 
    "event_buffer_enable": {
        "description": "Enables the specified buffered event.", 
        "name": "event_buffer_enable", 
        "overview": "bool event_buffer_enable ( resource $bevent , int $events )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Any combination of EV_READ and EV_WRITE.", 
                "name": "events"
            }
        ], 
        "path": "php/function.event-buffer-enable", 
        "type": "Process Control"
    }, 
    "event_buffer_fd_set": {
        "description": "Changes the file descriptor on which the buffered event operates.", 
        "name": "event_buffer_fd_set", 
        "overview": "void event_buffer_fd_set ( resource $bevent , resource $fd )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Valid PHP stream, must be castable to file descriptor.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.event-buffer-fd-set", 
        "type": "Process Control"
    }, 
    "event_buffer_free": {
        "description": "Destroys the specified buffered event and frees all the resources associated.", 
        "name": "event_buffer_free", 
        "overview": "void event_buffer_free ( resource $bevent )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }
        ], 
        "path": "php/function.event-buffer-free", 
        "type": "Process Control"
    }, 
    "event_buffer_new": {
        "description": "Libevent provides an abstraction layer on top of the regular event API. Using buffered event you don't need to deal with the I/O manually, instead it provides input and output buffers that get filled and drained automatically.", 
        "name": "event_buffer_new", 
        "overview": "resource event_buffer_new ( resource $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )", 
        "parameters": [
            {
                "descr": "Valid PHP stream resource. Must be castable to file descriptor.", 
                "name": "stream"
            }, 
            {
                "descr": "Callback to invoke where there is data to read, or NULL if no callback is desired.", 
                "name": "readcb"
            }, 
            {
                "descr": "Callback to invoke where the descriptor is ready for writing, or NULL if no callback is desired.", 
                "name": "writecb"
            }, 
            {
                "descr": "Callback to invoke where there is an error on the descriptor, cannot be NULL.", 
                "name": "errorcb"
            }, 
            {
                "descr": "An argument that will be passed to each of the callbacks (optional).", 
                "name": "arg"
            }
        ], 
        "path": "php/function.event-buffer-new", 
        "type": "Process Control"
    }, 
    "event_buffer_priority_set": {
        "description": "Assign a priority to the bevent.", 
        "name": "event_buffer_priority_set", 
        "overview": "bool event_buffer_priority_set ( resource $bevent , int $priority )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Priority level. Cannot be less than zero and cannot exceed maximum priority level of the event base (see event_base_priority_init()).", 
                "name": "priority"
            }
        ], 
        "path": "php/function.event-buffer-priority-set", 
        "type": "Process Control"
    }, 
    "event_buffer_read": {
        "description": "Reads data from the input buffer of the buffered event.", 
        "name": "event_buffer_read", 
        "overview": "string event_buffer_read ( resource $bevent , int $data_size )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Data size in bytes.", 
                "name": "data_size"
            }
        ], 
        "path": "php/function.event-buffer-read", 
        "type": "Process Control"
    }, 
    "event_buffer_set_callback": {
        "description": "Sets or changes existing callbacks for the buffered event.", 
        "name": "event_buffer_set_callback", 
        "overview": "bool event_buffer_set_callback ( resource $event , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Callback to invoke where there is data to read, or NULL if no callback is desired.", 
                "name": "readcb"
            }, 
            {
                "descr": "Callback to invoke where the descriptor is ready for writing, or NULL if no callback is desired.", 
                "name": "writecb"
            }, 
            {
                "descr": "Callback to invoke where there is an error on the descriptor, cannot be NULL.", 
                "name": "errorcb"
            }, 
            {
                "descr": "An argument that will be passed to each of the callbacks (optional).", 
                "name": "arg"
            }
        ], 
        "path": "php/function.event-buffer-set-callback", 
        "type": "Process Control"
    }, 
    "event_buffer_timeout_set": {
        "description": "Sets the read and write timeouts for the specified buffered event.", 
        "name": "event_buffer_timeout_set", 
        "overview": "void event_buffer_timeout_set ( resource $bevent , int $read_timeout , int $write_timeout )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Read timeout (in seconds).", 
                "name": "read_timeout"
            }, 
            {
                "descr": "Write timeout (in seconds).", 
                "name": "write_timeout"
            }
        ], 
        "path": "php/function.event-buffer-timeout-set", 
        "type": "Process Control"
    }, 
    "event_buffer_watermark_set": {
        "description": "Sets the watermarks for read and write events. Libevent does not invoke read callback unless there is at least lowmark bytes in the input buffer; if the read buffer is beyond the highmark, reading is stopped. On output, the write callback is invoked whenever the buffered data falls below the lowmark.", 
        "name": "event_buffer_watermark_set", 
        "overview": "void event_buffer_watermark_set ( resource $bevent , int $events , int $lowmark , int $highmark )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "Any combination of EV_READ and EV_WRITE.", 
                "name": "events"
            }, 
            {
                "descr": "Low watermark.", 
                "name": "lowmark"
            }, 
            {
                "descr": "High watermark.", 
                "name": "highmark"
            }
        ], 
        "path": "php/function.event-buffer-watermark-set", 
        "type": "Process Control"
    }, 
    "event_buffer_write": {
        "description": "Writes data to the specified buffered event. The data is appended to the output buffer and written to the descriptor when it becomes available for writing.", 
        "name": "event_buffer_write", 
        "overview": "bool event_buffer_write ( resource $bevent , string $data [, int $data_size = -1 ] )", 
        "parameters": [
            {
                "descr": "Valid buffered event resource.", 
                "name": "bevent"
            }, 
            {
                "descr": "The data to be written.", 
                "name": "data"
            }, 
            {
                "descr": "Optional size parameter. event_buffer_write() writes all the data by default.", 
                "name": "data_size"
            }
        ], 
        "path": "php/function.event-buffer-write", 
        "type": "Process Control"
    }, 
    "event_del": {
        "description": "Cancels the event.", 
        "name": "event_del", 
        "overview": "bool event_del ( resource $event )", 
        "parameters": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }
        ], 
        "path": "php/function.event-del", 
        "type": "Process Control"
    }, 
    "event_free": {
        "description": "Frees previously created event resource.", 
        "name": "event_free", 
        "overview": "void event_free ( resource $event )", 
        "parameters": [
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }
        ], 
        "path": "php/function.event-free", 
        "type": "Process Control"
    }, 
    "event_new": {
        "description": "Creates and returns a new event resource.", 
        "name": "event_new", 
        "overview": "resource event_new ( void )", 
        "parameters": [], 
        "path": "php/function.event-new", 
        "type": "Process Control"
    }, 
    "event_set": {
        "description": "Prepares the event to be used in event_add(). The event is prepared to call the function specified by the callback on the events specified in parameter events, which is a set of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE and EV_PERSIST.", 
        "name": "event_set", 
        "overview": "bool event_set ( resource $event , mixed $fd , int $events , mixed $callback [, mixed $arg ] )", 
        "parameters": [
            {
                "descr": "Signal number or resource indicating the stream.", 
                "name": "fd"
            }, 
            {
                "descr": "A flag indicating the event. Consists of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE and EV_PERSIST.", 
                "name": "events"
            }, 
            {
                "descr": "Optional parameter, previously passed to event_set() as arg.", 
                "name": "arg"
            }, 
            {
                "descr": "Valid event resource.", 
                "name": "event"
            }, 
            {
                "descr": "Valid PHP stream resource. The stream must be castable to file descriptor, so you most likely won't be able to use any of filtered streams.", 
                "name": "fd"
            }, 
            {
                "descr": "A set of flags indicating the desired event, can be EV_READ and/or EV_WRITE. ", 
                "name": "events"
            }, 
            {
                "descr": "Callback function to be called when the matching event occurs.", 
                "name": "callback"
            }, 
            {
                "descr": "Optional callback parameter.", 
                "name": "arg"
            }
        ], 
        "path": "php/function.event-set", 
        "type": "Process Control"
    }, 
    "exec": {
        "description": "exec() executes the given command.", 
        "name": "exec", 
        "overview": "string exec ( string $command [, array &$output [, int &$return_var ]] )", 
        "parameters": [
            {
                "descr": "The command that will be executed.", 
                "name": "command"
            }, 
            {
                "descr": "If the output argument is present, then the specified array will be filled with every line of output from the command. ", 
                "name": "output"
            }, 
            {
                "descr": "If the return_var argument is present along with the output argument, then the return status of the executed command will be written to this variable.", 
                "name": "return_var"
            }
        ], 
        "path": "php/function.exec", 
        "type": "Process Control"
    }, 
    "exit": {
        "description": "Terminates execution of the script. Shutdown functions and object destructors will always be executed even if exit is called.", 
        "name": "exit", 
        "overview": "void exit ([ string $status ] )", 
        "parameters": [
            {
                "descr": "If status is a string, this function prints the status just before exiting. ", 
                "name": "status"
            }
        ], 
        "path": "php/function.exit", 
        "type": "Language"
    }, 
    "exp": {
        "description": "Returns e raised to the power of arg.", 
        "name": "exp", 
        "overview": "float exp ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.exp", 
        "type": "Mathematics"
    }, 
    "explode": {
        "description": "Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.", 
        "name": "explode", 
        "overview": "array explode ( string $delimiter , string $string [, int $limit ] )", 
        "parameters": [
            {
                "descr": "The boundary string.", 
                "name": "delimiter"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string. ", 
                "name": "limit"
            }
        ], 
        "path": "php/function.explode", 
        "type": "String"
    }, 
    "expm1": {
        "description": "expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero, a case where 'exp (arg) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.", 
        "name": "expm1", 
        "overview": "float expm1 ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.expm1", 
        "type": "Mathematics"
    }, 
    "extension_loaded": {
        "description": "Finds out whether the extension is loaded.", 
        "name": "extension_loaded", 
        "overview": "bool extension_loaded ( string $name )", 
        "parameters": [
            {
                "descr": "The extension name.   You can see the names of various extensions by using phpinfo() or if you're using the CGI or CLI version of PHP you can use the -m switch to list all available extensions:  $ php -m[PHP Modules]xmltokenizerstandardsocketssessionposixpcreoverloadmysqlmbstringctype[Zend Modules]", 
                "name": "name"
            }
        ], 
        "path": "php/function.extension-loaded", 
        "type": "Language"
    }, 
    "extract": {
        "description": "Import variables from an array into the current symbol table.", 
        "name": "extract", 
        "overview": "int extract ( array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] )", 
        "parameters": [
            {
                "descr": "An associative array. This function treats keys as variable names and values as variable values. ", 
                "name": "array"
            }, 
            {
                "descr": "The way invalid/numeric keys and collisions are treated is determined by the extraction flags. ", 
                "name": "flags"
            }, 
            {
                "descr": "If there is a collision, don't overwrite the existing variable.", 
                "name": "EXTR_SKIP"
            }, 
            {
                "descr": "If there is a collision, prefix the variable name with prefix.", 
                "name": "EXTR_PREFIX_SAME"
            }, 
            {
                "descr": "Prefix all variable names with prefix.", 
                "name": "EXTR_PREFIX_ALL"
            }, 
            {
                "descr": "Only prefix invalid/numeric variable names with prefix.", 
                "name": "EXTR_PREFIX_INVALID"
            }, 
            {
                "descr": "Only overwrite the variable if it already exists in the current symbol table, otherwise do nothing. ", 
                "name": "EXTR_IF_EXISTS"
            }, 
            {
                "descr": "Only create prefixed variable names if the non-prefixed version of the same variable exists in the current symbol table.", 
                "name": "EXTR_PREFIX_IF_EXISTS"
            }, 
            {
                "descr": "Extracts variables as references. ", 
                "name": "EXTR_REFS"
            }, 
            {
                "descr": "Note that prefix is only required if flags is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.extract", 
        "type": "Array"
    }, 
    "ezmlm_hash": {
        "description": "", 
        "name": "ezmlm_hash", 
        "overview": "int ezmlm_hash ( string $addr )", 
        "parameters": [
            {
                "descr": "The email address that's being hashed.", 
                "name": "addr"
            }
        ], 
        "path": "php/function.ezmlm-hash", 
        "type": "Mail"
    }, 
    "fclose": {
        "description": "The file pointed to by handle is closed.", 
        "name": "fclose", 
        "overview": "bool fclose ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fclose", 
        "type": "File System"
    }, 
    "feof": {
        "description": "Tests for end-of-file on a file pointer.", 
        "name": "feof", 
        "overview": "bool feof ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.feof", 
        "type": "File System"
    }, 
    "fflush": {
        "description": "This function forces a write of all buffered output to the resource pointed to by the file handle.", 
        "name": "fflush", 
        "overview": "bool fflush ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fflush", 
        "type": "File System"
    }, 
    "fgetc": {
        "description": "Gets a character from the given file pointer.", 
        "name": "fgetc", 
        "overview": "string fgetc ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fgetc", 
        "type": "File System"
    }, 
    "fgetcsv": {
        "description": "Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read.", 
        "name": "fgetcsv", 
        "overview": "array fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = ',' [, string $enclosure = '\"' [, string $escape = '\\\\' ]]]] )", 
        "parameters": [
            {
                "descr": "A valid file pointer to a file successfully opened by fopen(), popen(), or fsockopen().", 
                "name": "handle"
            }, 
            {
                "descr": "Must be greater than the longest line (in characters) to be found in the CSV file (allowing for trailing line-end characters). ", 
                "name": "length"
            }, 
            {
                "descr": "Set the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "Set the field enclosure character (one character only).", 
                "name": "enclosure"
            }, 
            {
                "descr": "Set the escape character (one character only). ", 
                "name": "escape"
            }
        ], 
        "path": "php/function.fgetcsv", 
        "type": "File System"
    }, 
    "fgets": {
        "description": "Gets a line from file pointer.", 
        "name": "fgets", 
        "overview": "string fgets ( resource $handle [, int $length ] )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }, 
            {
                "descr": "Reading ends when length - 1 bytes have been read, or a newline (which is included in the return value), or an EOF (whichever comes first). ", 
                "name": "length"
            }
        ], 
        "path": "php/function.fgets", 
        "type": "File System"
    }, 
    "fgetss": {
        "description": "Identical to fgets(), except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads.", 
        "name": "fgetss", 
        "overview": "string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }, 
            {
                "descr": "Length of the data to be retrieved.", 
                "name": "length"
            }, 
            {
                "descr": "You can use the optional third parameter to specify tags which should not be stripped.", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/function.fgetss", 
        "type": "File System"
    }, 
    "file": {
        "description": "Reads an entire file into an array.", 
        "name": "file", 
        "overview": "array file ( string $filename [, int $flags = 0 [, resource $context ]] )", 
        "parameters": [
            {
                "descr": "Path to the file.  TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. ", 
                "name": "filename"
            }, 
            {
                "descr": "The optional parameter flags can be one, or more, of the following constants:  FILE_USE_INCLUDE_PATH    Search for the file in the include_path.", 
                "name": "flags"
            }, 
            {
                "descr": "Do not add newline at the end of each array element", 
                "name": "FILE_IGNORE_NEW_LINES"
            }, 
            {
                "descr": "Skip empty lines", 
                "name": "FILE_SKIP_EMPTY_LINES"
            }, 
            {
                "descr": "A context resource created with the stream_context_create() function. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.file", 
        "type": "File System"
    }, 
    "file_exists": {
        "description": "Checks whether a file or directory exists.", 
        "name": "file_exists", 
        "overview": "bool file_exists ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file or directory.   On windows, use //computername/share/filename or \\\\computername\\share\\filename to check files on network shares.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.file-exists", 
        "type": "File System"
    }, 
    "file_get_contents": {
        "description": "This function is similar to file(), except that file_get_contents() returns the file in a string, starting at the specified offset up to maxlen bytes. On failure, file_get_contents() will return FALSE.", 
        "name": "file_get_contents", 
        "overview": "string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] )", 
        "parameters": [
            {
                "descr": "Name of the file to read.", 
                "name": "filename"
            }, 
            {
                "descr": "Note:  As of PHP 5 the FILE_USE_INCLUDE_PATH constant can be used to trigger include path search.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create(). ", 
                "name": "context"
            }, 
            {
                "descr": "The offset where the reading starts on the original stream. ", 
                "name": "offset"
            }, 
            {
                "descr": "Maximum length of data read. The default is to read until end of file is reached. ", 
                "name": "maxlen"
            }
        ], 
        "path": "php/function.file-get-contents", 
        "type": "File System"
    }, 
    "file_put_contents": {
        "description": "This function is identical to calling fopen(), fwrite() and fclose() successively to write data to a file.", 
        "name": "file_put_contents", 
        "overview": "int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )", 
        "parameters": [
            {
                "descr": "Path to the file where to write the data.", 
                "name": "filename"
            }, 
            {
                "descr": "The data to write. Can be either a string, an array or a stream resource. ", 
                "name": "data"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/function.file-put-contents", 
        "type": "File System"
    }, 
    "fileatime": {
        "description": "", 
        "name": "fileatime", 
        "overview": "int fileatime ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileatime", 
        "type": "File System"
    }, 
    "filectime": {
        "description": "Gets the inode change time of a file.", 
        "name": "filectime", 
        "overview": "int filectime ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filectime", 
        "type": "File System"
    }, 
    "filegroup": {
        "description": "Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.", 
        "name": "filegroup", 
        "overview": "int filegroup ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filegroup", 
        "type": "File System"
    }, 
    "fileinode": {
        "description": "Gets the file inode.", 
        "name": "fileinode", 
        "overview": "int fileinode ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileinode", 
        "type": "File System"
    }, 
    "filemtime": {
        "description": "This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.", 
        "name": "filemtime", 
        "overview": "int filemtime ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filemtime", 
        "type": "File System"
    }, 
    "fileowner": {
        "description": "Gets the file owner.", 
        "name": "fileowner", 
        "overview": "int fileowner ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileowner", 
        "type": "File System"
    }, 
    "fileperms": {
        "description": "Gets permissions for the given file.", 
        "name": "fileperms", 
        "overview": "int fileperms ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.fileperms", 
        "type": "File System"
    }, 
    "filesize": {
        "description": "Gets the size for the given file.", 
        "name": "filesize", 
        "overview": "int filesize ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filesize", 
        "type": "File System"
    }, 
    "filetype": {
        "description": "Returns the type of the given file.", 
        "name": "filetype", 
        "overview": "string filetype ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.filetype", 
        "type": "File System"
    }, 
    "filter_has_var": {
        "description": "", 
        "name": "filter_has_var", 
        "overview": "bool filter_has_var ( int $type , string $variable_name )", 
        "parameters": [
            {
                "descr": "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.", 
                "name": "type"
            }, 
            {
                "descr": "Name of a variable to check.", 
                "name": "variable_name"
            }
        ], 
        "path": "php/function.filter-has-var", 
        "type": "Variables"
    }, 
    "filter_id": {
        "description": "", 
        "name": "filter_id", 
        "overview": "int filter_id ( string $filtername )", 
        "parameters": [
            {
                "descr": "Name of a filter to get.", 
                "name": "filtername"
            }
        ], 
        "path": "php/function.filter-id", 
        "type": "Variables"
    }, 
    "filter_input": {
        "description": "", 
        "name": "filter_input", 
        "overview": "mixed filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )", 
        "parameters": [
            {
                "descr": "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.", 
                "name": "type"
            }, 
            {
                "descr": "Name of a variable to get.", 
                "name": "variable_name"
            }, 
            {
                "descr": "The ID of the filter to apply. The Types of filters manual page lists the available filters.", 
                "name": "filter"
            }, 
            {
                "descr": "Associative array of options or bitwise disjunction of flags. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.filter-input", 
        "type": "Variables"
    }, 
    "filter_input_array": {
        "description": "This function is useful for retrieving many values without repetitively calling filter_input().", 
        "name": "filter_input_array", 
        "overview": "mixed filter_input_array ( int $type [, mixed $definition [, bool $add_empty = true ]] )", 
        "parameters": [
            {
                "descr": "One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.", 
                "name": "type"
            }, 
            {
                "descr": "An array defining the arguments. ", 
                "name": "definition"
            }, 
            {
                "descr": "Add missing keys as NULL to the return value.", 
                "name": "add_empty"
            }
        ], 
        "path": "php/function.filter-input-array", 
        "type": "Variables"
    }, 
    "filter_list": {
        "description": "", 
        "name": "filter_list", 
        "overview": "array filter_list ( void )", 
        "parameters": [], 
        "path": "php/function.filter-list", 
        "type": "Variables"
    }, 
    "filter_var": {
        "description": "", 
        "name": "filter_var", 
        "overview": "mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )", 
        "parameters": [
            {
                "descr": "Value to filter.", 
                "name": "variable"
            }, 
            {
                "descr": "The ID of the filter to apply. The Types of filters manual page lists the available filters.", 
                "name": "filter"
            }, 
            {
                "descr": "Associative array of options or bitwise disjunction of flags. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.filter-var", 
        "type": "Variables"
    }, 
    "filter_var_array": {
        "description": "This function is useful for retrieving many values without repetitively calling filter_var().", 
        "name": "filter_var_array", 
        "overview": "mixed filter_var_array ( array $data [, mixed $definition [, bool $add_empty = true ]] )", 
        "parameters": [
            {
                "descr": "An array with string keys containing the data to filter.", 
                "name": "data"
            }, 
            {
                "descr": "An array defining the arguments. ", 
                "name": "definition"
            }, 
            {
                "descr": "Add missing keys as NULL to the return value.", 
                "name": "add_empty"
            }
        ], 
        "path": "php/function.filter-var-array", 
        "type": "Variables"
    }, 
    "finfo_buffer": {
        "description": "This function is used to get information about binary data in a string.", 
        "name": "finfo_buffer", 
        "overview": "string finfo_buffer ( resource $finfo , string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )", 
        "parameters": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }, 
            {
                "descr": "Content of a file to be checked.", 
                "name": "string"
            }, 
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }
        ], 
        "path": "php/function.finfo-buffer", 
        "type": "File System"
    }, 
    "finfo_close": {
        "description": "This function closes the resource opened by finfo_open().", 
        "name": "finfo_close", 
        "overview": "bool finfo_close ( resource $finfo )", 
        "parameters": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }
        ], 
        "path": "php/function.finfo-close", 
        "type": "File System"
    }, 
    "finfo_file": {
        "description": "This function is used to get information about a file.", 
        "name": "finfo_file", 
        "overview": "string finfo_file ( resource $finfo , string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )", 
        "parameters": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }, 
            {
                "descr": "Name of a file to be checked.", 
                "name": "file_name"
            }, 
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }, 
            {
                "descr": "For a description of contexts, refer to Stream Functions.", 
                "name": "context"
            }
        ], 
        "path": "php/function.finfo-file", 
        "type": "File System"
    }, 
    "finfo_open": {
        "description": "This function opens a magic database and returns its resource.", 
        "name": "finfo_open", 
        "overview": "resource finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )", 
        "parameters": [
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }, 
            {
                "descr": "Name of a magic database file, usually something like /path/to/magic.mime. ", 
                "name": "magic_file"
            }
        ], 
        "path": "php/function.finfo-open", 
        "type": "File System"
    }, 
    "finfo_set_flags": {
        "description": "This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.", 
        "name": "finfo_set_flags", 
        "overview": "bool finfo_set_flags ( resource $finfo , int $options )", 
        "parameters": [
            {
                "descr": "Fileinfo resource returned by finfo_open().", 
                "name": "finfo"
            }, 
            {
                "descr": "One or disjunction of more Fileinfo constants.", 
                "name": "options"
            }
        ], 
        "path": "php/function.finfo-set-flags", 
        "type": "File System"
    }, 
    "floatval": {
        "description": "Gets the float value of var.", 
        "name": "floatval", 
        "overview": "float floatval ( mixed $var )", 
        "parameters": [
            {
                "descr": "May be any scalar type. floatval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.", 
                "name": "var"
            }
        ], 
        "path": "php/function.floatval", 
        "type": "Variables"
    }, 
    "flock": {
        "description": "flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).", 
        "name": "flock", 
        "overview": "bool flock ( resource $handle , int $operation [, int &$wouldblock ] )", 
        "parameters": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "operation is one of the following:   LOCK_SH to acquire a shared lock (reader). ", 
                "name": "operation"
            }, 
            {
                "descr": "The optional third argument is set to 1 if the lock would block (EWOULDBLOCK errno condition). ", 
                "name": "wouldblock"
            }
        ], 
        "path": "php/function.flock", 
        "type": "File System"
    }, 
    "floor": {
        "description": "", 
        "name": "floor", 
        "overview": "float floor ( float $value )", 
        "parameters": [
            {
                "descr": "The numeric value to round", 
                "name": "value"
            }
        ], 
        "path": "php/function.floor", 
        "type": "Mathematics"
    }, 
    "flush": {
        "description": "Flushes the write buffers of PHP and whatever backend PHP is using (CGI, a web server, etc). This attempts to push current output all the way to the browser with a few caveats.", 
        "name": "flush", 
        "overview": "void flush ( void )", 
        "parameters": [], 
        "path": "php/function.flush", 
        "type": "Networking"
    }, 
    "fmod": {
        "description": "Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The remainder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.", 
        "name": "fmod", 
        "overview": "float fmod ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "The dividend", 
                "name": "x"
            }, 
            {
                "descr": "The divisor", 
                "name": "y"
            }
        ], 
        "path": "php/function.fmod", 
        "type": "Mathematics"
    }, 
    "fnmatch": {
        "description": "fnmatch() checks if the passed string would match the given shell wildcard pattern.", 
        "name": "fnmatch", 
        "overview": "bool fnmatch ( string $pattern , string $string [, int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "The shell wildcard pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The tested string. This function is especially useful for filenames, but may also be used on regular strings. ", 
                "name": "string"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.fnmatch", 
        "type": "File System"
    }, 
    "fopen": {
        "description": "fopen() binds a named resource, specified by filename, to a stream.", 
        "name": "fopen", 
        "overview": "resource fopen ( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]] )", 
        "parameters": [
            {
                "descr": "If filename is of the form \"scheme://...\", it is assumed to be a URL and PHP will search for a protocol handler (also known as a wrapper) for that scheme. ", 
                "name": "filename"
            }, 
            {
                "descr": "The mode parameter specifies the type of access you require to the stream. ", 
                "name": "mode"
            }, 
            {
                "descr": "The optional third use_include_path parameter can be set to '1' or TRUE if you want to search for the file in the include_path, too.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.fopen", 
        "type": "File System"
    }, 
    "forward_static_call": {
        "description": "Calls a user defined function or method given by the function parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the late static binding.", 
        "name": "forward_static_call", 
        "overview": "mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The function or method to be called. ", 
                "name": "function"
            }, 
            {
                "descr": "Zero or more parameters to be passed to the function.", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.forward-static-call", 
        "type": "Classes and Functions"
    }, 
    "forward_static_call_array": {
        "description": "Calls a user defined function or method given by the function parameter. This function must be called within a method context, it can't be used outside a class. It uses the late static binding. All arguments of the forwarded method are passed as values, and as an array, similarly to call_user_func_array().", 
        "name": "forward_static_call_array", 
        "overview": "mixed forward_static_call_array ( callable $function , array $parameters )", 
        "parameters": [
            {
                "descr": "The function or method to be called. ", 
                "name": "function"
            }, 
            {
                "descr": "One parameter, gathering all the method parameter in one array. ", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.forward-static-call-array", 
        "type": "Classes and Functions"
    }, 
    "fpassthru": {
        "description": "Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.", 
        "name": "fpassthru", 
        "overview": "int fpassthru ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fpassthru", 
        "type": "File System"
    }, 
    "fprintf": {
        "description": "Write a string produced according to format to the stream resource specified by handle.", 
        "name": "fprintf", 
        "overview": "int fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.fprintf", 
        "type": "String"
    }, 
    "fputcsv": {
        "description": "fputcsv() formats a line (passed as a fields array) as CSV and write it (terminated by a newline) to the specified file handle.", 
        "name": "fputcsv", 
        "overview": "int fputcsv ( resource $handle , array $fields [, string $delimiter = ',' [, string $enclosure = '\"' ]] )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).", 
                "name": "handle"
            }, 
            {
                "descr": "An array of values.", 
                "name": "fields"
            }, 
            {
                "descr": "The optional delimiter parameter sets the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "The optional enclosure parameter sets the field enclosure (one character only).", 
                "name": "enclosure"
            }
        ], 
        "path": "php/function.fputcsv", 
        "type": "File System"
    }, 
    "fread": {
        "description": "fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met:", 
        "name": "fread", 
        "overview": "string fread ( resource $handle , int $length )", 
        "parameters": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "Up to length number of bytes read.", 
                "name": "length"
            }
        ], 
        "path": "php/function.fread", 
        "type": "File System"
    }, 
    "fscanf": {
        "description": "The function fscanf() is similar to sscanf(), but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf().", 
        "name": "fscanf", 
        "overview": "mixed fscanf ( resource $handle , string $format [, mixed &$... ] )", 
        "parameters": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "The specified format as described in the sprintf() documentation.", 
                "name": "format"
            }, 
            {
                "descr": "The optional assigned values.", 
                "name": "..."
            }
        ], 
        "path": "php/function.fscanf", 
        "type": "File System"
    }, 
    "fseek": {
        "description": "Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence.", 
        "name": "fseek", 
        "overview": "int fseek ( resource $handle , int $offset [, int $whence = SEEK_SET ] )", 
        "parameters": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "The offset.   To move to a position before the end-of-file, you need to pass a negative value in offset and set whence to SEEK_END.", 
                "name": "offset"
            }, 
            {
                "descr": "whence values are: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/function.fseek", 
        "type": "File System"
    }, 
    "fsockopen": {
        "description": "Initiates a socket connection to the resource specified by hostname.", 
        "name": "fsockopen", 
        "overview": "resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(\"default_socket_timeout\") ]]]] )", 
        "parameters": [
            {
                "descr": "If OpenSSL support is installed, you may prefix the hostname with either ssl:// or tls:// to use an SSL or TLS client connection over TCP/IP to connect to the remote host.", 
                "name": "hostname"
            }, 
            {
                "descr": "The port number. This can be omitted and skipped with -1 for transports that do not use ports, such as unix://.", 
                "name": "port"
            }, 
            {
                "descr": "If provided, holds the system level error number that occurred in the system-level connect() call. ", 
                "name": "errno"
            }, 
            {
                "descr": "The error message as a string.", 
                "name": "errstr"
            }, 
            {
                "descr": "The connection timeout, in seconds. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.fsockopen", 
        "type": "Networking"
    }, 
    "fstat": {
        "description": "Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.", 
        "name": "fstat", 
        "overview": "array fstat ( resource $handle )", 
        "parameters": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.fstat", 
        "type": "File System"
    }, 
    "ftell": {
        "description": "Returns the position of the file pointer referenced by handle.", 
        "name": "ftell", 
        "overview": "int ftell ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen() or popen(). ", 
                "name": "handle"
            }
        ], 
        "path": "php/function.ftell", 
        "type": "File System"
    }, 
    "ftp_alloc": {
        "description": "Sends an ALLO command to the remote FTP server to allocate space for a file to be uploaded.", 
        "name": "ftp_alloc", 
        "overview": "bool ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The number of bytes to allocate.", 
                "name": "filesize"
            }, 
            {
                "descr": "A textual representation of the servers response will be returned by reference in result if a variable is provided.", 
                "name": "result"
            }
        ], 
        "path": "php/function.ftp-alloc", 
        "type": "FTP"
    }, 
    "ftp_cdup": {
        "description": "Changes to the parent directory.", 
        "name": "ftp_cdup", 
        "overview": "bool ftp_cdup ( resource $ftp_stream )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-cdup", 
        "type": "FTP"
    }, 
    "ftp_chdir": {
        "description": "Changes the current directory to the specified one.", 
        "name": "ftp_chdir", 
        "overview": "bool ftp_chdir ( resource $ftp_stream , string $directory )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The target directory.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-chdir", 
        "type": "FTP"
    }, 
    "ftp_chmod": {
        "description": "Sets the permissions on the specified remote file to mode.", 
        "name": "ftp_chmod", 
        "overview": "int ftp_chmod ( resource $ftp_stream , int $mode , string $filename )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The new permissions, given as an octal value.", 
                "name": "mode"
            }, 
            {
                "descr": "The remote file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.ftp-chmod", 
        "type": "FTP"
    }, 
    "ftp_close": {
        "description": "ftp_close() closes the given link identifier and releases the resource.", 
        "name": "ftp_close", 
        "overview": "bool ftp_close ( resource $ftp_stream )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-close", 
        "type": "FTP"
    }, 
    "ftp_connect": {
        "description": "ftp_connect() opens an FTP connection to the specified host.", 
        "name": "ftp_connect", 
        "overview": "resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )", 
        "parameters": [
            {
                "descr": "The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp://.", 
                "name": "host"
            }, 
            {
                "descr": "This parameter specifies an alternate port to connect to. ", 
                "name": "port"
            }, 
            {
                "descr": "This parameter specifies the timeout for all subsequent network operations. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.ftp-connect", 
        "type": "FTP"
    }, 
    "ftp_delete": {
        "description": "ftp_delete() deletes the file specified by path from the FTP server.", 
        "name": "ftp_delete", 
        "overview": "bool ftp_delete ( resource $ftp_stream , string $path )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The file to delete.", 
                "name": "path"
            }
        ], 
        "path": "php/function.ftp-delete", 
        "type": "FTP"
    }, 
    "ftp_exec": {
        "description": "Sends a SITE EXEC command request to the FTP server.", 
        "name": "ftp_exec", 
        "overview": "bool ftp_exec ( resource $ftp_stream , string $command )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The command to execute.", 
                "name": "command"
            }
        ], 
        "path": "php/function.ftp-exec", 
        "type": "FTP"
    }, 
    "ftp_fget": {
        "description": "ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer.", 
        "name": "ftp_fget", 
        "overview": "bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "An open file pointer in which we store the data.", 
                "name": "handle"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-fget", 
        "type": "FTP"
    }, 
    "ftp_fput": {
        "description": "ftp_fput() uploads the data from a file pointer to a remote file on the FTP server.", 
        "name": "ftp_fput", 
        "overview": "bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "An open file pointer on the local file. ", 
                "name": "handle"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-fput", 
        "type": "FTP"
    }, 
    "ftp_get": {
        "description": "ftp_get() retrieves a remote file from the FTP server, and saves it into a local file.", 
        "name": "ftp_get", 
        "overview": "bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The local file path (will be overwritten if the file already exists).", 
                "name": "local_file"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-get", 
        "type": "FTP"
    }, 
    "ftp_get_option": {
        "description": "This function returns the value for the requested option from the specified FTP connection.", 
        "name": "ftp_get_option", 
        "overview": "mixed ftp_get_option ( resource $ftp_stream , int $option )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "Currently, the following options are supported: Supported runtime FTP options FTP_TIMEOUT_SEC  Returns the current timeout used for network related operations. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.ftp-get-option", 
        "type": "FTP"
    }, 
    "ftp_login": {
        "description": "Logs in to the given FTP stream.", 
        "name": "ftp_login", 
        "overview": "bool ftp_login ( resource $ftp_stream , string $username , string $password )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The username (USER).", 
                "name": "username"
            }, 
            {
                "descr": "The password (PASS).", 
                "name": "password"
            }
        ], 
        "path": "php/function.ftp-login", 
        "type": "FTP"
    }, 
    "ftp_mdtm": {
        "description": "ftp_mdtm() gets the last modified time for a remote file.", 
        "name": "ftp_mdtm", 
        "overview": "int ftp_mdtm ( resource $ftp_stream , string $remote_file )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The file from which to extract the last modification time.", 
                "name": "remote_file"
            }
        ], 
        "path": "php/function.ftp-mdtm", 
        "type": "FTP"
    }, 
    "ftp_mkdir": {
        "description": "Creates the specified directory on the FTP server.", 
        "name": "ftp_mkdir", 
        "overview": "string ftp_mkdir ( resource $ftp_stream , string $directory )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The name of the directory that will be created.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-mkdir", 
        "type": "FTP"
    }, 
    "ftp_nb_continue": {
        "description": "Continues retrieving/sending a file non-blocking.", 
        "name": "ftp_nb_continue", 
        "overview": "int ftp_nb_continue ( resource $ftp_stream )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-nb-continue", 
        "type": "FTP"
    }, 
    "ftp_nb_fget": {
        "description": "ftp_nb_fget() retrieves a remote file from the FTP server.", 
        "name": "ftp_nb_fget", 
        "overview": "int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "An open file pointer in which we store the data.", 
                "name": "handle"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-nb-fget", 
        "type": "FTP"
    }, 
    "ftp_nb_fput": {
        "description": "ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server.", 
        "name": "ftp_nb_fput", 
        "overview": "int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "An open file pointer on the local file. ", 
                "name": "handle"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-nb-fput", 
        "type": "FTP"
    }, 
    "ftp_nb_get": {
        "description": "ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file.", 
        "name": "ftp_nb_get", 
        "overview": "int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The local file path (will be overwritten if the file already exists).", 
                "name": "local_file"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start downloading from.", 
                "name": "resumepos"
            }
        ], 
        "path": "php/function.ftp-nb-get", 
        "type": "FTP"
    }, 
    "ftp_nb_put": {
        "description": "ftp_nb_put() stores a local file on the FTP server.", 
        "name": "ftp_nb_put", 
        "overview": "int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The local file path.", 
                "name": "local_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-nb-put", 
        "type": "FTP"
    }, 
    "ftp_nlist": {
        "description": "", 
        "name": "ftp_nlist", 
        "overview": "array ftp_nlist ( resource $ftp_stream , string $directory )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The directory to be listed. This parameter can also include arguments, eg. ", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-nlist", 
        "type": "FTP"
    }, 
    "ftp_pasv": {
        "description": "ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall.", 
        "name": "ftp_pasv", 
        "overview": "bool ftp_pasv ( resource $ftp_stream , bool $pasv )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "If TRUE, the passive mode is turned on, else it's turned off.", 
                "name": "pasv"
            }
        ], 
        "path": "php/function.ftp-pasv", 
        "type": "FTP"
    }, 
    "ftp_put": {
        "description": "ftp_put() stores a local file on the FTP server.", 
        "name": "ftp_put", 
        "overview": "bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file path.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The local file path.", 
                "name": "local_file"
            }, 
            {
                "descr": "The transfer mode. Must be either FTP_ASCII or FTP_BINARY.", 
                "name": "mode"
            }, 
            {
                "descr": "The position in the remote file to start uploading to.", 
                "name": "startpos"
            }
        ], 
        "path": "php/function.ftp-put", 
        "type": "FTP"
    }, 
    "ftp_pwd": {
        "description": "", 
        "name": "ftp_pwd", 
        "overview": "string ftp_pwd ( resource $ftp_stream )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-pwd", 
        "type": "FTP"
    }, 
    "ftp_raw": {
        "description": "Sends an arbitrary command to the FTP server.", 
        "name": "ftp_raw", 
        "overview": "array ftp_raw ( resource $ftp_stream , string $command )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The command to execute.", 
                "name": "command"
            }
        ], 
        "path": "php/function.ftp-raw", 
        "type": "FTP"
    }, 
    "ftp_rawlist": {
        "description": "ftp_rawlist() executes the FTP LIST command, and returns the result as an array.", 
        "name": "ftp_rawlist", 
        "overview": "array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive = false ] )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The directory path. May include arguments for the LIST command.", 
                "name": "directory"
            }, 
            {
                "descr": "If set to TRUE, the issued command will be LIST -R.", 
                "name": "recursive"
            }
        ], 
        "path": "php/function.ftp-rawlist", 
        "type": "FTP"
    }, 
    "ftp_rename": {
        "description": "ftp_rename() renames a file or a directory on the FTP server.", 
        "name": "ftp_rename", 
        "overview": "bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The old file/directory name.", 
                "name": "oldname"
            }, 
            {
                "descr": "The new name.", 
                "name": "newname"
            }
        ], 
        "path": "php/function.ftp-rename", 
        "type": "FTP"
    }, 
    "ftp_rmdir": {
        "description": "Removes the specified directory on the FTP server.", 
        "name": "ftp_rmdir", 
        "overview": "bool ftp_rmdir ( resource $ftp_stream , string $directory )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The directory to delete. This must be either an absolute or relative path to an empty directory.", 
                "name": "directory"
            }
        ], 
        "path": "php/function.ftp-rmdir", 
        "type": "FTP"
    }, 
    "ftp_set_option": {
        "description": "This function controls various runtime options for the specified FTP stream.", 
        "name": "ftp_set_option", 
        "overview": "bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "Currently, the following options are supported: Supported runtime FTP options FTP_TIMEOUT_SEC  Changes the timeout in seconds used for all network related functions. ", 
                "name": "option"
            }, 
            {
                "descr": "This parameter depends on which option is chosen to be altered.", 
                "name": "value"
            }
        ], 
        "path": "php/function.ftp-set-option", 
        "type": "FTP"
    }, 
    "ftp_site": {
        "description": "ftp_site() sends the given SITE command to the FTP server.", 
        "name": "ftp_site", 
        "overview": "bool ftp_site ( resource $ftp_stream , string $command )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The SITE command. Note that this parameter isn't escaped so there may be some issues with filenames containing spaces and other characters.", 
                "name": "command"
            }
        ], 
        "path": "php/function.ftp-site", 
        "type": "FTP"
    }, 
    "ftp_size": {
        "description": "ftp_size() returns the size of the given file in bytes.", 
        "name": "ftp_size", 
        "overview": "int ftp_size ( resource $ftp_stream , string $remote_file )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }, 
            {
                "descr": "The remote file.", 
                "name": "remote_file"
            }
        ], 
        "path": "php/function.ftp-size", 
        "type": "FTP"
    }, 
    "ftp_ssl_connect": {
        "description": "ftp_ssl_connect() opens an explicit SSL-FTP connection to the specified host.", 
        "name": "ftp_ssl_connect", 
        "overview": "resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )", 
        "parameters": [
            {
                "descr": "The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp://.", 
                "name": "host"
            }, 
            {
                "descr": "This parameter specifies an alternate port to connect to. ", 
                "name": "port"
            }, 
            {
                "descr": "This parameter specifies the timeout for all subsequent network operations. ", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.ftp-ssl-connect", 
        "type": "FTP"
    }, 
    "ftp_systype": {
        "description": "Returns the system type identifier of the remote FTP server.", 
        "name": "ftp_systype", 
        "overview": "string ftp_systype ( resource $ftp_stream )", 
        "parameters": [
            {
                "descr": "The link identifier of the FTP connection.", 
                "name": "ftp_stream"
            }
        ], 
        "path": "php/function.ftp-systype", 
        "type": "FTP"
    }, 
    "ftruncate": {
        "description": "Takes the filepointer, handle, and truncates the file to length, size.", 
        "name": "ftruncate", 
        "overview": "bool ftruncate ( resource $handle , int $size )", 
        "parameters": [
            {
                "descr": "The file pointer.  Note:  The handle must be open for writing.", 
                "name": "handle"
            }, 
            {
                "descr": "The size to truncate to.  Note:  If size is larger than the file then the file is extended with null bytes. ", 
                "name": "size"
            }
        ], 
        "path": "php/function.ftruncate", 
        "type": "File System"
    }, 
    "func_get_arg": {
        "description": "Gets the specified argument from a user-defined function's argument list.", 
        "name": "func_get_arg", 
        "overview": "mixed func_get_arg ( int $arg_num )", 
        "parameters": [
            {
                "descr": "The argument offset. Function arguments are counted starting from zero.", 
                "name": "arg_num"
            }
        ], 
        "path": "php/function.func-get-arg", 
        "type": "Classes and Functions"
    }, 
    "func_get_args": {
        "description": "Gets an array of the function's argument list.", 
        "name": "func_get_args", 
        "overview": "array func_get_args ( void )", 
        "parameters": [], 
        "path": "php/function.func-get-args", 
        "type": "Classes and Functions"
    }, 
    "func_num_args": {
        "description": "Gets the number of arguments passed to the function.", 
        "name": "func_num_args", 
        "overview": "int func_num_args ( void )", 
        "parameters": [], 
        "path": "php/function.func-num-args", 
        "type": "Classes and Functions"
    }, 
    "function_exists": {
        "description": "Checks the list of defined functions, both built-in (internal) and user-defined, for function_name.", 
        "name": "function_exists", 
        "overview": "bool function_exists ( string $function_name )", 
        "parameters": [
            {
                "descr": "The function name, as a string.", 
                "name": "function_name"
            }
        ], 
        "path": "php/function.function-exists", 
        "type": "Classes and Functions"
    }, 
    "fwrite": {
        "description": "", 
        "name": "fwrite", 
        "overview": "int fwrite ( resource $handle , string $string [, int $length ] )", 
        "parameters": [
            {
                "descr": "A file system pointer resource that is typically created using fopen().", 
                "name": "handle"
            }, 
            {
                "descr": "The string that is to be written.", 
                "name": "string"
            }, 
            {
                "descr": "If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.fwrite", 
        "type": "File System"
    }, 
    "gc_collect_cycles": {
        "description": "Forces collection of any existing garbage cycles.", 
        "name": "gc_collect_cycles", 
        "overview": "int gc_collect_cycles ( void )", 
        "parameters": [], 
        "path": "php/function.gc-collect-cycles", 
        "type": "Language"
    }, 
    "gc_disable": {
        "description": "Deactivates the circular reference collector, setting zend.enable_gc to 0.", 
        "name": "gc_disable", 
        "overview": "void gc_disable ( void )", 
        "parameters": [], 
        "path": "php/function.gc-disable", 
        "type": "Language"
    }, 
    "gc_enable": {
        "description": "Activates the circular reference collector, setting zend.enable_gc to 1.", 
        "name": "gc_enable", 
        "overview": "void gc_enable ( void )", 
        "parameters": [], 
        "path": "php/function.gc-enable", 
        "type": "Language"
    }, 
    "gc_enabled": {
        "description": "Returns status of the circular reference collector.", 
        "name": "gc_enabled", 
        "overview": "bool gc_enabled ( void )", 
        "parameters": [], 
        "path": "php/function.gc-enabled", 
        "type": "Language"
    }, 
    "gd_info": {
        "description": "Gets information about the version and capabilities of the installed GD library.", 
        "name": "gd_info", 
        "overview": "array gd_info ( void )", 
        "parameters": [], 
        "path": "php/function.gd-info", 
        "type": "Image"
    }, 
    "geoip_continent_code_by_name": {
        "description": "The geoip_continent_code_by_name() function will return the two letter continent code corresponding to a hostname or an IP address.", 
        "name": "geoip_continent_code_by_name", 
        "overview": "string geoip_continent_code_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-continent-code-by-name", 
        "type": "Networking"
    }, 
    "geoip_country_code3_by_name": {
        "description": "The geoip_country_code3_by_name() function will return the three letter country code corresponding to a hostname or an IP address.", 
        "name": "geoip_country_code3_by_name", 
        "overview": "string geoip_country_code3_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-country-code3-by-name", 
        "type": "Networking"
    }, 
    "geoip_country_code_by_name": {
        "description": "The geoip_country_code_by_name() function will return the two letter country code corresponding to a hostname or an IP address.", 
        "name": "geoip_country_code_by_name", 
        "overview": "string geoip_country_code_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-country-code-by-name", 
        "type": "Networking"
    }, 
    "geoip_country_name_by_name": {
        "description": "The geoip_country_name_by_name() function will return the full country name corresponding to a hostname or an IP address.", 
        "name": "geoip_country_name_by_name", 
        "overview": "string geoip_country_name_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address whose location is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-country-name-by-name", 
        "type": "Networking"
    }, 
    "geoip_database_info": {
        "description": "The geoip_database_info() function returns the corresponding GeoIP Database version as it is defined inside the binary file.", 
        "name": "geoip_database_info", 
        "overview": "string geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] )", 
        "parameters": [
            {
                "descr": "The database type as an integer. ", 
                "name": "database"
            }
        ], 
        "path": "php/function.geoip-database-info", 
        "type": "Networking"
    }, 
    "geoip_db_avail": {
        "description": "The geoip_db_avail() function returns if the corresponding GeoIP Database is available and can be opened on disk.", 
        "name": "geoip_db_avail", 
        "overview": "bool geoip_db_avail ( int $database )", 
        "parameters": [
            {
                "descr": "The database type as an integer. ", 
                "name": "database"
            }
        ], 
        "path": "php/function.geoip-db-avail", 
        "type": "Networking"
    }, 
    "geoip_db_filename": {
        "description": "The geoip_db_filename() function returns the filename of the corresponding GeoIP Database.", 
        "name": "geoip_db_filename", 
        "overview": "string geoip_db_filename ( int $database )", 
        "parameters": [
            {
                "descr": "The database type as an integer. ", 
                "name": "database"
            }
        ], 
        "path": "php/function.geoip-db-filename", 
        "type": "Networking"
    }, 
    "geoip_db_get_all_info": {
        "description": "The geoip_db_get_all_info() function will return detailed information as a multi-dimensional array about all the GeoIP database types.", 
        "name": "geoip_db_get_all_info", 
        "overview": "array geoip_db_get_all_info ( void )", 
        "parameters": [], 
        "path": "php/function.geoip-db-get-all-info", 
        "type": "Networking"
    }, 
    "geoip_id_by_name": {
        "description": "The geoip_id_by_name() function will return the Internet connection type corresponding to a hostname or an IP address.", 
        "name": "geoip_id_by_name", 
        "overview": "int geoip_id_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address whose connection type is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-id-by-name", 
        "type": "Networking"
    }, 
    "geoip_isp_by_name": {
        "description": "The geoip_isp_by_name() function will return the name of the Internet Service Provider (ISP) that an IP is assigned to.", 
        "name": "geoip_isp_by_name", 
        "overview": "string geoip_isp_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-isp-by-name", 
        "type": "Networking"
    }, 
    "geoip_org_by_name": {
        "description": "The geoip_org_by_name() function will return the name of the organization that an IP is assigned to.", 
        "name": "geoip_org_by_name", 
        "overview": "string geoip_org_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-org-by-name", 
        "type": "Networking"
    }, 
    "geoip_record_by_name": {
        "description": "The geoip_record_by_name() function will return the record information corresponding to a hostname or an IP address.", 
        "name": "geoip_record_by_name", 
        "overview": "array geoip_record_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address whose record is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-record-by-name", 
        "type": "Networking"
    }, 
    "geoip_region_by_name": {
        "description": "The geoip_region_by_name() function will return the country and region corresponding to a hostname or an IP address.", 
        "name": "geoip_region_by_name", 
        "overview": "array geoip_region_by_name ( string $hostname )", 
        "parameters": [
            {
                "descr": "The hostname or IP address whose region is to be looked-up.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.geoip-region-by-name", 
        "type": "Networking"
    }, 
    "geoip_region_name_by_code": {
        "description": "The geoip_region_name_by_code() function will return the region name corresponding to a country and region code combo.", 
        "name": "geoip_region_name_by_code", 
        "overview": "string geoip_region_name_by_code ( string $country_code , string $region_code )", 
        "parameters": [
            {
                "descr": "The two-letter country code (see geoip_country_code_by_name())", 
                "name": "country_code"
            }, 
            {
                "descr": "The two-letter (or digit) region code (see geoip_region_by_name())", 
                "name": "region_code"
            }
        ], 
        "path": "php/function.geoip-region-name-by-code", 
        "type": "Networking"
    }, 
    "geoip_time_zone_by_country_and_region": {
        "description": "The geoip_time_zone_by_country_and_region() function will return the time zone corresponding to a country and region code combo.", 
        "name": "geoip_time_zone_by_country_and_region", 
        "overview": "string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] )", 
        "parameters": [
            {
                "descr": "The two-letter country code (see geoip_country_code_by_name())", 
                "name": "country_code"
            }, 
            {
                "descr": "The two-letter (or digit) region code (see geoip_region_by_name())", 
                "name": "region_code"
            }
        ], 
        "path": "php/function.geoip-time-zone-by-country-and-region", 
        "type": "Networking"
    }, 
    "get_browser": {
        "description": "Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini file.", 
        "name": "get_browser", 
        "overview": "mixed get_browser ([ string $user_agent [, bool $return_array = false ]] )", 
        "parameters": [
            {
                "descr": "The User Agent to be analyzed. By default, the value of HTTP User-Agent header is used; however, you can alter this (i.e., look up another browser's info) by passing this parameter. ", 
                "name": "user_agent"
            }, 
            {
                "descr": "If set to TRUE, this function will return an array instead of an object.", 
                "name": "return_array"
            }
        ], 
        "path": "php/function.get-browser", 
        "type": "Language"
    }, 
    "get_called_class": {
        "description": "Gets the name of the class the static method is called in.", 
        "name": "get_called_class", 
        "overview": "string get_called_class ( void )", 
        "parameters": [], 
        "path": "php/function.get-called-class", 
        "type": "Classes and Functions"
    }, 
    "get_cfg_var": {
        "description": "Gets the value of a PHP configuration option.", 
        "name": "get_cfg_var", 
        "overview": "string get_cfg_var ( string $option )", 
        "parameters": [
            {
                "descr": "The configuration option name.", 
                "name": "option"
            }
        ], 
        "path": "php/function.get-cfg-var", 
        "type": "Language"
    }, 
    "get_class": {
        "description": "Gets the name of the class of the given object.", 
        "name": "get_class", 
        "overview": "string get_class ([ object $object = NULL ] )", 
        "parameters": [
            {
                "descr": "The tested object. This parameter may be omitted when inside a class.", 
                "name": "object"
            }
        ], 
        "path": "php/function.get-class", 
        "type": "Classes and Functions"
    }, 
    "get_class_methods": {
        "description": "Gets the class methods names.", 
        "name": "get_class_methods", 
        "overview": "array get_class_methods ( mixed $class_name )", 
        "parameters": [
            {
                "descr": "The class name or an object instance", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.get-class-methods", 
        "type": "Classes and Functions"
    }, 
    "get_class_vars": {
        "description": "Get the default properties of the given class.", 
        "name": "get_class_vars", 
        "overview": "array get_class_vars ( string $class_name )", 
        "parameters": [
            {
                "descr": "The class name", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.get-class-vars", 
        "type": "Classes and Functions"
    }, 
    "get_current_user": {
        "description": "", 
        "name": "get_current_user", 
        "overview": "string get_current_user ( void )", 
        "parameters": [], 
        "path": "php/function.get-current-user", 
        "type": "Language"
    }, 
    "get_declared_classes": {
        "description": "Gets the declared classes.", 
        "name": "get_declared_classes", 
        "overview": "array get_declared_classes ( void )", 
        "parameters": [], 
        "path": "php/function.get-declared-classes", 
        "type": "Classes and Functions"
    }, 
    "get_declared_interfaces": {
        "description": "Gets the declared interfaces.", 
        "name": "get_declared_interfaces", 
        "overview": "array get_declared_interfaces ( void )", 
        "parameters": [], 
        "path": "php/function.get-declared-interfaces", 
        "type": "Classes and Functions"
    }, 
    "get_declared_traits": {
        "description": "", 
        "name": "get_declared_traits", 
        "overview": "array get_declared_traits ( void )", 
        "parameters": [], 
        "path": "php/function.get-declared-traits", 
        "type": "Classes and Functions"
    }, 
    "get_defined_constants": {
        "description": "Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.", 
        "name": "get_defined_constants", 
        "overview": "array get_defined_constants ([ bool $categorize = false ] )", 
        "parameters": [
            {
                "descr": "Causing this function to return a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension. ", 
                "name": "categorize"
            }
        ], 
        "path": "php/function.get-defined-constants", 
        "type": "Language"
    }, 
    "get_defined_functions": {
        "description": "Gets an array of all defined functions.", 
        "name": "get_defined_functions", 
        "overview": "array get_defined_functions ( void )", 
        "parameters": [], 
        "path": "php/function.get-defined-functions", 
        "type": "Classes and Functions"
    }, 
    "get_defined_vars": {
        "description": "This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.", 
        "name": "get_defined_vars", 
        "overview": "array get_defined_vars ( void )", 
        "parameters": [], 
        "path": "php/function.get-defined-vars", 
        "type": "Variables"
    }, 
    "get_extension_funcs": {
        "description": "This function returns the names of all the functions defined in the module indicated by module_name.", 
        "name": "get_extension_funcs", 
        "overview": "array get_extension_funcs ( string $module_name )", 
        "parameters": [
            {
                "descr": "The module name.  Note:  This parameter must be in lowercase.", 
                "name": "module_name"
            }
        ], 
        "path": "php/function.get-extension-funcs", 
        "type": "Language"
    }, 
    "get_headers": {
        "description": "get_headers() returns an array with the headers sent by the server in response to a HTTP request.", 
        "name": "get_headers", 
        "overview": "array get_headers ( string $url [, int $format = 0 ] )", 
        "parameters": [
            {
                "descr": "The target URL.", 
                "name": "url"
            }, 
            {
                "descr": "If the optional format parameter is set to non-zero, get_headers() parses the response and sets the array's keys.", 
                "name": "format"
            }
        ], 
        "path": "php/function.get-headers", 
        "type": "Networking"
    }, 
    "get_html_translation_table": {
        "description": "get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities().", 
        "name": "get_html_translation_table", 
        "overview": "array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]]] )", 
        "parameters": [
            {
                "descr": "Which table to return. Either HTML_ENTITIES or HTML_SPECIALCHARS.", 
                "name": "table"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify which quotes the table will contain as well as which document type the table is for. ", 
                "name": "flags"
            }, 
            {
                "descr": "Encoding to use. If omitted, the default value for this argument is ISO-8859-1 in versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.get-html-translation-table", 
        "type": "String"
    }, 
    "get_include_path": {
        "description": "", 
        "name": "get_include_path", 
        "overview": "string get_include_path ( void )", 
        "parameters": [], 
        "path": "php/function.get-include-path", 
        "type": "Language"
    }, 
    "get_included_files": {
        "description": "Gets the names of all files that have been included using include, include_once, require or require_once.", 
        "name": "get_included_files", 
        "overview": "array get_included_files ( void )", 
        "parameters": [], 
        "path": "php/function.get-included-files", 
        "type": "Language"
    }, 
    "get_loaded_extensions": {
        "description": "This function returns the names of all the modules compiled and loaded in the PHP interpreter.", 
        "name": "get_loaded_extensions", 
        "overview": "array get_loaded_extensions ([ bool $zend_extensions = false ] )", 
        "parameters": [
            {
                "descr": "Only return Zend extensions, if not then regular extensions, like mysqli are listed. ", 
                "name": "zend_extensions"
            }
        ], 
        "path": "php/function.get-loaded-extensions", 
        "type": "Language"
    }, 
    "get_magic_quotes_gpc": {
        "description": "Returns the current configuration setting of magic_quotes_gpc", 
        "name": "get_magic_quotes_gpc", 
        "overview": "bool get_magic_quotes_gpc ( void )", 
        "parameters": [], 
        "path": "php/function.get-magic-quotes-gpc", 
        "type": "Language"
    }, 
    "get_magic_quotes_runtime": {
        "description": "", 
        "name": "get_magic_quotes_runtime", 
        "overview": "bool get_magic_quotes_runtime ( void )", 
        "parameters": [], 
        "path": "php/function.get-magic-quotes-runtime", 
        "type": "Language"
    }, 
    "get_meta_tags": {
        "description": "Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>.", 
        "name": "get_meta_tags", 
        "overview": "array get_meta_tags ( string $filename [, bool $use_include_path = false ] )", 
        "parameters": [
            {
                "descr": "The path to the HTML file, as a string. ", 
                "name": "filename"
            }, 
            {
                "descr": "Setting use_include_path to TRUE will result in PHP trying to open the file along the standard include path as per the include_path directive. ", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.get-meta-tags", 
        "type": "Networking"
    }, 
    "get_object_vars": {
        "description": "Gets the accessible non-static properties of the given object according to scope.", 
        "name": "get_object_vars", 
        "overview": "array get_object_vars ( object $object )", 
        "parameters": [
            {
                "descr": "An object instance.", 
                "name": "object"
            }
        ], 
        "path": "php/function.get-object-vars", 
        "type": "Classes and Functions"
    }, 
    "get_parent_class": {
        "description": "Retrieves the parent class name for object or class.", 
        "name": "get_parent_class", 
        "overview": "string get_parent_class ([ mixed $object ] )", 
        "parameters": [
            {
                "descr": "The tested object or class name", 
                "name": "object"
            }
        ], 
        "path": "php/function.get-parent-class", 
        "type": "Classes and Functions"
    }, 
    "get_resource_type": {
        "description": "This function gets the type of the given resource.", 
        "name": "get_resource_type", 
        "overview": "string get_resource_type ( resource $handle )", 
        "parameters": [
            {
                "descr": "The evaluated resource handle.", 
                "name": "handle"
            }
        ], 
        "path": "php/function.get-resource-type", 
        "type": "Variables"
    }, 
    "getallheaders": {
        "description": "Fetches all HTTP headers from the current request.", 
        "name": "getallheaders", 
        "overview": "array getallheaders ( void )", 
        "parameters": [], 
        "path": "php/function.getallheaders", 
        "type": "Apache"
    }, 
    "getcwd": {
        "description": "Gets the current working directory.", 
        "name": "getcwd", 
        "overview": "string getcwd ( void )", 
        "parameters": [], 
        "path": "php/function.getcwd", 
        "type": "File System"
    }, 
    "getdate": {
        "description": "Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given.", 
        "name": "getdate", 
        "overview": "array getdate ([ int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.getdate", 
        "type": "Date and Time"
    }, 
    "getenv": {
        "description": "Gets the value of an environment variable.", 
        "name": "getenv", 
        "overview": "string getenv ( string $varname )", 
        "parameters": [
            {
                "descr": "The variable name.", 
                "name": "varname"
            }
        ], 
        "path": "php/function.getenv", 
        "type": "Language"
    }, 
    "gethostbyaddr": {
        "description": "Returns the host name of the Internet host specified by ip_address.", 
        "name": "gethostbyaddr", 
        "overview": "string gethostbyaddr ( string $ip_address )", 
        "parameters": [
            {
                "descr": "The host IP address.", 
                "name": "ip_address"
            }
        ], 
        "path": "php/function.gethostbyaddr", 
        "type": "Networking"
    }, 
    "gethostbyname": {
        "description": "Returns the IPv4 address of the Internet host specified by hostname.", 
        "name": "gethostbyname", 
        "overview": "string gethostbyname ( string $hostname )", 
        "parameters": [
            {
                "descr": "The host name.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.gethostbyname", 
        "type": "Networking"
    }, 
    "gethostbynamel": {
        "description": "Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves.", 
        "name": "gethostbynamel", 
        "overview": "array gethostbynamel ( string $hostname )", 
        "parameters": [
            {
                "descr": "The host name.", 
                "name": "hostname"
            }
        ], 
        "path": "php/function.gethostbynamel", 
        "type": "Networking"
    }, 
    "gethostname": {
        "description": "gethostname() gets the standard host name for the local machine.", 
        "name": "gethostname", 
        "overview": "string gethostname ( void )", 
        "parameters": [], 
        "path": "php/function.gethostname", 
        "type": "Networking"
    }, 
    "getimagesize": {
        "description": "The getimagesize() function will determine the size of any given image file and return the dimensions along with the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondant HTTP content type.", 
        "name": "getimagesize", 
        "overview": "array getimagesize ( string $filename [, array &$imageinfo ] )", 
        "parameters": [
            {
                "descr": "This parameter specifies the file you wish to retrieve information about. ", 
                "name": "filename"
            }, 
            {
                "descr": "This optional parameter allows you to extract some extended information from the image file. ", 
                "name": "imageinfo"
            }
        ], 
        "path": "php/function.getimagesize", 
        "type": "Image"
    }, 
    "getimagesizefromstring": {
        "description": "Identical to getimagesize() except that getimagesizefromstring() accepts a string instead of a file name as the first parameter.", 
        "name": "getimagesizefromstring", 
        "overview": "array getimagesizefromstring ( string $imagedata [, array &$imageinfo ] )", 
        "parameters": [
            {
                "descr": "The image data, as a string.", 
                "name": "imagedata"
            }, 
            {
                "descr": "See getimagesize().", 
                "name": "imageinfo"
            }
        ], 
        "path": "php/function.getimagesizefromstring", 
        "type": "Image"
    }, 
    "getlastmod": {
        "description": "Gets the time of the last modification of the main script of execution.", 
        "name": "getlastmod", 
        "overview": "int getlastmod ( void )", 
        "parameters": [], 
        "path": "php/function.getlastmod", 
        "type": "Language"
    }, 
    "getmxrr": {
        "description": "Searches DNS for MX records corresponding to hostname.", 
        "name": "getmxrr", 
        "overview": "bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )", 
        "parameters": [
            {
                "descr": "The Internet host name.", 
                "name": "hostname"
            }, 
            {
                "descr": "A list of the MX records found is placed into the array mxhosts.", 
                "name": "mxhosts"
            }, 
            {
                "descr": "If the weight array is given, it will be filled with the weight information gathered.", 
                "name": "weight"
            }
        ], 
        "path": "php/function.getmxrr", 
        "type": "Networking"
    }, 
    "getmygid": {
        "description": "", 
        "name": "getmygid", 
        "overview": "int getmygid ( void )", 
        "parameters": [], 
        "path": "php/function.getmygid", 
        "type": "Language"
    }, 
    "getmyinode": {
        "description": "Gets the inode of the current script.", 
        "name": "getmyinode", 
        "overview": "int getmyinode ( void )", 
        "parameters": [], 
        "path": "php/function.getmyinode", 
        "type": "Language"
    }, 
    "getmypid": {
        "description": "Gets the current PHP process ID.", 
        "name": "getmypid", 
        "overview": "int getmypid ( void )", 
        "parameters": [], 
        "path": "php/function.getmypid", 
        "type": "Language"
    }, 
    "getmyuid": {
        "description": "", 
        "name": "getmyuid", 
        "overview": "int getmyuid ( void )", 
        "parameters": [], 
        "path": "php/function.getmyuid", 
        "type": "Language"
    }, 
    "getopt": {
        "description": "Parses options passed to the script.", 
        "name": "getopt", 
        "overview": "array getopt ( string $options [, array $longopts ] )", 
        "parameters": [
            {
                "descr": "Each character in this string will be used as option characters and matched against options passed to the script starting with a single hyphen (-). ", 
                "name": "options"
            }, 
            {
                "descr": "An array of options. Each element in this array will be used as option strings and matched against options passed to the script starting with two hyphens (--). ", 
                "name": "longopts"
            }
        ], 
        "path": "php/function.getopt", 
        "type": "Language"
    }, 
    "getprotobyname": {
        "description": "getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols.", 
        "name": "getprotobyname", 
        "overview": "int getprotobyname ( string $name )", 
        "parameters": [
            {
                "descr": "The protocol name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.getprotobyname", 
        "type": "Networking"
    }, 
    "getprotobynumber": {
        "description": "getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols.", 
        "name": "getprotobynumber", 
        "overview": "string getprotobynumber ( int $number )", 
        "parameters": [
            {
                "descr": "The protocol number.", 
                "name": "number"
            }
        ], 
        "path": "php/function.getprotobynumber", 
        "type": "Networking"
    }, 
    "getrandmax": {
        "description": "", 
        "name": "getrandmax", 
        "overview": "int getrandmax ( void )", 
        "parameters": [], 
        "path": "php/function.getrandmax", 
        "type": "Mathematics"
    }, 
    "getrusage": {
        "description": "This is an interface to getrusage(2). It gets data returned from the system call.", 
        "name": "getrusage", 
        "overview": "array getrusage ([ int $who = 0 ] )", 
        "parameters": [
            {
                "descr": "If who is 1, getrusage will be called with RUSAGE_CHILDREN.", 
                "name": "who"
            }
        ], 
        "path": "php/function.getrusage", 
        "type": "Language"
    }, 
    "getservbyname": {
        "description": "getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services.", 
        "name": "getservbyname", 
        "overview": "int getservbyname ( string $service , string $protocol )", 
        "parameters": [
            {
                "descr": "The Internet service name, as a string.", 
                "name": "service"
            }, 
            {
                "descr": "protocol is either \"tcp\" or \"udp\" (in lowercase).", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.getservbyname", 
        "type": "Networking"
    }, 
    "getservbyport": {
        "description": "getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services.", 
        "name": "getservbyport", 
        "overview": "string getservbyport ( int $port , string $protocol )", 
        "parameters": [
            {
                "descr": "The port number.", 
                "name": "port"
            }, 
            {
                "descr": "protocol is either \"tcp\" or \"udp\" (in lowercase).", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.getservbyport", 
        "type": "Networking"
    }, 
    "gettext": {
        "description": "Looks up a message in the current domain.", 
        "name": "gettext", 
        "overview": "string gettext ( string $message )", 
        "parameters": [
            {
                "descr": "The message being translated.", 
                "name": "message"
            }
        ], 
        "path": "php/function.gettext", 
        "type": "Encoding"
    }, 
    "gettimeofday": {
        "description": "This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.", 
        "name": "gettimeofday", 
        "overview": "mixed gettimeofday ([ bool $return_float = false ] )", 
        "parameters": [
            {
                "descr": "When set to TRUE, a float instead of an array is returned.", 
                "name": "return_float"
            }
        ], 
        "path": "php/function.gettimeofday", 
        "type": "Date and Time"
    }, 
    "gettype": {
        "description": "Returns the type of the PHP variable var. For type checking, use is_* functions.", 
        "name": "gettype", 
        "overview": "string gettype ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being type checked.", 
                "name": "var"
            }
        ], 
        "path": "php/function.gettype", 
        "type": "Variables"
    }, 
    "glob": {
        "description": "The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells.", 
        "name": "glob", 
        "overview": "array glob ( string $pattern [, int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "The pattern. No tilde expansion or parameter substitution is done.", 
                "name": "pattern"
            }, 
            {
                "descr": "Valid flags:   GLOB_MARK - Adds a slash to each directory returned     GLOB_NOSORT - Return files as they appear in the directory (no sorting)     GLOB_NOCHECK - Return the search pattern if no files matching it were found     GLOB_NOESCAPE - Backslashes do not quote metacharacters     GLOB_BRACE - Expands {a,b,c} to match 'a', 'b', or 'c'     GLOB_ONLYDIR - Return only directory entries which match the pattern     GLOB_ERR - Stop on read errors (like unreadable directories), by default errors are ignored.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.glob", 
        "type": "File System"
    }, 
    "gmdate": {
        "description": "Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).", 
        "name": "gmdate", 
        "overview": "string gmdate ( string $format [, int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "The format of the outputted date string. ", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.gmdate", 
        "type": "Date and Time"
    }, 
    "gmmktime": {
        "description": "Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used.", 
        "name": "gmmktime", 
        "overview": "int gmmktime ([ int $hour = gmdate(\"H\") [, int $minute = gmdate(\"i\") [, int $second = gmdate(\"s\") [, int $month = gmdate(\"n\") [, int $day = gmdate(\"j\") [, int $year = gmdate(\"Y\") [, int $is_dst = -1 ]]]]]]] )", 
        "parameters": [
            {
                "descr": "The number of the hour relative to the start of the day determined by month, day and year. ", 
                "name": "hour"
            }, 
            {
                "descr": "The number of the minute relative to the start of the hour. ", 
                "name": "minute"
            }, 
            {
                "descr": "The number of seconds relative to the start of the minute. ", 
                "name": "second"
            }, 
            {
                "descr": "The number of the month relative to the end of the previous year. ", 
                "name": "month"
            }, 
            {
                "descr": "The number of the day relative to the end of the previous month. ", 
                "name": "day"
            }, 
            {
                "descr": "The year", 
                "name": "year"
            }, 
            {
                "descr": "Parameters always represent a GMT date so is_dst doesn't influence the result.", 
                "name": "is_dst"
            }
        ], 
        "path": "php/function.gmmktime", 
        "type": "Date and Time"
    }, 
    "gmstrftime": {
        "description": "Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints \"Dec 31 1998 20:00:00\", while the second prints \"Jan 01 1999 01:00:00\".", 
        "name": "gmstrftime", 
        "overview": "string gmstrftime ( string $format [, int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "See description in strftime().", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.gmstrftime", 
        "type": "Date and Time"
    }, 
    "grapheme_extract": {
        "description": "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.", 
        "name": "grapheme_extract", 
        "overview": "string grapheme_extract ( string $haystack , int $size [, int $extract_type [, int $start = 0 [, int &$next ]]] )", 
        "parameters": [
            {
                "descr": "String to search.", 
                "name": "haystack"
            }, 
            {
                "descr": "Maximum number items - based on the $extract_type - to return.", 
                "name": "size"
            }, 
            {
                "descr": "Defines the type of units referred to by the $size parameter:  GRAPHEME_EXTR_COUNT (default) - $size is the number of default grapheme clusters to extract. ", 
                "name": "extract_type"
            }, 
            {
                "descr": "Starting position in $haystack in bytes - if given, it must be zero or a positive value that is less than or equal to the length of $haystack in bytes. ", 
                "name": "start"
            }, 
            {
                "descr": "Reference to a value that will be set to the next starting position. ", 
                "name": "next"
            }
        ], 
        "path": "php/function.grapheme-extract", 
        "type": "Internationalization"
    }, 
    "grapheme_stripos": {
        "description": "Find position (in grapheme units) of first occurrence of a case-insensitive string", 
        "name": "grapheme_stripos", 
        "overview": "int grapheme_stripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-stripos", 
        "type": "Internationalization"
    }, 
    "grapheme_stristr": {
        "description": "Returns part of haystack string starting from and including the first occurrence of case-insensitive needle to the end of haystack.", 
        "name": "grapheme_stristr", 
        "overview": "string grapheme_stristr ( string $haystack , string $needle [, bool $before_needle = false ] )", 
        "parameters": [
            {
                "descr": "The input string. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, grapheme_strstr() returns the part of the haystack before the first occurrence of the needle (excluding needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.grapheme-stristr", 
        "type": "Internationalization"
    }, 
    "grapheme_strlen": {
        "description": "Get string length in grapheme units (not bytes or characters)", 
        "name": "grapheme_strlen", 
        "overview": "int grapheme_strlen ( string $input )", 
        "parameters": [
            {
                "descr": "The string being measured for length. ", 
                "name": "input"
            }
        ], 
        "path": "php/function.grapheme-strlen", 
        "type": "Internationalization"
    }, 
    "grapheme_strpos": {
        "description": "Find position (in grapheme units) of first occurrence of a string", 
        "name": "grapheme_strpos", 
        "overview": "int grapheme_strpos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-strpos", 
        "type": "Internationalization"
    }, 
    "grapheme_strripos": {
        "description": "Find position (in grapheme units) of last occurrence of a case-insensitive string", 
        "name": "grapheme_strripos", 
        "overview": "int grapheme_strripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-strripos", 
        "type": "Internationalization"
    }, 
    "grapheme_strrpos": {
        "description": "Find position (in grapheme units) of last occurrence of a string", 
        "name": "grapheme_strrpos", 
        "overview": "int grapheme_strrpos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to look in. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.grapheme-strrpos", 
        "type": "Internationalization"
    }, 
    "grapheme_strstr": {
        "description": "Returns part of haystack string from the first occurrence of needle to the end of haystack (including the needle).", 
        "name": "grapheme_strstr", 
        "overview": "string grapheme_strstr ( string $haystack , string $needle [, bool $before_needle = false ] )", 
        "parameters": [
            {
                "descr": "The input string. Must be valid UTF-8.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to look for. Must be valid UTF-8.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, grapheme_strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.grapheme-strstr", 
        "type": "Internationalization"
    }, 
    "grapheme_substr": {
        "description": "Return part of a string", 
        "name": "grapheme_substr", 
        "overview": "int grapheme_substr ( string $string , int $start [, int $length ] )", 
        "parameters": [
            {
                "descr": "The input string. Must be valid UTF-8.", 
                "name": "string"
            }, 
            {
                "descr": "Start position in default grapheme units. ", 
                "name": "start"
            }, 
            {
                "descr": "Length in grapheme units. If $length is given and is positive, the string returned will contain at most $length grapheme units beginning from $start (depending on the length of string). ", 
                "name": "length"
            }
        ], 
        "path": "php/function.grapheme-substr", 
        "type": "Internationalization"
    }, 
    "gzclose": {
        "description": "Closes the given gz-file pointer.", 
        "name": "gzclose", 
        "overview": "bool gzclose ( resource $zp )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzclose", 
        "type": "Compression"
    }, 
    "gzcompress": {
        "description": "This function compress the given string using the ZLIB data format.", 
        "name": "gzcompress", 
        "overview": "string gzcompress ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]] )", 
        "parameters": [
            {
                "descr": "The data to compress.", 
                "name": "data"
            }, 
            {
                "descr": "The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. ", 
                "name": "level"
            }, 
            {
                "descr": "One of ZLIB_ENCODING_* constants.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.gzcompress", 
        "type": "Compression"
    }, 
    "gzdecode": {
        "description": "This function returns a decoded version of the input data.", 
        "name": "gzdecode", 
        "overview": "string gzdecode ( string $data [, int $length ] )", 
        "parameters": [
            {
                "descr": "The data to decode, encoded by gzencode().", 
                "name": "data"
            }, 
            {
                "descr": "The maximum length of data to decode.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzdecode", 
        "type": "Compression"
    }, 
    "gzdeflate": {
        "description": "This function compresses the given string using the DEFLATE data format.", 
        "name": "gzdeflate", 
        "overview": "string gzdeflate ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]] )", 
        "parameters": [
            {
                "descr": "The data to deflate.", 
                "name": "data"
            }, 
            {
                "descr": "The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. ", 
                "name": "level"
            }, 
            {
                "descr": "One of ZLIB_ENCODING_* constants.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.gzdeflate", 
        "type": "Compression"
    }, 
    "gzencode": {
        "description": "This function returns a compressed version of the input data compatible with the output of the gzip program.", 
        "name": "gzencode", 
        "overview": "string gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] )", 
        "parameters": [
            {
                "descr": "The data to encode.", 
                "name": "data"
            }, 
            {
                "descr": "The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. ", 
                "name": "level"
            }, 
            {
                "descr": "The encoding mode. Can be FORCE_GZIP (the default) or FORCE_DEFLATE. ", 
                "name": "encoding_mode"
            }
        ], 
        "path": "php/function.gzencode", 
        "type": "Compression"
    }, 
    "gzeof": {
        "description": "Tests the given GZ file pointer for EOF.", 
        "name": "gzeof", 
        "overview": "int gzeof ( resource $zp )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzeof", 
        "type": "Compression"
    }, 
    "gzfile": {
        "description": "This function is identical to readgzfile(), except that it returns the file in an array.", 
        "name": "gzfile", 
        "overview": "array gzfile ( string $filename [, int $use_include_path = 0 ] )", 
        "parameters": [
            {
                "descr": "The file name.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set this optional parameter to 1, if you want to search for the file in the include_path too.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.gzfile", 
        "type": "Compression"
    }, 
    "gzgetc": {
        "description": "Returns a string containing a single (uncompressed) character read from the given gz-file pointer.", 
        "name": "gzgetc", 
        "overview": "string gzgetc ( resource $zp )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzgetc", 
        "type": "Compression"
    }, 
    "gzgets": {
        "description": "Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).", 
        "name": "gzgets", 
        "overview": "string gzgets ( resource $zp , int $length )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The length of data to get.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzgets", 
        "type": "Compression"
    }, 
    "gzgetss": {
        "description": "Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.", 
        "name": "gzgetss", 
        "overview": "string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The length of data to get.", 
                "name": "length"
            }, 
            {
                "descr": "You can use this optional parameter to specify tags which should not be stripped.", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/function.gzgetss", 
        "type": "Compression"
    }, 
    "gzinflate": {
        "description": "This function inflates a deflated string.", 
        "name": "gzinflate", 
        "overview": "string gzinflate ( string $data [, int $length = 0 ] )", 
        "parameters": [
            {
                "descr": "The data compressed by gzdeflate().", 
                "name": "data"
            }, 
            {
                "descr": "The maximum length of data to decode.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzinflate", 
        "type": "Compression"
    }, 
    "gzopen": {
        "description": "Opens a gzip (.gz) file for reading or writing.", 
        "name": "gzopen", 
        "overview": "resource gzopen ( string $filename , string $mode [, int $use_include_path = 0 ] )", 
        "parameters": [
            {
                "descr": "The file name.", 
                "name": "filename"
            }, 
            {
                "descr": "As in fopen() (rb or wb) but can also include a compression level (wb9) or a strategy: f for filtered data as in wb6f, h for Huffman only compression as in wb1h. ", 
                "name": "mode"
            }, 
            {
                "descr": "You can set this optional parameter to 1, if you want to search for the file in the include_path too.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.gzopen", 
        "type": "Compression"
    }, 
    "gzpassthru": {
        "description": "Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output.", 
        "name": "gzpassthru", 
        "overview": "int gzpassthru ( resource $zp )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzpassthru", 
        "type": "Compression"
    }, 
    "gzread": {
        "description": "gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.", 
        "name": "gzread", 
        "overview": "string gzread ( resource $zp , int $length )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The number of bytes to read.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzread", 
        "type": "Compression"
    }, 
    "gzrewind": {
        "description": "Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.", 
        "name": "gzrewind", 
        "overview": "bool gzrewind ( resource $zp )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gzrewind", 
        "type": "Compression"
    }, 
    "gzseek": {
        "description": "Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET).", 
        "name": "gzseek", 
        "overview": "int gzseek ( resource $zp , int $offset [, int $whence = SEEK_SET ] )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The seeked offset.", 
                "name": "offset"
            }, 
            {
                "descr": "whence values are: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/function.gzseek", 
        "type": "Compression"
    }, 
    "gztell": {
        "description": "Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.", 
        "name": "gztell", 
        "overview": "int gztell ( resource $zp )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }
        ], 
        "path": "php/function.gztell", 
        "type": "Compression"
    }, 
    "gzuncompress": {
        "description": "This function uncompress a compressed string.", 
        "name": "gzuncompress", 
        "overview": "string gzuncompress ( string $data [, int $length = 0 ] )", 
        "parameters": [
            {
                "descr": "The data compressed by gzcompress().", 
                "name": "data"
            }, 
            {
                "descr": "The maximum length of data to decode.", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzuncompress", 
        "type": "Compression"
    }, 
    "gzwrite": {
        "description": "gzwrite() writes the contents of string to the given gz-file.", 
        "name": "gzwrite", 
        "overview": "int gzwrite ( resource $zp , string $string [, int $length ] )", 
        "parameters": [
            {
                "descr": "The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().", 
                "name": "zp"
            }, 
            {
                "descr": "The string to write.", 
                "name": "string"
            }, 
            {
                "descr": "The number of uncompressed bytes to write. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.gzwrite", 
        "type": "Compression"
    }, 
    "hash": {
        "description": "", 
        "name": "hash", 
        "overview": "string hash ( string $algo , string $data [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "Message to be hashed.", 
                "name": "data"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash", 
        "type": "Cryptography"
    }, 
    "hash_algos": {
        "description": "", 
        "name": "hash_algos", 
        "overview": "array hash_algos ( void )", 
        "parameters": [], 
        "path": "php/function.hash-algos", 
        "type": "Cryptography"
    }, 
    "hash_copy": {
        "description": "", 
        "name": "hash_copy", 
        "overview": "resource hash_copy ( resource $context )", 
        "parameters": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }
        ], 
        "path": "php/function.hash-copy", 
        "type": "Cryptography"
    }, 
    "hash_file": {
        "description": "", 
        "name": "hash_file", 
        "overview": "string hash_file ( string $algo , string $filename [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "URL describing location of file to be hashed; Supports fopen wrappers.", 
                "name": "filename"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-file", 
        "type": "Cryptography"
    }, 
    "hash_final": {
        "description": "", 
        "name": "hash_final", 
        "overview": "string hash_final ( resource $context [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-final", 
        "type": "Cryptography"
    }, 
    "hash_hmac": {
        "description": "", 
        "name": "hash_hmac", 
        "overview": "string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "Message to be hashed.", 
                "name": "data"
            }, 
            {
                "descr": "Shared secret key used for generating the HMAC variant of the message digest.", 
                "name": "key"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-hmac", 
        "type": "Cryptography"
    }, 
    "hash_hmac_file": {
        "description": "", 
        "name": "hash_hmac_file", 
        "overview": "string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "URL describing location of file to be hashed; Supports fopen wrappers.", 
                "name": "filename"
            }, 
            {
                "descr": "Shared secret key used for generating the HMAC variant of the message digest.", 
                "name": "key"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-hmac-file", 
        "type": "Cryptography"
    }, 
    "hash_init": {
        "description": "", 
        "name": "hash_init", 
        "overview": "resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )", 
        "parameters": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "Optional settings for hash generation, currently supports only one option: HASH_HMAC. ", 
                "name": "options"
            }, 
            {
                "descr": "When HASH_HMAC is specified for options, a shared secret key to be used with the HMAC hashing method must be supplied in this parameter.", 
                "name": "key"
            }
        ], 
        "path": "php/function.hash-init", 
        "type": "Cryptography"
    }, 
    "hash_pbkdf2": {
        "description": "", 
        "name": "hash_pbkdf2", 
        "overview": "string hash_pbkdf2 ( string $algo , string $password , string $salt , int $iterations [, int $length = 0 [, bool $raw_output = false ]] )", 
        "parameters": [
            {
                "descr": "Name of selected hashing algorithm (i.e. ", 
                "name": "algo"
            }, 
            {
                "descr": "The password to use for the derivation.", 
                "name": "password"
            }, 
            {
                "descr": "The salt to use for the derivation. ", 
                "name": "salt"
            }, 
            {
                "descr": "The number of internal iterations to perform for the derivation.", 
                "name": "iterations"
            }, 
            {
                "descr": "The length of the output string. ", 
                "name": "length"
            }, 
            {
                "descr": "When set to TRUE, outputs raw binary data. ", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.hash-pbkdf2", 
        "type": "Cryptography"
    }, 
    "hash_update": {
        "description": "", 
        "name": "hash_update", 
        "overview": "bool hash_update ( resource $context , string $data )", 
        "parameters": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }, 
            {
                "descr": "Message to be included in the hash digest.", 
                "name": "data"
            }
        ], 
        "path": "php/function.hash-update", 
        "type": "Cryptography"
    }, 
    "hash_update_file": {
        "description": "", 
        "name": "hash_update_file", 
        "overview": "bool hash_update_file ( resource $hcontext , string $filename [, resource $scontext = NULL ] )", 
        "parameters": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "hcontext"
            }, 
            {
                "descr": "URL describing location of file to be hashed; Supports fopen wrappers.", 
                "name": "filename"
            }, 
            {
                "descr": "Stream context as returned by stream_context_create().", 
                "name": "scontext"
            }
        ], 
        "path": "php/function.hash-update-file", 
        "type": "Cryptography"
    }, 
    "hash_update_stream": {
        "description": "", 
        "name": "hash_update_stream", 
        "overview": "int hash_update_stream ( resource $context , resource $handle [, int $length = -1 ] )", 
        "parameters": [
            {
                "descr": "Hashing context returned by hash_init().", 
                "name": "context"
            }, 
            {
                "descr": "Open file handle as returned by any stream creation function.", 
                "name": "handle"
            }, 
            {
                "descr": "Maximum number of characters to copy from handle into the hashing context.", 
                "name": "length"
            }
        ], 
        "path": "php/function.hash-update-stream", 
        "type": "Cryptography"
    }, 
    "header": {
        "description": "header() is used to send a raw HTTP header. See the \u00bb HTTP/1.1 specification for more information on HTTP headers.", 
        "name": "header", 
        "overview": "void header ( string $string [, bool $replace = true [, int $http_response_code ]] )", 
        "parameters": [
            {
                "descr": "The header string.   There are two special-case header calls. ", 
                "name": "string"
            }, 
            {
                "descr": "The optional replace parameter indicates whether the header should replace a previous similar header, or add a second header of the same type. ", 
                "name": "replace"
            }, 
            {
                "descr": "Forces the HTTP response code to the specified value. ", 
                "name": "http_response_code"
            }
        ], 
        "path": "php/function.header", 
        "type": "Networking"
    }, 
    "header_register_callback": {
        "description": "Registers a function that will be called when PHP starts sending output.", 
        "name": "header_register_callback", 
        "overview": "bool header_register_callback ( callable $callback )", 
        "parameters": [
            {
                "descr": "Function called just before the headers are sent. ", 
                "name": "callback"
            }
        ], 
        "path": "php/function.header-register-callback", 
        "type": "Networking"
    }, 
    "header_remove": {
        "description": "Removes an HTTP header previously set using header().", 
        "name": "header_remove", 
        "overview": "void header_remove ([ string $name ] )", 
        "parameters": [
            {
                "descr": "The header name to be removed.  Note:  This parameter is case-insensitive.", 
                "name": "name"
            }
        ], 
        "path": "php/function.header-remove", 
        "type": "Networking"
    }, 
    "headers_list": {
        "description": "headers_list() will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent().", 
        "name": "headers_list", 
        "overview": "array headers_list ( void )", 
        "parameters": [], 
        "path": "php/function.headers-list", 
        "type": "Networking"
    }, 
    "headers_sent": {
        "description": "Checks if or where headers have been sent.", 
        "name": "headers_sent", 
        "overview": "bool headers_sent ([ string &$file [, int &$line ]] )", 
        "parameters": [
            {
                "descr": "If the optional file and line parameters are set, headers_sent() will put the PHP source file name and line number where output started in the file and line variables.", 
                "name": "file"
            }, 
            {
                "descr": "The line number where the output started.", 
                "name": "line"
            }
        ], 
        "path": "php/function.headers-sent", 
        "type": "Networking"
    }, 
    "hebrev": {
        "description": "Converts logical Hebrew text to visual text.", 
        "name": "hebrev", 
        "overview": "string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )", 
        "parameters": [
            {
                "descr": "A Hebrew input string.", 
                "name": "hebrew_text"
            }, 
            {
                "descr": "This optional parameter indicates maximum number of characters per line that will be returned.", 
                "name": "max_chars_per_line"
            }
        ], 
        "path": "php/function.hebrev", 
        "type": "String"
    }, 
    "hebrevc": {
        "description": "This function is similar to hebrev() with the difference that it converts newlines (\\n) to \"<br>\\n\".", 
        "name": "hebrevc", 
        "overview": "string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )", 
        "parameters": [
            {
                "descr": "A Hebrew input string.", 
                "name": "hebrew_text"
            }, 
            {
                "descr": "This optional parameter indicates maximum number of characters per line that will be returned.", 
                "name": "max_chars_per_line"
            }
        ], 
        "path": "php/function.hebrevc", 
        "type": "String"
    }, 
    "hex2bin": {
        "description": "Decodes a hexadecimally encoded binary string.", 
        "name": "hex2bin", 
        "overview": "string hex2bin ( string $data )", 
        "parameters": [
            {
                "descr": "Hexadecimal representation of data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.hex2bin", 
        "type": "String"
    }, 
    "hexdec": {
        "description": "Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.", 
        "name": "hexdec", 
        "overview": "number hexdec ( string $hex_string )", 
        "parameters": [
            {
                "descr": "The hexadecimal string to convert", 
                "name": "hex_string"
            }
        ], 
        "path": "php/function.hexdec", 
        "type": "Mathematics"
    }, 
    "highlight_file": {
        "description": "Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP.", 
        "name": "highlight_file", 
        "overview": "mixed highlight_file ( string $filename [, bool $return = false ] )", 
        "parameters": [
            {
                "descr": "Path to the PHP file to be highlighted.", 
                "name": "filename"
            }, 
            {
                "descr": "Set this parameter to TRUE to make this function return the highlighted code.", 
                "name": "return"
            }
        ], 
        "path": "php/function.highlight-file", 
        "type": "Language"
    }, 
    "highlight_string": {
        "description": "", 
        "name": "highlight_string", 
        "overview": "mixed highlight_string ( string $str [, bool $return = false ] )", 
        "parameters": [
            {
                "descr": "The PHP code to be highlighted. ", 
                "name": "str"
            }, 
            {
                "descr": "Set this parameter to TRUE to make this function return the highlighted code.", 
                "name": "return"
            }
        ], 
        "path": "php/function.highlight-string", 
        "type": "Language"
    }, 
    "html_entity_decode": {
        "description": "html_entity_decode() is the opposite of htmlentities() in that it converts all HTML entities in the string to their applicable characters.", 
        "name": "html_entity_decode", 
        "overview": "string html_entity_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. ", 
                "name": "flags"
            }, 
            {
                "descr": "Encoding to use. If omitted, the default value for this argument is ISO-8859-1 in versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.html-entity-decode", 
        "type": "String"
    }, 
    "htmlentities": {
        "description": "This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities.", 
        "name": "htmlentities", 
        "overview": "string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. ", 
                "name": "flags"
            }, 
            {
                "descr": "Like htmlspecialchars(), htmlentities() takes an optional third argument encoding which defines encoding used in conversion. ", 
                "name": "encoding"
            }, 
            {
                "descr": "When double_encode is turned off PHP will not encode existing html entities. ", 
                "name": "double_encode"
            }
        ], 
        "path": "php/function.htmlentities", 
        "type": "String"
    }, 
    "htmlspecialchars": {
        "description": "Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with these conversions made. If you require all input substrings that have associated named entities to be translated, use htmlentities() instead.", 
        "name": "htmlspecialchars", 
        "overview": "string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )", 
        "parameters": [
            {
                "descr": "The string being converted.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. ", 
                "name": "flags"
            }, 
            {
                "descr": "Defines encoding used in conversion. ", 
                "name": "encoding"
            }, 
            {
                "descr": "When double_encode is turned off PHP will not encode existing html entities, the default is to convert everything.", 
                "name": "double_encode"
            }
        ], 
        "path": "php/function.htmlspecialchars", 
        "type": "String"
    }, 
    "htmlspecialchars_decode": {
        "description": "This function is the opposite of htmlspecialchars(). It converts special HTML entities back to characters.", 
        "name": "htmlspecialchars_decode", 
        "overview": "string htmlspecialchars_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ] )", 
        "parameters": [
            {
                "descr": "The string to decode.", 
                "name": "string"
            }, 
            {
                "descr": "A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.htmlspecialchars-decode", 
        "type": "String"
    }, 
    "http_build_cookie": {
        "description": "Build a cookie string from an array/object like returned by http_parse_cookie().", 
        "name": "http_build_cookie", 
        "overview": "string http_build_cookie ( array $cookie )", 
        "parameters": [
            {
                "descr": "a cookie list like returned from http_parse_cookie()", 
                "name": "cookie"
            }
        ], 
        "path": "php/function.http-build-cookie", 
        "type": "HTTP"
    }, 
    "http_build_query": {
        "description": "Generates a URL-encoded query string from the associative (or indexed) array provided.", 
        "name": "http_build_query", 
        "overview": "string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )", 
        "parameters": [
            {
                "descr": "May be an array or object containing properties. ", 
                "name": "query_data"
            }, 
            {
                "descr": "If numeric indices are used in the base array and this parameter is provided, it will be prepended to the numeric index for elements in the base array only. ", 
                "name": "numeric_prefix"
            }, 
            {
                "descr": "arg_separator.output is used to separate arguments, unless this parameter is specified, and is then used.", 
                "name": "arg_separator"
            }, 
            {
                "descr": "By default, PHP_QUERY_RFC1738.   If enc_type is PHP_QUERY_RFC1738, then encoding is performed per \u00bb RFC 1738 and the application/x-www-form-urlencoded media type, which implies that spaces are encoded as plus (+) signs.   If enc_type is PHP_QUERY_RFC3986, then encoding is performed according to \u00bb RFC 3986, and spaces will be percent encoded (%20).", 
                "name": "enc_type"
            }
        ], 
        "path": "php/function.http-build-query", 
        "type": "Networking"
    }, 
    "http_build_str": {
        "description": "Builds a query string from an array of query variables. In effect, this function is the opposite of parse_str().", 
        "name": "http_build_str", 
        "overview": "string http_build_str ( array $query [, string $prefix [, string $arg_separator = ini_get(\"arg_separator.output\") ]] )", 
        "parameters": [
            {
                "descr": "associative array of query string parameters", 
                "name": "query"
            }, 
            {
                "descr": "top level prefix", 
                "name": "prefix"
            }, 
            {
                "descr": "argument separator to use (by default the INI setting arg_separator.output will be used, or \"&\" if neither is set", 
                "name": "arg_separator"
            }
        ], 
        "path": "php/function.http-build-str", 
        "type": "HTTP"
    }, 
    "http_build_url": {
        "description": "Build a URL.", 
        "name": "http_build_url", 
        "overview": "string http_build_url ([ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url ]]]] )", 
        "parameters": [
            {
                "descr": "(part(s) of) an URL in form of a string or associative array like parse_url() returns", 
                "name": "url"
            }, 
            {
                "descr": "same as the first argument", 
                "name": "parts"
            }, 
            {
                "descr": "a bitmask of binary or'ed HTTP_URL constants; HTTP_URL_REPLACE is the default", 
                "name": "flags"
            }, 
            {
                "descr": "if set, it will be filled with the parts of the composed url like parse_url() would return", 
                "name": "new_url"
            }
        ], 
        "path": "php/function.http-build-url", 
        "type": "HTTP"
    }, 
    "http_cache_etag": {
        "description": "Attempts to cache the sent entity by its ETag, either supplied or generated by the hash algorithm specified by the INI setting http.etag.mode.", 
        "name": "http_cache_etag", 
        "overview": "bool http_cache_etag ([ string $etag ] )", 
        "parameters": [
            {
                "descr": "custom ETag", 
                "name": "etag"
            }
        ], 
        "path": "php/function.http-cache-etag", 
        "type": "HTTP"
    }, 
    "http_cache_last_modified": {
        "description": "Attempts to cache the sent entity by its last modification date.", 
        "name": "http_cache_last_modified", 
        "overview": "bool http_cache_last_modified ([ int $timestamp_or_expires ] )", 
        "parameters": [
            {
                "descr": "Unix timestamp", 
                "name": "timestamp_or_expires"
            }
        ], 
        "path": "php/function.http-cache-last-modified", 
        "type": "HTTP"
    }, 
    "http_chunked_decode": {
        "description": "Decodes a string which is HTTP-chunked encoded.", 
        "name": "http_chunked_decode", 
        "overview": "string http_chunked_decode ( string $encoded )", 
        "parameters": [
            {
                "descr": "chunked encoded string", 
                "name": "encoded"
            }
        ], 
        "path": "php/function.http-chunked-decode", 
        "type": "HTTP"
    }, 
    "http_date": {
        "description": "Compose a valid HTTP date regarding RFC 1123 looking like: Wed, 22 Dec 2004 11:34:47 GMT.", 
        "name": "http_date", 
        "overview": "string http_date ([ int $timestamp ] )", 
        "parameters": [
            {
                "descr": "Unix timestamp; current time if omitted", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.http-date", 
        "type": "HTTP"
    }, 
    "http_deflate": {
        "description": "Compress data with gzip, zlib AKA deflate or raw deflate encoding.", 
        "name": "http_deflate", 
        "overview": "string http_deflate ( string $data [, int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "String containing the data that should be encoded", 
                "name": "data"
            }, 
            {
                "descr": "deflate options", 
                "name": "flags"
            }
        ], 
        "path": "php/function.http-deflate", 
        "type": "HTTP"
    }, 
    "http_get": {
        "description": "Performs an HTTP GET request on the supplied url.", 
        "name": "http_get", 
        "overview": "string http_get ( string $url [, array $options [, array &$info ]] )", 
        "parameters": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Will be filled with request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-get", 
        "type": "HTTP"
    }, 
    "http_get_request_body": {
        "description": "Get the raw request body (e.g. POST or PUT data).", 
        "name": "http_get_request_body", 
        "overview": "string http_get_request_body ( void )", 
        "parameters": [], 
        "path": "php/function.http-get-request-body", 
        "type": "HTTP"
    }, 
    "http_get_request_body_stream": {
        "description": "Create a stream to read the raw request body (e.g. POST or PUT data).", 
        "name": "http_get_request_body_stream", 
        "overview": "resource http_get_request_body_stream ( void )", 
        "parameters": [], 
        "path": "php/function.http-get-request-body-stream", 
        "type": "HTTP"
    }, 
    "http_get_request_headers": {
        "description": "Get a list of incoming HTTP headers.", 
        "name": "http_get_request_headers", 
        "overview": "array http_get_request_headers ( void )", 
        "parameters": [], 
        "path": "php/function.http-get-request-headers", 
        "type": "HTTP"
    }, 
    "http_head": {
        "description": "Performs an HTTP HEAD request on the supplied url.", 
        "name": "http_head", 
        "overview": "string http_head ( string $url [, array $options [, array &$info ]] )", 
        "parameters": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-head", 
        "type": "HTTP"
    }, 
    "http_inflate": {
        "description": "Decompress data compressed with either gzip, deflate AKA zlib or raw deflate encoding.", 
        "name": "http_inflate", 
        "overview": "string http_inflate ( string $data )", 
        "parameters": [
            {
                "descr": "string containing the compressed data", 
                "name": "data"
            }
        ], 
        "path": "php/function.http-inflate", 
        "type": "HTTP"
    }, 
    "http_match_etag": {
        "description": "Matches the given ETag against the clients If-Match resp. If-None-Match HTTP headers.", 
        "name": "http_match_etag", 
        "overview": "bool http_match_etag ( string $etag [, bool $for_range = false ] )", 
        "parameters": [
            {
                "descr": "the ETag to match", 
                "name": "etag"
            }, 
            {
                "descr": "if set to TRUE, the header usually used to validate HTTP ranges will be checked", 
                "name": "for_range"
            }
        ], 
        "path": "php/function.http-match-etag", 
        "type": "HTTP"
    }, 
    "http_match_modified": {
        "description": "Matches the given Unix timestamp against the clients If-Modified-Since resp. If-Unmodified-Since HTTP headers.", 
        "name": "http_match_modified", 
        "overview": "bool http_match_modified ([ int $timestamp = -1 [, bool $for_range = false ]] )", 
        "parameters": [
            {
                "descr": "Unix timestamp; current time, if omitted", 
                "name": "timestamp"
            }, 
            {
                "descr": "if set to TRUE, the header usually used to validate HTTP ranges will be checked", 
                "name": "for_range"
            }
        ], 
        "path": "php/function.http-match-modified", 
        "type": "HTTP"
    }, 
    "http_match_request_header": {
        "description": "Match an incoming HTTP header.", 
        "name": "http_match_request_header", 
        "overview": "bool http_match_request_header ( string $header , string $value [, bool $match_case = false ] )", 
        "parameters": [
            {
                "descr": "the header name (case-insensitive)", 
                "name": "header"
            }, 
            {
                "descr": "the header value that should be compared", 
                "name": "value"
            }, 
            {
                "descr": "whether the value should be compared case sensitively", 
                "name": "match_case"
            }
        ], 
        "path": "php/function.http-match-request-header", 
        "type": "HTTP"
    }, 
    "http_negotiate_charset": {
        "description": "This function negotiates the clients preferred charset based on its Accept-Charset HTTP header. The qualifier is recognized and charsets without qualifier are rated highest.", 
        "name": "http_negotiate_charset", 
        "overview": "string http_negotiate_charset ( array $supported [, array &$result ] )", 
        "parameters": [
            {
                "descr": "array containing the supported charsets as values", 
                "name": "supported"
            }, 
            {
                "descr": "will be filled with an array containing the negotiation results", 
                "name": "result"
            }
        ], 
        "path": "php/function.http-negotiate-charset", 
        "type": "HTTP"
    }, 
    "http_negotiate_content_type": {
        "description": "This function negotiates the clients preferred content type based on its Accept HTTP header. The qualifier is recognized and content types without qualifier are rated highest.", 
        "name": "http_negotiate_content_type", 
        "overview": "string http_negotiate_content_type ( array $supported [, array &$result ] )", 
        "parameters": [
            {
                "descr": "array containing the supported content types as values", 
                "name": "supported"
            }, 
            {
                "descr": "will be filled with an array containing the negotiation results", 
                "name": "result"
            }
        ], 
        "path": "php/function.http-negotiate-content-type", 
        "type": "HTTP"
    }, 
    "http_negotiate_language": {
        "description": "This function negotiates the clients preferred language based on its Accept-Language HTTP header. The qualifier is recognized and languages without qualifier are rated highest. The qualifier will be decreased by 10% for partial matches (i.e. matching primary language).", 
        "name": "http_negotiate_language", 
        "overview": "string http_negotiate_language ( array $supported [, array &$result ] )", 
        "parameters": [
            {
                "descr": "array containing the supported languages as values", 
                "name": "supported"
            }, 
            {
                "descr": "will be filled with an array containing the negotiation results", 
                "name": "result"
            }
        ], 
        "path": "php/function.http-negotiate-language", 
        "type": "HTTP"
    }, 
    "http_parse_cookie": {
        "description": "Parses HTTP cookies like sent in a response into a struct.", 
        "name": "http_parse_cookie", 
        "overview": "object http_parse_cookie ( string $cookie [, int $flags [, array $allowed_extras ]] )", 
        "parameters": [
            {
                "descr": "string containing the value of a Set-Cookie response header", 
                "name": "cookie"
            }, 
            {
                "descr": "parse flags (HTTP_COOKIE_PARSE_RAW)", 
                "name": "flags"
            }, 
            {
                "descr": "array containing recognized extra keys; by default all unknown keys will be treated as cookie names", 
                "name": "allowed_extras"
            }
        ], 
        "path": "php/function.http-parse-cookie", 
        "type": "HTTP"
    }, 
    "http_parse_headers": {
        "description": "Parses HTTP headers into an associative array.", 
        "name": "http_parse_headers", 
        "overview": "array http_parse_headers ( string $header )", 
        "parameters": [
            {
                "descr": "string containing HTTP headers", 
                "name": "header"
            }
        ], 
        "path": "php/function.http-parse-headers", 
        "type": "HTTP"
    }, 
    "http_parse_message": {
        "description": "Parses the HTTP message into a simple recursive object.", 
        "name": "http_parse_message", 
        "overview": "object http_parse_message ( string $message )", 
        "parameters": [
            {
                "descr": "string containing a single HTTP message or several consecutive HTTP messages", 
                "name": "message"
            }
        ], 
        "path": "php/function.http-parse-message", 
        "type": "HTTP"
    }, 
    "http_parse_params": {
        "description": "Parse parameter list.", 
        "name": "http_parse_params", 
        "overview": "object http_parse_params ( string $param [, int $flags = HTTP_PARAMS_DEFAULT ] )", 
        "parameters": [
            {
                "descr": "Parameters", 
                "name": "param"
            }, 
            {
                "descr": "Parse flags", 
                "name": "flags"
            }
        ], 
        "path": "php/function.http-parse-params", 
        "type": "HTTP"
    }, 
    "http_persistent_handles_clean": {
        "description": "Clean up (close) persistent handles, optionally identified with ident.", 
        "name": "http_persistent_handles_clean", 
        "overview": "string http_persistent_handles_clean ([ string $ident ] )", 
        "parameters": [
            {
                "descr": "the identification string", 
                "name": "clean"
            }
        ], 
        "path": "php/function.http-persistent-handles-clean", 
        "type": "HTTP"
    }, 
    "http_persistent_handles_count": {
        "description": "List statistics about persistent handles usage.", 
        "name": "http_persistent_handles_count", 
        "overview": "object http_persistent_handles_count ( void )", 
        "parameters": [], 
        "path": "php/function.http-persistent-handles-count", 
        "type": "HTTP"
    }, 
    "http_persistent_handles_ident": {
        "description": "Query or define the ident of persistent handles.", 
        "name": "http_persistent_handles_ident", 
        "overview": "string http_persistent_handles_ident ([ string $ident ] )", 
        "parameters": [
            {
                "descr": "the identification string", 
                "name": "ident"
            }
        ], 
        "path": "php/function.http-persistent-handles-ident", 
        "type": "HTTP"
    }, 
    "http_post_data": {
        "description": "Performs an HTTP POST request on the supplied url.", 
        "name": "http_post_data", 
        "overview": "string http_post_data ( string $url , string $data [, array $options [, array &$info ]] )", 
        "parameters": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "String containing the pre-encoded post data", 
                "name": "data"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-post-data", 
        "type": "HTTP"
    }, 
    "http_post_fields": {
        "description": "Performs an HTTP POST request on the supplied url.", 
        "name": "http_post_fields", 
        "overview": "string http_post_fields ( string $url , array $data [, array $files [, array $options [, array &$info ]]] )", 
        "parameters": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "Associative array of POST values", 
                "name": "data"
            }, 
            {
                "descr": "Array of files to post", 
                "name": "files"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-post-fields", 
        "type": "HTTP"
    }, 
    "http_put_data": {
        "description": "Performs an HTTP PUT request on the supplied url.", 
        "name": "http_put_data", 
        "overview": "string http_put_data ( string $url , string $data [, array $options [, array &$info ]] )", 
        "parameters": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "PUT request body", 
                "name": "data"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-put-data", 
        "type": "HTTP"
    }, 
    "http_put_file": {
        "description": "Performs an HTTP PUT request on the supplied url.", 
        "name": "http_put_file", 
        "overview": "string http_put_file ( string $url , string $file [, array $options [, array &$info ]] )", 
        "parameters": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "The file to put", 
                "name": "file"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-put-file", 
        "type": "HTTP"
    }, 
    "http_put_stream": {
        "description": "Performs an HTTP PUT request on the supplied url.", 
        "name": "http_put_stream", 
        "overview": "string http_put_stream ( string $url , resource $stream [, array $options [, array &$info ]] )", 
        "parameters": [
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "The stream to read the PUT request body from", 
                "name": "stream"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-put-stream", 
        "type": "HTTP"
    }, 
    "http_redirect": {
        "description": "Redirect to the given url.", 
        "name": "http_redirect", 
        "overview": "bool http_redirect ([ string $url [, array $params [, bool $session = false [, int $status = 0 ]]]] )", 
        "parameters": [
            {
                "descr": "the URL to redirect to", 
                "name": "url"
            }, 
            {
                "descr": "associative array of query parameters", 
                "name": "params"
            }, 
            {
                "descr": "whether to append session information", 
                "name": "session"
            }, 
            {
                "descr": "custom response status code", 
                "name": "status"
            }
        ], 
        "path": "php/function.http-redirect", 
        "type": "HTTP"
    }, 
    "http_request": {
        "description": "Performs a custom HTTP request on the supplied url.", 
        "name": "http_request", 
        "overview": "string http_request ( int $method , string $url [, string $body [, array $options [, array &$info ]]] )", 
        "parameters": [
            {
                "descr": "Request method", 
                "name": "method"
            }, 
            {
                "descr": "URL", 
                "name": "url"
            }, 
            {
                "descr": "Request body", 
                "name": "body"
            }, 
            {
                "descr": "request options", 
                "name": "options"
            }, 
            {
                "descr": "Request/response information", 
                "name": "info"
            }
        ], 
        "path": "php/function.http-request", 
        "type": "HTTP"
    }, 
    "http_request_body_encode": {
        "description": "Generate x-www-form-urlencoded resp. form-data encoded request body.", 
        "name": "http_request_body_encode", 
        "overview": "string http_request_body_encode ( array $fields , array $files )", 
        "parameters": [
            {
                "descr": "POST fields", 
                "name": "fields"
            }, 
            {
                "descr": "POST files", 
                "name": "files"
            }
        ], 
        "path": "php/function.http-request-body-encode", 
        "type": "HTTP"
    }, 
    "http_request_method_exists": {
        "description": "Check if a request method is registered (or available by default).", 
        "name": "http_request_method_exists", 
        "overview": "int http_request_method_exists ( mixed $method )", 
        "parameters": [
            {
                "descr": "request method name or ID", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-exists", 
        "type": "HTTP"
    }, 
    "http_request_method_name": {
        "description": "Get the literal string representation of a standard or registered request method.", 
        "name": "http_request_method_name", 
        "overview": "string http_request_method_name ( int $method )", 
        "parameters": [
            {
                "descr": "request method ID", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-name", 
        "type": "HTTP"
    }, 
    "http_request_method_register": {
        "description": "Register a custom request method.", 
        "name": "http_request_method_register", 
        "overview": "int http_request_method_register ( string $method )", 
        "parameters": [
            {
                "descr": "the request method name to register", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-register", 
        "type": "HTTP"
    }, 
    "http_request_method_unregister": {
        "description": "Unregister a previously registered custom request method.", 
        "name": "http_request_method_unregister", 
        "overview": "bool http_request_method_unregister ( mixed $method )", 
        "parameters": [
            {
                "descr": "The request method name or ID", 
                "name": "method"
            }
        ], 
        "path": "php/function.http-request-method-unregister", 
        "type": "HTTP"
    }, 
    "http_response_code": {
        "description": "If you pass no parameters then http_response_code will get the current status code. If you pass a parameter it will set the response code.", 
        "name": "http_response_code", 
        "overview": "int http_response_code ([ int $response_code ] )", 
        "parameters": [
            {
                "descr": "The optional response_code will set the response code. ", 
                "name": "response_code"
            }
        ], 
        "path": "php/function.http-response-code", 
        "type": "Networking"
    }, 
    "http_send_content_disposition": {
        "description": "Send the Content-Disposition. The Content-Disposition header is very useful if the data actually being sent came from a file or something similar, that should be \"saved\" by the client/user (i.e. by the browser's \"Save as...\" popup window).", 
        "name": "http_send_content_disposition", 
        "overview": "bool http_send_content_disposition ( string $filename [, bool $inline = false ] )", 
        "parameters": [
            {
                "descr": "the file name the \"Save as...\" dialog should display", 
                "name": "filename"
            }, 
            {
                "descr": "if set to TRUE and the user agent knows how to handle the content type, it will probably not cause the popup window to be shown", 
                "name": "inline"
            }
        ], 
        "path": "php/function.http-send-content-disposition", 
        "type": "HTTP"
    }, 
    "http_send_content_type": {
        "description": "Send the Content-Type of the sent entity.", 
        "name": "http_send_content_type", 
        "overview": "bool http_send_content_type ([ string $content_type = \"application/x-octetstream\" ] )", 
        "parameters": [
            {
                "descr": "the desired content type (primary/secondary)", 
                "name": "content_type"
            }
        ], 
        "path": "php/function.http-send-content-type", 
        "type": "HTTP"
    }, 
    "http_send_data": {
        "description": "Sends raw data with support for (multiple) range requests.", 
        "name": "http_send_data", 
        "overview": "bool http_send_data ( string $data )", 
        "parameters": [
            {
                "descr": "data to send", 
                "name": "data"
            }
        ], 
        "path": "php/function.http-send-data", 
        "type": "HTTP"
    }, 
    "http_send_file": {
        "description": "Sends a file with support for (multiple) range requests.", 
        "name": "http_send_file", 
        "overview": "bool http_send_file ( string $file )", 
        "parameters": [
            {
                "descr": "the file to send", 
                "name": "file"
            }
        ], 
        "path": "php/function.http-send-file", 
        "type": "HTTP"
    }, 
    "http_send_last_modified": {
        "description": "Send a Last-Modified header with a valid HTTP date.", 
        "name": "http_send_last_modified", 
        "overview": "bool http_send_last_modified ([ int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "a Unix timestamp, converted to a valid HTTP date; if omitted, the current time will be sent", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.http-send-last-modified", 
        "type": "HTTP"
    }, 
    "http_send_status": {
        "description": "Send HTTP status code.", 
        "name": "http_send_status", 
        "overview": "bool http_send_status ( int $status )", 
        "parameters": [
            {
                "descr": "HTTP status code (100-599)", 
                "name": "status"
            }
        ], 
        "path": "php/function.http-send-status", 
        "type": "HTTP"
    }, 
    "http_send_stream": {
        "description": "Sends an already opened stream with support for (multiple) range requests.", 
        "name": "http_send_stream", 
        "overview": "bool http_send_stream ( resource $stream )", 
        "parameters": [
            {
                "descr": "stream to read from (must be seekable)", 
                "name": "stream"
            }
        ], 
        "path": "php/function.http-send-stream", 
        "type": "HTTP"
    }, 
    "http_support": {
        "description": "Check for features that require external libraries.", 
        "name": "http_support", 
        "overview": "int http_support ([ int $feature = 0 ] )", 
        "parameters": [
            {
                "descr": "feature to probe for", 
                "name": "feature"
            }
        ], 
        "path": "php/function.http-support", 
        "type": "HTTP"
    }, 
    "http_throttle": {
        "description": "Sets the throttle delay and send buffer size.", 
        "name": "http_throttle", 
        "overview": "void http_throttle ( float $sec [, int $bytes = 40960 ] )", 
        "parameters": [
            {
                "descr": "seconds to sleep after each chunk sent", 
                "name": "sec"
            }, 
            {
                "descr": "the chunk size in bytes", 
                "name": "bytes"
            }
        ], 
        "path": "php/function.http-throttle", 
        "type": "HTTP"
    }, 
    "hypot": {
        "description": "hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).", 
        "name": "hypot", 
        "overview": "float hypot ( float $x , float $y )", 
        "parameters": [
            {
                "descr": "Length of first side", 
                "name": "x"
            }, 
            {
                "descr": "Length of second side", 
                "name": "y"
            }
        ], 
        "path": "php/function.hypot", 
        "type": "Mathematics"
    }, 
    "iconv": {
        "description": "Performs a character set conversion on the string str from in_charset to out_charset.", 
        "name": "iconv", 
        "overview": "string iconv ( string $in_charset , string $out_charset , string $str )", 
        "parameters": [
            {
                "descr": "The input charset.", 
                "name": "in_charset"
            }, 
            {
                "descr": "The output charset.   If you append the string //TRANSLIT to out_charset transliteration is activated. ", 
                "name": "out_charset"
            }, 
            {
                "descr": "The string to be converted.", 
                "name": "str"
            }
        ], 
        "path": "php/function.iconv", 
        "type": "Encoding"
    }, 
    "iconv_get_encoding": {
        "description": "Retrieve internal configuration variables of iconv extension.", 
        "name": "iconv_get_encoding", 
        "overview": "mixed iconv_get_encoding ([ string $type = \"all\" ] )", 
        "parameters": [
            {
                "descr": "The value of the optional type can be: all input_encoding output_encoding internal_encoding", 
                "name": "type"
            }
        ], 
        "path": "php/function.iconv-get-encoding", 
        "type": "Encoding"
    }, 
    "iconv_mime_decode": {
        "description": "Decodes a MIME header field.", 
        "name": "iconv_mime_decode", 
        "overview": "string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "parameters": [
            {
                "descr": "The encoded header, as a string.", 
                "name": "encoded_header"
            }, 
            {
                "descr": "mode determines the behaviour in the event iconv_mime_decode() encounters a malformed MIME header field. ", 
                "name": "mode"
            }, 
            {
                "descr": "The optional charset parameter specifies the character set to represent the result by. ", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-mime-decode", 
        "type": "Encoding"
    }, 
    "iconv_mime_decode_headers": {
        "description": "Decodes multiple MIME header fields at once.", 
        "name": "iconv_mime_decode_headers", 
        "overview": "array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "parameters": [
            {
                "descr": "The encoded headers, as a string.", 
                "name": "encoded_headers"
            }, 
            {
                "descr": "mode determines the behaviour in the event iconv_mime_decode_headers() encounters a malformed MIME header field. ", 
                "name": "mode"
            }, 
            {
                "descr": "The optional charset parameter specifies the character set to represent the result by. ", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-mime-decode-headers", 
        "type": "Encoding"
    }, 
    "iconv_mime_encode": {
        "description": "Composes and returns a string that represents a valid MIME header field, which looks like the following:", 
        "name": "iconv_mime_encode", 
        "overview": "string iconv_mime_encode ( string $field_name , string $field_value [, array $preferences = NULL ] )", 
        "parameters": [
            {
                "descr": "The field name.", 
                "name": "field_name"
            }, 
            {
                "descr": "The field value.", 
                "name": "field_value"
            }, 
            {
                "descr": "You can control the behaviour of iconv_mime_encode() by specifying an associative array that contains configuration items to the optional third parameter preferences. ", 
                "name": "preferences"
            }
        ], 
        "path": "php/function.iconv-mime-encode", 
        "type": "Encoding"
    }, 
    "iconv_set_encoding": {
        "description": "Changes the value of the internal configuration variable specified by type to charset.", 
        "name": "iconv_set_encoding", 
        "overview": "bool iconv_set_encoding ( string $type , string $charset )", 
        "parameters": [
            {
                "descr": "The value of type can be any one of these: input_encoding output_encoding internal_encoding", 
                "name": "type"
            }, 
            {
                "descr": "The character set.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-set-encoding", 
        "type": "Encoding"
    }, 
    "iconv_strlen": {
        "description": "In contrast to strlen(), iconv_strlen() counts the occurrences of characters in the given byte sequence str on the basis of the specified character set, the result of which is not necessarily identical to the length of the string in byte.", 
        "name": "iconv_strlen", 
        "overview": "int iconv_strlen ( string $str [, string $charset = ini_get(\"iconv.internal_encoding\") ] )", 
        "parameters": [
            {
                "descr": "The string.", 
                "name": "str"
            }, 
            {
                "descr": "If charset parameter is omitted, str is assumed to be encoded in iconv.internal_encoding.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-strlen", 
        "type": "Encoding"
    }, 
    "iconv_strpos": {
        "description": "Finds position of first occurrence of a needle within a haystack.", 
        "name": "iconv_strpos", 
        "overview": "int iconv_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "parameters": [
            {
                "descr": "The entire string.", 
                "name": "haystack"
            }, 
            {
                "descr": "The searched substring.", 
                "name": "needle"
            }, 
            {
                "descr": "The optional offset parameter specifies the position from which the search should be performed.", 
                "name": "offset"
            }, 
            {
                "descr": "If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-strpos", 
        "type": "Encoding"
    }, 
    "iconv_strrpos": {
        "description": "Finds the last occurrence of a needle within a haystack.", 
        "name": "iconv_strrpos", 
        "overview": "int iconv_strrpos ( string $haystack , string $needle [, string $charset = ini_get(\"iconv.internal_encoding\") ] )", 
        "parameters": [
            {
                "descr": "The entire string.", 
                "name": "haystack"
            }, 
            {
                "descr": "The searched substring.", 
                "name": "needle"
            }, 
            {
                "descr": "If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding.", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-strrpos", 
        "type": "Encoding"
    }, 
    "iconv_substr": {
        "description": "Cuts a portion of str specified by the offset and length parameters.", 
        "name": "iconv_substr", 
        "overview": "string iconv_substr ( string $str , int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get(\"iconv.internal_encoding\") ]] )", 
        "parameters": [
            {
                "descr": "The original string.", 
                "name": "str"
            }, 
            {
                "descr": "If offset is non-negative, iconv_substr() cuts the portion out of str beginning at offset'th character, counting from zero. ", 
                "name": "offset"
            }, 
            {
                "descr": "If length is given and is positive, the return value will contain at most length characters of the portion that begins at offset (depending on the length of string). ", 
                "name": "length"
            }, 
            {
                "descr": "If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding. ", 
                "name": "charset"
            }
        ], 
        "path": "php/function.iconv-substr", 
        "type": "Encoding"
    }, 
    "idate": {
        "description": "Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().", 
        "name": "idate", 
        "overview": "int idate ( string $format [, int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "The following characters are recognized in the format parameter string format character Description B Swatch Beat/Internet Time d Day of the month h Hour (12 hour format) H Hour (24 hour format) i Minutes I (uppercase i) returns 1 if DST is activated, 0 otherwise L (uppercase l) returns 1 for leap year, 0 otherwise m Month number s Seconds t Days in current month U Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC - this is the same as time() w Day of the week (0 on Sunday) W ISO-8601 week number of year, weeks starting on Monday y Year (1 or 2 digits - check note below) Y Year (4 digits) z Day of the year Z Timezone offset in seconds", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.idate", 
        "type": "Date and Time"
    }, 
    "idn_to_ascii": {
        "description": "This function converts Unicode domain name to IDNA ASCII-compatible format.", 
        "name": "idn_to_ascii", 
        "overview": "string idn_to_ascii ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )", 
        "parameters": [
            {
                "descr": "Domain to convert. In PHP 5 must be UTF-8 encoded.", 
                "name": "domain"
            }, 
            {
                "descr": "Conversion options - combination of IDNA_* constants (except IDNA_ERROR_* constants).", 
                "name": "options"
            }, 
            {
                "descr": "Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or INTL_IDNA_VARIANT_UTS46 for UTS #46.", 
                "name": "variant"
            }, 
            {
                "descr": "This parameter can be used only if INTL_IDNA_VARIANT_UTS46 was used for variant. ", 
                "name": "idna_info"
            }
        ], 
        "path": "php/function.idn-to-ascii", 
        "type": "Internationalization"
    }, 
    "idn_to_utf8": {
        "description": "This function converts Unicode domain name from IDNA ASCII-compatible format to plain Unicode, encoded in UTF-8.", 
        "name": "idn_to_utf8", 
        "overview": "string idn_to_utf8 ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )", 
        "parameters": [
            {
                "descr": "Domain to convert in IDNA ASCII-compatible format.", 
                "name": "domain"
            }, 
            {
                "descr": "Conversion options - combination of IDNA_* constants (except IDNA_ERROR_* constants).", 
                "name": "options"
            }, 
            {
                "descr": "Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or INTL_IDNA_VARIANT_UTS46 for UTS #46.", 
                "name": "variant"
            }, 
            {
                "descr": "This parameter can be used only if INTL_IDNA_VARIANT_UTS46 was used for variant. ", 
                "name": "idna_info"
            }
        ], 
        "path": "php/function.idn-to-utf8", 
        "type": "Internationalization"
    }, 
    "ignore_user_abort": {
        "description": "Sets whether a client disconnect should cause a script to be aborted.", 
        "name": "ignore_user_abort", 
        "overview": "int ignore_user_abort ([ string $value ] )", 
        "parameters": [
            {
                "descr": "If set, this function will set the ignore_user_abort ini setting to the given value. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.ignore-user-abort", 
        "type": "Language"
    }, 
    "iis_add_server": {
        "description": "", 
        "name": "iis_add_server", 
        "overview": "int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server )", 
        "parameters": [], 
        "path": "php/function.iis-add-server", 
        "type": "IIS"
    }, 
    "iis_get_dir_security": {
        "description": "", 
        "name": "iis_get_dir_security", 
        "overview": "int iis_get_dir_security ( int $server_instance , string $virtual_path )", 
        "parameters": [], 
        "path": "php/function.iis-get-dir-security", 
        "type": "IIS"
    }, 
    "iis_get_script_map": {
        "description": "", 
        "name": "iis_get_script_map", 
        "overview": "string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension )", 
        "parameters": [], 
        "path": "php/function.iis-get-script-map", 
        "type": "IIS"
    }, 
    "iis_get_server_by_comment": {
        "description": "", 
        "name": "iis_get_server_by_comment", 
        "overview": "int iis_get_server_by_comment ( string $comment )", 
        "parameters": [], 
        "path": "php/function.iis-get-server-by-comment", 
        "type": "IIS"
    }, 
    "iis_get_server_by_path": {
        "description": "Each virtual server in IIS is associated with an instance number. iis_get_server_by_path() finds the instance number from the actual path to the root directory.", 
        "name": "iis_get_server_by_path", 
        "overview": "int iis_get_server_by_path ( string $path )", 
        "parameters": [
            {
                "descr": "The path to the root directory", 
                "name": "path"
            }
        ], 
        "path": "php/function.iis-get-server-by-path", 
        "type": "IIS"
    }, 
    "iis_get_server_rights": {
        "description": "", 
        "name": "iis_get_server_rights", 
        "overview": "int iis_get_server_rights ( int $server_instance , string $virtual_path )", 
        "parameters": [], 
        "path": "php/function.iis-get-server-rights", 
        "type": "IIS"
    }, 
    "iis_get_service_state": {
        "description": "", 
        "name": "iis_get_service_state", 
        "overview": "int iis_get_service_state ( string $service_id )", 
        "parameters": [], 
        "path": "php/function.iis-get-service-state", 
        "type": "IIS"
    }, 
    "iis_remove_server": {
        "description": "", 
        "name": "iis_remove_server", 
        "overview": "int iis_remove_server ( int $server_instance )", 
        "parameters": [], 
        "path": "php/function.iis-remove-server", 
        "type": "IIS"
    }, 
    "iis_set_app_settings": {
        "description": "", 
        "name": "iis_set_app_settings", 
        "overview": "int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope )", 
        "parameters": [], 
        "path": "php/function.iis-set-app-settings", 
        "type": "IIS"
    }, 
    "iis_set_dir_security": {
        "description": "", 
        "name": "iis_set_dir_security", 
        "overview": "int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags )", 
        "parameters": [], 
        "path": "php/function.iis-set-dir-security", 
        "type": "IIS"
    }, 
    "iis_set_script_map": {
        "description": "", 
        "name": "iis_set_script_map", 
        "overview": "int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting )", 
        "parameters": [], 
        "path": "php/function.iis-set-script-map", 
        "type": "IIS"
    }, 
    "iis_set_server_rights": {
        "description": "", 
        "name": "iis_set_server_rights", 
        "overview": "int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags )", 
        "parameters": [], 
        "path": "php/function.iis-set-server-rights", 
        "type": "IIS"
    }, 
    "iis_start_server": {
        "description": "", 
        "name": "iis_start_server", 
        "overview": "int iis_start_server ( int $server_instance )", 
        "parameters": [], 
        "path": "php/function.iis-start-server", 
        "type": "IIS"
    }, 
    "iis_start_service": {
        "description": "", 
        "name": "iis_start_service", 
        "overview": "int iis_start_service ( string $service_id )", 
        "parameters": [], 
        "path": "php/function.iis-start-service", 
        "type": "IIS"
    }, 
    "iis_stop_server": {
        "description": "", 
        "name": "iis_stop_server", 
        "overview": "int iis_stop_server ( int $server_instance )", 
        "parameters": [], 
        "path": "php/function.iis-stop-server", 
        "type": "IIS"
    }, 
    "iis_stop_service": {
        "description": "", 
        "name": "iis_stop_service", 
        "overview": "int iis_stop_service ( string $service_id )", 
        "parameters": [], 
        "path": "php/function.iis-stop-service", 
        "type": "IIS"
    }, 
    "image2wbmp": {
        "description": "image2wbmp() outputs or save a WBMP version of the given image.", 
        "name": "image2wbmp", 
        "overview": "bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Path to the saved file. If not given, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "Threshold value, between 0 and 255 (inclusive).", 
                "name": "threshold"
            }
        ], 
        "path": "php/function.image2wbmp", 
        "type": "Image"
    }, 
    "image_type_to_extension": {
        "description": "Returns the extension for the given IMAGETYPE_XXX constant.", 
        "name": "image_type_to_extension", 
        "overview": "string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )", 
        "parameters": [
            {
                "descr": "One of the IMAGETYPE_XXX constant.", 
                "name": "imagetype"
            }, 
            {
                "descr": "Whether to prepend a dot to the extension or not. ", 
                "name": "include_dot"
            }
        ], 
        "path": "php/function.image-type-to-extension", 
        "type": "Image"
    }, 
    "image_type_to_mime_type": {
        "description": "The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.", 
        "name": "image_type_to_mime_type", 
        "overview": "string image_type_to_mime_type ( int $imagetype )", 
        "parameters": [
            {
                "descr": "One of the IMAGETYPE_XXX constants.", 
                "name": "imagetype"
            }
        ], 
        "path": "php/function.image-type-to-mime-type", 
        "type": "Image"
    }, 
    "imageaffine": {
        "description": "", 
        "name": "imageaffine", 
        "overview": "resource imageaffine ( resource $image , array $affine [, array $clip ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Array with keys 0 to 5.", 
                "name": "affine"
            }, 
            {
                "descr": "Array with keys \"x\", \"y\", \"width\" and \"height\".", 
                "name": "clip"
            }
        ], 
        "path": "php/function.imageaffine", 
        "type": "Image"
    }, 
    "imageaffinematrixconcat": {
        "description": "", 
        "name": "imageaffinematrixconcat", 
        "overview": "array imageaffinematrixconcat ( array $m1 , array $m2 )", 
        "parameters": [
            {
                "descr": "Array with keys 0 to 5.", 
                "name": "m1"
            }, 
            {
                "descr": "Array with keys 0 to 5.", 
                "name": "m2"
            }
        ], 
        "path": "php/function.imageaffinematrixconcat", 
        "type": "Image"
    }, 
    "imageaffinematrixget": {
        "description": "", 
        "name": "imageaffinematrixget", 
        "overview": "array imageaffinematrixget ( int $type [, mixed $options ] )", 
        "parameters": [
            {
                "descr": "One of IMG_AFFINE_* constants.", 
                "name": "type"
            }
        ], 
        "path": "php/function.imageaffinematrixget", 
        "type": "Image"
    }, 
    "imagealphablending": {
        "description": "imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.", 
        "name": "imagealphablending", 
        "overview": "bool imagealphablending ( resource $image , bool $blendmode )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Whether to enable the blending mode or not. ", 
                "name": "blendmode"
            }
        ], 
        "path": "php/function.imagealphablending", 
        "type": "Image"
    }, 
    "imageantialias": {
        "description": "Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.", 
        "name": "imageantialias", 
        "overview": "bool imageantialias ( resource $image , bool $enabled )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Whether to enable antialiasing or not.", 
                "name": "enabled"
            }
        ], 
        "path": "php/function.imageantialias", 
        "type": "Image"
    }, 
    "imagearc": {
        "description": "imagearc() draws an arc of circle centered at the given coordinates.", 
        "name": "imagearc", 
        "overview": "bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The arc width.", 
                "name": "width"
            }, 
            {
                "descr": "The arc height.", 
                "name": "height"
            }, 
            {
                "descr": "The arc start angle, in degrees.", 
                "name": "start"
            }, 
            {
                "descr": "The arc end angle, in degrees. 0\u00b0 is located at the three-o'clock position, and the arc is drawn clockwise.", 
                "name": "end"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagearc", 
        "type": "Image"
    }, 
    "imagechar": {
        "description": "imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.", 
        "name": "imagechar", 
        "overview": "bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the start.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the start.", 
                "name": "y"
            }, 
            {
                "descr": "The character to draw.", 
                "name": "c"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagechar", 
        "type": "Image"
    }, 
    "imagecharup": {
        "description": "Draws the character c vertically at the specified coordinate on the given image.", 
        "name": "imagecharup", 
        "overview": "bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the start.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the start.", 
                "name": "y"
            }, 
            {
                "descr": "The character to draw.", 
                "name": "c"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecharup", 
        "type": "Image"
    }, 
    "imagecolorallocate": {
        "description": "Returns a color identifier representing the color composed of the given RGB components.", 
        "name": "imagecolorallocate", 
        "overview": "int imagecolorallocate ( resource $image , int $red , int $green , int $blue )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorallocate", 
        "type": "Image"
    }, 
    "imagecolorallocatealpha": {
        "description": "imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha.", 
        "name": "imagecolorallocatealpha", 
        "overview": "int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorallocatealpha", 
        "type": "Image"
    }, 
    "imagecolorat": {
        "description": "Returns the index of the color of the pixel at the specified location in the image specified by image.", 
        "name": "imagecolorat", 
        "overview": "int imagecolorat ( resource $image , int $x , int $y )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the point.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the point.", 
                "name": "y"
            }
        ], 
        "path": "php/function.imagecolorat", 
        "type": "Image"
    }, 
    "imagecolorclosest": {
        "description": "Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value.", 
        "name": "imagecolorclosest", 
        "overview": "int imagecolorclosest ( resource $image , int $red , int $green , int $blue )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorclosest", 
        "type": "Image"
    }, 
    "imagecolorclosestalpha": {
        "description": "Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value and alpha level.", 
        "name": "imagecolorclosestalpha", 
        "overview": "int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorclosestalpha", 
        "type": "Image"
    }, 
    "imagecolorclosesthwb": {
        "description": "Get the index of the color which has the hue, white and blackness nearest the given color.", 
        "name": "imagecolorclosesthwb", 
        "overview": "int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorclosesthwb", 
        "type": "Image"
    }, 
    "imagecolordeallocate": {
        "description": "De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().", 
        "name": "imagecolordeallocate", 
        "overview": "bool imagecolordeallocate ( resource $image , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The color identifier.", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecolordeallocate", 
        "type": "Image"
    }, 
    "imagecolorexact": {
        "description": "Returns the index of the specified color in the palette of the image.", 
        "name": "imagecolorexact", 
        "overview": "int imagecolorexact ( resource $image , int $red , int $green , int $blue )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorexact", 
        "type": "Image"
    }, 
    "imagecolorexactalpha": {
        "description": "Returns the index of the specified color+alpha in the palette of the image.", 
        "name": "imagecolorexactalpha", 
        "overview": "int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorexactalpha", 
        "type": "Image"
    }, 
    "imagecolormatch": {
        "description": "Makes the colors of the palette version of an image more closely match the true color version.", 
        "name": "imagecolormatch", 
        "overview": "bool imagecolormatch ( resource $image1 , resource $image2 )", 
        "parameters": [
            {
                "descr": "A truecolor image link resource.", 
                "name": "image1"
            }, 
            {
                "descr": "A palette image link resource pointing to an image that has the same size as image1.", 
                "name": "image2"
            }
        ], 
        "path": "php/function.imagecolormatch", 
        "type": "Image"
    }, 
    "imagecolorresolve": {
        "description": "This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.", 
        "name": "imagecolorresolve", 
        "overview": "int imagecolorresolve ( resource $image , int $red , int $green , int $blue )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }
        ], 
        "path": "php/function.imagecolorresolve", 
        "type": "Image"
    }, 
    "imagecolorresolvealpha": {
        "description": "This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.", 
        "name": "imagecolorresolvealpha", 
        "overview": "int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorresolvealpha", 
        "type": "Image"
    }, 
    "imagecolorset": {
        "description": "This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.", 
        "name": "imagecolorset", 
        "overview": "void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue [, int $alpha = 0 ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An index in the palette.", 
                "name": "index"
            }, 
            {
                "descr": "Value of red component.", 
                "name": "red"
            }, 
            {
                "descr": "Value of green component.", 
                "name": "green"
            }, 
            {
                "descr": "Value of blue component.", 
                "name": "blue"
            }, 
            {
                "descr": "Value of alpha component.", 
                "name": "alpha"
            }
        ], 
        "path": "php/function.imagecolorset", 
        "type": "Image"
    }, 
    "imagecolorsforindex": {
        "description": "Gets the color for a specified index.", 
        "name": "imagecolorsforindex", 
        "overview": "array imagecolorsforindex ( resource $image , int $index )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The color index.", 
                "name": "index"
            }
        ], 
        "path": "php/function.imagecolorsforindex", 
        "type": "Image"
    }, 
    "imagecolorstotal": {
        "description": "Returns the number of colors in an image palette.", 
        "name": "imagecolorstotal", 
        "overview": "int imagecolorstotal ( resource $image )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatefromgif().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagecolorstotal", 
        "type": "Image"
    }, 
    "imagecolortransparent": {
        "description": "Sets the transparent color in the given image.", 
        "name": "imagecolortransparent", 
        "overview": "int imagecolortransparent ( resource $image [, int $color ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecolortransparent", 
        "type": "Image"
    }, 
    "imageconvolution": {
        "description": "Applies a convolution matrix on the image, using the given coefficient and offset.", 
        "name": "imageconvolution", 
        "overview": "bool imageconvolution ( resource $image , array $matrix , float $div , float $offset )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "A 3x3 matrix: an array of three arrays of three floats.", 
                "name": "matrix"
            }, 
            {
                "descr": "The divisor of the result of the convolution, used for normalization.", 
                "name": "div"
            }, 
            {
                "descr": "Color offset.", 
                "name": "offset"
            }
        ], 
        "path": "php/function.imageconvolution", 
        "type": "Image"
    }, 
    "imagecopy": {
        "description": "Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.", 
        "name": "imagecopy", 
        "overview": "bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )", 
        "parameters": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_im"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_im"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }
        ], 
        "path": "php/function.imagecopy", 
        "type": "Image"
    }, 
    "imagecopymerge": {
        "description": "Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.", 
        "name": "imagecopymerge", 
        "overview": "bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )", 
        "parameters": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_im"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_im"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }, 
            {
                "descr": "The two images will be merged according to pct which can range from 0 to 100. ", 
                "name": "pct"
            }
        ], 
        "path": "php/function.imagecopymerge", 
        "type": "Image"
    }, 
    "imagecopymergegray": {
        "description": "imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y  with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.", 
        "name": "imagecopymergegray", 
        "overview": "bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )", 
        "parameters": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_im"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_im"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }, 
            {
                "descr": "The src_im will be changed to grayscale according to pct where 0 is fully grayscale and 100 is unchanged. ", 
                "name": "pct"
            }
        ], 
        "path": "php/function.imagecopymergegray", 
        "type": "Image"
    }, 
    "imagecopyresampled": {
        "description": "imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.", 
        "name": "imagecopyresampled", 
        "overview": "bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )", 
        "parameters": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_image"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_image"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Destination width.", 
                "name": "dst_w"
            }, 
            {
                "descr": "Destination height.", 
                "name": "dst_h"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }
        ], 
        "path": "php/function.imagecopyresampled", 
        "type": "Image"
    }, 
    "imagecopyresized": {
        "description": "imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier.", 
        "name": "imagecopyresized", 
        "overview": "bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )", 
        "parameters": [
            {
                "descr": "Destination image link resource.", 
                "name": "dst_image"
            }, 
            {
                "descr": "Source image link resource.", 
                "name": "src_image"
            }, 
            {
                "descr": "x-coordinate of destination point.", 
                "name": "dst_x"
            }, 
            {
                "descr": "y-coordinate of destination point.", 
                "name": "dst_y"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "src_x"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "src_y"
            }, 
            {
                "descr": "Destination width.", 
                "name": "dst_w"
            }, 
            {
                "descr": "Destination height.", 
                "name": "dst_h"
            }, 
            {
                "descr": "Source width.", 
                "name": "src_w"
            }, 
            {
                "descr": "Source height.", 
                "name": "src_h"
            }
        ], 
        "path": "php/function.imagecopyresized", 
        "type": "Image"
    }, 
    "imagecreate": {
        "description": "imagecreate() returns an image identifier representing a blank image of specified size.", 
        "name": "imagecreate", 
        "overview": "resource imagecreate ( int $width , int $height )", 
        "parameters": [
            {
                "descr": "The image width.", 
                "name": "width"
            }, 
            {
                "descr": "The image height.", 
                "name": "height"
            }
        ], 
        "path": "php/function.imagecreate", 
        "type": "Image"
    }, 
    "imagecreatefromgd": {
        "description": "Create a new image from GD file or URL.", 
        "name": "imagecreatefromgd", 
        "overview": "resource imagecreatefromgd ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the GD file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromgd", 
        "type": "Image"
    }, 
    "imagecreatefromgd2": {
        "description": "Create a new image from GD2 file or URL.", 
        "name": "imagecreatefromgd2", 
        "overview": "resource imagecreatefromgd2 ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the GD2 image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromgd2", 
        "type": "Image"
    }, 
    "imagecreatefromgd2part": {
        "description": "Create a new image from a given part of GD2 file or URL.", 
        "name": "imagecreatefromgd2part", 
        "overview": "resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )", 
        "parameters": [
            {
                "descr": "Path to the GD2 image.", 
                "name": "filename"
            }, 
            {
                "descr": "x-coordinate of source point.", 
                "name": "srcX"
            }, 
            {
                "descr": "y-coordinate of source point.", 
                "name": "srcY"
            }, 
            {
                "descr": "Source width.", 
                "name": "width"
            }, 
            {
                "descr": "Source height.", 
                "name": "height"
            }
        ], 
        "path": "php/function.imagecreatefromgd2part", 
        "type": "Image"
    }, 
    "imagecreatefromgif": {
        "description": "imagecreatefromgif() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromgif", 
        "overview": "resource imagecreatefromgif ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the GIF image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromgif", 
        "type": "Image"
    }, 
    "imagecreatefromjpeg": {
        "description": "imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromjpeg", 
        "overview": "resource imagecreatefromjpeg ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the JPEG image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromjpeg", 
        "type": "Image"
    }, 
    "imagecreatefrompng": {
        "description": "imagecreatefrompng() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefrompng", 
        "overview": "resource imagecreatefrompng ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the PNG image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefrompng", 
        "type": "Image"
    }, 
    "imagecreatefromstring": {
        "description": "imagecreatefromstring() returns an image identifier representing the image obtained from the given image. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2.", 
        "name": "imagecreatefromstring", 
        "overview": "resource imagecreatefromstring ( string $image )", 
        "parameters": [
            {
                "descr": "A string containing the image data.", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagecreatefromstring", 
        "type": "Image"
    }, 
    "imagecreatefromwbmp": {
        "description": "imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromwbmp", 
        "overview": "resource imagecreatefromwbmp ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the WBMP image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromwbmp", 
        "type": "Image"
    }, 
    "imagecreatefromwebp": {
        "description": "imagecreatefromwebp() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromwebp", 
        "overview": "resource imagecreatefromwebp ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the WebP image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromwebp", 
        "type": "Image"
    }, 
    "imagecreatefromxbm": {
        "description": "imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromxbm", 
        "overview": "resource imagecreatefromxbm ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the XBM image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromxbm", 
        "type": "Image"
    }, 
    "imagecreatefromxpm": {
        "description": "imagecreatefromxpm() returns an image identifier representing the image obtained from the given filename.", 
        "name": "imagecreatefromxpm", 
        "overview": "resource imagecreatefromxpm ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the XPM image.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagecreatefromxpm", 
        "type": "Image"
    }, 
    "imagecreatetruecolor": {
        "description": "imagecreatetruecolor() returns an image identifier representing a black image of the specified size.", 
        "name": "imagecreatetruecolor", 
        "overview": "resource imagecreatetruecolor ( int $width , int $height )", 
        "parameters": [
            {
                "descr": "Image width.", 
                "name": "width"
            }, 
            {
                "descr": "Image height.", 
                "name": "height"
            }
        ], 
        "path": "php/function.imagecreatetruecolor", 
        "type": "Image"
    }, 
    "imagecrop": {
        "description": "", 
        "name": "imagecrop", 
        "overview": "resource imagecrop ( resource $image , array $rect )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Array with keys \"x\", \"y\", \"width\" and \"height\".", 
                "name": "rect"
            }
        ], 
        "path": "php/function.imagecrop", 
        "type": "Image"
    }, 
    "imagecropauto": {
        "description": "", 
        "name": "imagecropauto", 
        "overview": "resource imagecropauto ( resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "One of IMG_CROP_* constants.", 
                "name": "mode"
            }, 
            {
                "descr": "Used in IMG_CROP_THRESHOLD mode.", 
                "name": "threshold"
            }, 
            {
                "descr": "Used in IMG_CROP_THRESHOLD mode.", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagecropauto", 
        "type": "Image"
    }, 
    "imagedashedline": {
        "description": "This function is deprecated. Use combination of imagesetstyle() and imageline() instead.", 
        "name": "imagedashedline", 
        "overview": "bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Upper left x coordinate.", 
                "name": "x1"
            }, 
            {
                "descr": "Upper left y coordinate 0, 0 is the top left corner of the image.", 
                "name": "y1"
            }, 
            {
                "descr": "Bottom right x coordinate.", 
                "name": "x2"
            }, 
            {
                "descr": "Bottom right y coordinate.", 
                "name": "y2"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagedashedline", 
        "type": "Image"
    }, 
    "imagedestroy": {
        "description": "imagedestroy() frees any memory associated with image image.", 
        "name": "imagedestroy", 
        "overview": "bool imagedestroy ( resource $image )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagedestroy", 
        "type": "Image"
    }, 
    "imageellipse": {
        "description": "Draws an ellipse centered at the specified coordinates.", 
        "name": "imageellipse", 
        "overview": "bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The ellipse width.", 
                "name": "width"
            }, 
            {
                "descr": "The ellipse height.", 
                "name": "height"
            }, 
            {
                "descr": "The color of the ellipse. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imageellipse", 
        "type": "Image"
    }, 
    "imagefill": {
        "description": "Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.", 
        "name": "imagefill", 
        "overview": "bool imagefill ( resource $image , int $x , int $y , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of start point.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of start point.", 
                "name": "y"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefill", 
        "type": "Image"
    }, 
    "imagefilledarc": {
        "description": "Draws a partial arc centered at the specified coordinate in the given image.", 
        "name": "imagefilledarc", 
        "overview": "bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The arc width.", 
                "name": "width"
            }, 
            {
                "descr": "The arc height.", 
                "name": "height"
            }, 
            {
                "descr": "The arc start angle, in degrees.", 
                "name": "start"
            }, 
            {
                "descr": "The arc end angle, in degrees. 0\u00b0 is located at the three-o'clock position, and the arc is drawn clockwise.", 
                "name": "end"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }, 
            {
                "descr": "A bitwise OR of the following possibilities: IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_ARC_PIE and IMG_ARC_CHORD are mutually exclusive; IMG_ARC_CHORD just connects the starting and ending angles with a straight line, while IMG_ARC_PIE produces a rounded edge. IMG_ARC_NOFILL indicates that the arc or chord should be outlined, not filled. IMG_ARC_EDGED, used together with IMG_ARC_NOFILL, indicates that the beginning and ending angles should be connected to the center - this is a good way to outline (rather than fill) a 'pie slice'.", 
                "name": "style"
            }
        ], 
        "path": "php/function.imagefilledarc", 
        "type": "Image"
    }, 
    "imagefilledellipse": {
        "description": "Draws an ellipse centered at the specified coordinate on the given image.", 
        "name": "imagefilledellipse", 
        "overview": "bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of the center.", 
                "name": "cx"
            }, 
            {
                "descr": "y-coordinate of the center.", 
                "name": "cy"
            }, 
            {
                "descr": "The ellipse width.", 
                "name": "width"
            }, 
            {
                "descr": "The ellipse height.", 
                "name": "height"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilledellipse", 
        "type": "Image"
    }, 
    "imagefilledpolygon": {
        "description": "imagefilledpolygon() creates a filled polygon in the given image.", 
        "name": "imagefilledpolygon", 
        "overview": "bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An array containing the x and y coordinates of the polygons vertices consecutively.", 
                "name": "points"
            }, 
            {
                "descr": "Total number of vertices, which must be at least 3.", 
                "name": "num_points"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilledpolygon", 
        "type": "Image"
    }, 
    "imagefilledrectangle": {
        "description": "Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.", 
        "name": "imagefilledrectangle", 
        "overview": "bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate for point 1.", 
                "name": "x1"
            }, 
            {
                "descr": "y-coordinate for point 1.", 
                "name": "y1"
            }, 
            {
                "descr": "x-coordinate for point 2.", 
                "name": "x2"
            }, 
            {
                "descr": "y-coordinate for point 2.", 
                "name": "y2"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilledrectangle", 
        "type": "Image"
    }, 
    "imagefilltoborder": {
        "description": "imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.", 
        "name": "imagefilltoborder", 
        "overview": "bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate of start.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of start.", 
                "name": "y"
            }, 
            {
                "descr": "The border color. A color identifier created with imagecolorallocate().", 
                "name": "border"
            }, 
            {
                "descr": "The fill color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagefilltoborder", 
        "type": "Image"
    }, 
    "imagefilter": {
        "description": "imagefilter() applies the given filter filtertype on the image.", 
        "name": "imagefilter", 
        "overview": "bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "filtertype can be one of the following:   IMG_FILTER_NEGATE: Reverses all colors of the image. ", 
                "name": "filtertype"
            }, 
            {
                "descr": "IMG_FILTER_BRIGHTNESS: Brightness level. ", 
                "name": "arg1"
            }, 
            {
                "descr": "IMG_FILTER_COLORIZE: Value of green component. ", 
                "name": "arg2"
            }, 
            {
                "descr": "IMG_FILTER_COLORIZE: Value of blue component.", 
                "name": "arg3"
            }, 
            {
                "descr": "IMG_FILTER_COLORIZE: Alpha channel, A value between 0 and 127. ", 
                "name": "arg4"
            }
        ], 
        "path": "php/function.imagefilter", 
        "type": "Image"
    }, 
    "imageflip": {
        "description": "Flips the image image using the given mode.", 
        "name": "imageflip", 
        "overview": "bool imageflip ( resource $image , int $mode )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Flip mode, this can be one of the IMG_FLIP_* constants:  Constant Meaning IMG_FLIP_HORIZONTAL  Flips the image horizontally. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.imageflip", 
        "type": "Image"
    }, 
    "imagefontheight": {
        "description": "Returns the pixel height of a character in the specified font.", 
        "name": "imagefontheight", 
        "overview": "int imagefontheight ( int $font )", 
        "parameters": [
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }
        ], 
        "path": "php/function.imagefontheight", 
        "type": "Image"
    }, 
    "imagefontwidth": {
        "description": "Returns the pixel width of a character in font.", 
        "name": "imagefontwidth", 
        "overview": "int imagefontwidth ( int $font )", 
        "parameters": [
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }
        ], 
        "path": "php/function.imagefontwidth", 
        "type": "Image"
    }, 
    "imageftbbox": {
        "description": "This function calculates and returns the bounding box in pixels for a FreeType text.", 
        "name": "imageftbbox", 
        "overview": "array imageftbbox ( float $size , float $angle , string $fontfile , string $text [, array $extrainfo ] )", 
        "parameters": [
            {
                "descr": "The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).", 
                "name": "size"
            }, 
            {
                "descr": "Angle in degrees in which text will be measured.", 
                "name": "angle"
            }, 
            {
                "descr": "The name of the TrueType font file (can be a URL). ", 
                "name": "fontfile"
            }, 
            {
                "descr": "The string to be measured.", 
                "name": "text"
            }, 
            {
                "descr": "Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing", 
                "name": "extrainfo"
            }
        ], 
        "path": "php/function.imageftbbox", 
        "type": "Image"
    }, 
    "imagefttext": {
        "description": "", 
        "name": "imagefttext", 
        "overview": "array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The font size to use in points.", 
                "name": "size"
            }, 
            {
                "descr": "The angle in degrees, with 0 degrees being left-to-right reading text. ", 
                "name": "angle"
            }, 
            {
                "descr": "The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). ", 
                "name": "x"
            }, 
            {
                "descr": "The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character.", 
                "name": "y"
            }, 
            {
                "descr": "The index of the desired color for the text, see imagecolorexact().", 
                "name": "color"
            }, 
            {
                "descr": "The path to the TrueType font you wish to use. ", 
                "name": "fontfile"
            }, 
            {
                "descr": "Text to be inserted into image.", 
                "name": "text"
            }, 
            {
                "descr": "Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing", 
                "name": "extrainfo"
            }
        ], 
        "path": "php/function.imagefttext", 
        "type": "Image"
    }, 
    "imagegammacorrect": {
        "description": "Applies gamma correction to the given gd image given an input and an output gamma.", 
        "name": "imagegammacorrect", 
        "overview": "bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The input gamma.", 
                "name": "inputgamma"
            }, 
            {
                "descr": "The output gamma.", 
                "name": "outputgamma"
            }
        ], 
        "path": "php/function.imagegammacorrect", 
        "type": "Image"
    }, 
    "imagegd": {
        "description": "Outputs a GD image to the given filename.", 
        "name": "imagegd", 
        "overview": "bool imagegd ( resource $image [, string $filename ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagegd", 
        "type": "Image"
    }, 
    "imagegd2": {
        "description": "Outputs a GD2 image to the given filename.", 
        "name": "imagegd2", 
        "overview": "bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "Chunk size.", 
                "name": "chunk_size"
            }, 
            {
                "descr": "Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.imagegd2", 
        "type": "Image"
    }, 
    "imagegif": {
        "description": "imagegif() creates the GIF file in filename from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function.", 
        "name": "imagegif", 
        "overview": "bool imagegif ( resource $image [, string $filename ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagegif", 
        "type": "Image"
    }, 
    "imagegrabscreen": {
        "description": "Grabs a screenshot of the whole screen.", 
        "name": "imagegrabscreen", 
        "overview": "resource imagegrabscreen ( void )", 
        "parameters": [], 
        "path": "php/function.imagegrabscreen", 
        "type": "Image"
    }, 
    "imagegrabwindow": {
        "description": "Grabs a window or its client area using a windows handle (HWND property in COM instance)", 
        "name": "imagegrabwindow", 
        "overview": "resource imagegrabwindow ( int $window_handle [, int $client_area = 0 ] )", 
        "parameters": [
            {
                "descr": "The HWND window ID.", 
                "name": "window_handle"
            }, 
            {
                "descr": "Include the client area of the application window.", 
                "name": "client_area"
            }
        ], 
        "path": "php/function.imagegrabwindow", 
        "type": "Image"
    }, 
    "imageinterlace": {
        "description": "imageinterlace() turns the interlace bit on or off.", 
        "name": "imageinterlace", 
        "overview": "int imageinterlace ( resource $image [, int $interlace = 0 ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "If non-zero, the image will be interlaced, else the interlace bit is turned off.", 
                "name": "interlace"
            }
        ], 
        "path": "php/function.imageinterlace", 
        "type": "Image"
    }, 
    "imageistruecolor": {
        "description": "imageistruecolor() finds whether the image image is a truecolor image.", 
        "name": "imageistruecolor", 
        "overview": "bool imageistruecolor ( resource $image )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imageistruecolor", 
        "type": "Image"
    }, 
    "imagejpeg": {
        "description": "imagejpeg() creates a JPEG file from the given image.", 
        "name": "imagejpeg", 
        "overview": "bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly. ", 
                "name": "filename"
            }, 
            {
                "descr": "quality is optional, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file). ", 
                "name": "quality"
            }
        ], 
        "path": "php/function.imagejpeg", 
        "type": "Image"
    }, 
    "imagelayereffect": {
        "description": "Set the alpha blending flag to use the bundled libgd layering effects.", 
        "name": "imagelayereffect", 
        "overview": "bool imagelayereffect ( resource $image , int $effect )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "One of the following constants:  IMG_EFFECT_REPLACE   Use pixel replacement (equivalent of passing TRUE to imagealphablending())", 
                "name": "effect"
            }, 
            {
                "descr": "Use normal pixel blending (equivalent of passing FALSE to imagealphablending())", 
                "name": "IMG_EFFECT_ALPHABLEND"
            }, 
            {
                "descr": "Same as IMG_EFFECT_ALPHABLEND.", 
                "name": "IMG_EFFECT_NORMAL"
            }, 
            {
                "descr": "Overlay has the effect that black background pixels will remain black, white background pixels will remain white, but grey background pixels will take the colour of the foreground pixel.", 
                "name": "IMG_EFFECT_OVERLAY"
            }
        ], 
        "path": "php/function.imagelayereffect", 
        "type": "Image"
    }, 
    "imageline": {
        "description": "Draws a line between the two given points.", 
        "name": "imageline", 
        "overview": "bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate for first point.", 
                "name": "x1"
            }, 
            {
                "descr": "y-coordinate for first point.", 
                "name": "y1"
            }, 
            {
                "descr": "x-coordinate for second point.", 
                "name": "x2"
            }, 
            {
                "descr": "y-coordinate for second point.", 
                "name": "y2"
            }, 
            {
                "descr": "The line color. A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imageline", 
        "type": "Image"
    }, 
    "imageloadfont": {
        "description": "imageloadfont() loads a user-defined bitmap and returns its identifier.", 
        "name": "imageloadfont", 
        "overview": "int imageloadfont ( string $file )", 
        "parameters": [
            {
                "descr": "The font file format is currently binary and architecture dependent. ", 
                "name": "file"
            }
        ], 
        "path": "php/function.imageloadfont", 
        "type": "Image"
    }, 
    "imagepalettecopy": {
        "description": "imagepalettecopy() copies the palette from the source image to the destination image.", 
        "name": "imagepalettecopy", 
        "overview": "void imagepalettecopy ( resource $destination , resource $source )", 
        "parameters": [
            {
                "descr": "The destination image resource.", 
                "name": "destination"
            }, 
            {
                "descr": "The source image resource.", 
                "name": "source"
            }
        ], 
        "path": "php/function.imagepalettecopy", 
        "type": "Image"
    }, 
    "imagepalettetotruecolor": {
        "description": "Converts a palette based image, created by functions like imagecreate() to a true color image, like imagecreatetruecolor().", 
        "name": "imagepalettetotruecolor", 
        "overview": "bool imagepalettetotruecolor ( resource $src )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagepalettetotruecolor", 
        "type": "Image"
    }, 
    "imagepng": {
        "description": "Outputs or saves a PNG image from the given image.", 
        "name": "imagepng", 
        "overview": "bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly. ", 
                "name": "filename"
            }, 
            {
                "descr": "Compression level: from 0 (no compression) to 9.", 
                "name": "quality"
            }, 
            {
                "descr": "Allows reducing the PNG file size. ", 
                "name": "filters"
            }
        ], 
        "path": "php/function.imagepng", 
        "type": "Image"
    }, 
    "imagepolygon": {
        "description": "imagepolygon() creates a polygon in the given image.", 
        "name": "imagepolygon", 
        "overview": "bool imagepolygon ( resource $image , array $points , int $num_points , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An array containing the polygon's vertices, e.g.: points[0] = x0 points[1] = y0 points[2] = x1 points[3] = y1", 
                "name": "points"
            }, 
            {
                "descr": "Total number of points (vertices).", 
                "name": "num_points"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagepolygon", 
        "type": "Image"
    }, 
    "imagepsbbox": {
        "description": "Gives the bounding box of a text rectangle using PostScript Type1 fonts.", 
        "name": "imagepsbbox", 
        "overview": "array imagepsbbox ( string $text , resource $font , int $size )", 
        "parameters": [
            {
                "descr": "The text to be written.", 
                "name": "text"
            }, 
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "size is expressed in pixels.", 
                "name": "size"
            }, 
            {
                "descr": "Allows you to change the default value of a space in a font. ", 
                "name": "space"
            }, 
            {
                "descr": "tightness allows you to control the amount of white space between characters. ", 
                "name": "tightness"
            }, 
            {
                "descr": "angle is in degrees.", 
                "name": "angle"
            }
        ], 
        "path": "php/function.imagepsbbox", 
        "type": "Image"
    }, 
    "imagepsencodefont": {
        "description": "Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you'll definitely want to change this if you use an other language than English.", 
        "name": "imagepsencodefont", 
        "overview": "bool imagepsencodefont ( resource $font_index , string $encodingfile )", 
        "parameters": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "The exact format of this file is described in T1libs documentation. ", 
                "name": "encodingfile"
            }
        ], 
        "path": "php/function.imagepsencodefont", 
        "type": "Image"
    }, 
    "imagepsextendfont": {
        "description": "Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font.", 
        "name": "imagepsextendfont", 
        "overview": "bool imagepsextendfont ( resource $font_index , float $extend )", 
        "parameters": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "Extension value, must be greater than 0.", 
                "name": "extend"
            }
        ], 
        "path": "php/function.imagepsextendfont", 
        "type": "Image"
    }, 
    "imagepsfreefont": {
        "description": "imagepsfreefont() frees memory used by a PostScript Type 1 font.", 
        "name": "imagepsfreefont", 
        "overview": "bool imagepsfreefont ( resource $font_index )", 
        "parameters": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }
        ], 
        "path": "php/function.imagepsfreefont", 
        "type": "Image"
    }, 
    "imagepsloadfont": {
        "description": "Load a PostScript Type 1 font from the given filename.", 
        "name": "imagepsloadfont", 
        "overview": "resource imagepsloadfont ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the Postscript font file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagepsloadfont", 
        "type": "Image"
    }, 
    "imagepsslantfont": {
        "description": "Slant a given font given.", 
        "name": "imagepsslantfont", 
        "overview": "bool imagepsslantfont ( resource $font_index , float $slant )", 
        "parameters": [
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "Slant level.", 
                "name": "slant"
            }
        ], 
        "path": "php/function.imagepsslantfont", 
        "type": "Image"
    }, 
    "imagepstext": {
        "description": "Draws a text on an image using PostScript Type1 fonts.", 
        "name": "imagepstext", 
        "overview": "array imagepstext ( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The text to be written.", 
                "name": "text"
            }, 
            {
                "descr": "A font resource, returned by imagepsloadfont().", 
                "name": "font_index"
            }, 
            {
                "descr": "size is expressed in pixels.", 
                "name": "size"
            }, 
            {
                "descr": "The color in which the text will be painted.", 
                "name": "foreground"
            }, 
            {
                "descr": "The color to which the text will try to fade in with antialiasing. ", 
                "name": "background"
            }, 
            {
                "descr": "x-coordinate for the lower-left corner of the first character.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate for the lower-left corner of the first character.", 
                "name": "y"
            }, 
            {
                "descr": "Allows you to change the default value of a space in a font. ", 
                "name": "space"
            }, 
            {
                "descr": "tightness allows you to control the amount of white space between characters. ", 
                "name": "tightness"
            }, 
            {
                "descr": "angle is in degrees.", 
                "name": "angle"
            }, 
            {
                "descr": "Allows you to control the number of colours used for antialiasing text. ", 
                "name": "antialias_steps"
            }
        ], 
        "path": "php/function.imagepstext", 
        "type": "Image"
    }, 
    "imagerectangle": {
        "description": "imagerectangle() creates a rectangle starting at the specified coordinates.", 
        "name": "imagerectangle", 
        "overview": "bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Upper left x coordinate.", 
                "name": "x1"
            }, 
            {
                "descr": "Upper left y coordinate 0, 0 is the top left corner of the image.", 
                "name": "y1"
            }, 
            {
                "descr": "Bottom right x coordinate.", 
                "name": "x2"
            }, 
            {
                "descr": "Bottom right y coordinate.", 
                "name": "y2"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagerectangle", 
        "type": "Image"
    }, 
    "imagerotate": {
        "description": "Rotates the image image using the given angle in degrees.", 
        "name": "imagerotate", 
        "overview": "resource imagerotate ( resource $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Rotation angle, in degrees. The rotation angle is interpreted as the number of degrees to rotate the image anticlockwise.", 
                "name": "angle"
            }, 
            {
                "descr": "Specifies the color of the uncovered zone after the rotation", 
                "name": "bgd_color"
            }, 
            {
                "descr": "If set and non-zero, transparent colors are ignored (otherwise kept).", 
                "name": "ignore_transparent"
            }
        ], 
        "path": "php/function.imagerotate", 
        "type": "Image"
    }, 
    "imagesavealpha": {
        "description": "imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.", 
        "name": "imagesavealpha", 
        "overview": "bool imagesavealpha ( resource $image , bool $saveflag )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Whether to save the alpha channel or not. ", 
                "name": "saveflag"
            }
        ], 
        "path": "php/function.imagesavealpha", 
        "type": "Image"
    }, 
    "imagescale": {
        "description": "", 
        "name": "imagescale", 
        "overview": "resource imagescale ( resource $image , int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "One of IMG_NEAREST_NEIGHBOUR, IMG_BILINEAR_FIXED, IMG_BICUBIC, IMG_BICUBIC_FIXED or anything else (will use two pass).", 
                "name": "new_width   new_height   mode"
            }
        ], 
        "path": "php/function.imagescale", 
        "type": "Image"
    }, 
    "imagesetbrush": {
        "description": "imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.", 
        "name": "imagesetbrush", 
        "overview": "bool imagesetbrush ( resource $image , resource $brush )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An image resource.", 
                "name": "brush"
            }
        ], 
        "path": "php/function.imagesetbrush", 
        "type": "Image"
    }, 
    "imagesetinterpolation": {
        "description": "Sets the interpolation method, setting an interpolation method affects the rendering of various functions in GD, such as the imagerotate() function.", 
        "name": "imagesetinterpolation", 
        "overview": "bool imagesetinterpolation ( resource $image [, int $method = IMG_BILINEAR_FIXED ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The interpolation method, which can be one of the following:   IMG_BELL: Bell filter. ", 
                "name": "method"
            }
        ], 
        "path": "php/function.imagesetinterpolation", 
        "type": "Image"
    }, 
    "imagesetpixel": {
        "description": "imagesetpixel() draws a pixel at the specified coordinate.", 
        "name": "imagesetpixel", 
        "overview": "bool imagesetpixel ( resource $image , int $x , int $y , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "x-coordinate.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate.", 
                "name": "y"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagesetpixel", 
        "type": "Image"
    }, 
    "imagesetstyle": {
        "description": "imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED.", 
        "name": "imagesetstyle", 
        "overview": "bool imagesetstyle ( resource $image , array $style )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "An array of pixel colors. You can use the IMG_COLOR_TRANSPARENT constant to add a transparent pixel.", 
                "name": "style"
            }
        ], 
        "path": "php/function.imagesetstyle", 
        "type": "Image"
    }, 
    "imagesetthickness": {
        "description": "imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels.", 
        "name": "imagesetthickness", 
        "overview": "bool imagesetthickness ( resource $image , int $thickness )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Thickness, in pixels.", 
                "name": "thickness"
            }
        ], 
        "path": "php/function.imagesetthickness", 
        "type": "Image"
    }, 
    "imagesettile": {
        "description": "imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon()) when filling with the special color IMG_COLOR_TILED.", 
        "name": "imagesettile", 
        "overview": "bool imagesettile ( resource $image , resource $tile )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The image resource to be used as a tile.", 
                "name": "tile"
            }
        ], 
        "path": "php/function.imagesettile", 
        "type": "Image"
    }, 
    "imagestring": {
        "description": "Draws a string at the given coordinates.", 
        "name": "imagestring", 
        "overview": "bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the upper left corner.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the upper left corner.", 
                "name": "y"
            }, 
            {
                "descr": "The string to be written.", 
                "name": "string"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagestring", 
        "type": "Image"
    }, 
    "imagestringup": {
        "description": "Draws a string vertically at the given coordinates.", 
        "name": "imagestringup", 
        "overview": "bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().", 
                "name": "font"
            }, 
            {
                "descr": "x-coordinate of the bottom left corner.", 
                "name": "x"
            }, 
            {
                "descr": "y-coordinate of the bottom left corner.", 
                "name": "y"
            }, 
            {
                "descr": "The string to be written.", 
                "name": "string"
            }, 
            {
                "descr": "A color identifier created with imagecolorallocate().", 
                "name": "color"
            }
        ], 
        "path": "php/function.imagestringup", 
        "type": "Image"
    }, 
    "imagesx": {
        "description": "Returns the width of the given image resource.", 
        "name": "imagesx", 
        "overview": "int imagesx ( resource $image )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagesx", 
        "type": "Image"
    }, 
    "imagesy": {
        "description": "Returns the height of the given image resource.", 
        "name": "imagesy", 
        "overview": "int imagesy ( resource $image )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }
        ], 
        "path": "php/function.imagesy", 
        "type": "Image"
    }, 
    "imagetruecolortopalette": {
        "description": "imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.", 
        "name": "imagetruecolortopalette", 
        "overview": "bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "Indicates if the image should be dithered - if it is TRUE then dithering will be used which will result in a more speckled image but with better color approximation.", 
                "name": "dither"
            }, 
            {
                "descr": "Sets the maximum number of colors that should be retained in the palette.", 
                "name": "ncolors"
            }
        ], 
        "path": "php/function.imagetruecolortopalette", 
        "type": "Image"
    }, 
    "imagettfbbox": {
        "description": "This function calculates and returns the bounding box in pixels for a TrueType text.", 
        "name": "imagettfbbox", 
        "overview": "array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )", 
        "parameters": [
            {
                "descr": "The font size. Note:  In GD 1, this is measured in pixels. ", 
                "name": "size"
            }, 
            {
                "descr": "Angle in degrees in which text will be measured.", 
                "name": "angle"
            }, 
            {
                "descr": "The name of the TrueType font file (can be a URL). ", 
                "name": "fontfile"
            }, 
            {
                "descr": "The string to be measured.", 
                "name": "text"
            }
        ], 
        "path": "php/function.imagettfbbox", 
        "type": "Image"
    }, 
    "imagettftext": {
        "description": "Writes the given text into the image using TrueType fonts.", 
        "name": "imagettftext", 
        "overview": "array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).", 
                "name": "size"
            }, 
            {
                "descr": "The angle in degrees, with 0 degrees being left-to-right reading text. ", 
                "name": "angle"
            }, 
            {
                "descr": "The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). ", 
                "name": "x"
            }, 
            {
                "descr": "The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character.", 
                "name": "y"
            }, 
            {
                "descr": "The color index. Using the negative of a color index has the effect of turning off antialiasing. ", 
                "name": "color"
            }, 
            {
                "descr": "The path to the TrueType font you wish to use. ", 
                "name": "fontfile"
            }, 
            {
                "descr": "The text string in UTF-8 encoding. ", 
                "name": "text"
            }
        ], 
        "path": "php/function.imagettftext", 
        "type": "Image"
    }, 
    "imagetypes": {
        "description": "Returns the image types supported by the current PHP installation.", 
        "name": "imagetypes", 
        "overview": "int imagetypes ( void )", 
        "parameters": [], 
        "path": "php/function.imagetypes", 
        "type": "Image"
    }, 
    "imagewbmp": {
        "description": "imagewbmp() outputs or save a WBMP version of the given image.", 
        "name": "imagewbmp", 
        "overview": "bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). ", 
                "name": "foreground"
            }
        ], 
        "path": "php/function.imagewbmp", 
        "type": "Image"
    }, 
    "imagewebp": {
        "description": "Outputs or save an WebP version of the given image.", 
        "name": "imagewebp", 
        "overview": "bool imagewebp ( resource $image , string $filename )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.imagewebp", 
        "type": "Image"
    }, 
    "imagexbm": {
        "description": "Outputs or save an XBM version of the given image.", 
        "name": "imagexbm", 
        "overview": "bool imagexbm ( resource $image , string $filename [, int $foreground ] )", 
        "parameters": [
            {
                "descr": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().", 
                "name": "image"
            }, 
            {
                "descr": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). ", 
                "name": "foreground"
            }
        ], 
        "path": "php/function.imagexbm", 
        "type": "Image"
    }, 
    "imap_8bit": {
        "description": "Convert an 8bit string to a quoted-printable string (according to \u00bb RFC2045, section 6.7).", 
        "name": "imap_8bit", 
        "overview": "string imap_8bit ( string $string )", 
        "parameters": [
            {
                "descr": "The 8bit string to convert", 
                "name": "string"
            }
        ], 
        "path": "php/function.imap-8bit", 
        "type": "IMAP"
    }, 
    "imap_alerts": {
        "description": "Returns all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page.", 
        "name": "imap_alerts", 
        "overview": "array imap_alerts ( void )", 
        "parameters": [], 
        "path": "php/function.imap-alerts", 
        "type": "IMAP"
    }, 
    "imap_append": {
        "description": "Appends a string message to the specified mailbox.", 
        "name": "imap_append", 
        "overview": "bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The message to be append, as a string   When talking to the Cyrus IMAP server, you must use \"\\r\\n\" as your end-of-line terminator instead of \"\\n\" or the operation will fail", 
                "name": "message"
            }, 
            {
                "descr": "If provided, the options will also be written to the mailbox", 
                "name": "options"
            }, 
            {
                "descr": "If this parameter is set, it will set the INTERNALDATE on the appended message. ", 
                "name": "internal_date"
            }
        ], 
        "path": "php/function.imap-append", 
        "type": "IMAP"
    }, 
    "imap_base64": {
        "description": "Decodes the given BASE-64 encoded text.", 
        "name": "imap_base64", 
        "overview": "string imap_base64 ( string $text )", 
        "parameters": [
            {
                "descr": "The encoded text", 
                "name": "text"
            }
        ], 
        "path": "php/function.imap-base64", 
        "type": "IMAP"
    }, 
    "imap_binary": {
        "description": "Convert an 8bit string to a base64 string according to \u00bb RFC2045, Section 6.8.", 
        "name": "imap_binary", 
        "overview": "string imap_binary ( string $string )", 
        "parameters": [
            {
                "descr": "The 8bit string", 
                "name": "string"
            }
        ], 
        "path": "php/function.imap-binary", 
        "type": "IMAP"
    }, 
    "imap_body": {
        "description": "imap_body() returns the body of the message, numbered msg_number in the current mailbox.", 
        "name": "imap_body", 
        "overview": "string imap_body ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The optional options are a bit mask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-body", 
        "type": "IMAP"
    }, 
    "imap_bodystruct": {
        "description": "Read the structure of a specified body section of a specific message.", 
        "name": "imap_bodystruct", 
        "overview": "object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The body section to read", 
                "name": "section"
            }
        ], 
        "path": "php/function.imap-bodystruct", 
        "type": "IMAP"
    }, 
    "imap_check": {
        "description": "Checks information about the current mailbox.", 
        "name": "imap_check", 
        "overview": "object imap_check ( resource $imap_stream )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-check", 
        "type": "IMAP"
    }, 
    "imap_clearflag_full": {
        "description": "This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence.", 
        "name": "imap_clearflag_full", 
        "overview": "bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A sequence of message numbers. You can enumerate desired messages with the X,Y syntax, or retrieve all messages within an interval with the X:Y syntax", 
                "name": "sequence"
            }, 
            {
                "descr": "The flags which you can unset are \"\\\\Seen\", \"\\\\Answered\", \"\\\\Flagged\", \"\\\\Deleted\", and \"\\\\Draft\" (as defined by \u00bb RFC2060)", 
                "name": "flag"
            }, 
            {
                "descr": "options are a bit mask and may contain the single option:   ST_UID - The sequence argument contains UIDs instead of sequence numbers", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-clearflag-full", 
        "type": "IMAP"
    }, 
    "imap_close": {
        "description": "Closes the imap stream.", 
        "name": "imap_close", 
        "overview": "bool imap_close ( resource $imap_stream [, int $flag = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "If set to CL_EXPUNGE, the function will silently expunge the mailbox before closing, removing all messages marked for deletion. ", 
                "name": "flag"
            }
        ], 
        "path": "php/function.imap-close", 
        "type": "IMAP"
    }, 
    "imap_createmailbox": {
        "description": "Creates a new mailbox specified by mailbox.", 
        "name": "imap_createmailbox", 
        "overview": "bool imap_createmailbox ( resource $imap_stream , string $mailbox )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information. ", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-createmailbox", 
        "type": "IMAP"
    }, 
    "imap_delete": {
        "description": "Marks messages listed in msg_number for deletion. Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE.", 
        "name": "imap_delete", 
        "overview": "bool imap_delete ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "You can set the FT_UID which tells the function to treat the msg_number argument as an UID.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-delete", 
        "type": "IMAP"
    }, 
    "imap_deletemailbox": {
        "description": "Deletes the specified mailbox.", 
        "name": "imap_deletemailbox", 
        "overview": "bool imap_deletemailbox ( resource $imap_stream , string $mailbox )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-deletemailbox", 
        "type": "IMAP"
    }, 
    "imap_errors": {
        "description": "Gets all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset.", 
        "name": "imap_errors", 
        "overview": "array imap_errors ( void )", 
        "parameters": [], 
        "path": "php/function.imap-errors", 
        "type": "IMAP"
    }, 
    "imap_expunge": {
        "description": "Deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full().", 
        "name": "imap_expunge", 
        "overview": "bool imap_expunge ( resource $imap_stream )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-expunge", 
        "type": "IMAP"
    }, 
    "imap_fetch_overview": {
        "description": "This function fetches mail headers for the given sequence and returns an overview of their contents.", 
        "name": "imap_fetch_overview", 
        "overview": "array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A message sequence description. ", 
                "name": "sequence"
            }, 
            {
                "descr": "sequence will contain a sequence of message indices or UIDs, if this parameter is set to FT_UID.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetch-overview", 
        "type": "IMAP"
    }, 
    "imap_fetchbody": {
        "description": "Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function.", 
        "name": "imap_fetchbody", 
        "overview": "string imap_fetchbody ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification", 
                "name": "section"
            }, 
            {
                "descr": "A bitmask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchbody", 
        "type": "IMAP"
    }, 
    "imap_fetchheader": {
        "description": "This function causes a fetch of the complete, unfiltered \u00bb RFC2822 format header of the specified message.", 
        "name": "imap_fetchheader", 
        "overview": "string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The possible options are:   FT_UID - The msgno argument is a UID     FT_INTERNAL - The return string is in \"internal\" format, without any attempt to canonicalize to CRLF newlines     FT_PREFETCHTEXT - The RFC822.TEXT should be pre-fetched at the same time. This avoids an extra RTT on an IMAP connection if a full message text is desired (e.g. in a \"save to local file\" operation)", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchheader", 
        "type": "IMAP"
    }, 
    "imap_fetchmime": {
        "description": "Fetch the MIME headers of a particular section of the body of the specified messages.", 
        "name": "imap_fetchmime", 
        "overview": "string imap_fetchmime ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification", 
                "name": "section"
            }, 
            {
                "descr": "A bitmask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchmime", 
        "type": "IMAP"
    }, 
    "imap_fetchstructure": {
        "description": "Fetches all the structured information for a given message.", 
        "name": "imap_fetchstructure", 
        "overview": "object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "This optional parameter only has a single option, FT_UID, which tells the function to treat the msg_number argument as a UID.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-fetchstructure", 
        "type": "IMAP"
    }, 
    "imap_gc": {
        "description": "Purges the cache of entries of a specific type.", 
        "name": "imap_gc", 
        "overview": "bool imap_gc ( resource $imap_stream , int $caches )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "Specifies the cache to purge. It may one or a combination of the following constants: IMAP_GC_ELT (message cache elements), IMAP_GC_ENV (enveloppe and bodies), IMAP_GC_TEXTS (texts).", 
                "name": "caches"
            }
        ], 
        "path": "php/function.imap-gc", 
        "type": "IMAP"
    }, 
    "imap_get_quota": {
        "description": "Retrieve the quota level settings, and usage statics per mailbox.", 
        "name": "imap_get_quota", 
        "overview": "array imap_get_quota ( resource $imap_stream , string $quota_root )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "quota_root should normally be in the form of user.name where name is the mailbox you wish to retrieve information about.", 
                "name": "quota_root"
            }
        ], 
        "path": "php/function.imap-get-quota", 
        "type": "IMAP"
    }, 
    "imap_get_quotaroot": {
        "description": "Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user's total mailbox usage. The usage value represents the user's current total mailbox capacity.", 
        "name": "imap_get_quotaroot", 
        "overview": "array imap_get_quotaroot ( resource $imap_stream , string $quota_root )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "quota_root should normally be in the form of which mailbox (i.e. ", 
                "name": "quota_root"
            }
        ], 
        "path": "php/function.imap-get-quotaroot", 
        "type": "IMAP"
    }, 
    "imap_getacl": {
        "description": "Gets the ACL for a given mailbox.", 
        "name": "imap_getacl", 
        "overview": "array imap_getacl ( resource $imap_stream , string $mailbox )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-getacl", 
        "type": "IMAP"
    }, 
    "imap_getmailboxes": {
        "description": "Gets information on the mailboxes.", 
        "name": "imap_getmailboxes", 
        "overview": "array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-getmailboxes", 
        "type": "IMAP"
    }, 
    "imap_getsubscribed": {
        "description": "Gets information about the subscribed mailboxes.", 
        "name": "imap_getsubscribed", 
        "overview": "array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-getsubscribed", 
        "type": "IMAP"
    }, 
    "imap_headerinfo": {
        "description": "Gets information about the given message number by reading its headers.", 
        "name": "imap_headerinfo", 
        "overview": "object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "Number of characters for the fetchfrom property. ", 
                "name": "fromlength"
            }, 
            {
                "descr": "Number of characters for the fetchsubject property Must be greater than or equal to zero.", 
                "name": "subjectlength"
            }
        ], 
        "path": "php/function.imap-headerinfo", 
        "type": "IMAP"
    }, 
    "imap_headers": {
        "description": "Returns headers for all messages in a mailbox.", 
        "name": "imap_headers", 
        "overview": "array imap_headers ( resource $imap_stream )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-headers", 
        "type": "IMAP"
    }, 
    "imap_last_error": {
        "description": "Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error.", 
        "name": "imap_last_error", 
        "overview": "string imap_last_error ( void )", 
        "parameters": [], 
        "path": "php/function.imap-last-error", 
        "type": "IMAP"
    }, 
    "imap_list": {
        "description": "Read the list of mailboxes.", 
        "name": "imap_list", 
        "overview": "array imap_list ( resource $imap_stream , string $ref , string $pattern )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open().", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-list", 
        "type": "IMAP"
    }, 
    "imap_listscan": {
        "description": "Returns an array containing the names of the mailboxes that have content in the text of the mailbox.", 
        "name": "imap_listscan", 
        "overview": "array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The searched string", 
                "name": "content"
            }
        ], 
        "path": "php/function.imap-listscan", 
        "type": "IMAP"
    }, 
    "imap_lsub": {
        "description": "Gets an array of all the mailboxes that you have subscribed.", 
        "name": "imap_lsub", 
        "overview": "array imap_lsub ( resource $imap_stream , string $ref , string $pattern )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "ref should normally be just the server specification as described in imap_open()", 
                "name": "ref"
            }, 
            {
                "descr": "Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. ", 
                "name": "pattern"
            }
        ], 
        "path": "php/function.imap-lsub", 
        "type": "IMAP"
    }, 
    "imap_mail": {
        "description": "This function allows sending of emails with correct handling of Cc and Bcc receivers.", 
        "name": "imap_mail", 
        "overview": "bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] )", 
        "parameters": [
            {
                "descr": "The receiver", 
                "name": "to"
            }, 
            {
                "descr": "The mail subject", 
                "name": "subject"
            }, 
            {
                "descr": "The mail body, see imap_mail_compose()", 
                "name": "message"
            }, 
            {
                "descr": "As string with additional headers to be set on the mail", 
                "name": "additional_headers"
            }, 
            {
                "descr": "The receivers specified in bcc will get the mail, but are excluded from the headers.", 
                "name": "cc   bcc"
            }, 
            {
                "descr": "Use this parameter to specify return path upon mail delivery failure. ", 
                "name": "rpath"
            }
        ], 
        "path": "php/function.imap-mail", 
        "type": "IMAP"
    }, 
    "imap_mail_compose": {
        "description": "Create a MIME message based on the given envelope and body sections.", 
        "name": "imap_mail_compose", 
        "overview": "string imap_mail_compose ( array $envelope , array $body )", 
        "parameters": [
            {
                "descr": "An associative array of headers fields. ", 
                "name": "envelope"
            }, 
            {
                "descr": "An indexed array of bodies   A body is an associative array which can consist of the following keys: \"type\", \"encoding\", \"charset\", \"type.parameters\", \"subtype\", \"id\", \"description\", \"disposition.type\", \"disposition\", \"contents.data\", \"lines\", \"bytes\" and \"md5\".", 
                "name": "body"
            }
        ], 
        "path": "php/function.imap-mail-compose", 
        "type": "IMAP"
    }, 
    "imap_mail_copy": {
        "description": "Copies mail messages specified by msglist to specified mailbox.", 
        "name": "imap_mail_copy", 
        "overview": "bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "msglist is a range not just message numbers (as described in \u00bb RFC2060).", 
                "name": "msglist"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "options is a bitmask of one or more of   CP_UID - the sequence numbers contain UIDS     CP_MOVE - Delete the messages from the current mailbox after copying", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-mail-copy", 
        "type": "IMAP"
    }, 
    "imap_mail_move": {
        "description": "Moves mail messages specified by msglist to the specified mailbox.", 
        "name": "imap_mail_move", 
        "overview": "bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "msglist is a range not just message numbers (as described in \u00bb RFC2060).", 
                "name": "msglist"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "options is a bitmask and may contain the single option:   CP_UID - the sequence numbers contain UIDS", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-mail-move", 
        "type": "IMAP"
    }, 
    "imap_mailboxmsginfo": {
        "description": "Checks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute.", 
        "name": "imap_mailboxmsginfo", 
        "overview": "object imap_mailboxmsginfo ( resource $imap_stream )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-mailboxmsginfo", 
        "type": "IMAP"
    }, 
    "imap_mime_header_decode": {
        "description": "Decodes MIME message header extensions that are non ASCII text (see \u00bb RFC2047).", 
        "name": "imap_mime_header_decode", 
        "overview": "array imap_mime_header_decode ( string $text )", 
        "parameters": [
            {
                "descr": "The MIME text", 
                "name": "text"
            }
        ], 
        "path": "php/function.imap-mime-header-decode", 
        "type": "IMAP"
    }, 
    "imap_msgno": {
        "description": "Returns the message sequence number for the given uid.", 
        "name": "imap_msgno", 
        "overview": "int imap_msgno ( resource $imap_stream , int $uid )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message UID", 
                "name": "uid"
            }
        ], 
        "path": "php/function.imap-msgno", 
        "type": "IMAP"
    }, 
    "imap_num_msg": {
        "description": "Gets the number of messages in the current mailbox.", 
        "name": "imap_num_msg", 
        "overview": "int imap_num_msg ( resource $imap_stream )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-num-msg", 
        "type": "IMAP"
    }, 
    "imap_num_recent": {
        "description": "Gets the number of recent messages in the current mailbox.", 
        "name": "imap_num_recent", 
        "overview": "int imap_num_recent ( resource $imap_stream )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-num-recent", 
        "type": "IMAP"
    }, 
    "imap_open": {
        "description": "Opens an IMAP stream to a mailbox.", 
        "name": "imap_open", 
        "overview": "resource imap_open ( string $mailbox , string $username , string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] )", 
        "parameters": [
            {
                "descr": "A mailbox name consists of a server and a mailbox path on this server. ", 
                "name": "mailbox"
            }, 
            {
                "descr": "The user name", 
                "name": "username"
            }, 
            {
                "descr": "The password associated with the username", 
                "name": "password"
            }, 
            {
                "descr": "The options are a bit mask with one or more of the following:   OP_READONLY - Open mailbox read-only     OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only)     OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't open a mailbox.     CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see also imap_delete() and imap_expunge())     OP_DEBUG - Debug protocol negotiations     OP_SHORTCACHE - Short (elt-only) caching     OP_SILENT - Don't pass up events (internal use)     OP_PROTOTYPE - Return driver prototype     OP_SECURE - Don't do non-secure authentication", 
                "name": "options"
            }, 
            {
                "descr": "Number of maximum connect attempts", 
                "name": "n_retries"
            }, 
            {
                "descr": "Connection parameters, the following (string) keys maybe used to set one or more connection parameters:   DISABLE_AUTHENTICATOR - Disable authentication properties", 
                "name": "params"
            }
        ], 
        "path": "php/function.imap-open", 
        "type": "IMAP"
    }, 
    "imap_ping": {
        "description": "imap_ping() pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic \"new mail check\" as well as a \"keep alive\" for servers which have inactivity timeout.", 
        "name": "imap_ping", 
        "overview": "bool imap_ping ( resource $imap_stream )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-ping", 
        "type": "IMAP"
    }, 
    "imap_qprint": {
        "description": "Convert a quoted-printable string to an 8 bit string according to \u00bb RFC2045, section 6.7.", 
        "name": "imap_qprint", 
        "overview": "string imap_qprint ( string $string )", 
        "parameters": [
            {
                "descr": "A quoted-printable string", 
                "name": "string"
            }
        ], 
        "path": "php/function.imap-qprint", 
        "type": "IMAP"
    }, 
    "imap_renamemailbox": {
        "description": "This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names).", 
        "name": "imap_renamemailbox", 
        "overview": "bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The old mailbox name, see imap_open() for more information", 
                "name": "old_mbox"
            }, 
            {
                "descr": "The new mailbox name, see imap_open() for more information", 
                "name": "new_mbox"
            }
        ], 
        "path": "php/function.imap-renamemailbox", 
        "type": "IMAP"
    }, 
    "imap_reopen": {
        "description": "Reopens the specified stream to a new mailbox on an IMAP or NNTP server.", 
        "name": "imap_reopen", 
        "overview": "bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The options are a bit mask with one or more of the following:   OP_READONLY - Open mailbox read-only     OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only)     OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't open a mailbox.     OP_EXPUNGE - Silently expunge recycle stream     CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see also imap_delete() and imap_expunge())", 
                "name": "options"
            }, 
            {
                "descr": "Number of maximum connect attempts", 
                "name": "n_retries"
            }
        ], 
        "path": "php/function.imap-reopen", 
        "type": "IMAP"
    }, 
    "imap_rfc822_parse_adrlist": {
        "description": "Parses the address string as defined in \u00bb RFC2822 and for each address.", 
        "name": "imap_rfc822_parse_adrlist", 
        "overview": "array imap_rfc822_parse_adrlist ( string $address , string $default_host )", 
        "parameters": [
            {
                "descr": "A string containing addresses", 
                "name": "address"
            }, 
            {
                "descr": "The default host name", 
                "name": "default_host"
            }
        ], 
        "path": "php/function.imap-rfc822-parse-adrlist", 
        "type": "IMAP"
    }, 
    "imap_rfc822_parse_headers": {
        "description": "Gets an object of various header elements, similar to imap_header().", 
        "name": "imap_rfc822_parse_headers", 
        "overview": "object imap_rfc822_parse_headers ( string $headers [, string $defaulthost = \"UNKNOWN\" ] )", 
        "parameters": [
            {
                "descr": "The parsed headers data", 
                "name": "headers"
            }, 
            {
                "descr": "The default host name", 
                "name": "defaulthost"
            }
        ], 
        "path": "php/function.imap-rfc822-parse-headers", 
        "type": "IMAP"
    }, 
    "imap_rfc822_write_address": {
        "description": "Returns a properly formatted email address as defined in \u00bb RFC2822 given the needed information.", 
        "name": "imap_rfc822_write_address", 
        "overview": "string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )", 
        "parameters": [
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The email host part", 
                "name": "host"
            }, 
            {
                "descr": "The name of the account owner", 
                "name": "personal"
            }
        ], 
        "path": "php/function.imap-rfc822-write-address", 
        "type": "IMAP"
    }, 
    "imap_savebody": {
        "description": "Saves a part or the whole body of the specified message.", 
        "name": "imap_savebody", 
        "overview": "bool imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = \"\" [, int $options = 0 ]] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The path to the saved file as a string, or a valid file descriptor returned by fopen().", 
                "name": "file"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }, 
            {
                "descr": "The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification", 
                "name": "part_number"
            }, 
            {
                "descr": "A bitmask with one or more of the following:   FT_UID - The msg_number is a UID     FT_PEEK - Do not set the \\Seen flag if not already set     FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-savebody", 
        "type": "IMAP"
    }, 
    "imap_search": {
        "description": "This function performs a search on the mailbox currently opened in the given IMAP stream.", 
        "name": "imap_search", 
        "overview": "array imap_search ( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NIL ]] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A string, delimited by spaces, in which the following keywords are allowed. ", 
                "name": "criteria"
            }, 
            {
                "descr": "Valid values for options are SE_UID, which causes the returned array to contain UIDs instead of messages sequence numbers.", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-search", 
        "type": "IMAP"
    }, 
    "imap_set_quota": {
        "description": "Sets an upper limit quota on a per mailbox basis.", 
        "name": "imap_set_quota", 
        "overview": "bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox to have a quota set. ", 
                "name": "quota_root"
            }, 
            {
                "descr": "The maximum size (in KB) for the quota_root", 
                "name": "quota_limit"
            }
        ], 
        "path": "php/function.imap-set-quota", 
        "type": "IMAP"
    }, 
    "imap_setacl": {
        "description": "Sets the ACL for a giving mailbox.", 
        "name": "imap_setacl", 
        "overview": "bool imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "The user to give the rights to.", 
                "name": "id"
            }, 
            {
                "descr": "The rights to give to the user. ", 
                "name": "rights"
            }
        ], 
        "path": "php/function.imap-setacl", 
        "type": "IMAP"
    }, 
    "imap_setflag_full": {
        "description": "Causes a store to add the specified flag to the flags set for the messages in the specified sequence.", 
        "name": "imap_setflag_full", 
        "overview": "bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "A sequence of message numbers. You can enumerate desired messages with the X,Y syntax, or retrieve all messages within an interval with the X:Y syntax", 
                "name": "sequence"
            }, 
            {
                "descr": "The flags which you can set are \\Seen, \\Answered, \\Flagged, \\Deleted, and \\Draft as defined by \u00bb RFC2060.", 
                "name": "flag"
            }, 
            {
                "descr": "A bit mask that may contain the single option:   ST_UID - The sequence argument contains UIDs instead of sequence numbers", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-setflag-full", 
        "type": "IMAP"
    }, 
    "imap_sort": {
        "description": "Gets and sorts message numbers by the given parameters.", 
        "name": "imap_sort", 
        "overview": "array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL ]]] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "Criteria can be one (and only one) of the following:   SORTDATE - message Date     SORTARRIVAL - arrival date     SORTFROM - mailbox in first From address     SORTSUBJECT - message subject     SORTTO - mailbox in first To address     SORTCC - mailbox in first cc address     SORTSIZE - size of message in octets", 
                "name": "criteria"
            }, 
            {
                "descr": "Set this to 1 for reverse sorting", 
                "name": "reverse"
            }, 
            {
                "descr": "The options are a bitmask of one or more of the following:   SE_UID - Return UIDs instead of sequence numbers     SE_NOPREFETCH - Don't prefetch searched messages", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-sort", 
        "type": "IMAP"
    }, 
    "imap_status": {
        "description": "Gets status information about the given mailbox.", 
        "name": "imap_status", 
        "overview": "object imap_status ( resource $imap_stream , string $mailbox , int $options )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }, 
            {
                "descr": "Valid flags are:   SA_MESSAGES - set $status->messages to the number of messages in the mailbox     SA_RECENT - set $status->recent to the number of recent messages in the mailbox     SA_UNSEEN - set $status->unseen to the number of unseen (new) messages in the mailbox     SA_UIDNEXT - set $status->uidnext to the next uid to be used in the mailbox     SA_UIDVALIDITY - set $status->uidvalidity to a constant that changes when uids for the mailbox may no longer be valid     SA_ALL - set all of the above", 
                "name": "options"
            }
        ], 
        "path": "php/function.imap-status", 
        "type": "IMAP"
    }, 
    "imap_subscribe": {
        "description": "Subscribe to a new mailbox.", 
        "name": "imap_subscribe", 
        "overview": "bool imap_subscribe ( resource $imap_stream , string $mailbox )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-subscribe", 
        "type": "IMAP"
    }, 
    "imap_thread": {
        "description": "Gets a tree of a threaded message.", 
        "name": "imap_thread", 
        "overview": "array imap_thread ( resource $imap_stream [, int $options = SE_FREE ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }
        ], 
        "path": "php/function.imap-thread", 
        "type": "IMAP"
    }, 
    "imap_timeout": {
        "description": "Sets or fetches the imap timeout.", 
        "name": "imap_timeout", 
        "overview": "mixed imap_timeout ( int $timeout_type [, int $timeout = -1 ] )", 
        "parameters": [
            {
                "descr": "One of the following: IMAP_OPENTIMEOUT, IMAP_READTIMEOUT, IMAP_WRITETIMEOUT, or IMAP_CLOSETIMEOUT.", 
                "name": "timeout_type"
            }, 
            {
                "descr": "The timeout, in seconds.", 
                "name": "timeout"
            }
        ], 
        "path": "php/function.imap-timeout", 
        "type": "IMAP"
    }, 
    "imap_uid": {
        "description": "This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes.", 
        "name": "imap_uid", 
        "overview": "int imap_uid ( resource $imap_stream , int $msg_number )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number.", 
                "name": "msg_number"
            }
        ], 
        "path": "php/function.imap-uid", 
        "type": "IMAP"
    }, 
    "imap_undelete": {
        "description": "Removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move().", 
        "name": "imap_undelete", 
        "overview": "bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The message number", 
                "name": "msg_number"
            }
        ], 
        "path": "php/function.imap-undelete", 
        "type": "IMAP"
    }, 
    "imap_unsubscribe": {
        "description": "Unsubscribe from the specified mailbox.", 
        "name": "imap_unsubscribe", 
        "overview": "bool imap_unsubscribe ( resource $imap_stream , string $mailbox )", 
        "parameters": [
            {
                "descr": "An IMAP stream returned by imap_open().", 
                "name": "imap_stream"
            }, 
            {
                "descr": "The mailbox name, see imap_open() for more information", 
                "name": "mailbox"
            }
        ], 
        "path": "php/function.imap-unsubscribe", 
        "type": "IMAP"
    }, 
    "imap_utf7_decode": {
        "description": "Decodes modified UTF-7 text into ISO-8859-1 string.", 
        "name": "imap_utf7_decode", 
        "overview": "string imap_utf7_decode ( string $text )", 
        "parameters": [
            {
                "descr": "A modified UTF-7 encoding string, as defined in \u00bb RFC 2060, section 5.1.3 (original UTF-7 was defined in \u00bb RFC1642).", 
                "name": "text"
            }
        ], 
        "path": "php/function.imap-utf7-decode", 
        "type": "IMAP"
    }, 
    "imap_utf7_encode": {
        "description": "Converts data to modified UTF-7 text.", 
        "name": "imap_utf7_encode", 
        "overview": "string imap_utf7_encode ( string $data )", 
        "parameters": [
            {
                "descr": "An ISO-8859-1 string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.imap-utf7-encode", 
        "type": "IMAP"
    }, 
    "imap_utf8": {
        "description": "Converts the given mime_encoded_text to UTF-8.", 
        "name": "imap_utf8", 
        "overview": "string imap_utf8 ( string $mime_encoded_text )", 
        "parameters": [
            {
                "descr": "A MIME encoded string. MIME encoding method and the UTF-8 specification are described in \u00bb RFC2047 and \u00bb RFC2044 respectively.", 
                "name": "mime_encoded_text"
            }
        ], 
        "path": "php/function.imap-utf8", 
        "type": "IMAP"
    }, 
    "implode": {
        "description": "Join array elements with a glue string.", 
        "name": "implode", 
        "overview": "string implode ( string $glue , array $pieces )", 
        "parameters": [
            {
                "descr": "Defaults to an empty string.", 
                "name": "glue"
            }, 
            {
                "descr": "The array of strings to implode.", 
                "name": "pieces"
            }
        ], 
        "path": "php/function.implode", 
        "type": "String"
    }, 
    "import_request_variables": {
        "description": "Imports GET/POST/Cookie variables into the global scope. It is useful if you disabled register_globals, but would like to see some variables in the global scope.", 
        "name": "import_request_variables", 
        "overview": "bool import_request_variables ( string $types [, string $prefix ] )", 
        "parameters": [
            {
                "descr": "Using the types parameter, you can specify which request variables to import. ", 
                "name": "types"
            }, 
            {
                "descr": "Variable name prefix, prepended before all variable's name imported into the global scope. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.import-request-variables", 
        "type": "Variables"
    }, 
    "in_array": {
        "description": "Searches haystack for needle using loose comparison unless strict is set.", 
        "name": "in_array", 
        "overview": "bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )", 
        "parameters": [
            {
                "descr": "The searched value.  Note:  If needle is a string, the comparison is done in a case-sensitive manner.", 
                "name": "needle"
            }, 
            {
                "descr": "The array.", 
                "name": "haystack"
            }, 
            {
                "descr": "If the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack.", 
                "name": "strict"
            }
        ], 
        "path": "php/function.in-array", 
        "type": "Array"
    }, 
    "inet_ntop": {
        "description": "", 
        "name": "inet_ntop", 
        "overview": "string inet_ntop ( string $in_addr )", 
        "parameters": [
            {
                "descr": "A 32bit IPv4, or 128bit IPv6 address.", 
                "name": "in_addr"
            }
        ], 
        "path": "php/function.inet-ntop", 
        "type": "Networking"
    }, 
    "inet_pton": {
        "description": "This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.", 
        "name": "inet_pton", 
        "overview": "string inet_pton ( string $address )", 
        "parameters": [
            {
                "descr": "A human readable IPv4 or IPv6 address.", 
                "name": "address"
            }
        ], 
        "path": "php/function.inet-pton", 
        "type": "Networking"
    }, 
    "ini_get": {
        "description": "Returns the value of the configuration option on success.", 
        "name": "ini_get", 
        "overview": "string ini_get ( string $varname )", 
        "parameters": [
            {
                "descr": "The configuration option name.", 
                "name": "varname"
            }
        ], 
        "path": "php/function.ini-get", 
        "type": "Language"
    }, 
    "ini_get_all": {
        "description": "Returns all the registered configuration options.", 
        "name": "ini_get_all", 
        "overview": "array ini_get_all ([ string $extension [, bool $details = true ]] )", 
        "parameters": [
            {
                "descr": "An optional extension name. If set, the function return only options specific for that extension.", 
                "name": "extension"
            }, 
            {
                "descr": "Retrieve details settings or only the current value for each setting. ", 
                "name": "details"
            }
        ], 
        "path": "php/function.ini-get-all", 
        "type": "Language"
    }, 
    "ini_restore": {
        "description": "Restores a given configuration option to its original value.", 
        "name": "ini_restore", 
        "overview": "void ini_restore ( string $varname )", 
        "parameters": [
            {
                "descr": "The configuration option name.", 
                "name": "varname"
            }
        ], 
        "path": "php/function.ini-restore", 
        "type": "Language"
    }, 
    "ini_set": {
        "description": "Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.", 
        "name": "ini_set", 
        "overview": "string ini_set ( string $varname , string $newvalue )", 
        "parameters": [
            {
                "descr": "Not all the available options can be changed using ini_set(). ", 
                "name": "varname"
            }, 
            {
                "descr": "The new value for the option.", 
                "name": "newvalue"
            }
        ], 
        "path": "php/function.ini-set", 
        "type": "Language"
    }, 
    "inotify_add_watch": {
        "description": "inotify_add_watch() adds a new watch or modify an existing watch for the file or directory specified in pathname.", 
        "name": "inotify_add_watch", 
        "overview": "int inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask )", 
        "parameters": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }, 
            {
                "descr": "File or directory to watch", 
                "name": "pathname"
            }, 
            {
                "descr": "Events to watch for. See Predefined Constants.", 
                "name": "mask"
            }
        ], 
        "path": "php/function.inotify-add-watch", 
        "type": "File System"
    }, 
    "inotify_init": {
        "description": "Initialize an inotify instance for use with inotify_add_watch()", 
        "name": "inotify_init", 
        "overview": "resource inotify_init ( void )", 
        "parameters": [], 
        "path": "php/function.inotify-init", 
        "type": "File System"
    }, 
    "inotify_queue_len": {
        "description": "This function allows to know if inotify_read() will block or not. If a number upper than zero is returned, there are pending events and inotify_read() will not block.", 
        "name": "inotify_queue_len", 
        "overview": "int inotify_queue_len ( resource $inotify_instance )", 
        "parameters": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }
        ], 
        "path": "php/function.inotify-queue-len", 
        "type": "File System"
    }, 
    "inotify_read": {
        "description": "Read inotify events from an inotify instance.", 
        "name": "inotify_read", 
        "overview": "array inotify_read ( resource $inotify_instance )", 
        "parameters": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }
        ], 
        "path": "php/function.inotify-read", 
        "type": "File System"
    }, 
    "inotify_rm_watch": {
        "description": "inotify_rm_watch() removes the watch watch_descriptor from the inotify instance inotify_instance.", 
        "name": "inotify_rm_watch", 
        "overview": "bool inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor )", 
        "parameters": [
            {
                "descr": "Resource returned by inotify_init()", 
                "name": "inotify_instance"
            }, 
            {
                "descr": "Watch to remove from the instance", 
                "name": "watch_descriptor"
            }
        ], 
        "path": "php/function.inotify-rm-watch", 
        "type": "File System"
    }, 
    "interface_exists": {
        "description": "Checks if the given interface has been defined.", 
        "name": "interface_exists", 
        "overview": "bool interface_exists ( string $interface_name [, bool $autoload = true ] )", 
        "parameters": [
            {
                "descr": "The interface name", 
                "name": "interface_name"
            }, 
            {
                "descr": "Whether to call __autoload or not by default.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.interface-exists", 
        "type": "Classes and Functions"
    }, 
    "intl_error_name": {
        "description": "Return ICU error code name.", 
        "name": "intl_error_name", 
        "overview": "string intl_error_name ( int $error_code )", 
        "parameters": [
            {
                "descr": "ICU error code.", 
                "name": "error_code"
            }
        ], 
        "path": "php/function.intl-error-name", 
        "type": "Internationalization"
    }, 
    "intl_get_error_code": {
        "description": "Useful to handle errors occurred in static methods when there's no object to get error code from.", 
        "name": "intl_get_error_code", 
        "overview": "int intl_get_error_code ( void )", 
        "parameters": [], 
        "path": "php/function.intl-get-error-code", 
        "type": "Internationalization"
    }, 
    "intl_get_error_message": {
        "description": "Get error message from last internationalization function called.", 
        "name": "intl_get_error_message", 
        "overview": "string intl_get_error_message ( void )", 
        "parameters": [], 
        "path": "php/function.intl-get-error-message", 
        "type": "Internationalization"
    }, 
    "intl_is_failure": {
        "description": "", 
        "name": "intl_is_failure", 
        "overview": "bool intl_is_failure ( int $error_code )", 
        "parameters": [
            {
                "descr": "is a value that returned by functions: intl_get_error_code(), collator_get_error_code() .", 
                "name": "error_code"
            }
        ], 
        "path": "php/function.intl-is-failure", 
        "type": "Internationalization"
    }, 
    "intval": {
        "description": "Returns the integer value of var, using the specified base for the conversion (the default is base 10). intval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.", 
        "name": "intval", 
        "overview": "int intval ( mixed $var [, int $base = 10 ] )", 
        "parameters": [
            {
                "descr": "The scalar value being converted to an integer", 
                "name": "var"
            }, 
            {
                "descr": "The base for the conversion  Note:  If base is 0, the base used is determined by the format of var:   if string includes a \"0x\" (or \"0X\") prefix, the base is taken as 16 (hex); otherwise,     if string starts with \"0\", the base is taken as 8 (octal); otherwise,     the base is taken as 10 (decimal).", 
                "name": "base"
            }
        ], 
        "path": "php/function.intval", 
        "type": "Variables"
    }, 
    "ip2long": {
        "description": "The function ip2long() generates an IPv4 Internet network address from its Internet standard format (dotted string) representation.", 
        "name": "ip2long", 
        "overview": "int ip2long ( string $ip_address )", 
        "parameters": [
            {
                "descr": "A standard format address.", 
                "name": "ip_address"
            }
        ], 
        "path": "php/function.ip2long", 
        "type": "Networking"
    }, 
    "iptcembed": {
        "description": "Embeds binary IPTC data into a JPEG image.", 
        "name": "iptcembed", 
        "overview": "mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool ] )", 
        "parameters": [
            {
                "descr": "The data to be written.", 
                "name": "iptcdata"
            }, 
            {
                "descr": "Path to the JPEG image.", 
                "name": "jpeg_file_name"
            }, 
            {
                "descr": "Spool flag. If the spool flag is over 2 then the JPEG will be returned as a string.", 
                "name": "spool"
            }
        ], 
        "path": "php/function.iptcembed", 
        "type": "Image"
    }, 
    "iptcparse": {
        "description": "Parses an \u00bb IPTC block into its single tags.", 
        "name": "iptcparse", 
        "overview": "array iptcparse ( string $iptcblock )", 
        "parameters": [
            {
                "descr": "A binary IPTC block.", 
                "name": "iptcblock"
            }
        ], 
        "path": "php/function.iptcparse", 
        "type": "Image"
    }, 
    "is_a": {
        "description": "Checks if the given object is of this class or has this class as one of its parents.", 
        "name": "is_a", 
        "overview": "bool is_a ( object $object , string $class_name [, bool $allow_string = FALSE ] )", 
        "parameters": [
            {
                "descr": "The tested object", 
                "name": "object"
            }, 
            {
                "descr": "The class name", 
                "name": "class_name"
            }, 
            {
                "descr": "If this parameter set to FALSE, string class name as object is not allowed. ", 
                "name": "allow_string"
            }
        ], 
        "path": "php/function.is-a", 
        "type": "Classes and Functions"
    }, 
    "is_array": {
        "description": "Finds whether the given variable is an array.", 
        "name": "is_array", 
        "overview": "bool is_array ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-array", 
        "type": "Variables"
    }, 
    "is_bool": {
        "description": "Finds whether the given variable is a boolean.", 
        "name": "is_bool", 
        "overview": "bool is_bool ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-bool", 
        "type": "Variables"
    }, 
    "is_callable": {
        "description": "Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.", 
        "name": "is_callable", 
        "overview": "bool is_callable ( callable $name [, bool $syntax_only = false [, string &$callable_name ]] )", 
        "parameters": [
            {
                "descr": "The callback function to check", 
                "name": "name"
            }, 
            {
                "descr": "If set to TRUE the function only verifies that name might be a function or method. ", 
                "name": "syntax_only"
            }, 
            {
                "descr": "Receives the \"callable name\". In the example below it is \"someClass::someMethod\". ", 
                "name": "callable_name"
            }
        ], 
        "path": "php/function.is-callable", 
        "type": "Variables"
    }, 
    "is_dir": {
        "description": "Tells whether the given filename is a directory.", 
        "name": "is_dir", 
        "overview": "bool is_dir ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file. If filename is a relative filename, it will be checked relative to the current working directory. ", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-dir", 
        "type": "File System"
    }, 
    "is_executable": {
        "description": "Tells whether the filename is executable.", 
        "name": "is_executable", 
        "overview": "bool is_executable ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-executable", 
        "type": "File System"
    }, 
    "is_file": {
        "description": "Tells whether the given file is a regular file.", 
        "name": "is_file", 
        "overview": "bool is_file ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-file", 
        "type": "File System"
    }, 
    "is_finite": {
        "description": "Checks whether val is a legal finite on this platform.", 
        "name": "is_finite", 
        "overview": "bool is_finite ( float $val )", 
        "parameters": [
            {
                "descr": "The value to check", 
                "name": "val"
            }
        ], 
        "path": "php/function.is-finite", 
        "type": "Mathematics"
    }, 
    "is_float": {
        "description": "Finds whether the type of the given variable is float.", 
        "name": "is_float", 
        "overview": "bool is_float ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-float", 
        "type": "Variables"
    }, 
    "is_infinite": {
        "description": "Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.", 
        "name": "is_infinite", 
        "overview": "bool is_infinite ( float $val )", 
        "parameters": [
            {
                "descr": "The value to check", 
                "name": "val"
            }
        ], 
        "path": "php/function.is-infinite", 
        "type": "Mathematics"
    }, 
    "is_int": {
        "description": "Finds whether the type of the given variable is integer.", 
        "name": "is_int", 
        "overview": "bool is_int ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-int", 
        "type": "Variables"
    }, 
    "is_link": {
        "description": "Tells whether the given file is a symbolic link.", 
        "name": "is_link", 
        "overview": "bool is_link ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-link", 
        "type": "File System"
    }, 
    "is_nan": {
        "description": "Checks whether val is 'not a number', like the result of acos(1.01).", 
        "name": "is_nan", 
        "overview": "bool is_nan ( float $val )", 
        "parameters": [
            {
                "descr": "The value to check", 
                "name": "val"
            }
        ], 
        "path": "php/function.is-nan", 
        "type": "Mathematics"
    }, 
    "is_null": {
        "description": "Finds whether the given variable is NULL.", 
        "name": "is_null", 
        "overview": "bool is_null ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-null", 
        "type": "Variables"
    }, 
    "is_numeric": {
        "description": "Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal (e.g. 0xf4c3b00c), Binary (e.g. 0b10100111001), Octal (e.g. 0777) notation is allowed too but only without sign, decimal and exponential part.", 
        "name": "is_numeric", 
        "overview": "bool is_numeric ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-numeric", 
        "type": "Variables"
    }, 
    "is_object": {
        "description": "Finds whether the given variable is an object.", 
        "name": "is_object", 
        "overview": "bool is_object ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-object", 
        "type": "Variables"
    }, 
    "is_readable": {
        "description": "Tells whether a file exists and is readable.", 
        "name": "is_readable", 
        "overview": "bool is_readable ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-readable", 
        "type": "File System"
    }, 
    "is_resource": {
        "description": "Finds whether the given variable is a resource.", 
        "name": "is_resource", 
        "overview": "bool is_resource ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-resource", 
        "type": "Variables"
    }, 
    "is_scalar": {
        "description": "Finds whether the given variable is a scalar.", 
        "name": "is_scalar", 
        "overview": "bool is_scalar ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-scalar", 
        "type": "Variables"
    }, 
    "is_soap_fault": {
        "description": "This function is useful to check if the SOAP call failed, but without using exceptions. To use it, create a SoapClient object with the exceptions option set to zero or FALSE. In this case, the SOAP method will return a special SoapFault object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails).", 
        "name": "is_soap_fault", 
        "overview": "bool is_soap_fault ( mixed $object )", 
        "parameters": [
            {
                "descr": "The object to test.", 
                "name": "object"
            }
        ], 
        "path": "php/function.is-soap-fault", 
        "type": "SOAP"
    }, 
    "is_string": {
        "description": "Finds whether the type given variable is string.", 
        "name": "is_string", 
        "overview": "bool is_string ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable being evaluated.", 
                "name": "var"
            }
        ], 
        "path": "php/function.is-string", 
        "type": "Variables"
    }, 
    "is_subclass_of": {
        "description": "Checks if the given object has the class class_name as one of its parents.", 
        "name": "is_subclass_of", 
        "overview": "bool is_subclass_of ( mixed $object , string $class_name [, bool $allow_string = TRUE ] )", 
        "parameters": [
            {
                "descr": "A class name or an object instance", 
                "name": "object"
            }, 
            {
                "descr": "The class name", 
                "name": "class_name"
            }, 
            {
                "descr": "If this parameter set to false, string class name as object is not allowed. ", 
                "name": "allow_string"
            }
        ], 
        "path": "php/function.is-subclass-of", 
        "type": "Classes and Functions"
    }, 
    "is_tainted": {
        "description": "Checks whether a string is tainted", 
        "name": "is_tainted", 
        "overview": "bool is_tainted ( string $string )", 
        "parameters": [], 
        "path": "php/function.is-tainted", 
        "type": "String"
    }, 
    "is_uploaded_file": {
        "description": "Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd.", 
        "name": "is_uploaded_file", 
        "overview": "bool is_uploaded_file ( string $filename )", 
        "parameters": [
            {
                "descr": "The filename being checked.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-uploaded-file", 
        "type": "File System"
    }, 
    "is_writable": {
        "description": "Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable.", 
        "name": "is_writable", 
        "overview": "bool is_writable ( string $filename )", 
        "parameters": [
            {
                "descr": "The filename being checked.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.is-writable", 
        "type": "File System"
    }, 
    "isset": {
        "description": "Determine if a variable is set and is not NULL.", 
        "name": "isset", 
        "overview": "bool isset ( mixed $var [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The variable to be checked.", 
                "name": "var"
            }, 
            {
                "descr": "Another variable ...", 
                "name": "..."
            }
        ], 
        "path": "php/function.isset", 
        "type": "Variables"
    }, 
    "iterator_apply": {
        "description": "Calls a function for every element in an iterator.", 
        "name": "iterator_apply", 
        "overview": "int iterator_apply ( Traversable $iterator , callable $function [, array $args ] )", 
        "parameters": [
            {
                "descr": "The class to iterate over.", 
                "name": "iterator"
            }, 
            {
                "descr": "The callback function to call on every element. ", 
                "name": "function"
            }, 
            {
                "descr": "Arguments to pass to the callback function.", 
                "name": "args"
            }
        ], 
        "path": "php/function.iterator-apply", 
        "type": "SPL"
    }, 
    "iterator_count": {
        "description": "Count the elements in an iterator.", 
        "name": "iterator_count", 
        "overview": "int iterator_count ( Traversable $iterator )", 
        "parameters": [
            {
                "descr": "The iterator being counted.", 
                "name": "iterator"
            }
        ], 
        "path": "php/function.iterator-count", 
        "type": "SPL"
    }, 
    "iterator_to_array": {
        "description": "Copy the elements of an iterator into an array.", 
        "name": "iterator_to_array", 
        "overview": "array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ] )", 
        "parameters": [
            {
                "descr": "The iterator being copied.", 
                "name": "iterator"
            }, 
            {
                "descr": "Whether to use the iterator element keys as index. ", 
                "name": "use_keys"
            }
        ], 
        "path": "php/function.iterator-to-array", 
        "type": "SPL"
    }, 
    "jdtojewish": {
        "description": "Converts a Julian Day Count to the Jewish Calendar.", 
        "name": "jdtojewish", 
        "overview": "string jdtojewish ( int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]] )", 
        "parameters": [
            {
                "descr": "A julian day number as integer", 
                "name": "julianday"
            }, 
            {
                "descr": "If the hebrew parameter is set to TRUE, the fl parameter is used for Hebrew, string based, output format.", 
                "name": "hebrew"
            }, 
            {
                "descr": "The available formats are: CAL_JEWISH_ADD_ALAFIM_GERESH, CAL_JEWISH_ADD_ALAFIM, CAL_JEWISH_ADD_GERESHAYIM.", 
                "name": "fl"
            }
        ], 
        "path": "php/function.jdtojewish", 
        "type": "Date and Time"
    }, 
    "jdtounix": {
        "description": "This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 <= jday <= 2465342 ). The time returned is localtime (and not GMT).", 
        "name": "jdtounix", 
        "overview": "int jdtounix ( int $jday )", 
        "parameters": [
            {
                "descr": "A julian day number between 2440588 and 2465342.", 
                "name": "jday"
            }
        ], 
        "path": "php/function.jdtounix", 
        "type": "Date and Time"
    }, 
    "jpeg2wbmp": {
        "description": "Converts a JPEG file into a WBMP file.", 
        "name": "jpeg2wbmp", 
        "overview": "bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )", 
        "parameters": [
            {
                "descr": "Path to JPEG file.", 
                "name": "jpegname"
            }, 
            {
                "descr": "Path to destination WBMP file.", 
                "name": "wbmpname"
            }, 
            {
                "descr": "Destination image height.", 
                "name": "dest_height"
            }, 
            {
                "descr": "Destination image width.", 
                "name": "dest_width"
            }, 
            {
                "descr": "Threshold value, between 0 and 8 (inclusive).", 
                "name": "threshold"
            }
        ], 
        "path": "php/function.jpeg2wbmp", 
        "type": "Image"
    }, 
    "json_decode": {
        "description": "Takes a JSON encoded string and converts it into a PHP variable.", 
        "name": "json_decode", 
        "overview": "mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The json string being decoded.   This function only works with UTF-8 encoded strings. ", 
                "name": "json"
            }, 
            {
                "descr": "When TRUE, returned objects will be converted into associative arrays.", 
                "name": "assoc"
            }, 
            {
                "descr": "User specified recursion depth.", 
                "name": "depth"
            }, 
            {
                "descr": "Bitmask of JSON decode options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.json-decode", 
        "type": "JSON"
    }, 
    "json_encode": {
        "description": "Returns a string containing the JSON representation of value.", 
        "name": "json_encode", 
        "overview": "string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )", 
        "parameters": [
            {
                "descr": "The value being encoded. Can be any type except a resource. ", 
                "name": "value"
            }, 
            {
                "descr": "Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, JSON_UNESCAPED_UNICODE. ", 
                "name": "options"
            }, 
            {
                "descr": "Set the maximum depth. Must be greater than zero.", 
                "name": "depth"
            }
        ], 
        "path": "php/function.json-encode", 
        "type": "JSON"
    }, 
    "json_last_error": {
        "description": "Returns the last error (if any) occurred during the last JSON encoding/decoding.", 
        "name": "json_last_error", 
        "overview": "int json_last_error ( void )", 
        "parameters": [], 
        "path": "php/function.json-last-error", 
        "type": "JSON"
    }, 
    "json_last_error_msg": {
        "description": "", 
        "name": "json_last_error_msg", 
        "overview": "string json_last_error_msg ( void )", 
        "parameters": [], 
        "path": "php/function.json-last-error-msg", 
        "type": "JSON"
    }, 
    "key": {
        "description": "key() returns the index element of the current array position.", 
        "name": "key", 
        "overview": "mixed key ( array &$array )", 
        "parameters": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.key", 
        "type": "Array"
    }, 
    "krsort": {
        "description": "Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays.", 
        "name": "krsort", 
        "overview": "bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.krsort", 
        "type": "Array"
    }, 
    "ksort": {
        "description": "Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays.", 
        "name": "ksort", 
        "overview": "bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.ksort", 
        "type": "Array"
    }, 
    "lcfirst": {
        "description": "Returns a string with the first character of str , lowercased if that character is alphabetic.", 
        "name": "lcfirst", 
        "overview": "string lcfirst ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.lcfirst", 
        "type": "String"
    }, 
    "lcg_value": {
        "description": "lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.", 
        "name": "lcg_value", 
        "overview": "float lcg_value ( void )", 
        "parameters": [], 
        "path": "php/function.lcg-value", 
        "type": "Mathematics"
    }, 
    "lchgrp": {
        "description": "Attempts to change the group of the symlink filename to group.", 
        "name": "lchgrp", 
        "overview": "bool lchgrp ( string $filename , mixed $group )", 
        "parameters": [
            {
                "descr": "Path to the symlink.", 
                "name": "filename"
            }, 
            {
                "descr": "The group specified by name or number.", 
                "name": "group"
            }
        ], 
        "path": "php/function.lchgrp", 
        "type": "File System"
    }, 
    "lchown": {
        "description": "Attempts to change the owner of the symlink filename to user user.", 
        "name": "lchown", 
        "overview": "bool lchown ( string $filename , mixed $user )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "User name or number.", 
                "name": "user"
            }
        ], 
        "path": "php/function.lchown", 
        "type": "File System"
    }, 
    "ldap_8859_to_t61": {
        "description": "Translate ISO-8859 characters to t61 characters.", 
        "name": "ldap_8859_to_t61", 
        "overview": "string ldap_8859_to_t61 ( string $value )", 
        "parameters": [
            {
                "descr": "The text to be translated.", 
                "name": "value"
            }
        ], 
        "path": "php/function.ldap-8859-to-t61", 
        "type": "LDAP"
    }, 
    "ldap_add": {
        "description": "Add entries in the LDAP directory.", 
        "name": "ldap_add", 
        "overview": "bool ldap_add ( resource $link_identifier , string $dn , array $entry )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "An array that specifies the information about the entry. ", 
                "name": "entry"
            }
        ], 
        "path": "php/function.ldap-add", 
        "type": "LDAP"
    }, 
    "ldap_bind": {
        "description": "Binds to the LDAP directory with specified RDN and password.", 
        "name": "ldap_bind", 
        "overview": "bool ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-bind", 
        "type": "LDAP"
    }, 
    "ldap_compare": {
        "description": "Compare value of attribute with value of same attribute in an LDAP directory entry.", 
        "name": "ldap_compare", 
        "overview": "mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "The attribute name.", 
                "name": "attribute"
            }, 
            {
                "descr": "The compared value.", 
                "name": "value"
            }
        ], 
        "path": "php/function.ldap-compare", 
        "type": "LDAP"
    }, 
    "ldap_connect": {
        "description": "Establishes a connection to a LDAP server on a specified hostname and port.", 
        "name": "ldap_connect", 
        "overview": "resource ldap_connect ([ string $hostname = NULL [, int $port = 389 ]] )", 
        "parameters": [
            {
                "descr": "If you are using OpenLDAP 2.x.x you can specify a URL instead of the hostname. ", 
                "name": "hostname"
            }, 
            {
                "descr": "The port to connect to. Not used when using URLs.", 
                "name": "port"
            }
        ], 
        "path": "php/function.ldap-connect", 
        "type": "LDAP"
    }, 
    "ldap_control_paged_result": {
        "description": "Enable LDAP pagination by sending the pagination control (page size, cookie...).", 
        "name": "ldap_control_paged_result", 
        "overview": "bool ldap_control_paged_result ( resource $link , int $pagesize [, bool $iscritical = false [, string $cookie = \"\" ]] )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link"
            }, 
            {
                "descr": "The number of entries by page.", 
                "name": "pagesize"
            }, 
            {
                "descr": "Indicates whether the pagination is critical of not. ", 
                "name": "iscritical"
            }, 
            {
                "descr": "An opaque structure sent by the server (ldap_control_paged_result_response()).", 
                "name": "cookie"
            }
        ], 
        "path": "php/function.ldap-control-paged-result", 
        "type": "LDAP"
    }, 
    "ldap_control_paged_result_response": {
        "description": "Retrieve the pagination information send by the server.", 
        "name": "ldap_control_paged_result_response", 
        "overview": "bool ldap_control_paged_result_response ( resource $link , resource $result [, string &$cookie [, int &$estimated ]] )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link"
            }, 
            {
                "descr": "An opaque structure sent by the server.", 
                "name": "result   cookie"
            }, 
            {
                "descr": "The estimated number of entries to retrieve.", 
                "name": "estimated"
            }
        ], 
        "path": "php/function.ldap-control-paged-result-response", 
        "type": "LDAP"
    }, 
    "ldap_count_entries": {
        "description": "Returns the number of entries stored in the result of previous search operations.", 
        "name": "ldap_count_entries", 
        "overview": "int ldap_count_entries ( resource $link_identifier , resource $result_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The internal LDAP result.", 
                "name": "result_identifier"
            }
        ], 
        "path": "php/function.ldap-count-entries", 
        "type": "LDAP"
    }, 
    "ldap_delete": {
        "description": "Deletes a particular entry in LDAP directory.", 
        "name": "ldap_delete", 
        "overview": "bool ldap_delete ( resource $link_identifier , string $dn )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-delete", 
        "type": "LDAP"
    }, 
    "ldap_dn2ufn": {
        "description": "Turns the specified dn, into a more user-friendly form, stripping off type names.", 
        "name": "ldap_dn2ufn", 
        "overview": "string ldap_dn2ufn ( string $dn )", 
        "parameters": [
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-dn2ufn", 
        "type": "LDAP"
    }, 
    "ldap_err2str": {
        "description": "Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.", 
        "name": "ldap_err2str", 
        "overview": "string ldap_err2str ( int $errno )", 
        "parameters": [
            {
                "descr": "The error number.", 
                "name": "errno"
            }
        ], 
        "path": "php/function.ldap-err2str", 
        "type": "LDAP"
    }, 
    "ldap_errno": {
        "description": "Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str().", 
        "name": "ldap_errno", 
        "overview": "int ldap_errno ( resource $link_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-errno", 
        "type": "LDAP"
    }, 
    "ldap_error": {
        "description": "Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.", 
        "name": "ldap_error", 
        "overview": "string ldap_error ( resource $link_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-error", 
        "type": "LDAP"
    }, 
    "ldap_explode_dn": {
        "description": "Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN.", 
        "name": "ldap_explode_dn", 
        "overview": "array ldap_explode_dn ( string $dn , int $with_attrib )", 
        "parameters": [
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "Used to request if the RDNs are returned with only values or their attributes as well. ", 
                "name": "with_attrib"
            }
        ], 
        "path": "php/function.ldap-explode-dn", 
        "type": "LDAP"
    }, 
    "ldap_first_attribute": {
        "description": "Gets the first attribute in the given entry. Remaining attributes are retrieved by calling ldap_next_attribute() successively.", 
        "name": "ldap_first_attribute", 
        "overview": "string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "ber_identifier is the identifier to internal memory location pointer. ", 
                "name": "result_entry_identifier   ber_identifier"
            }
        ], 
        "path": "php/function.ldap-first-attribute", 
        "type": "LDAP"
    }, 
    "ldap_first_entry": {
        "description": "Returns the entry identifier for first entry in the result. This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result.", 
        "name": "ldap_first_entry", 
        "overview": "resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-first-entry", 
        "type": "LDAP"
    }, 
    "ldap_first_reference": {
        "description": "", 
        "name": "ldap_first_reference", 
        "overview": "resource ldap_first_reference ( resource $link , resource $result )", 
        "parameters": [], 
        "path": "php/function.ldap-first-reference", 
        "type": "LDAP"
    }, 
    "ldap_free_result": {
        "description": "Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates.", 
        "name": "ldap_free_result", 
        "overview": "bool ldap_free_result ( resource $result_identifier )", 
        "parameters": [], 
        "path": "php/function.ldap-free-result", 
        "type": "LDAP"
    }, 
    "ldap_get_attributes": {
        "description": "Reads attributes and values from an entry in the search result.", 
        "name": "ldap_get_attributes", 
        "overview": "array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-attributes", 
        "type": "LDAP"
    }, 
    "ldap_get_dn": {
        "description": "Finds out the DN of an entry in the result.", 
        "name": "ldap_get_dn", 
        "overview": "string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-dn", 
        "type": "LDAP"
    }, 
    "ldap_get_entries": {
        "description": "Reads multiple entries from the given result, and then reading the attributes and multiple values.", 
        "name": "ldap_get_entries", 
        "overview": "array ldap_get_entries ( resource $link_identifier , resource $result_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-entries", 
        "type": "LDAP"
    }, 
    "ldap_get_option": {
        "description": "Sets retval to the value of the specified option.", 
        "name": "ldap_get_option", 
        "overview": "bool ldap_get_option ( resource $link_identifier , int $option , mixed &$retval )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The parameter option can be one of: Option Type LDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer LDAP_OPT_TIMELIMIT integer LDAP_OPT_NETWORK_TIMEOUT integer LDAP_OPT_PROTOCOL_VERSION integer LDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS bool LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME string LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN string LDAP_OPT_SERVER_CONTROLS array LDAP_OPT_CLIENT_CONTROLS array", 
                "name": "option"
            }, 
            {
                "descr": "This will be set to the option value.", 
                "name": "retval"
            }
        ], 
        "path": "php/function.ldap-get-option", 
        "type": "LDAP"
    }, 
    "ldap_get_values": {
        "description": "Reads all the values of the attribute in the entry in the result.", 
        "name": "ldap_get_values", 
        "overview": "array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-values", 
        "type": "LDAP"
    }, 
    "ldap_get_values_len": {
        "description": "Reads all the values of the attribute in the entry in the result.", 
        "name": "ldap_get_values_len", 
        "overview": "array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-get-values-len", 
        "type": "LDAP"
    }, 
    "ldap_list": {
        "description": "Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL.", 
        "name": "ldap_list", 
        "overview": "resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The base DN for the directory.", 
                "name": "base_dn"
            }, 
            {
                "descr": "An array of the required attributes, e.g. ", 
                "name": "filter   attributes"
            }, 
            {
                "descr": "Should be set to 1 if only attribute types are wanted. ", 
                "name": "attrsonly"
            }, 
            {
                "descr": "Enables you to limit the count of entries fetched. ", 
                "name": "sizelimit"
            }, 
            {
                "descr": "Sets the number of seconds how long is spend on the search. ", 
                "name": "timelimit"
            }, 
            {
                "descr": "Specifies how aliases should be handled during the search. ", 
                "name": "deref"
            }
        ], 
        "path": "php/function.ldap-list", 
        "type": "LDAP"
    }, 
    "ldap_mod_add": {
        "description": "Adds one or more attributes to the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level additions are done by the ldap_add() function.", 
        "name": "ldap_mod_add", 
        "overview": "bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-mod-add", 
        "type": "LDAP"
    }, 
    "ldap_mod_del": {
        "description": "Removes one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level deletions are done by the ldap_delete() function.", 
        "name": "ldap_mod_del", 
        "overview": "bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-mod-del", 
        "type": "LDAP"
    }, 
    "ldap_mod_replace": {
        "description": "Replaces one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level modifications are done by the ldap_modify() function.", 
        "name": "ldap_mod_replace", 
        "overview": "bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-mod-replace", 
        "type": "LDAP"
    }, 
    "ldap_modify": {
        "description": "Modify the existing entries in the LDAP directory. The structure of the entry is same as in ldap_add().", 
        "name": "ldap_modify", 
        "overview": "bool ldap_modify ( resource $link_identifier , string $dn , array $entry )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }
        ], 
        "path": "php/function.ldap-modify", 
        "type": "LDAP"
    }, 
    "ldap_next_attribute": {
        "description": "Retrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute().", 
        "name": "ldap_next_attribute", 
        "overview": "string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The internal state of the pointer is maintained by this parameter. ", 
                "name": "result_entry_identifier   ber_identifier"
            }
        ], 
        "path": "php/function.ldap-next-attribute", 
        "type": "LDAP"
    }, 
    "ldap_next_entry": {
        "description": "Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry().", 
        "name": "ldap_next_entry", 
        "overview": "resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-next-entry", 
        "type": "LDAP"
    }, 
    "ldap_next_reference": {
        "description": "", 
        "name": "ldap_next_reference", 
        "overview": "resource ldap_next_reference ( resource $link , resource $entry )", 
        "parameters": [], 
        "path": "php/function.ldap-next-reference", 
        "type": "LDAP"
    }, 
    "ldap_parse_reference": {
        "description": "", 
        "name": "ldap_parse_reference", 
        "overview": "bool ldap_parse_reference ( resource $link , resource $entry , array &$referrals )", 
        "parameters": [], 
        "path": "php/function.ldap-parse-reference", 
        "type": "LDAP"
    }, 
    "ldap_parse_result": {
        "description": "", 
        "name": "ldap_parse_result", 
        "overview": "bool ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )", 
        "parameters": [], 
        "path": "php/function.ldap-parse-result", 
        "type": "LDAP"
    }, 
    "ldap_read": {
        "description": "Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory.", 
        "name": "ldap_read", 
        "overview": "resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The base DN for the directory.", 
                "name": "base_dn"
            }, 
            {
                "descr": "An empty filter is not allowed. ", 
                "name": "filter"
            }, 
            {
                "descr": "An array of the required attributes, e.g. ", 
                "name": "attributes"
            }, 
            {
                "descr": "Should be set to 1 if only attribute types are wanted. ", 
                "name": "attrsonly"
            }, 
            {
                "descr": "Enables you to limit the count of entries fetched. ", 
                "name": "sizelimit"
            }, 
            {
                "descr": "Sets the number of seconds how long is spend on the search. ", 
                "name": "timelimit"
            }, 
            {
                "descr": "Specifies how aliases should be handled during the search. ", 
                "name": "deref"
            }
        ], 
        "path": "php/function.ldap-read", 
        "type": "LDAP"
    }, 
    "ldap_rename": {
        "description": "The entry specified by dn is renamed/moved.", 
        "name": "ldap_rename", 
        "overview": "bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The distinguished name of an LDAP entity.", 
                "name": "dn"
            }, 
            {
                "descr": "The new RDN.", 
                "name": "newrdn"
            }, 
            {
                "descr": "The new parent/superior entry.", 
                "name": "newparent"
            }, 
            {
                "descr": "If TRUE the old RDN value(s) is removed, else the old RDN value(s) is retained as non-distinguished values of the entry.", 
                "name": "deleteoldrdn"
            }
        ], 
        "path": "php/function.ldap-rename", 
        "type": "LDAP"
    }, 
    "ldap_sasl_bind": {
        "description": "", 
        "name": "ldap_sasl_bind", 
        "overview": "bool ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] )", 
        "parameters": [], 
        "path": "php/function.ldap-sasl-bind", 
        "type": "LDAP"
    }, 
    "ldap_search": {
        "description": "Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory.", 
        "name": "ldap_search", 
        "overview": "resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The base DN for the directory.", 
                "name": "base_dn"
            }, 
            {
                "descr": "The search filter can be simple or advanced, using boolean operators in the format described in the LDAP documentation (see the \u00bb Netscape Directory SDK for full information on filters).", 
                "name": "filter"
            }, 
            {
                "descr": "An array of the required attributes, e.g. ", 
                "name": "attributes"
            }, 
            {
                "descr": "Should be set to 1 if only attribute types are wanted. ", 
                "name": "attrsonly"
            }, 
            {
                "descr": "Enables you to limit the count of entries fetched. ", 
                "name": "sizelimit"
            }, 
            {
                "descr": "Sets the number of seconds how long is spend on the search. ", 
                "name": "timelimit"
            }, 
            {
                "descr": "Specifies how aliases should be handled during the search. ", 
                "name": "deref"
            }
        ], 
        "path": "php/function.ldap-search", 
        "type": "LDAP"
    }, 
    "ldap_set_option": {
        "description": "Sets the value of the specified option to be newval.", 
        "name": "ldap_set_option", 
        "overview": "bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }, 
            {
                "descr": "The parameter option can be one of: Option Type Available since LDAP_OPT_DEREF integer   LDAP_OPT_SIZELIMIT integer   LDAP_OPT_TIMELIMIT integer   LDAP_OPT_NETWORK_TIMEOUT integer PHP 5.3.0 LDAP_OPT_PROTOCOL_VERSION integer   LDAP_OPT_ERROR_NUMBER integer   LDAP_OPT_REFERRALS bool   LDAP_OPT_RESTART bool   LDAP_OPT_HOST_NAME string   LDAP_OPT_ERROR_STRING string   LDAP_OPT_MATCHED_DN string   LDAP_OPT_SERVER_CONTROLS array   LDAP_OPT_CLIENT_CONTROLS array    LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS require a list of controls, this means that the value must be an array of controls. A control consists of an oid identifying the control, an optional value, and an optional flag for criticality. In PHP a control is given by an array containing an element with the key oid and string value, and two optional elements. The optional elements are key value with string value and key iscritical with boolean value. iscritical defaults to FALSE if not supplied. See \u00bb draft-ietf-ldapext-ldap-c-api-xx.txt for details. See also the second example below.", 
                "name": "option"
            }, 
            {
                "descr": "The new value for the specified option.", 
                "name": "newval"
            }
        ], 
        "path": "php/function.ldap-set-option", 
        "type": "LDAP"
    }, 
    "ldap_set_rebind_proc": {
        "description": "", 
        "name": "ldap_set_rebind_proc", 
        "overview": "bool ldap_set_rebind_proc ( resource $link , callable $callback )", 
        "parameters": [], 
        "path": "php/function.ldap-set-rebind-proc", 
        "type": "LDAP"
    }, 
    "ldap_sort": {
        "description": "Sort the result of a LDAP search, returned by ldap_search().", 
        "name": "ldap_sort", 
        "overview": "bool ldap_sort ( resource $link , resource $result , string $sortfilter )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link"
            }, 
            {
                "descr": "An search result identifier, returned by ldap_search().", 
                "name": "result"
            }, 
            {
                "descr": "The attribute to use as a key in the sort.", 
                "name": "sortfilter"
            }
        ], 
        "path": "php/function.ldap-sort", 
        "type": "LDAP"
    }, 
    "ldap_start_tls": {
        "description": "", 
        "name": "ldap_start_tls", 
        "overview": "bool ldap_start_tls ( resource $link )", 
        "parameters": [], 
        "path": "php/function.ldap-start-tls", 
        "type": "LDAP"
    }, 
    "ldap_t61_to_8859": {
        "description": "", 
        "name": "ldap_t61_to_8859", 
        "overview": "string ldap_t61_to_8859 ( string $value )", 
        "parameters": [], 
        "path": "php/function.ldap-t61-to-8859", 
        "type": "LDAP"
    }, 
    "ldap_unbind": {
        "description": "Unbinds from the LDAP directory.", 
        "name": "ldap_unbind", 
        "overview": "bool ldap_unbind ( resource $link_identifier )", 
        "parameters": [
            {
                "descr": "An LDAP link identifier, returned by ldap_connect().", 
                "name": "link_identifier"
            }
        ], 
        "path": "php/function.ldap-unbind", 
        "type": "LDAP"
    }, 
    "levenshtein": {
        "description": "The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2. The complexity of the algorithm is O(m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text(), which is O(max(n,m)**3), but still expensive).", 
        "name": "levenshtein", 
        "overview": "int levenshtein ( string $str1 , string $str2 )", 
        "parameters": [
            {
                "descr": "One of the strings being evaluated for Levenshtein distance.", 
                "name": "str1"
            }, 
            {
                "descr": "One of the strings being evaluated for Levenshtein distance.", 
                "name": "str2"
            }, 
            {
                "descr": "Defines the cost of insertion.", 
                "name": "cost_ins"
            }, 
            {
                "descr": "Defines the cost of replacement.", 
                "name": "cost_rep"
            }, 
            {
                "descr": "Defines the cost of deletion.", 
                "name": "cost_del"
            }
        ], 
        "path": "php/function.levenshtein", 
        "type": "String"
    }, 
    "libxml_clear_errors": {
        "description": "libxml_clear_errors() clears the libxml error buffer.", 
        "name": "libxml_clear_errors", 
        "overview": "void libxml_clear_errors ( void )", 
        "parameters": [], 
        "path": "php/function.libxml-clear-errors", 
        "type": "XML"
    }, 
    "libxml_disable_entity_loader": {
        "description": "Disable/enable the ability to load external entities.", 
        "name": "libxml_disable_entity_loader", 
        "overview": "bool libxml_disable_entity_loader ([ bool $disable = true ] )", 
        "parameters": [
            {
                "descr": "Disable (TRUE) or enable (FALSE) libxml extensions (such as DOM, XMLWriter and XMLReader) to load external entities.", 
                "name": "disable"
            }
        ], 
        "path": "php/function.libxml-disable-entity-loader", 
        "type": "XML"
    }, 
    "libxml_get_errors": {
        "description": "Retrieve array of errors.", 
        "name": "libxml_get_errors", 
        "overview": "array libxml_get_errors ( void )", 
        "parameters": [], 
        "path": "php/function.libxml-get-errors", 
        "type": "XML"
    }, 
    "libxml_get_last_error": {
        "description": "Retrieve last error from libxml.", 
        "name": "libxml_get_last_error", 
        "overview": "LibXMLError libxml_get_last_error ( void )", 
        "parameters": [], 
        "path": "php/function.libxml-get-last-error", 
        "type": "XML"
    }, 
    "libxml_set_external_entity_loader": {
        "description": "Changes the default external entity loader.", 
        "name": "libxml_set_external_entity_loader", 
        "overview": "void libxml_set_external_entity_loader ( callable $resolver_function )", 
        "parameters": [
            {
                "descr": "A callable that takes three arguments. ", 
                "name": "resolver_function"
            }
        ], 
        "path": "php/function.libxml-set-external-entity-loader", 
        "type": "XML"
    }, 
    "libxml_set_streams_context": {
        "description": "Sets the streams context for the next libxml document load or write.", 
        "name": "libxml_set_streams_context", 
        "overview": "void libxml_set_streams_context ( resource $streams_context )", 
        "parameters": [
            {
                "descr": "The stream context resource (created with stream_context_create())", 
                "name": "streams_context"
            }
        ], 
        "path": "php/function.libxml-set-streams-context", 
        "type": "XML"
    }, 
    "libxml_use_internal_errors": {
        "description": "libxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling.", 
        "name": "libxml_use_internal_errors", 
        "overview": "bool libxml_use_internal_errors ([ bool $use_errors = false ] )", 
        "parameters": [
            {
                "descr": "Enable (TRUE) user error handling or disable (FALSE) user error handling. ", 
                "name": "use_errors"
            }
        ], 
        "path": "php/function.libxml-use-internal-errors", 
        "type": "XML"
    }, 
    "link": {
        "description": "link() creates a hard link.", 
        "name": "link", 
        "overview": "bool link ( string $target , string $link )", 
        "parameters": [
            {
                "descr": "Target of the link.", 
                "name": "target"
            }, 
            {
                "descr": "The link name.", 
                "name": "link"
            }
        ], 
        "path": "php/function.link", 
        "type": "File System"
    }, 
    "linkinfo": {
        "description": "Gets information about a link.", 
        "name": "linkinfo", 
        "overview": "int linkinfo ( string $path )", 
        "parameters": [
            {
                "descr": "Path to the link.", 
                "name": "path"
            }
        ], 
        "path": "php/function.linkinfo", 
        "type": "File System"
    }, 
    "list": {
        "description": "Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation.", 
        "name": "list", 
        "overview": "array list ( mixed $var1 [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "A variable.", 
                "name": "var1"
            }
        ], 
        "path": "php/function.list", 
        "type": "Array"
    }, 
    "localeconv": {
        "description": "Returns an associative array containing localized numeric and monetary formatting information.", 
        "name": "localeconv", 
        "overview": "array localeconv ( void )", 
        "parameters": [], 
        "path": "php/function.localeconv", 
        "type": "String"
    }, 
    "localtime": {
        "description": "The localtime() function returns an array identical to that of the structure returned by the C function call.", 
        "name": "localtime", 
        "overview": "array localtime ([ int $timestamp = time() [, bool $is_associative = false ]] )", 
        "parameters": [
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }, 
            {
                "descr": "If set to FALSE or not supplied then the array is returned as a regular, numerically indexed array. ", 
                "name": "is_associative"
            }
        ], 
        "path": "php/function.localtime", 
        "type": "Date and Time"
    }, 
    "log": {
        "description": "If the optional base parameter is specified, log() returns logbasearg, otherwise log() returns the natural logarithm of arg.", 
        "name": "log", 
        "overview": "float log ( float $arg [, float $base = M_E ] )", 
        "parameters": [
            {
                "descr": "The value to calculate the logarithm for", 
                "name": "arg"
            }, 
            {
                "descr": "The optional logarithmic base to use (defaults to 'e' and so to the natural logarithm).", 
                "name": "base"
            }
        ], 
        "path": "php/function.log", 
        "type": "Mathematics"
    }, 
    "log10": {
        "description": "Returns the base-10 logarithm of arg.", 
        "name": "log10", 
        "overview": "float log10 ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.log10", 
        "type": "Mathematics"
    }, 
    "log1p": {
        "description": "log1p() returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision.", 
        "name": "log1p", 
        "overview": "float log1p ( float $number )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "number"
            }
        ], 
        "path": "php/function.log1p", 
        "type": "Mathematics"
    }, 
    "long2ip": {
        "description": "The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.", 
        "name": "long2ip", 
        "overview": "string long2ip ( string $proper_address )", 
        "parameters": [
            {
                "descr": "A proper address representation.", 
                "name": "proper_address"
            }
        ], 
        "path": "php/function.long2ip", 
        "type": "Networking"
    }, 
    "lstat": {
        "description": "Gathers the statistics of the file or symbolic link named by filename.", 
        "name": "lstat", 
        "overview": "array lstat ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to a file or a symbolic link.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.lstat", 
        "type": "File System"
    }, 
    "ltrim": {
        "description": "Strip whitespace (or other characters) from the beginning of a string.", 
        "name": "ltrim", 
        "overview": "string ltrim ( string $str [, string $character_mask ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "You can also specify the characters you want to strip, by means of the character_mask parameter. ", 
                "name": "character_mask"
            }
        ], 
        "path": "php/function.ltrim", 
        "type": "String"
    }, 
    "mail": {
        "description": "Sends an email.", 
        "name": "mail", 
        "overview": "bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )", 
        "parameters": [
            {
                "descr": "Receiver, or receivers of the mail. ", 
                "name": "to"
            }, 
            {
                "descr": "Subject of the email to be sent. ", 
                "name": "subject"
            }, 
            {
                "descr": "Message to be sent.   Each line should be separated with a CRLF (\\r\\n). ", 
                "name": "message"
            }, 
            {
                "descr": "String to be inserted at the end of the email header. ", 
                "name": "additional_headers (optional)"
            }, 
            {
                "descr": "The additional_parameters parameter can be used to pass additional flags as command line options to the program configured to be used when sending mail, as defined by the sendmail_path configuration setting. For example, this can be used to set the envelope sender address when using sendmail with the -f sendmail option.   This parameter is escaped by escapeshellcmd() internally to prevent command execution. escapeshellcmd() prevents command execution, but allows to add addtional parameters. For security reason, this parameter should be validated.   Since escapeshellcmd() is applied automatically, some characters that are allowed as email addresses by internet RFCs cannot be used. Programs that are required to use these characters mail() cannot be used.   The user that the webserver runs as should be added as a trusted user to the sendmail configuration to prevent a 'X-Warning' header from being added to the message when the envelope sender (-f) is set using this method. For sendmail users, this file is /etc/mail/trusted-users.", 
                "name": "additional_parameters (optional)"
            }
        ], 
        "path": "php/function.mail", 
        "type": "Mail"
    }, 
    "mailparse_determine_best_xfer_encoding": {
        "description": "Figures out the best way of encoding the content read from the given file pointer.", 
        "name": "mailparse_determine_best_xfer_encoding", 
        "overview": "string mailparse_determine_best_xfer_encoding ( resource $fp )", 
        "parameters": [
            {
                "descr": "A valid file pointer, which must be seek-able.", 
                "name": "fp"
            }
        ], 
        "path": "php/function.mailparse-determine-best-xfer-encoding", 
        "type": "Mail"
    }, 
    "mailparse_msg_create": {
        "description": "Create a MIME mail resource.", 
        "name": "mailparse_msg_create", 
        "overview": "resource mailparse_msg_create ( void )", 
        "parameters": [], 
        "path": "php/function.mailparse-msg-create", 
        "type": "Mail"
    }, 
    "mailparse_msg_extract_part": {
        "description": "", 
        "name": "mailparse_msg_extract_part", 
        "overview": "void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callable $callbackfunc ] )", 
        "parameters": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-extract-part", 
        "type": "Mail"
    }, 
    "mailparse_msg_extract_part_file": {
        "description": "Extracts/decodes a message section from the supplied filename.", 
        "name": "mailparse_msg_extract_part_file", 
        "overview": "string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callable $callbackfunc ] )", 
        "parameters": [
            {
                "descr": "A valid MIME resource, created with mailparse_msg_create().", 
                "name": "mimemail"
            }, 
            {
                "descr": "Can be a file name or a valid stream resource.", 
                "name": "filename"
            }, 
            {
                "descr": "If set, this must be either a valid callback that will be passed the extracted section, or NULL to make this function return the extracted section. ", 
                "name": "callbackfunc"
            }
        ], 
        "path": "php/function.mailparse-msg-extract-part-file", 
        "type": "Mail"
    }, 
    "mailparse_msg_extract_whole_part_file": {
        "description": "", 
        "name": "mailparse_msg_extract_whole_part_file", 
        "overview": "string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callable $callbackfunc ] )", 
        "parameters": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-extract-whole-part-file", 
        "type": "Mail"
    }, 
    "mailparse_msg_free": {
        "description": "Frees a MIME resource.", 
        "name": "mailparse_msg_free", 
        "overview": "bool mailparse_msg_free ( resource $mimemail )", 
        "parameters": [
            {
                "descr": "A valid MIME resource allocated by mailparse_msg_create() or mailparse_msg_parse_file().", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-free", 
        "type": "Mail"
    }, 
    "mailparse_msg_get_part": {
        "description": "", 
        "name": "mailparse_msg_get_part", 
        "overview": "resource mailparse_msg_get_part ( resource $mimemail , string $mimesection )", 
        "parameters": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-get-part", 
        "type": "Mail"
    }, 
    "mailparse_msg_get_part_data": {
        "description": "", 
        "name": "mailparse_msg_get_part_data", 
        "overview": "array mailparse_msg_get_part_data ( resource $mimemail )", 
        "parameters": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-get-part-data", 
        "type": "Mail"
    }, 
    "mailparse_msg_get_structure": {
        "description": "", 
        "name": "mailparse_msg_get_structure", 
        "overview": "array mailparse_msg_get_structure ( resource $mimemail )", 
        "parameters": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-get-structure", 
        "type": "Mail"
    }, 
    "mailparse_msg_parse": {
        "description": "Incrementally parse data into the supplied mime mail resource.", 
        "name": "mailparse_msg_parse", 
        "overview": "bool mailparse_msg_parse ( resource $mimemail , string $data )", 
        "parameters": [
            {
                "descr": "A valid MIME resource.", 
                "name": "mimemail"
            }
        ], 
        "path": "php/function.mailparse-msg-parse", 
        "type": "Mail"
    }, 
    "mailparse_msg_parse_file": {
        "description": "Parses a file. This is the optimal way of parsing a mail file that you have on disk.", 
        "name": "mailparse_msg_parse_file", 
        "overview": "resource mailparse_msg_parse_file ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file holding the message. ", 
                "name": "filename"
            }
        ], 
        "path": "php/function.mailparse-msg-parse-file", 
        "type": "Mail"
    }, 
    "mailparse_rfc822_parse_addresses": {
        "description": "Parses a \u00bb RFC 822 compliant recipient list, such as that found in the To: header.", 
        "name": "mailparse_rfc822_parse_addresses", 
        "overview": "array mailparse_rfc822_parse_addresses ( string $addresses )", 
        "parameters": [
            {
                "descr": "A string containing addresses, like in: Wez Furlong <wez@example.com>, doe@example.com  Note:  This string must not include the header name.", 
                "name": "addresses"
            }
        ], 
        "path": "php/function.mailparse-rfc822-parse-addresses", 
        "type": "Mail"
    }, 
    "mailparse_stream_encode": {
        "description": "Streams data from the source file pointer, apply encoding and write to the destination file pointer.", 
        "name": "mailparse_stream_encode", 
        "overview": "bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding )", 
        "parameters": [
            {
                "descr": "A valid file handle. The file is streamed through the parser.", 
                "name": "sourcefp"
            }, 
            {
                "descr": "The destination file handle in which the encoded data will be written.", 
                "name": "destfp"
            }, 
            {
                "descr": "One of the character encodings supported by the mbstring module.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mailparse-stream-encode", 
        "type": "Mail"
    }, 
    "mailparse_uudecode_all": {
        "description": "Scans the data from the given file pointer and extract each embedded uuencoded file into a temporary file.", 
        "name": "mailparse_uudecode_all", 
        "overview": "array mailparse_uudecode_all ( resource $fp )", 
        "parameters": [
            {
                "descr": "A valid file pointer.", 
                "name": "fp"
            }
        ], 
        "path": "php/function.mailparse-uudecode-all", 
        "type": "Mail"
    }, 
    "max": {
        "description": "If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.", 
        "name": "max", 
        "overview": "mixed max ( array $values )", 
        "parameters": [
            {
                "descr": "An array containing the values.", 
                "name": "values"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value1"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value2"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "..."
            }
        ], 
        "path": "php/function.max", 
        "type": "Mathematics"
    }, 
    "mb_check_encoding": {
        "description": "Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called \"Invalid Encoding Attack\".", 
        "name": "mb_check_encoding", 
        "overview": "bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The byte stream to check. If it is omitted, this function checks all the input from the beginning of the request.", 
                "name": "var"
            }, 
            {
                "descr": "The expected encoding.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-check-encoding", 
        "type": "Encoding"
    }, 
    "mb_convert_case": {
        "description": "Performs case folding on a string, converted in the way specified by mode.", 
        "name": "mb_convert_case", 
        "overview": "string mb_convert_case ( string $str , int $mode [, string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being converted.", 
                "name": "str"
            }, 
            {
                "descr": "The mode of the conversion. It can be one of MB_CASE_UPPER, MB_CASE_LOWER, or MB_CASE_TITLE.", 
                "name": "mode"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-convert-case", 
        "type": "Encoding"
    }, 
    "mb_convert_encoding": {
        "description": "Converts the character encoding of string str to to_encoding from optionally from_encoding.", 
        "name": "mb_convert_encoding", 
        "overview": "string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being encoded.", 
                "name": "str"
            }, 
            {
                "descr": "The type of encoding that str is being converted to.", 
                "name": "to_encoding"
            }, 
            {
                "descr": "Is specified by character code names before conversion. ", 
                "name": "from_encoding"
            }
        ], 
        "path": "php/function.mb-convert-encoding", 
        "type": "Encoding"
    }, 
    "mb_convert_kana": {
        "description": "Performs a \"han-kaku\" - \"zen-kaku\" conversion for string str. This function is only useful for Japanese.", 
        "name": "mb_convert_kana", 
        "overview": "string mb_convert_kana ( string $str [, string $option = \"KV\" [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string being converted.", 
                "name": "str"
            }, 
            {
                "descr": "The conversion option.   Specify with a combination of following options. ", 
                "name": "option"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-convert-kana", 
        "type": "Encoding"
    }, 
    "mb_convert_variables": {
        "description": "Converts character encoding of variables vars in encoding from_encoding to encoding to_encoding.", 
        "name": "mb_convert_variables", 
        "overview": "string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )", 
        "parameters": [
            {
                "descr": "The encoding that the string is being converted to.", 
                "name": "to_encoding"
            }, 
            {
                "descr": "from_encoding is specified as an array or comma separated string, it tries to detect encoding from from-coding. ", 
                "name": "from_encoding"
            }, 
            {
                "descr": "vars is the reference to the variable being converted. ", 
                "name": "vars"
            }, 
            {
                "descr": "Additional vars.", 
                "name": "..."
            }
        ], 
        "path": "php/function.mb-convert-variables", 
        "type": "Encoding"
    }, 
    "mb_decode_mimeheader": {
        "description": "Decodes encoded-word string str in MIME header.", 
        "name": "mb_decode_mimeheader", 
        "overview": "string mb_decode_mimeheader ( string $str )", 
        "parameters": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.mb-decode-mimeheader", 
        "type": "Encoding"
    }, 
    "mb_decode_numericentity": {
        "description": "Convert numeric string reference of string str in a specified block to character.", 
        "name": "mb_decode_numericentity", 
        "overview": "string mb_decode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }, 
            {
                "descr": "convmap is an array that specifies the code area to convert.", 
                "name": "convmap"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-decode-numericentity", 
        "type": "Encoding"
    }, 
    "mb_detect_encoding": {
        "description": "Detects character encoding in string str.", 
        "name": "mb_detect_encoding", 
        "overview": "string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )", 
        "parameters": [
            {
                "descr": "The string being detected.", 
                "name": "str"
            }, 
            {
                "descr": "encoding_list is list of character encoding. ", 
                "name": "encoding_list"
            }, 
            {
                "descr": "strict specifies whether to use the strict encoding detection or not. ", 
                "name": "strict"
            }
        ], 
        "path": "php/function.mb-detect-encoding", 
        "type": "Encoding"
    }, 
    "mb_detect_order": {
        "description": "Sets the automatic character encoding detection order to encoding_list.", 
        "name": "mb_detect_order", 
        "overview": "mixed mb_detect_order ([ mixed $encoding_list = mb_detect_order() ] )", 
        "parameters": [
            {
                "descr": "encoding_list is an array or comma separated list of character encoding. ", 
                "name": "encoding_list"
            }
        ], 
        "path": "php/function.mb-detect-order", 
        "type": "Encoding"
    }, 
    "mb_encode_mimeheader": {
        "description": "Encodes a given string str by the MIME header encoding scheme.", 
        "name": "mb_encode_mimeheader", 
        "overview": "string mb_encode_mimeheader ( string $str [, string $charset = mb_internal_encoding() [, string $transfer_encoding = \"B\" [, string $linefeed = \"\\r\\n\" [, int $indent = 0 ]]]] )", 
        "parameters": [
            {
                "descr": "The string being encoded.", 
                "name": "str"
            }, 
            {
                "descr": "charset specifies the name of the character set in which str is represented in. ", 
                "name": "charset"
            }, 
            {
                "descr": "transfer_encoding specifies the scheme of MIME encoding. ", 
                "name": "transfer_encoding"
            }, 
            {
                "descr": "linefeed specifies the EOL (end-of-line) marker with which mb_encode_mimeheader() performs line-folding (a \u00bb RFC term, the act of breaking a line longer than a certain length into multiple lines. ", 
                "name": "linefeed"
            }, 
            {
                "descr": "Indentation of the first line (number of characters in the header before str).", 
                "name": "indent"
            }
        ], 
        "path": "php/function.mb-encode-mimeheader", 
        "type": "Encoding"
    }, 
    "mb_encode_numericentity": {
        "description": "Converts specified character codes in string str from HTML numeric character reference to character code.", 
        "name": "mb_encode_numericentity", 
        "overview": "string mb_encode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )", 
        "parameters": [
            {
                "descr": "The string being encoded.", 
                "name": "str"
            }, 
            {
                "descr": "convmap is array specifies code area to convert.", 
                "name": "convmap"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-encode-numericentity", 
        "type": "Encoding"
    }, 
    "mb_encoding_aliases": {
        "description": "Returns an array of aliases for a known encoding type.", 
        "name": "mb_encoding_aliases", 
        "overview": "array mb_encoding_aliases ( string $encoding )", 
        "parameters": [
            {
                "descr": "The encoding type being checked, for aliases.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-encoding-aliases", 
        "type": "Encoding"
    }, 
    "mb_ereg": {
        "description": "", 
        "name": "mb_ereg", 
        "overview": "int mb_ereg ( string $pattern , string $string [, array $regs ] )", 
        "parameters": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search string.", 
                "name": "string"
            }, 
            {
                "descr": "Contains a substring of the matched string.", 
                "name": "regs"
            }
        ], 
        "path": "php/function.mb-ereg", 
        "type": "Encoding"
    }, 
    "mb_ereg_match": {
        "description": "A regular expression match for a multibyte string", 
        "name": "mb_ereg_match", 
        "overview": "bool mb_ereg_match ( string $pattern , string $string [, string $option = \"msr\" ] )", 
        "parameters": [
            {
                "descr": "The regular expression pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string being evaluated.", 
                "name": "string"
            }
        ], 
        "path": "php/function.mb-ereg-match", 
        "type": "Encoding"
    }, 
    "mb_ereg_replace": {
        "description": "", 
        "name": "mb_ereg_replace", 
        "overview": "string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = \"msr\" ] )", 
        "parameters": [
            {
                "descr": "The regular expression pattern. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The replacement text.", 
                "name": "replacement"
            }, 
            {
                "descr": "The string being checked.", 
                "name": "string"
            }, 
            {
                "descr": "Matching condition can be set by option parameter. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-replace", 
        "type": "Encoding"
    }, 
    "mb_ereg_replace_callback": {
        "description": "Scans string for matches to pattern, then replaces the matched text with the output of callback function.", 
        "name": "mb_ereg_replace_callback", 
        "overview": "string mb_ereg_replace_callback ( string $pattern , callable $callback , string $string [, string $option = \"msr\" ] )", 
        "parameters": [
            {
                "descr": "The regular expression pattern. ", 
                "name": "pattern"
            }, 
            {
                "descr": "A callback that will be called and passed an array of matched elements in the subject string. ", 
                "name": "callback"
            }, 
            {
                "descr": "The string being checked.", 
                "name": "string"
            }, 
            {
                "descr": "Matching condition can be set by option parameter. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-replace-callback", 
        "type": "Encoding"
    }, 
    "mb_ereg_search": {
        "description": "Performs a multibyte regular expression match for a predefined multibyte string.", 
        "name": "mb_ereg_search", 
        "overview": "bool mb_ereg_search ([ string $pattern [, string $option = \"ms\" ]] )", 
        "parameters": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_getpos": {
        "description": "", 
        "name": "mb_ereg_search_getpos", 
        "overview": "int mb_ereg_search_getpos ( void )", 
        "parameters": [], 
        "path": "php/function.mb-ereg-search-getpos", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_getregs": {
        "description": "", 
        "name": "mb_ereg_search_getregs", 
        "overview": "array mb_ereg_search_getregs ( void )", 
        "parameters": [], 
        "path": "php/function.mb-ereg-search-getregs", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_init": {
        "description": "mb_ereg_search_init() sets string and pattern for a multibyte regular expression. These values are used for mb_ereg_search(), mb_ereg_search_pos(), and mb_ereg_search_regs().", 
        "name": "mb_ereg_search_init", 
        "overview": "bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = \"msr\" ]] )", 
        "parameters": [
            {
                "descr": "The search string.", 
                "name": "string"
            }, 
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search-init", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_pos": {
        "description": "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string", 
        "name": "mb_ereg_search_pos", 
        "overview": "array mb_ereg_search_pos ([ string $pattern [, string $option = \"ms\" ]] )", 
        "parameters": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search-pos", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_regs": {
        "description": "Returns the matched part of a multibyte regular expression.", 
        "name": "mb_ereg_search_regs", 
        "overview": "array mb_ereg_search_regs ([ string $pattern [, string $option = \"ms\" ]] )", 
        "parameters": [
            {
                "descr": "The search pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The search option.", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-ereg-search-regs", 
        "type": "Encoding"
    }, 
    "mb_ereg_search_setpos": {
        "description": "", 
        "name": "mb_ereg_search_setpos", 
        "overview": "bool mb_ereg_search_setpos ( int $position )", 
        "parameters": [
            {
                "descr": "The position to set.", 
                "name": "position"
            }
        ], 
        "path": "php/function.mb-ereg-search-setpos", 
        "type": "Encoding"
    }, 
    "mb_eregi": {
        "description": "", 
        "name": "mb_eregi", 
        "overview": "int mb_eregi ( string $pattern , string $string [, array $regs ] )", 
        "parameters": [
            {
                "descr": "The regular expression pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string being searched.", 
                "name": "string"
            }, 
            {
                "descr": "Contains a substring of the matched string.", 
                "name": "regs"
            }
        ], 
        "path": "php/function.mb-eregi", 
        "type": "Encoding"
    }, 
    "mb_eregi_replace": {
        "description": "", 
        "name": "mb_eregi_replace", 
        "overview": "string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option = \"msri\" ] )", 
        "parameters": [
            {
                "descr": "The regular expression pattern. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The replacement text.", 
                "name": "replace"
            }, 
            {
                "descr": "The searched string.", 
                "name": "string"
            }, 
            {
                "descr": "option has the same meaning as in mb_ereg_replace().", 
                "name": "option"
            }
        ], 
        "path": "php/function.mb-eregi-replace", 
        "type": "Encoding"
    }, 
    "mb_get_info": {
        "description": "", 
        "name": "mb_get_info", 
        "overview": "mixed mb_get_info ([ string $type = \"all\" ] )", 
        "parameters": [
            {
                "descr": "If type isn't specified or is specified to \"all\", an array having the elements \"internal_encoding\", \"http_output\", \"http_input\", \"func_overload\", \"mail_charset\", \"mail_header_encoding\", \"mail_body_encoding\" will be returned.   If type is specified as \"http_output\", \"http_input\", \"internal_encoding\", \"func_overload\", the specified setting parameter will be returned.", 
                "name": "type"
            }
        ], 
        "path": "php/function.mb-get-info", 
        "type": "Encoding"
    }, 
    "mb_http_input": {
        "description": "", 
        "name": "mb_http_input", 
        "overview": "mixed mb_http_input ([ string $type = \"\" ] )", 
        "parameters": [
            {
                "descr": "Input string specifies the input type. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.mb-http-input", 
        "type": "Encoding"
    }, 
    "mb_http_output": {
        "description": "Set/Get the HTTP output character encoding. Output after this function is converted to encoding.", 
        "name": "mb_http_output", 
        "overview": "mixed mb_http_output ([ string $encoding = mb_http_output() ] )", 
        "parameters": [
            {
                "descr": "If encoding is set, mb_http_output() sets the HTTP output character encoding to encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-http-output", 
        "type": "Encoding"
    }, 
    "mb_internal_encoding": {
        "description": "Set/Get the internal character encoding", 
        "name": "mb_internal_encoding", 
        "overview": "mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "encoding is the character encoding name used for the HTTP input character encoding conversion, HTTP output character encoding conversion, and the default character encoding for string functions defined by the mbstring module. You should notice that the internal encoding is totally different from the one for multibyte regex.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-internal-encoding", 
        "type": "Encoding"
    }, 
    "mb_language": {
        "description": "Set/Get the current language.", 
        "name": "mb_language", 
        "overview": "mixed mb_language ([ string $language = mb_language() ] )", 
        "parameters": [
            {
                "descr": "Used for encoding e-mail messages. ", 
                "name": "language"
            }
        ], 
        "path": "php/function.mb-language", 
        "type": "Encoding"
    }, 
    "mb_list_encodings": {
        "description": "Returns an array containing all supported encodings.", 
        "name": "mb_list_encodings", 
        "overview": "array mb_list_encodings ( void )", 
        "parameters": [], 
        "path": "php/function.mb-list-encodings", 
        "type": "Encoding"
    }, 
    "mb_output_handler": {
        "description": "mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters in the output buffer from internal character encoding to HTTP output character encoding.", 
        "name": "mb_output_handler", 
        "overview": "string mb_output_handler ( string $contents , int $status )", 
        "parameters": [
            {
                "descr": "The contents of the output buffer.", 
                "name": "contents"
            }, 
            {
                "descr": "The status of the output buffer.", 
                "name": "status"
            }
        ], 
        "path": "php/function.mb-output-handler", 
        "type": "Encoding"
    }, 
    "mb_parse_str": {
        "description": "Parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding to internal encoding and set values to the result array or global variables.", 
        "name": "mb_parse_str", 
        "overview": "bool mb_parse_str ( string $encoded_string [, array &$result ] )", 
        "parameters": [
            {
                "descr": "The URL encoded data.", 
                "name": "encoded_string"
            }, 
            {
                "descr": "An array containing decoded and character encoded converted values.", 
                "name": "result"
            }
        ], 
        "path": "php/function.mb-parse-str", 
        "type": "Encoding"
    }, 
    "mb_preferred_mime_name": {
        "description": "Get a MIME charset string for a specific encoding.", 
        "name": "mb_preferred_mime_name", 
        "overview": "string mb_preferred_mime_name ( string $encoding )", 
        "parameters": [
            {
                "descr": "The encoding being checked.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-preferred-mime-name", 
        "type": "Encoding"
    }, 
    "mb_regex_encoding": {
        "description": "Set/Get character encoding for a multibyte regex.", 
        "name": "mb_regex_encoding", 
        "overview": "mixed mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] )", 
        "parameters": [
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-regex-encoding", 
        "type": "Encoding"
    }, 
    "mb_regex_set_options": {
        "description": "", 
        "name": "mb_regex_set_options", 
        "overview": "string mb_regex_set_options ([ string $options = mb_regex_set_options() ] )", 
        "parameters": [
            {
                "descr": "The options to set. This is a a string where each character is an option. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.mb-regex-set-options", 
        "type": "Encoding"
    }, 
    "mb_send_mail": {
        "description": "Sends email. Headers and messages are converted and encoded according to the mb_language() setting. It's a wrapper function for mail(), so see also mail() for details.", 
        "name": "mb_send_mail", 
        "overview": "bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )", 
        "parameters": [
            {
                "descr": "The mail addresses being sent to. ", 
                "name": "to"
            }, 
            {
                "descr": "The subject of the mail.", 
                "name": "subject"
            }, 
            {
                "descr": "The message of the mail.", 
                "name": "message"
            }, 
            {
                "descr": "String to be inserted at the end of the email header. ", 
                "name": "additional_headers (optional)"
            }, 
            {
                "descr": "additional_parameter is a MTA command line parameter. ", 
                "name": "additional_parameter"
            }
        ], 
        "path": "php/function.mb-send-mail", 
        "type": "Encoding"
    }, 
    "mb_split": {
        "description": "", 
        "name": "mb_split", 
        "overview": "array mb_split ( string $pattern , string $string [, int $limit = -1 ] )", 
        "parameters": [
            {
                "descr": "The regular expression pattern.", 
                "name": "pattern"
            }, 
            {
                "descr": "The string being split.", 
                "name": "string"
            }, 
            {
                "descr": "If optional parameter limit is specified, it will be split in limit elements as maximum.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.mb-split", 
        "type": "Encoding"
    }, 
    "mb_strcut": {
        "description": "mb_strcut() extracts a substring from a string similarly to mb_substr(), but operates on bytes instead of characters. If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from the first byte of that character. This is also the difference to the substr() function, which would simply cut the string between the bytes and thus result in a malformed byte sequence.", 
        "name": "mb_strcut", 
        "overview": "string mb_strcut ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string being cut.", 
                "name": "str"
            }, 
            {
                "descr": "Starting position in bytes.", 
                "name": "start"
            }, 
            {
                "descr": "Length in bytes. If omitted or NULL is passed, extract all bytes to the end of the string.", 
                "name": "length"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strcut", 
        "type": "Encoding"
    }, 
    "mb_strimwidth": {
        "description": "Truncates string str to specified width.", 
        "name": "mb_strimwidth", 
        "overview": "string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker = \"\" [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }, 
            {
                "descr": "The start position offset. Number of characters from the beginning of string. ", 
                "name": "start"
            }, 
            {
                "descr": "The width of the desired trim.", 
                "name": "width"
            }, 
            {
                "descr": "A string that is added to the end of string when string is truncated.", 
                "name": "trimmarker"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strimwidth", 
        "type": "Encoding"
    }, 
    "mb_stripos": {
        "description": "mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string. Unlike mb_strpos(), mb_stripos() is case-insensitive. If needle is not found, it returns FALSE.", 
        "name": "mb_stripos", 
        "overview": "int mb_stripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string from which to get the position of the first occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "The position in haystack to start searching", 
                "name": "offset"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-stripos", 
        "type": "Encoding"
    }, 
    "mb_stristr": {
        "description": "mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strstr(), mb_stristr() is case-insensitive. If needle is not found, it returns FALSE.", 
        "name": "mb_stristr", 
        "overview": "string mb_stristr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string from which to get the first occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "before_needle"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-stristr", 
        "type": "Encoding"
    }, 
    "mb_strlen": {
        "description": "Gets the length of a string.", 
        "name": "mb_strlen", 
        "overview": "mixed mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being checked for length.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strlen", 
        "type": "Encoding"
    }, 
    "mb_strpos": {
        "description": "Finds position of the first occurrence of a string in a string.", 
        "name": "mb_strpos", 
        "overview": "int mb_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string being checked.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack. ", 
                "name": "needle"
            }, 
            {
                "descr": "The search offset. If it is not specified, 0 is used.", 
                "name": "offset"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strpos", 
        "type": "Encoding"
    }, 
    "mb_strrchr": {
        "description": "mb_strrchr() finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.", 
        "name": "mb_strrchr", 
        "overview": "string mb_strrchr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string from which to get the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "part"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strrchr", 
        "type": "Encoding"
    }, 
    "mb_strrichr": {
        "description": "mb_strrichr() finds the last occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strrchr(), mb_strrichr() is case-insensitive. If needle is not found, it returns FALSE.", 
        "name": "mb_strrichr", 
        "overview": "string mb_strrichr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string from which to get the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "part"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strrichr", 
        "type": "Encoding"
    }, 
    "mb_strripos": {
        "description": "mb_strripos() performs multi-byte safe strripos() operation based on number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.", 
        "name": "mb_strripos", 
        "overview": "int mb_strripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string from which to get the position of the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "The position in haystack to start searching", 
                "name": "offset"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strripos", 
        "type": "Encoding"
    }, 
    "mb_strrpos": {
        "description": "Performs a multibyte safe strrpos() operation based on the number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1.", 
        "name": "mb_strrpos", 
        "overview": "int mb_strrpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string being checked, for the last occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack.", 
                "name": "needle"
            }, 
            {
                "descr": "May be specified to begin searching an arbitrary number of characters into the string. ", 
                "name": "offset"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strrpos", 
        "type": "Encoding"
    }, 
    "mb_strstr": {
        "description": "mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.", 
        "name": "mb_strstr", 
        "overview": "string mb_strstr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string from which to get the first occurrence of needle", 
                "name": "haystack"
            }, 
            {
                "descr": "The string to find in haystack", 
                "name": "needle"
            }, 
            {
                "descr": "Determines which portion of haystack this function returns. ", 
                "name": "before_needle"
            }, 
            {
                "descr": "Character encoding name to use. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strstr", 
        "type": "Encoding"
    }, 
    "mb_strtolower": {
        "description": "Returns str with all alphabetic characters converted to lowercase.", 
        "name": "mb_strtolower", 
        "overview": "string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being lowercased.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strtolower", 
        "type": "Encoding"
    }, 
    "mb_strtoupper": {
        "description": "Returns str with all alphabetic characters converted to uppercase.", 
        "name": "mb_strtoupper", 
        "overview": "string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being uppercased.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strtoupper", 
        "type": "Encoding"
    }, 
    "mb_strwidth": {
        "description": "Returns the width of string str.", 
        "name": "mb_strwidth", 
        "overview": "int mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being decoded.", 
                "name": "str"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-strwidth", 
        "type": "Encoding"
    }, 
    "mb_substitute_character": {
        "description": "Specifies a substitution character when input character encoding is invalid or character code does not exist in output character encoding. Invalid characters may be substituted NULL (no output), string or integer value (Unicode character code value).", 
        "name": "mb_substitute_character", 
        "overview": "mixed mb_substitute_character ([ mixed $substrchar = mb_substitute_character() ] )", 
        "parameters": [
            {
                "descr": "Specify the Unicode value as an integer, or as one of the following strings:   \"none\": no output     \"long\": Output character code value (Example: U+3000, JIS+7E7E)     \"entity\": Output character entity (Example: \u0200)", 
                "name": "substrchar"
            }
        ], 
        "path": "php/function.mb-substitute-character", 
        "type": "Encoding"
    }, 
    "mb_substr": {
        "description": "Performs a multi-byte safe substr() operation based on number of characters. Position is counted from the beginning of str. First character's position is 0. Second character position is 1, and so on.", 
        "name": "mb_substr", 
        "overview": "string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )", 
        "parameters": [
            {
                "descr": "The string to extract the substring from.", 
                "name": "str"
            }, 
            {
                "descr": "Position of first character to use from str.", 
                "name": "start"
            }, 
            {
                "descr": "Maximum number of characters to use from str. ", 
                "name": "length"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-substr", 
        "type": "Encoding"
    }, 
    "mb_substr_count": {
        "description": "Counts the number of times the needle substring occurs in the haystack string.", 
        "name": "mb_substr_count", 
        "overview": "int mb_substr_count ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] )", 
        "parameters": [
            {
                "descr": "The string being checked.", 
                "name": "haystack"
            }, 
            {
                "descr": "The string being found.", 
                "name": "needle"
            }, 
            {
                "descr": "The encoding parameter is the character encoding. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.mb-substr-count", 
        "type": "Encoding"
    }, 
    "mcrypt_cbc": {
        "description": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_cbc", 
        "overview": "string mcrypt_cbc ( int $cipher , string $key , string $data , int $mode [, string $iv ] )", 
        "parameters": [], 
        "path": "php/function.mcrypt-cbc", 
        "type": "Cryptography"
    }, 
    "mcrypt_cfb": {
        "description": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_cfb", 
        "overview": "string mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv )", 
        "parameters": [], 
        "path": "php/function.mcrypt-cfb", 
        "type": "Cryptography"
    }, 
    "mcrypt_create_iv": {
        "description": "Creates an initialization vector (IV) from a random source.", 
        "name": "mcrypt_create_iv", 
        "overview": "string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_RANDOM ] )", 
        "parameters": [
            {
                "descr": "The size of the IV.", 
                "name": "size"
            }, 
            {
                "descr": "The source of the IV. The source can be MCRYPT_RAND (system random number generator), MCRYPT_DEV_RANDOM (read data from /dev/random) and MCRYPT_DEV_URANDOM (read data from /dev/urandom). ", 
                "name": "source"
            }
        ], 
        "path": "php/function.mcrypt-create-iv", 
        "type": "Cryptography"
    }, 
    "mcrypt_decrypt": {
        "description": "Decrypts the data and returns the unencrypted data.", 
        "name": "mcrypt_decrypt", 
        "overview": "string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "The key with which the data was encrypted. ", 
                "name": "key"
            }, 
            {
                "descr": "The data that will be decrypted with the given cipher and mode. ", 
                "name": "data"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. ", 
                "name": "iv"
            }
        ], 
        "path": "php/function.mcrypt-decrypt", 
        "type": "Cryptography"
    }, 
    "mcrypt_ecb": {
        "description": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_ecb", 
        "overview": "string mcrypt_ecb ( int $cipher , string $key , string $data , int $mode )", 
        "parameters": [], 
        "path": "php/function.mcrypt-ecb", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_algorithms_name": {
        "description": "This function returns the name of the algorithm.", 
        "name": "mcrypt_enc_get_algorithms_name", 
        "overview": "string mcrypt_enc_get_algorithms_name ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-algorithms-name", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_block_size": {
        "description": "Gets the blocksize of the opened algorithm.", 
        "name": "mcrypt_enc_get_block_size", 
        "overview": "int mcrypt_enc_get_block_size ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-block-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_iv_size": {
        "description": "This function returns the size of the IV of the algorithm specified by the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode.", 
        "name": "mcrypt_enc_get_iv_size", 
        "overview": "int mcrypt_enc_get_iv_size ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-iv-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_key_size": {
        "description": "Gets the maximum supported key size of the algorithm in bytes.", 
        "name": "mcrypt_enc_get_key_size", 
        "overview": "int mcrypt_enc_get_key_size ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-key-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_modes_name": {
        "description": "This function returns the name of the mode.", 
        "name": "mcrypt_enc_get_modes_name", 
        "overview": "string mcrypt_enc_get_modes_name ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-modes-name", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_get_supported_key_sizes": {
        "description": "Gets the supported key sizes of the opened algorithm.", 
        "name": "mcrypt_enc_get_supported_key_sizes", 
        "overview": "array mcrypt_enc_get_supported_key_sizes ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-get-supported-key-sizes", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_is_block_algorithm": {
        "description": "Tells whether the algorithm of the opened mode is a block algorithm.", 
        "name": "mcrypt_enc_is_block_algorithm", 
        "overview": "bool mcrypt_enc_is_block_algorithm ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-is-block-algorithm", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_is_block_algorithm_mode": {
        "description": "Tells whether the algorithm of the opened mode works on blocks (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb)..", 
        "name": "mcrypt_enc_is_block_algorithm_mode", 
        "overview": "bool mcrypt_enc_is_block_algorithm_mode ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-is-block-algorithm-mode", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_is_block_mode": {
        "description": "Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).", 
        "name": "mcrypt_enc_is_block_mode", 
        "overview": "bool mcrypt_enc_is_block_mode ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-is-block-mode", 
        "type": "Cryptography"
    }, 
    "mcrypt_enc_self_test": {
        "description": "This function runs the self test on the algorithm specified by the descriptor td.", 
        "name": "mcrypt_enc_self_test", 
        "overview": "int mcrypt_enc_self_test ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-enc-self-test", 
        "type": "Cryptography"
    }, 
    "mcrypt_encrypt": {
        "description": "Encrypts the data and returns it.", 
        "name": "mcrypt_encrypt", 
        "overview": "string mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "The key with which the data will be encrypted. ", 
                "name": "key"
            }, 
            {
                "descr": "The data that will be encrypted with the given cipher and mode. ", 
                "name": "data"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. ", 
                "name": "iv"
            }
        ], 
        "path": "php/function.mcrypt-encrypt", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic": {
        "description": "This function encrypts data. The data is padded with \"\\0\" to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer than the input, due to the padding of the data.", 
        "name": "mcrypt_generic", 
        "overview": "string mcrypt_generic ( resource $td , string $data )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.   The encryption handle should always be initialized with mcrypt_generic_init() with a key and an IV before calling this function. ", 
                "name": "td"
            }, 
            {
                "descr": "The data to encrypt.", 
                "name": "data"
            }
        ], 
        "path": "php/function.mcrypt-generic", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic_deinit": {
        "description": "This function terminates encryption specified by the encryption descriptor (td). It clears all buffers, but does not close the module. You need to call mcrypt_module_close() yourself. (But PHP does this for you at the end of the script.)", 
        "name": "mcrypt_generic_deinit", 
        "overview": "bool mcrypt_generic_deinit ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-generic-deinit", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic_end": {
        "description": "", 
        "name": "mcrypt_generic_end", 
        "overview": "bool mcrypt_generic_end ( resource $td )", 
        "parameters": [], 
        "path": "php/function.mcrypt-generic-end", 
        "type": "Cryptography"
    }, 
    "mcrypt_generic_init": {
        "description": "You need to call this function before every call to mcrypt_generic() or mdecrypt_generic().", 
        "name": "mcrypt_generic_init", 
        "overview": "int mcrypt_generic_init ( resource $td , string $key , string $iv )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }, 
            {
                "descr": "The maximum length of the key should be the one obtained by calling mcrypt_enc_get_key_size() and every value smaller than this is legal.", 
                "name": "key"
            }, 
            {
                "descr": "The IV should normally have the size of the algorithms block size, but you must obtain the size by calling mcrypt_enc_get_iv_size(). ", 
                "name": "iv"
            }
        ], 
        "path": "php/function.mcrypt-generic-init", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_block_size": {
        "description": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.", 
        "name": "mcrypt_get_block_size", 
        "overview": "int mcrypt_get_block_size ( int $cipher )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }
        ], 
        "path": "php/function.mcrypt-get-block-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_cipher_name": {
        "description": "mcrypt_get_cipher_name() is used to get the name of the specified cipher.", 
        "name": "mcrypt_get_cipher_name", 
        "overview": "string mcrypt_get_cipher_name ( int $cipher )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }
        ], 
        "path": "php/function.mcrypt-get-cipher-name", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_iv_size": {
        "description": "Gets the size of the IV belonging to a specific cipher/mode combination.", 
        "name": "mcrypt_get_iv_size", 
        "overview": "int mcrypt_get_iv_size ( string $cipher , string $mode )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\". ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.mcrypt-get-iv-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_get_key_size": {
        "description": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.", 
        "name": "mcrypt_get_key_size", 
        "overview": "int mcrypt_get_key_size ( int $cipher )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "cipher"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }
        ], 
        "path": "php/function.mcrypt-get-key-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_list_algorithms": {
        "description": "Gets the list of all supported algorithms in the lib_dir parameter.", 
        "name": "mcrypt_list_algorithms", 
        "overview": "array mcrypt_list_algorithms ([ string $lib_dir = ini_get(\"mcrypt.algorithms_dir\") ] )", 
        "parameters": [
            {
                "descr": "Specifies the directory where all algorithms are located. ", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-list-algorithms", 
        "type": "Cryptography"
    }, 
    "mcrypt_list_modes": {
        "description": "Gets the list of all supported modes in the lib_dir parameter.", 
        "name": "mcrypt_list_modes", 
        "overview": "array mcrypt_list_modes ([ string $lib_dir = ini_get(\"mcrypt.modes_dir\") ] )", 
        "parameters": [
            {
                "descr": "Specifies the directory where all modes are located. ", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-list-modes", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_close": {
        "description": "Closes the specified encryption handle.", 
        "name": "mcrypt_module_close", 
        "overview": "bool mcrypt_module_close ( resource $td )", 
        "parameters": [
            {
                "descr": "The encryption descriptor.", 
                "name": "td"
            }
        ], 
        "path": "php/function.mcrypt-module-close", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_get_algo_block_size": {
        "description": "Gets the blocksize of the specified algorithm.", 
        "name": "mcrypt_module_get_algo_block_size", 
        "overview": "int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )", 
        "parameters": [
            {
                "descr": "The algorithm name.", 
                "name": "algorithm"
            }, 
            {
                "descr": "This optional parameter can contain the location where the mode module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-get-algo-block-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_get_algo_key_size": {
        "description": "Gets the maximum supported keysize of the opened mode.", 
        "name": "mcrypt_module_get_algo_key_size", 
        "overview": "int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )", 
        "parameters": [
            {
                "descr": "The algorithm name.", 
                "name": "algorithm"
            }, 
            {
                "descr": "This optional parameter can contain the location where the mode module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-get-algo-key-size", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_get_supported_key_sizes": {
        "description": "Returns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size() are supported by the algorithm.", 
        "name": "mcrypt_module_get_supported_key_sizes", 
        "overview": "array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )", 
        "parameters": [
            {
                "descr": "The algorithm to be used.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-get-supported-key-sizes", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_is_block_algorithm": {
        "description": "This function returns TRUE if the specified algorithm is a block algorithm, or FALSE if it is a stream one.", 
        "name": "mcrypt_module_is_block_algorithm", 
        "overview": "bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )", 
        "parameters": [
            {
                "descr": "The algorithm to check.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-is-block-algorithm", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_is_block_algorithm_mode": {
        "description": "This function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).", 
        "name": "mcrypt_module_is_block_algorithm_mode", 
        "overview": "bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )", 
        "parameters": [
            {
                "descr": "The mode to check.", 
                "name": "mode"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-is-block-algorithm-mode", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_is_block_mode": {
        "description": "This function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).", 
        "name": "mcrypt_module_is_block_mode", 
        "overview": "bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-is-block-mode", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_open": {
        "description": "This function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. \"twofish\" or is one of the MCRYPT_ciphername constants. The module is closed by calling mcrypt_module_close().", 
        "name": "mcrypt_module_open", 
        "overview": "resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The algorithm_directory parameter is used to locate the encryption module. ", 
                "name": "algorithm_directory"
            }, 
            {
                "descr": "One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".", 
                "name": "mode"
            }, 
            {
                "descr": "The mode_directory parameter is used to locate the encryption module. ", 
                "name": "mode_directory"
            }
        ], 
        "path": "php/function.mcrypt-module-open", 
        "type": "Cryptography"
    }, 
    "mcrypt_module_self_test": {
        "description": "This function runs the self test on the algorithm specified.", 
        "name": "mcrypt_module_self_test", 
        "overview": "bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )", 
        "parameters": [
            {
                "descr": "One of the MCRYPT_ciphername constants, or the name of the algorithm as string.", 
                "name": "algorithm"
            }, 
            {
                "descr": "The optional lib_dir parameter can contain the location where the algorithm module is on the system.", 
                "name": "lib_dir"
            }
        ], 
        "path": "php/function.mcrypt-module-self-test", 
        "type": "Cryptography"
    }, 
    "mcrypt_ofb": {
        "description": "The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.", 
        "name": "mcrypt_ofb", 
        "overview": "string mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv )", 
        "parameters": [], 
        "path": "php/function.mcrypt-ofb", 
        "type": "Cryptography"
    }, 
    "md5": {
        "description": "Calculates the MD5 hash of str using the \u00bb RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash.", 
        "name": "md5", 
        "overview": "string md5 ( string $str [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "The string.", 
                "name": "str"
            }, 
            {
                "descr": "If the optional raw_output is set to TRUE, then the md5 digest is instead returned in raw binary format with a length of 16.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.md5", 
        "type": "String"
    }, 
    "md5_file": {
        "description": "Calculates the MD5 hash of the file specified by the filename parameter using the \u00bb RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.", 
        "name": "md5_file", 
        "overview": "string md5_file ( string $filename [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "The filename", 
                "name": "filename"
            }, 
            {
                "descr": "When TRUE, returns the digest in raw binary format with a length of 16.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.md5-file", 
        "type": "String"
    }, 
    "mdecrypt_generic": {
        "description": "This function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data.", 
        "name": "mdecrypt_generic", 
        "overview": "string mdecrypt_generic ( resource $td , string $data )", 
        "parameters": [
            {
                "descr": "An encryption descriptor returned by mcrypt_module_open()", 
                "name": "td"
            }, 
            {
                "descr": "Encrypted data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.mdecrypt-generic", 
        "type": "Cryptography"
    }, 
    "memory_get_peak_usage": {
        "description": "Returns the peak of memory, in bytes, that's been allocated to your PHP script.", 
        "name": "memory_get_peak_usage", 
        "overview": "int memory_get_peak_usage ([ bool $real_usage = false ] )", 
        "parameters": [
            {
                "descr": "Set this to TRUE to get the real size of memory allocated from system. ", 
                "name": "real_usage"
            }
        ], 
        "path": "php/function.memory-get-peak-usage", 
        "type": "Language"
    }, 
    "memory_get_usage": {
        "description": "Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.", 
        "name": "memory_get_usage", 
        "overview": "int memory_get_usage ([ bool $real_usage = false ] )", 
        "parameters": [
            {
                "descr": "Set this to TRUE to get the real size of memory allocated from system. ", 
                "name": "real_usage"
            }
        ], 
        "path": "php/function.memory-get-usage", 
        "type": "Language"
    }, 
    "metaphone": {
        "description": "Calculates the metaphone key of str.", 
        "name": "metaphone", 
        "overview": "string metaphone ( string $str [, int $phonemes = 0 ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "This parameter restricts the returned metaphone key to phonemes characters in length. ", 
                "name": "phonemes"
            }
        ], 
        "path": "php/function.metaphone", 
        "type": "String"
    }, 
    "method_exists": {
        "description": "Checks if the class method exists in the given object.", 
        "name": "method_exists", 
        "overview": "bool method_exists ( mixed $object , string $method_name )", 
        "parameters": [
            {
                "descr": "An object instance or a class name", 
                "name": "object"
            }, 
            {
                "descr": "The method name", 
                "name": "method_name"
            }
        ], 
        "path": "php/function.method-exists", 
        "type": "Classes and Functions"
    }, 
    "microtime": {
        "description": "microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.", 
        "name": "microtime", 
        "overview": "mixed microtime ([ bool $get_as_float = false ] )", 
        "parameters": [
            {
                "descr": "If used and set to TRUE, microtime() will return a float instead of a string, as described in the return values section below.", 
                "name": "get_as_float"
            }
        ], 
        "path": "php/function.microtime", 
        "type": "Date and Time"
    }, 
    "mime_content_type": {
        "description": "Returns the MIME content type for a file as determined by using information from the magic.mime file.", 
        "name": "mime_content_type", 
        "overview": "string mime_content_type ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the tested file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.mime-content-type", 
        "type": "File System"
    }, 
    "min": {
        "description": "If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.", 
        "name": "min", 
        "overview": "mixed min ( array $values )", 
        "parameters": [
            {
                "descr": "An array containing the values.", 
                "name": "values"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value1"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "value2"
            }, 
            {
                "descr": "Any comparable value.", 
                "name": "..."
            }
        ], 
        "path": "php/function.min", 
        "type": "Mathematics"
    }, 
    "mkdir": {
        "description": "Attempts to create the directory specified by pathname.", 
        "name": "mkdir", 
        "overview": "bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )", 
        "parameters": [
            {
                "descr": "The directory path.", 
                "name": "pathname"
            }, 
            {
                "descr": "The mode is 0777 by default, which means the widest possible access. ", 
                "name": "mode"
            }, 
            {
                "descr": "Allows the creation of nested directories specified in the pathname.", 
                "name": "recursive"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.mkdir", 
        "type": "File System"
    }, 
    "mktime": {
        "description": "Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.", 
        "name": "mktime", 
        "overview": "int mktime ([ int $hour = date(\"H\") [, int $minute = date(\"i\") [, int $second = date(\"s\") [, int $month = date(\"n\") [, int $day = date(\"j\") [, int $year = date(\"Y\") [, int $is_dst = -1 ]]]]]]] )", 
        "parameters": [
            {
                "descr": "The number of the hour relative to the start of the day determined by month, day and year. ", 
                "name": "hour"
            }, 
            {
                "descr": "The number of the minute relative to the start of the hour. ", 
                "name": "minute"
            }, 
            {
                "descr": "The number of seconds relative to the start of the minute. ", 
                "name": "second"
            }, 
            {
                "descr": "The number of the month relative to the end of the previous year. ", 
                "name": "month"
            }, 
            {
                "descr": "The number of the day relative to the end of the previous month. ", 
                "name": "day"
            }, 
            {
                "descr": "The number of the year, may be a two or four digit value, with values between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000. ", 
                "name": "year"
            }, 
            {
                "descr": "This parameter can be set to 1 if the time is during daylight savings time (DST), 0 if it is not, or -1 (the default) if it is unknown whether the time is within daylight savings time or not. ", 
                "name": "is_dst"
            }
        ], 
        "path": "php/function.mktime", 
        "type": "Date and Time"
    }, 
    "money_format": {
        "description": "money_format() returns a formatted version of number. This function wraps the C library function strfmon(), with the difference that this implementation converts only one number at a time.", 
        "name": "money_format", 
        "overview": "string money_format ( string $format , float $number )", 
        "parameters": [
            {
                "descr": "The format specification consists of the following sequence: a % character optional flags optional field width optional left precision optional right precision a required conversion character Flags  One or more of the optional flags below can be used:  =f   The character = followed by a (single byte) character f to be used as the numeric fill character. The default fill character is space.", 
                "name": "format"
            }, 
            {
                "descr": "Disable the use of grouping characters (as defined by the current locale).", 
                "name": "^"
            }, 
            {
                "descr": "Specify the formatting style for positive and negative numbers. ", 
                "name": "+ or ("
            }, 
            {
                "descr": "Suppress the currency symbol from the output string.", 
                "name": "!"
            }, 
            {
                "descr": "If present, it will make all fields left-justified (padded to the right), as opposed to the default which is for the fields to be right-justified (padded to the left).", 
                "name": "-"
            }, 
            {
                "descr": "A decimal digit string specifying a minimum field width. ", 
                "name": "w"
            }, 
            {
                "descr": "The maximum number of digits (n) expected to the left of the decimal character (e.g. ", 
                "name": "#n"
            }, 
            {
                "descr": "A period followed by the number of digits (p) after the decimal character. ", 
                "name": ".p"
            }, 
            {
                "descr": "The number is formatted according to the locale's international currency format (e.g. ", 
                "name": "i"
            }, 
            {
                "descr": "The number is formatted according to the locale's national currency format (e.g. ", 
                "name": "n"
            }, 
            {
                "descr": "Returns the % character.", 
                "name": "%"
            }, 
            {
                "descr": "The number to be formatted.", 
                "name": "number"
            }
        ], 
        "path": "php/function.money-format", 
        "type": "String"
    }, 
    "move_uploaded_file": {
        "description": "This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination.", 
        "name": "move_uploaded_file", 
        "overview": "bool move_uploaded_file ( string $filename , string $destination )", 
        "parameters": [
            {
                "descr": "The filename of the uploaded file.", 
                "name": "filename"
            }, 
            {
                "descr": "The destination of the moved file.", 
                "name": "destination"
            }
        ], 
        "path": "php/function.move-uploaded-file", 
        "type": "File System"
    }, 
    "mt_getrandmax": {
        "description": "", 
        "name": "mt_getrandmax", 
        "overview": "int mt_getrandmax ( void )", 
        "parameters": [], 
        "path": "php/function.mt-getrandmax", 
        "type": "Mathematics"
    }, 
    "mt_rand": {
        "description": "", 
        "name": "mt_rand", 
        "overview": "int mt_rand ( void )", 
        "parameters": [
            {
                "descr": "Optional lowest value to be returned (default: 0)", 
                "name": "min"
            }, 
            {
                "descr": "Optional highest value to be returned (default: mt_getrandmax())", 
                "name": "max"
            }
        ], 
        "path": "php/function.mt-rand", 
        "type": "Mathematics"
    }, 
    "mt_srand": {
        "description": "Seeds the random number generator with seed or with a random value if no seed is given.", 
        "name": "mt_srand", 
        "overview": "void mt_srand ([ int $seed ] )", 
        "parameters": [
            {
                "descr": "An optional seed value", 
                "name": "seed"
            }
        ], 
        "path": "php/function.mt-srand", 
        "type": "Mathematics"
    }, 
    "mysqli": {
        "description": "", 
        "name": "mysqli", 
        "overview": "bool autocommit ( bool $mode )", 
        "parameters": [], 
        "path": "php/class.mysqli", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$affected_rows": {
        "description": "Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query.", 
        "name": "mysqli::$affected_rows", 
        "overview": "int mysqli_affected_rows ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.affected-rows", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$client_info": {
        "description": "Returns a string that represents the MySQL client library version.", 
        "name": "mysqli::$client_info", 
        "overview": "string mysqli_get_client_info ( mysqli $link )", 
        "parameters": [], 
        "path": "php/mysqli.client-info", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$client_version": {
        "description": "Returns client version number as an integer.", 
        "name": "mysqli::$client_version", 
        "overview": "int mysqli_get_client_version ( mysqli $link )", 
        "parameters": [], 
        "path": "php/mysqli.client-version", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$connect_errno": {
        "description": "Returns the last error code number from the last call to mysqli_connect().", 
        "name": "mysqli::$connect_errno", 
        "overview": "int mysqli_connect_errno ( void )", 
        "parameters": [], 
        "path": "php/mysqli.connect-errno", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$connect_error": {
        "description": "Returns the last error message string from the last call to mysqli_connect().", 
        "name": "mysqli::$connect_error", 
        "overview": "string mysqli_connect_error ( void )", 
        "parameters": [], 
        "path": "php/mysqli.connect-error", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$errno": {
        "description": "Returns the last error code for the most recent MySQLi function call that can succeed or fail.", 
        "name": "mysqli::$errno", 
        "overview": "int mysqli_errno ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.errno", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$error": {
        "description": "Returns the last error message for the most recent MySQLi function call that can succeed or fail.", 
        "name": "mysqli::$error", 
        "overview": "string mysqli_error ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.error", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$error_list": {
        "description": "Returns a array of errors for the most recent MySQLi function call that can succeed or fail.", 
        "name": "mysqli::$error_list", 
        "overview": "array mysqli_error_list ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.error-list", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$field_count": {
        "description": "Returns the number of columns for the most recent query on the connection represented by the link parameter. This function can be useful when using the mysqli_store_result() function to determine if the query should have produced a non-empty result set or not without knowing the nature of the query.", 
        "name": "mysqli::$field_count", 
        "overview": "int mysqli_field_count ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.field-count", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$host_info": {
        "description": "Returns a string describing the connection represented by the link parameter (including the server host name).", 
        "name": "mysqli::$host_info", 
        "overview": "string mysqli_get_host_info ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-host-info", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$info": {
        "description": "The mysqli_info() function returns a string providing information about the last query executed. The nature of this string is provided below:", 
        "name": "mysqli::$info", 
        "overview": "string mysqli_info ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.info", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$insert_id": {
        "description": "The mysqli_insert_id() function returns the ID generated by a query on a table with a column having the AUTO_INCREMENT attribute. If the last query wasn't an INSERT or UPDATE statement or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero.", 
        "name": "mysqli::$insert_id", 
        "overview": "mixed mysqli_insert_id ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.insert-id", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$protocol_version": {
        "description": "Returns an integer representing the MySQL protocol version used by the connection represented by the link parameter.", 
        "name": "mysqli::$protocol_version", 
        "overview": "int mysqli_get_proto_info ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-proto-info", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$server_info": {
        "description": "Returns a string representing the version of the MySQL server that the MySQLi extension is connected to.", 
        "name": "mysqli::$server_info", 
        "overview": "string mysqli_get_server_info ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-server-info", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$server_version": {
        "description": "The mysqli_get_server_version() function returns the version of the server connected to (represented by the link parameter) as an integer.", 
        "name": "mysqli::$server_version", 
        "overview": "int mysqli_get_server_version ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-server-version", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$sqlstate": {
        "description": "Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see \u00bb http://dev.mysql.com/doc/mysql/en/error-handling.html.", 
        "name": "mysqli::$sqlstate", 
        "overview": "string mysqli_sqlstate ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.sqlstate", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$thread_id": {
        "description": "The mysqli_thread_id() function returns the thread ID for the current connection which can then be killed using the mysqli_kill() function. If the connection is lost and you reconnect with mysqli_ping(), the thread ID will be other. Therefore you should get the thread ID only when you need it.", 
        "name": "mysqli::$thread_id", 
        "overview": "int mysqli_thread_id ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.thread-id", 
        "type": "Database/MySQL"
    }, 
    "mysqli::$warning_count": {
        "description": "Returns the number of warnings from the last query in the connection.", 
        "name": "mysqli::$warning_count", 
        "overview": "int mysqli_warning_count ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.warning-count", 
        "type": "Database/MySQL"
    }, 
    "mysqli::__construct": {
        "description": "Opens a connection to the MySQL Server running on.", 
        "name": "mysqli::__construct", 
        "overview": "mysqli mysqli_connect ([ string $host = ini_get(\"mysqli.default_host\") [, string $username = ini_get(\"mysqli.default_user\") [, string $passwd = ini_get(\"mysqli.default_pw\") [, string $dbname = \"\" [, int $port = ini_get(\"mysqli.default_port\") [, string $socket = ini_get(\"mysqli.default_socket\") ]]]]]] )", 
        "parameters": [
            {
                "descr": "Can be either a host name or an IP address. ", 
                "name": "host"
            }, 
            {
                "descr": "The MySQL user name.", 
                "name": "username"
            }, 
            {
                "descr": "If not provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. ", 
                "name": "passwd"
            }, 
            {
                "descr": "If provided will specify the default database to be used when performing queries.", 
                "name": "dbname"
            }, 
            {
                "descr": "Specifies the port number to attempt to connect to the MySQL server.", 
                "name": "port"
            }, 
            {
                "descr": "Specifies the socket or named pipe that should be used. ", 
                "name": "socket"
            }
        ], 
        "path": "php/mysqli.construct", 
        "type": "Database/MySQL"
    }, 
    "mysqli::autocommit": {
        "description": "Turns on or off auto-commit mode on queries for the database connection.", 
        "name": "mysqli::autocommit", 
        "overview": "bool mysqli::autocommit ( bool $mode )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "Whether to turn on auto-commit or not.", 
                "name": "mode"
            }
        ], 
        "path": "php/mysqli.autocommit", 
        "type": "Database/MySQL"
    }, 
    "mysqli::begin_transaction": {
        "description": "Procedural style:", 
        "name": "mysqli::begin_transaction", 
        "overview": "public bool mysqli::begin_transaction ([ int $flags [, string $name ]] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.begin-transaction", 
        "type": "Database/MySQL"
    }, 
    "mysqli::change_user": {
        "description": "Changes the user of the specified database connection and sets the current database.", 
        "name": "mysqli::change_user", 
        "overview": "bool mysqli::change_user ( string $user , string $password , string $database )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The MySQL user name.", 
                "name": "user"
            }, 
            {
                "descr": "The MySQL password.", 
                "name": "password"
            }, 
            {
                "descr": "The database to change to.   If desired, the NULL value may be passed resulting in only changing the user and not selecting a database. ", 
                "name": "database"
            }
        ], 
        "path": "php/mysqli.change-user", 
        "type": "Database/MySQL"
    }, 
    "mysqli::character_set_name": {
        "description": "Returns the current character set for the database connection.", 
        "name": "mysqli::character_set_name", 
        "overview": "string mysqli::character_set_name ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.character-set-name", 
        "type": "Database/MySQL"
    }, 
    "mysqli::close": {
        "description": "Closes a previously opened database connection.", 
        "name": "mysqli::close", 
        "overview": "bool mysqli::close ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.close", 
        "type": "Database/MySQL"
    }, 
    "mysqli::commit": {
        "description": "Commits the current transaction for the database connection.", 
        "name": "mysqli::commit", 
        "overview": "bool mysqli::commit ([ int $flags [, string $name ]] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "A bitmask of MYSQLI_TRANS_COR_* constants.", 
                "name": "flags"
            }, 
            {
                "descr": "If provided then COMMIT/*name*/ is executed.", 
                "name": "name"
            }
        ], 
        "path": "php/mysqli.commit", 
        "type": "Database/MySQL"
    }, 
    "mysqli::debug": {
        "description": "Performs debugging operations using the Fred Fish debugging library.", 
        "name": "mysqli::debug", 
        "overview": "bool mysqli::debug ( string $message )", 
        "parameters": [
            {
                "descr": "A string representing the debugging operation to perform", 
                "name": "message"
            }
        ], 
        "path": "php/mysqli.debug", 
        "type": "Database/MySQL"
    }, 
    "mysqli::disable_reads_from_master": {
        "description": "Procedural style", 
        "name": "mysqli::disable_reads_from_master", 
        "overview": "void mysqli::disable_reads_from_master ( void )", 
        "parameters": [], 
        "path": "php/function.mysqli-disable-reads-from-master", 
        "type": "Database/MySQL"
    }, 
    "mysqli::dump_debug_info": {
        "description": "This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.", 
        "name": "mysqli::dump_debug_info", 
        "overview": "bool mysqli::dump_debug_info ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.dump-debug-info", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_charset": {
        "description": "Returns a character set object providing several properties of the current active character set.", 
        "name": "mysqli::get_charset", 
        "overview": "object mysqli::get_charset ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "Character set name", 
                "name": "charset"
            }, 
            {
                "descr": "Collation name", 
                "name": "collation"
            }, 
            {
                "descr": "Directory the charset description was fetched from (?) or \"\" for built-in character sets", 
                "name": "dir"
            }, 
            {
                "descr": "Minimum character length in bytes", 
                "name": "min_length"
            }, 
            {
                "descr": "Maximum character length in bytes", 
                "name": "max_length"
            }, 
            {
                "descr": "Internal character set number", 
                "name": "number"
            }, 
            {
                "descr": "Character set status (?)", 
                "name": "state"
            }
        ], 
        "path": "php/mysqli.get-charset", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_client_info": {
        "description": "Returns a string that represents the MySQL client library version.", 
        "name": "mysqli::get_client_info", 
        "overview": "string mysqli::get_client_info ( void )", 
        "parameters": [], 
        "path": "php/mysqli.get-client-info", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_connection_stats": {
        "description": "Returns statistics about the client connection. Available only with mysqlnd.", 
        "name": "mysqli::get_connection_stats", 
        "overview": "bool mysqli::get_connection_stats ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.get-connection-stats", 
        "type": "Database/MySQL"
    }, 
    "mysqli::get_warnings": {
        "description": "Procedural style", 
        "name": "mysqli::get_warnings", 
        "overview": "mysqli_warning mysqli::get_warnings ( void )", 
        "parameters": [], 
        "path": "php/mysqli.get-warnings", 
        "type": "Database/MySQL"
    }, 
    "mysqli::init": {
        "description": "Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect().", 
        "name": "mysqli::init", 
        "overview": "mysqli mysqli::init ( void )", 
        "parameters": [], 
        "path": "php/mysqli.init", 
        "type": "Database/MySQL"
    }, 
    "mysqli::kill": {
        "description": "This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function.", 
        "name": "mysqli::kill", 
        "overview": "bool mysqli::kill ( int $processid )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.kill", 
        "type": "Database/MySQL"
    }, 
    "mysqli::more_results": {
        "description": "Indicates if one or more result sets are available from a previous call to mysqli_multi_query().", 
        "name": "mysqli::more_results", 
        "overview": "bool mysqli::more_results ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.more-results", 
        "type": "Database/MySQL"
    }, 
    "mysqli::multi_query": {
        "description": "Executes one or multiple queries which are concatenated by a semicolon.", 
        "name": "mysqli::multi_query", 
        "overview": "bool mysqli::multi_query ( string $query )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query, as a string.   Data inside the query should be properly escaped.", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli.multi-query", 
        "type": "Database/MySQL"
    }, 
    "mysqli::next_result": {
        "description": "Prepares next result set from a previous call to mysqli_multi_query() which can be retrieved by mysqli_store_result() or mysqli_use_result().", 
        "name": "mysqli::next_result", 
        "overview": "bool mysqli::next_result ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.next-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli::options": {
        "description": "Used to set extra connect options and affect behavior for a connection.", 
        "name": "mysqli::options", 
        "overview": "bool mysqli::options ( int $option , mixed $value )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The option that you want to set. ", 
                "name": "option"
            }, 
            {
                "descr": "The value for the option.", 
                "name": "value"
            }
        ], 
        "path": "php/mysqli.options", 
        "type": "Database/MySQL"
    }, 
    "mysqli::ping": {
        "description": "Checks whether the connection to the server is working. If it has gone down, and global option mysqli.reconnect is enabled an automatic reconnection is attempted.", 
        "name": "mysqli::ping", 
        "overview": "bool mysqli::ping ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.ping", 
        "type": "Database/MySQL"
    }, 
    "mysqli::poll": {
        "description": "Poll connections. Available only with mysqlnd. The method can be used as static.", 
        "name": "mysqli::poll", 
        "overview": "public static int mysqli::poll ( array &$read , array &$error , array &$reject , int $sec [, int $usec ] )", 
        "parameters": [
            {
                "descr": "List of connections to check for outstanding results that can be read.", 
                "name": "read"
            }, 
            {
                "descr": "List of connections on which an error occured, for example, query failure or lost connection.", 
                "name": "error"
            }, 
            {
                "descr": "List of connections rejected because no asynchronous query has been run on for which the function could poll results.", 
                "name": "reject"
            }, 
            {
                "descr": "Number of seconds to wait, must be non-negative.", 
                "name": "sec"
            }, 
            {
                "descr": "Number of microseconds to wait, must be non-negative.", 
                "name": "usec"
            }
        ], 
        "path": "php/mysqli.poll", 
        "type": "Database/MySQL"
    }, 
    "mysqli::prepare": {
        "description": "Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement.", 
        "name": "mysqli::prepare", 
        "overview": "mysqli_stmt mysqli::prepare ( string $query )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query, as a string.  Note:  You should not add a terminating semicolon or \\g to the statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli.prepare", 
        "type": "Database/MySQL"
    }, 
    "mysqli::query": {
        "description": "Performs a query against the database.", 
        "name": "mysqli::query", 
        "overview": "mixed mysqli::query ( string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query string.   Data inside the query should be properly escaped.", 
                "name": "query"
            }, 
            {
                "descr": "Either the constant MYSQLI_USE_RESULT or MYSQLI_STORE_RESULT depending on the desired behavior. ", 
                "name": "resultmode"
            }
        ], 
        "path": "php/mysqli.query", 
        "type": "Database/MySQL"
    }, 
    "mysqli::real_connect": {
        "description": "Establish a connection to a MySQL database engine.", 
        "name": "mysqli::real_connect", 
        "overview": "bool mysqli::real_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "Can be either a host name or an IP address. ", 
                "name": "host"
            }, 
            {
                "descr": "The MySQL user name.", 
                "name": "username"
            }, 
            {
                "descr": "If provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. ", 
                "name": "passwd"
            }, 
            {
                "descr": "If provided will specify the default database to be used when performing queries.", 
                "name": "dbname"
            }, 
            {
                "descr": "Specifies the port number to attempt to connect to the MySQL server.", 
                "name": "port"
            }, 
            {
                "descr": "Specifies the socket or named pipe that should be used. ", 
                "name": "socket"
            }, 
            {
                "descr": "With the parameter flags you can set different connection options:  Supported flags Name Description MYSQLI_CLIENT_COMPRESS Use compression protocol MYSQLI_CLIENT_FOUND_ROWS return number of matched rows, not the number of affected rows MYSQLI_CLIENT_IGNORE_SPACE Allow spaces after function names. Makes all function names reserved words. MYSQLI_CLIENT_INTERACTIVE  Allow interactive_timeout seconds (instead of wait_timeout seconds) of inactivity before closing the connection  MYSQLI_CLIENT_SSL Use SSL (encryption) Note:  For security reasons the MULTI_STATEMENT flag is not supported in PHP. If you want to execute multiple queries use the mysqli_multi_query() function.", 
                "name": "flags"
            }
        ], 
        "path": "php/mysqli.real-connect", 
        "type": "Database/MySQL"
    }, 
    "mysqli::real_escape_string": {
        "description": "This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to an escaped SQL string, taking into account the current character set of the connection.", 
        "name": "mysqli::real_escape_string", 
        "overview": "string mysqli::escape_string ( string $escapestr )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The string to be escaped.   Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ', \", and Control-Z.", 
                "name": "escapestr"
            }
        ], 
        "path": "php/mysqli.real-escape-string", 
        "type": "Database/MySQL"
    }, 
    "mysqli::real_query": {
        "description": "Executes a single query against the database whose result can then be retrieved or stored using the mysqli_store_result() or mysqli_use_result() functions.", 
        "name": "mysqli::real_query", 
        "overview": "bool mysqli::real_query ( string $query )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The query, as a string.   Data inside the query should be properly escaped.", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli.real-query", 
        "type": "Database/MySQL"
    }, 
    "mysqli::reap_async_query": {
        "description": "Get result from async query. Available only with mysqlnd.", 
        "name": "mysqli::reap_async_query", 
        "overview": "public mysqli_result mysqli::reap_async_query ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.reap-async-query", 
        "type": "Database/MySQL"
    }, 
    "mysqli::refresh": {
        "description": "Flushes tables or caches, or resets the replication server information.", 
        "name": "mysqli::refresh", 
        "overview": "public bool mysqli::refresh ( int $options )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The options to refresh, using the MYSQLI_REFRESH_* constants as documented within the MySQLi constants documentation. ", 
                "name": "options"
            }
        ], 
        "path": "php/mysqli.refresh", 
        "type": "Database/MySQL"
    }, 
    "mysqli::release_savepoint": {
        "description": "Procedural style:", 
        "name": "mysqli::release_savepoint", 
        "overview": "public bool mysqli::release_savepoint ( string $name )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.release-savepoint", 
        "type": "Database/MySQL"
    }, 
    "mysqli::rollback": {
        "description": "Rollbacks the current transaction for the database.", 
        "name": "mysqli::rollback", 
        "overview": "bool mysqli::rollback ([ int $flags [, string $name ]] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "A bitmask of MYSQLI_TRANS_COR_* constants.", 
                "name": "flags"
            }, 
            {
                "descr": "If provided then ROLLBACK/*name*/ is executed.", 
                "name": "name"
            }
        ], 
        "path": "php/mysqli.rollback", 
        "type": "Database/MySQL"
    }, 
    "mysqli::rpl_query_type": {
        "description": "Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN depending on a query type. INSERT, UPDATE and similar are master queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.", 
        "name": "mysqli::rpl_query_type", 
        "overview": "int mysqli::rpl_query_type ( string $query )", 
        "parameters": [], 
        "path": "php/mysqli.rpl-query-type", 
        "type": "Database/MySQL"
    }, 
    "mysqli::savepoint": {
        "description": "Procedural style:", 
        "name": "mysqli::savepoint", 
        "overview": "public bool mysqli::savepoint ( string $name )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.savepoint", 
        "type": "Database/MySQL"
    }, 
    "mysqli::select_db": {
        "description": "Selects the default database to be used when performing queries against the database connection.", 
        "name": "mysqli::select_db", 
        "overview": "bool mysqli::select_db ( string $dbname )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The database name.", 
                "name": "dbname"
            }
        ], 
        "path": "php/mysqli.select-db", 
        "type": "Database/MySQL"
    }, 
    "mysqli::send_query": {
        "description": "Procedural style", 
        "name": "mysqli::send_query", 
        "overview": "bool mysqli::send_query ( string $query )", 
        "parameters": [], 
        "path": "php/mysqli.send-query", 
        "type": "Database/MySQL"
    }, 
    "mysqli::set_charset": {
        "description": "Sets the default character set to be used when sending data from and to the database server.", 
        "name": "mysqli::set_charset", 
        "overview": "bool mysqli::set_charset ( string $charset )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The charset to be set as default.", 
                "name": "charset"
            }
        ], 
        "path": "php/mysqli.set-charset", 
        "type": "Database/MySQL"
    }, 
    "mysqli::set_local_infile_default": {
        "description": "Deactivates a LOAD DATA INFILE LOCAL handler previously set with mysqli_set_local_infile_handler().", 
        "name": "mysqli::set_local_infile_default", 
        "overview": "void mysqli_set_local_infile_default ( mysqli $link )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.set-local-infile-default", 
        "type": "Database/MySQL"
    }, 
    "mysqli::set_local_infile_handler": {
        "description": "Set callback function for LOAD DATA LOCAL INFILE command", 
        "name": "mysqli::set_local_infile_handler", 
        "overview": "bool mysqli::set_local_infile_handler ( mysqli $link , callable $read_func )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "A callback function or object method taking the following parameters:   stream  A PHP stream associated with the SQL commands INFILE", 
                "name": "read_func"
            }, 
            {
                "descr": "A string buffer to store the rewritten input into", 
                "name": "&buffer"
            }, 
            {
                "descr": "The maximum number of characters to be stored in the buffer", 
                "name": "buflen"
            }, 
            {
                "descr": "If an error occurs you can store an error message in here", 
                "name": "&errormsg"
            }
        ], 
        "path": "php/mysqli.set-local-infile-handler", 
        "type": "Database/MySQL"
    }, 
    "mysqli::ssl_set": {
        "description": "Used for establishing secure connections using SSL. It must be called before mysqli_real_connect(). This function does nothing unless OpenSSL support is enabled.", 
        "name": "mysqli::ssl_set", 
        "overview": "bool mysqli::ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }, 
            {
                "descr": "The path name to the key file.", 
                "name": "key"
            }, 
            {
                "descr": "The path name to the certificate file.", 
                "name": "cert"
            }, 
            {
                "descr": "The path name to the certificate authority file.", 
                "name": "ca"
            }, 
            {
                "descr": "The pathname to a directory that contains trusted SSL CA certificates in PEM format.", 
                "name": "capath"
            }, 
            {
                "descr": "A list of allowable ciphers to use for SSL encryption.", 
                "name": "cipher"
            }
        ], 
        "path": "php/mysqli.ssl-set", 
        "type": "Database/MySQL"
    }, 
    "mysqli::stat": {
        "description": "mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.", 
        "name": "mysqli::stat", 
        "overview": "string mysqli::stat ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.stat", 
        "type": "Database/MySQL"
    }, 
    "mysqli::stmt_init": {
        "description": "Allocates and initializes a statement object suitable for mysqli_stmt_prepare().", 
        "name": "mysqli::stmt_init", 
        "overview": "mysqli_stmt mysqli::stmt_init ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.stmt-init", 
        "type": "Database/MySQL"
    }, 
    "mysqli::store_result": {
        "description": "Transfers the result set from the last query on the database connection represented by the link parameter to be used with the mysqli_data_seek() function.", 
        "name": "mysqli::store_result", 
        "overview": "mysqli_result mysqli::store_result ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()", 
                "name": "link"
            }
        ], 
        "path": "php/mysqli.store-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli::thread_safe": {
        "description": "Tells whether the client library is compiled as thread-safe.", 
        "name": "mysqli::thread_safe", 
        "overview": "bool mysqli_thread_safe ( void )", 
        "parameters": [], 
        "path": "php/mysqli.thread-safe", 
        "type": "Database/MySQL"
    }, 
    "mysqli::use_result": {
        "description": "Used to initiate the retrieval of a result set from the last query executed using the mysqli_real_query() function on the database connection.", 
        "name": "mysqli::use_result", 
        "overview": "mysqli_result mysqli::use_result ( void )", 
        "parameters": [], 
        "path": "php/mysqli.use-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli_disable_rpl_parse": {
        "description": "", 
        "name": "mysqli_disable_rpl_parse", 
        "overview": "bool mysqli_disable_rpl_parse ( mysqli $link )", 
        "parameters": [], 
        "path": "php/function.mysqli-disable-rpl-parse", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver": {
        "description": "", 
        "name": "mysqli_driver", 
        "overview": "void embedded_server_end ( void )", 
        "parameters": [], 
        "path": "php/class.mysqli-driver", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver::$report_mode": {
        "description": "A function helpful in improving queries during code development and testing. Depending on the flags, it reports errors from mysqli function calls or queries that don't use an index (or use a bad index).", 
        "name": "mysqli_driver::$report_mode", 
        "overview": "bool mysqli_report ( int $flags )", 
        "parameters": [
            {
                "descr": "Supported flags Name Description MYSQLI_REPORT_OFF Turns reporting off MYSQLI_REPORT_ERROR Report errors from mysqli function calls MYSQLI_REPORT_STRICT  Throw mysqli_sql_exception for errors instead of warnings  MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query MYSQLI_REPORT_ALL Set all options (report all)", 
                "name": "flags"
            }
        ], 
        "path": "php/mysqli-driver.report-mode", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver::embedded_server_end": {
        "description": "Procedural style", 
        "name": "mysqli_driver::embedded_server_end", 
        "overview": "void mysqli_driver::embedded_server_end ( void )", 
        "parameters": [], 
        "path": "php/mysqli-driver.embedded-server-end", 
        "type": "Database/MySQL"
    }, 
    "mysqli_driver::embedded_server_start": {
        "description": "Procedural style", 
        "name": "mysqli_driver::embedded_server_start", 
        "overview": "bool mysqli_driver::embedded_server_start ( bool $start , array $arguments , array $groups )", 
        "parameters": [], 
        "path": "php/mysqli-driver.embedded-server-start", 
        "type": "Database/MySQL"
    }, 
    "mysqli_enable_reads_from_master": {
        "description": "", 
        "name": "mysqli_enable_reads_from_master", 
        "overview": "bool mysqli_enable_reads_from_master ( mysqli $link )", 
        "parameters": [], 
        "path": "php/function.mysqli-enable-reads-from-master", 
        "type": "Database/MySQL"
    }, 
    "mysqli_enable_rpl_parse": {
        "description": "", 
        "name": "mysqli_enable_rpl_parse", 
        "overview": "bool mysqli_enable_rpl_parse ( mysqli $link )", 
        "parameters": [], 
        "path": "php/function.mysqli-enable-rpl-parse", 
        "type": "Database/MySQL"
    }, 
    "mysqli_get_cache_stats": {
        "description": "", 
        "name": "mysqli_get_cache_stats", 
        "overview": "array mysqli_get_cache_stats ( void )", 
        "parameters": [], 
        "path": "php/function.mysqli-get-cache-stats", 
        "type": "Database/MySQL"
    }, 
    "mysqli_get_client_stats": {
        "description": "Returns client per-process statistics. Available only with mysqlnd.", 
        "name": "mysqli_get_client_stats", 
        "overview": "array mysqli_get_client_stats ( void )", 
        "parameters": [], 
        "path": "php/mysqli.get-client-stats", 
        "type": "Database/MySQL"
    }, 
    "mysqli_get_client_version": {
        "description": "Returns client version number as an integer.", 
        "name": "mysqli_get_client_version", 
        "overview": "int mysqli_get_client_version ( mysqli $link )", 
        "parameters": [], 
        "path": "php/mysqli.get-client-version", 
        "type": "Database/MySQL"
    }, 
    "mysqli_master_query": {
        "description": "", 
        "name": "mysqli_master_query", 
        "overview": "bool mysqli_master_query ( mysqli $link , string $query )", 
        "parameters": [], 
        "path": "php/function.mysqli-master-query", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result": {
        "description": "", 
        "name": "mysqli_result", 
        "overview": "bool data_seek ( int $offset )", 
        "parameters": [], 
        "path": "php/class.mysqli-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$current_field": {
        "description": "Returns the position of the field cursor used for the last mysqli_fetch_field() call. This value can be used as an argument to mysqli_field_seek().", 
        "name": "mysqli_result::$current_field", 
        "overview": "int mysqli_field_tell ( mysqli_result $result )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.current-field", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$field_count": {
        "description": "Returns the number of fields from specified result set.", 
        "name": "mysqli_result::$field_count", 
        "overview": "int mysqli_num_fields ( mysqli_result $result )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.field-count", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$lengths": {
        "description": "The mysqli_fetch_lengths() function returns an array containing the lengths of every column of the current row within the result set.", 
        "name": "mysqli_result::$lengths", 
        "overview": "array mysqli_fetch_lengths ( mysqli_result $result )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.lengths", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::$num_rows": {
        "description": "Returns the number of rows in the result set.", 
        "name": "mysqli_result::$num_rows", 
        "overview": "int mysqli_num_rows ( mysqli_result $result )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.num-rows", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::data_seek": {
        "description": "The mysqli_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set.", 
        "name": "mysqli_result::data_seek", 
        "overview": "bool mysqli_result::data_seek ( int $offset )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The field offset. Must be between zero and the total number of rows minus one (0..mysqli_num_rows() - 1).", 
                "name": "offset"
            }
        ], 
        "path": "php/mysqli-result.data-seek", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_all": {
        "description": "mysqli_fetch_all() fetches all result rows and returns the result set as an associative array, a numeric array, or both.", 
        "name": "mysqli_result::fetch_all", 
        "overview": "mixed mysqli_result::fetch_all ([ int $resulttype = MYSQLI_NUM ] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "This optional parameter is a constant indicating what type of array should be produced from the current row data. ", 
                "name": "resulttype"
            }
        ], 
        "path": "php/mysqli-result.fetch-all", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_array": {
        "description": "Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter.", 
        "name": "mysqli_result::fetch_array", 
        "overview": "mixed mysqli_result::fetch_array ([ int $resulttype = MYSQLI_BOTH ] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "This optional parameter is a constant indicating what type of array should be produced from the current row data. ", 
                "name": "resulttype"
            }
        ], 
        "path": "php/mysqli-result.fetch-array", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_assoc": {
        "description": "Returns an associative array that corresponds to the fetched row or NULL if there are no more rows.", 
        "name": "mysqli_result::fetch_assoc", 
        "overview": "array mysqli_result::fetch_assoc ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-assoc", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_field": {
        "description": "Returns the definition of one column of a result set as an object. Call this function repeatedly to retrieve information about all columns in the result set.", 
        "name": "mysqli_result::fetch_field", 
        "overview": "object mysqli_result::fetch_field ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-field", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_field_direct": {
        "description": "Returns an object which contains field definition information from the specified result set.", 
        "name": "mysqli_result::fetch_field_direct", 
        "overview": "object mysqli_result::fetch_field_direct ( int $fieldnr )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The field number. This value must be in the range from 0 to number of fields - 1.", 
                "name": "fieldnr"
            }
        ], 
        "path": "php/mysqli-result.fetch-field-direct", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_fields": {
        "description": "This function serves an identical purpose to the mysqli_fetch_field() function with the single difference that, instead of returning one object at a time for each field, the columns are returned as an array of objects.", 
        "name": "mysqli_result::fetch_fields", 
        "overview": "array mysqli_result::fetch_fields ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-fields", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_object": {
        "description": "The mysqli_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set.", 
        "name": "mysqli_result::fetch_object", 
        "overview": "object mysqli_result::fetch_object ([ string $class_name [, array $params ]] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The name of the class to instantiate, set the properties of and return. ", 
                "name": "class_name"
            }, 
            {
                "descr": "An optional array of parameters to pass to the constructor for class_name objects.", 
                "name": "params"
            }
        ], 
        "path": "php/mysqli-result.fetch-object", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::fetch_row": {
        "description": "Fetches one row of data from the result set and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to this function will return the next row within the result set, or NULL if there are no more rows.", 
        "name": "mysqli_result::fetch_row", 
        "overview": "mixed mysqli_result::fetch_row ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.fetch-row", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::field_seek": {
        "description": "Sets the field cursor to the given offset. The next call to mysqli_fetch_field() will retrieve the field definition of the column associated with that offset.", 
        "name": "mysqli_result::field_seek", 
        "overview": "bool mysqli_result::field_seek ( int $fieldnr )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }, 
            {
                "descr": "The field number. This value must be in the range from 0 to number of fields - 1.", 
                "name": "fieldnr"
            }
        ], 
        "path": "php/mysqli-result.field-seek", 
        "type": "Database/MySQL"
    }, 
    "mysqli_result::free": {
        "description": "Frees the memory associated with the result.", 
        "name": "mysqli_result::free", 
        "overview": "void mysqli_result::free ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().", 
                "name": "result"
            }
        ], 
        "path": "php/mysqli-result.free", 
        "type": "Database/MySQL"
    }, 
    "mysqli_rpl_parse_enabled": {
        "description": "", 
        "name": "mysqli_rpl_parse_enabled", 
        "overview": "int mysqli_rpl_parse_enabled ( mysqli $link )", 
        "parameters": [], 
        "path": "php/function.mysqli-rpl-parse-enabled", 
        "type": "Database/MySQL"
    }, 
    "mysqli_rpl_probe": {
        "description": "", 
        "name": "mysqli_rpl_probe", 
        "overview": "bool mysqli_rpl_probe ( mysqli $link )", 
        "parameters": [], 
        "path": "php/function.mysqli-rpl-probe", 
        "type": "Database/MySQL"
    }, 
    "mysqli_slave_query": {
        "description": "", 
        "name": "mysqli_slave_query", 
        "overview": "bool mysqli_slave_query ( mysqli $link , string $query )", 
        "parameters": [], 
        "path": "php/function.mysqli-slave-query", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt": {
        "description": "", 
        "name": "mysqli_stmt", 
        "overview": "int attr_get ( int $attr )", 
        "parameters": [], 
        "path": "php/class.mysqli-stmt", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$affected_rows": {
        "description": "Returns the number of rows affected by INSERT, UPDATE, or DELETE query.", 
        "name": "mysqli_stmt::$affected_rows", 
        "overview": "int mysqli_stmt_affected_rows ( mysqli_stmt $stmt )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.affected-rows", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$errno": {
        "description": "Returns the error code for the most recently invoked statement function that can succeed or fail.", 
        "name": "mysqli_stmt::$errno", 
        "overview": "int mysqli_stmt_errno ( mysqli_stmt $stmt )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.errno", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$error": {
        "description": "Returns a containing the error message for the most recently invoked statement function that can succeed or fail.", 
        "name": "mysqli_stmt::$error", 
        "overview": "string mysqli_stmt_error ( mysqli_stmt $stmt )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.error", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$error_list": {
        "description": "Returns an array of errors for the most recently invoked statement function that can succeed or fail.", 
        "name": "mysqli_stmt::$error_list", 
        "overview": "array mysqli_stmt_error_list ( mysqli_stmt $stmt )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.error-list", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$field_count": {
        "description": "", 
        "name": "mysqli_stmt::$field_count", 
        "overview": "int mysqli_stmt_field_count ( mysqli_stmt $stmt )", 
        "parameters": [], 
        "path": "php/mysqli-stmt.field-count", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$insert_id": {
        "description": "", 
        "name": "mysqli_stmt::$insert_id", 
        "overview": "mixed mysqli_stmt_insert_id ( mysqli_stmt $stmt )", 
        "parameters": [], 
        "path": "php/mysqli-stmt.insert-id", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$num_rows": {
        "description": "Returns the number of rows in the result set. The use of mysqli_stmt_num_rows() depends on whether or not you used mysqli_stmt_store_result() to buffer the entire result set in the statement handle.", 
        "name": "mysqli_stmt::$num_rows", 
        "overview": "int mysqli_stmt_num_rows ( mysqli_stmt $stmt )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.num-rows", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$param_count": {
        "description": "Returns the number of parameter markers present in the prepared statement.", 
        "name": "mysqli_stmt::$param_count", 
        "overview": "int mysqli_stmt_param_count ( mysqli_stmt $stmt )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.param-count", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::$sqlstate": {
        "description": "Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see \u00bb http://dev.mysql.com/doc/mysql/en/error-handling.html.", 
        "name": "mysqli_stmt::$sqlstate", 
        "overview": "string mysqli_stmt_sqlstate ( mysqli_stmt $stmt )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.sqlstate", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::attr_get": {
        "description": "Gets the current value of a statement attribute.", 
        "name": "mysqli_stmt::attr_get", 
        "overview": "int mysqli_stmt::attr_get ( int $attr )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The attribute that you want to get.", 
                "name": "attr"
            }
        ], 
        "path": "php/mysqli-stmt.attr-get", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::attr_set": {
        "description": "Used to modify the behavior of a prepared statement. This function may be called multiple times to set several attributes.", 
        "name": "mysqli_stmt::attr_set", 
        "overview": "bool mysqli_stmt::attr_set ( int $attr , int $mode )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The attribute that you want to set. ", 
                "name": "attr"
            }, 
            {
                "descr": "The value to assign to the attribute.", 
                "name": "mode"
            }
        ], 
        "path": "php/mysqli-stmt.attr-set", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::bind_param": {
        "description": "Bind variables for the parameter markers in the SQL statement that was passed to mysqli_prepare().", 
        "name": "mysqli_stmt::bind_param", 
        "overview": "bool mysqli_stmt::bind_param ( string $types , mixed &$var1 [, mixed &$... ] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "A string that contains one or more characters which specify the types for the corresponding bind variables: Type specification chars Character Description i corresponding variable has type integer d corresponding variable has type double s corresponding variable has type string b corresponding variable is a blob and will be sent in packets", 
                "name": "types"
            }, 
            {
                "descr": "The number of variables and length of string types must match the parameters in the statement.", 
                "name": "var1"
            }
        ], 
        "path": "php/mysqli-stmt.bind-param", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::bind_result": {
        "description": "Binds columns in the result set to variables.", 
        "name": "mysqli_stmt::bind_result", 
        "overview": "bool mysqli_stmt::bind_result ( mixed &$var1 [, mixed &$... ] )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The variable to be bound.", 
                "name": "var1"
            }
        ], 
        "path": "php/mysqli-stmt.bind-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::close": {
        "description": "Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.", 
        "name": "mysqli_stmt::close", 
        "overview": "bool mysqli_stmt::close ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.close", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::data_seek": {
        "description": "Seeks to an arbitrary result pointer in the statement result set.", 
        "name": "mysqli_stmt::data_seek", 
        "overview": "void mysqli_stmt::data_seek ( int $offset )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "Must be between zero and the total number of rows minus one (0.. ", 
                "name": "offset"
            }
        ], 
        "path": "php/mysqli-stmt.data-seek", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::execute": {
        "description": "Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropriate data.", 
        "name": "mysqli_stmt::execute", 
        "overview": "bool mysqli_stmt::execute ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.execute", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::fetch": {
        "description": "Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result().", 
        "name": "mysqli_stmt::fetch", 
        "overview": "bool mysqli_stmt::fetch ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.fetch", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::free_result": {
        "description": "Frees the result memory associated with the statement, which was allocated by mysqli_stmt_store_result().", 
        "name": "mysqli_stmt::free_result", 
        "overview": "void mysqli_stmt::free_result ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.free-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::get_result": {
        "description": "Call to return a result set from a prepared statement query.", 
        "name": "mysqli_stmt::get_result", 
        "overview": "mysqli_result mysqli_stmt::get_result ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.get-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::get_warnings": {
        "description": "Procedural style", 
        "name": "mysqli_stmt::get_warnings", 
        "overview": "object mysqli_stmt::get_warnings ( mysqli_stmt $stmt )", 
        "parameters": [], 
        "path": "php/mysqli-stmt.get-warnings", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::more_results": {
        "description": "Checks if there are more query results from a multiple query.", 
        "name": "mysqli_stmt::more_results", 
        "overview": "public bool mysqli_stmt::more_results ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.more-results", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::next_result": {
        "description": "Reads the next result from a multiple query.", 
        "name": "mysqli_stmt::next_result", 
        "overview": "public bool mysqli_stmt::next_result ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.next-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::prepare": {
        "description": "Prepares the SQL query pointed to by the null-terminated string query.", 
        "name": "mysqli_stmt::prepare", 
        "overview": "mixed mysqli_stmt::prepare ( string $query )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "The query, as a string. It must consist of a single SQL statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/mysqli-stmt.prepare", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::reset": {
        "description": "Resets a prepared statement on client and server to state after prepare.", 
        "name": "mysqli_stmt::reset", 
        "overview": "bool mysqli_stmt::reset ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.reset", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::result_metadata": {
        "description": "If a statement passed to mysqli_prepare() is one that produces a result set, mysqli_stmt_result_metadata() returns the result object that can be used to process the meta information such as total number of fields and individual field information.", 
        "name": "mysqli_stmt::result_metadata", 
        "overview": "mysqli_result mysqli_stmt::result_metadata ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.result-metadata", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::send_long_data": {
        "description": "Allows to send parameter data to the server in pieces (or chunks), e.g. if the size of a blob exceeds the size of max_allowed_packet. This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes.", 
        "name": "mysqli_stmt::send_long_data", 
        "overview": "bool mysqli_stmt::send_long_data ( int $param_nr , string $data )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }, 
            {
                "descr": "Indicates which parameter to associate the data with. ", 
                "name": "param_nr"
            }, 
            {
                "descr": "A string containing data to be sent.", 
                "name": "data"
            }
        ], 
        "path": "php/mysqli-stmt.send-long-data", 
        "type": "Database/MySQL"
    }, 
    "mysqli_stmt::store_result": {
        "description": "You must call mysqli_stmt_store_result() for every query that successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN), and only if you want to buffer the complete result set by the client, so that the subsequent mysqli_stmt_fetch() call returns buffered data.", 
        "name": "mysqli_stmt::store_result", 
        "overview": "bool mysqli_stmt::store_result ( void )", 
        "parameters": [
            {
                "descr": "Procedural style only: A statement identifier returned by mysqli_stmt_init().", 
                "name": "stmt"
            }
        ], 
        "path": "php/mysqli-stmt.store-result", 
        "type": "Database/MySQL"
    }, 
    "mysqli_warning": {
        "description": "", 
        "name": "mysqli_warning", 
        "overview": "public __construct ( void )", 
        "parameters": [], 
        "path": "php/class.mysqli-warning", 
        "type": "Database/MySQL"
    }, 
    "mysqli_warning::__construct": {
        "description": "", 
        "name": "mysqli_warning::__construct", 
        "overview": "public mysqli_warning::__construct ( void )", 
        "parameters": [], 
        "path": "php/mysqli-warning.construct", 
        "type": "Database/MySQL"
    }, 
    "mysqli_warning::next": {
        "description": "", 
        "name": "mysqli_warning::next", 
        "overview": "public void mysqli_warning::next ( void )", 
        "parameters": [], 
        "path": "php/mysqli-warning.next", 
        "type": "Database/MySQL"
    }, 
    "natcasesort": {
        "description": "natcasesort() is a case insensitive version of natsort().", 
        "name": "natcasesort", 
        "overview": "bool natcasesort ( array &$array )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.natcasesort", 
        "type": "Array"
    }, 
    "natsort": {
        "description": "This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a \"natural ordering\". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen in the example below.", 
        "name": "natsort", 
        "overview": "bool natsort ( array &$array )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.natsort", 
        "type": "Array"
    }, 
    "next": {
        "description": "next() behaves like current(), with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.", 
        "name": "next", 
        "overview": "mixed next ( array &$array )", 
        "parameters": [
            {
                "descr": "The array being affected.", 
                "name": "array"
            }
        ], 
        "path": "php/function.next", 
        "type": "Array"
    }, 
    "ngettext": {
        "description": "The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.", 
        "name": "ngettext", 
        "overview": "string ngettext ( string $msgid1 , string $msgid2 , int $n )", 
        "parameters": [], 
        "path": "php/function.ngettext", 
        "type": "Encoding"
    }, 
    "nl2br": {
        "description": "Returns string with '<br />' or '<br>' inserted before all newlines (\\r\\n, \\n\\r, \\n and \\r).", 
        "name": "nl2br", 
        "overview": "string nl2br ( string $string [, bool $is_xhtml = true ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "Whether to use XHTML compatible line breaks or not.", 
                "name": "is_xhtml"
            }
        ], 
        "path": "php/function.nl2br", 
        "type": "String"
    }, 
    "nl_langinfo": {
        "description": "nl_langinfo() is used to access individual elements of the locale categories. Unlike localeconv(), which returns all of the elements, nl_langinfo() allows you to select any specific element.", 
        "name": "nl_langinfo", 
        "overview": "string nl_langinfo ( int $item )", 
        "parameters": [
            {
                "descr": "item may be an integer value of the element or the constant name of the element. ", 
                "name": "item"
            }
        ], 
        "path": "php/function.nl-langinfo", 
        "type": "String"
    }, 
    "number_format": {
        "description": "This function accepts either one, two, or four parameters (not three):", 
        "name": "number_format", 
        "overview": "string number_format ( float $number [, int $decimals = 0 ] )", 
        "parameters": [
            {
                "descr": "The number being formatted.", 
                "name": "number"
            }, 
            {
                "descr": "Sets the number of decimal points.", 
                "name": "decimals"
            }, 
            {
                "descr": "Sets the separator for the decimal point.", 
                "name": "dec_point"
            }, 
            {
                "descr": "Sets the thousands separator.", 
                "name": "thousands_sep"
            }
        ], 
        "path": "php/function.number-format", 
        "type": "String"
    }, 
    "oauth_get_sbs": {
        "description": "Generates a Signature Base String according to pecl/oauth.", 
        "name": "oauth_get_sbs", 
        "overview": "string oauth_get_sbs ( string $http_method , string $uri [, array $request_parameters ] )", 
        "parameters": [
            {
                "descr": "The HTTP method.", 
                "name": "http_method"
            }, 
            {
                "descr": "URI to encode.", 
                "name": "uri"
            }, 
            {
                "descr": "Array of request parameters.", 
                "name": "request_parameters"
            }
        ], 
        "path": "php/function.oauth-get-sbs", 
        "type": "OAuth"
    }, 
    "oauth_urlencode": {
        "description": "Encodes a URI to \u00bb RFC 3986.", 
        "name": "oauth_urlencode", 
        "overview": "string oauth_urlencode ( string $uri )", 
        "parameters": [
            {
                "descr": "URI to encode.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.oauth-urlencode", 
        "type": "OAuth"
    }, 
    "ob_clean": {
        "description": "This function discards the contents of the output buffer.", 
        "name": "ob_clean", 
        "overview": "void ob_clean ( void )", 
        "parameters": [], 
        "path": "php/function.ob-clean", 
        "type": "Networking"
    }, 
    "ob_deflatehandler": {
        "description": "For use with ob_start().", 
        "name": "ob_deflatehandler", 
        "overview": "string ob_deflatehandler ( string $data , int $mode )", 
        "parameters": [], 
        "path": "php/function.ob-deflatehandler", 
        "type": "HTTP"
    }, 
    "ob_end_clean": {
        "description": "This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_clean() as the buffer contents are discarded when ob_end_clean() is called.", 
        "name": "ob_end_clean", 
        "overview": "bool ob_end_clean ( void )", 
        "parameters": [], 
        "path": "php/function.ob-end-clean", 
        "type": "Networking"
    }, 
    "ob_end_flush": {
        "description": "This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called.", 
        "name": "ob_end_flush", 
        "overview": "bool ob_end_flush ( void )", 
        "parameters": [], 
        "path": "php/function.ob-end-flush", 
        "type": "Networking"
    }, 
    "ob_etaghandler": {
        "description": "For use with ob_start().", 
        "name": "ob_etaghandler", 
        "overview": "string ob_etaghandler ( string $data , int $mode )", 
        "parameters": [], 
        "path": "php/function.ob-etaghandler", 
        "type": "HTTP"
    }, 
    "ob_flush": {
        "description": "This function will send the contents of the output buffer (if any). If you want to further process the buffer's contents you have to call ob_get_contents() before ob_flush() as the buffer contents are discarded after ob_flush() is called.", 
        "name": "ob_flush", 
        "overview": "void ob_flush ( void )", 
        "parameters": [], 
        "path": "php/function.ob-flush", 
        "type": "Networking"
    }, 
    "ob_get_clean": {
        "description": "Gets the current buffer contents and delete current output buffer.", 
        "name": "ob_get_clean", 
        "overview": "string ob_get_clean ( void )", 
        "parameters": [], 
        "path": "php/function.ob-get-clean", 
        "type": "Networking"
    }, 
    "ob_get_contents": {
        "description": "Gets the contents of the output buffer without clearing it.", 
        "name": "ob_get_contents", 
        "overview": "string ob_get_contents ( void )", 
        "parameters": [], 
        "path": "php/function.ob-get-contents", 
        "type": "Networking"
    }, 
    "ob_get_flush": {
        "description": "ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering.", 
        "name": "ob_get_flush", 
        "overview": "string ob_get_flush ( void )", 
        "parameters": [], 
        "path": "php/function.ob-get-flush", 
        "type": "Networking"
    }, 
    "ob_get_length": {
        "description": "This will return the length of the contents in the output buffer.", 
        "name": "ob_get_length", 
        "overview": "int ob_get_length ( void )", 
        "parameters": [], 
        "path": "php/function.ob-get-length", 
        "type": "Networking"
    }, 
    "ob_get_level": {
        "description": "Returns the nesting level of the output buffering mechanism.", 
        "name": "ob_get_level", 
        "overview": "int ob_get_level ( void )", 
        "parameters": [], 
        "path": "php/function.ob-get-level", 
        "type": "Networking"
    }, 
    "ob_get_status": {
        "description": "ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE.", 
        "name": "ob_get_status", 
        "overview": "array ob_get_status ([ bool $full_status  = FALSE ] )", 
        "parameters": [
            {
                "descr": "TRUE to return all active output buffer levels. ", 
                "name": "full_status"
            }
        ], 
        "path": "php/function.ob-get-status", 
        "type": "Networking"
    }, 
    "ob_gzhandler": {
        "description": "ob_gzhandler() is intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before ob_gzhandler() actually sends compressed data, it determines what type of content encoding the browser will accept (\"gzip\", \"deflate\" or none at all) and will return its output accordingly. All browsers are supported since it's up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn't support compressed pages this function returns FALSE.", 
        "name": "ob_gzhandler", 
        "overview": "string ob_gzhandler ( string $buffer , int $mode )", 
        "parameters": [], 
        "path": "php/function.ob-gzhandler", 
        "type": "Networking"
    }, 
    "ob_iconv_handler": {
        "description": "Converts the string encoded in internal_encoding to output_encoding.", 
        "name": "ob_iconv_handler", 
        "overview": "string ob_iconv_handler ( string $contents , int $status )", 
        "parameters": [], 
        "path": "php/function.ob-iconv-handler", 
        "type": "Encoding"
    }, 
    "ob_implicit_flush": {
        "description": "ob_implicit_flush() will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed.", 
        "name": "ob_implicit_flush", 
        "overview": "void ob_implicit_flush ([ int $flag = true ] )", 
        "parameters": [
            {
                "descr": "TRUE to turn implicit flushing on, FALSE otherwise.", 
                "name": "flag"
            }
        ], 
        "path": "php/function.ob-implicit-flush", 
        "type": "Networking"
    }, 
    "ob_inflatehandler": {
        "description": "For use with ob_start().", 
        "name": "ob_inflatehandler", 
        "overview": "string ob_inflatehandler ( string $data , int $mode )", 
        "parameters": [], 
        "path": "php/function.ob-inflatehandler", 
        "type": "HTTP"
    }, 
    "ob_list_handlers": {
        "description": "Lists all output handlers in use.", 
        "name": "ob_list_handlers", 
        "overview": "array ob_list_handlers ( void )", 
        "parameters": [], 
        "path": "php/function.ob-list-handlers", 
        "type": "Networking"
    }, 
    "ob_start": {
        "description": "This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.", 
        "name": "ob_start", 
        "overview": "bool ob_start ([ callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ]]] )", 
        "parameters": [
            {
                "descr": "An optional output_callback function may be specified. ", 
                "name": "output_callback"
            }, 
            {
                "descr": "Bitmask of PHP_OUTPUT_HANDLER_* constants.", 
                "name": "phase"
            }, 
            {
                "descr": "If the optional parameter chunk_size is passed, the buffer will be flushed after any output call which causes the buffer's length to equal or exceed chunk_size. ", 
                "name": "chunk_size"
            }, 
            {
                "descr": "The flags parameter is a bitmask that controls the operations that can be performed on the output buffer. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.ob-start", 
        "type": "Networking"
    }, 
    "ob_tidyhandler": {
        "description": "Callback function for ob_start() to repair the buffer.", 
        "name": "ob_tidyhandler", 
        "overview": "string ob_tidyhandler ( string $input [, int $mode ] )", 
        "parameters": [
            {
                "descr": "The buffer.", 
                "name": "input"
            }, 
            {
                "descr": "The buffer mode.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.ob-tidyhandler", 
        "type": "HTML"
    }, 
    "octdec": {
        "description": "Returns the decimal equivalent of the octal number represented by the octal_string argument.", 
        "name": "octdec", 
        "overview": "number octdec ( string $octal_string )", 
        "parameters": [
            {
                "descr": "The octal string to convert", 
                "name": "octal_string"
            }
        ], 
        "path": "php/function.octdec", 
        "type": "Mathematics"
    }, 
    "odbc_autocommit": {
        "description": "Toggles autocommit behaviour.", 
        "name": "odbc_autocommit", 
        "overview": "mixed odbc_autocommit ( resource $connection_id [, bool $OnOff = false ] )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "If OnOff is TRUE, auto-commit is enabled, if it is FALSE auto-commit is disabled.", 
                "name": "OnOff"
            }
        ], 
        "path": "php/function.odbc-autocommit", 
        "type": "Database"
    }, 
    "odbc_binmode": {
        "description": "Enables handling of binary column data. ODBC SQL types affected are BINARY, VARBINARY, and LONGVARBINARY.", 
        "name": "odbc_binmode", 
        "overview": "bool odbc_binmode ( resource $result_id , int $mode )", 
        "parameters": [
            {
                "descr": "The result identifier.   If result_id is 0, the settings apply as default for new results. ", 
                "name": "result_id"
            }, 
            {
                "descr": "Possible values for mode are:   ODBC_BINMODE_PASSTHRU: Passthru BINARY data     ODBC_BINMODE_RETURN: Return as is     ODBC_BINMODE_CONVERT: Convert to char and return", 
                "name": "mode"
            }
        ], 
        "path": "php/function.odbc-binmode", 
        "type": "Database"
    }, 
    "odbc_close": {
        "description": "Closes down the connection to the database server.", 
        "name": "odbc_close", 
        "overview": "void odbc_close ( resource $connection_id )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-close", 
        "type": "Database"
    }, 
    "odbc_close_all": {
        "description": "odbc_close_all() will close down all connections to database server(s).", 
        "name": "odbc_close_all", 
        "overview": "void odbc_close_all ( void )", 
        "parameters": [], 
        "path": "php/function.odbc-close-all", 
        "type": "Database"
    }, 
    "odbc_columnprivileges": {
        "description": "Lists columns and associated privileges for the given table.", 
        "name": "odbc_columnprivileges", 
        "overview": "resource odbc_columnprivileges ( resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "owner"
            }, 
            {
                "descr": "The table name.", 
                "name": "table_name"
            }, 
            {
                "descr": "The column_name argument accepts search patterns ('%' to match zero or more characters and '_' to match a single character).", 
                "name": "column_name"
            }
        ], 
        "path": "php/function.odbc-columnprivileges", 
        "type": "Database"
    }, 
    "odbc_columns": {
        "description": "Lists all columns in the requested range.", 
        "name": "odbc_columns", 
        "overview": "resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "schema"
            }, 
            {
                "descr": "The table name.", 
                "name": "table_name"
            }, 
            {
                "descr": "The column name.", 
                "name": "column_name"
            }
        ], 
        "path": "php/function.odbc-columns", 
        "type": "Database"
    }, 
    "odbc_commit": {
        "description": "Commits all pending transactions on the connection.", 
        "name": "odbc_commit", 
        "overview": "bool odbc_commit ( resource $connection_id )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-commit", 
        "type": "Database"
    }, 
    "odbc_connect": {
        "description": "", 
        "name": "odbc_connect", 
        "overview": "resource odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] )", 
        "parameters": [
            {
                "descr": "The database source name for the connection. ", 
                "name": "dsn"
            }, 
            {
                "descr": "The username.", 
                "name": "user"
            }, 
            {
                "descr": "The password.", 
                "name": "password"
            }, 
            {
                "descr": "This sets the type of cursor to be used for this connection. ", 
                "name": "cursor_type"
            }
        ], 
        "path": "php/function.odbc-connect", 
        "type": "Database"
    }, 
    "odbc_cursor": {
        "description": "Gets the cursorname for the given result_id.", 
        "name": "odbc_cursor", 
        "overview": "string odbc_cursor ( resource $result_id )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-cursor", 
        "type": "Database"
    }, 
    "odbc_data_source": {
        "description": "This function will return the list of available DSN (after calling it several times).", 
        "name": "odbc_data_source", 
        "overview": "array odbc_data_source ( resource $connection_id , int $fetch_type )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The fetch_type can be one of two constant types: SQL_FETCH_FIRST, SQL_FETCH_NEXT. ", 
                "name": "fetch_type"
            }
        ], 
        "path": "php/function.odbc-data-source", 
        "type": "Database"
    }, 
    "odbc_error": {
        "description": "", 
        "name": "odbc_error", 
        "overview": "string odbc_error ([ resource $connection_id ] )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-error", 
        "type": "Database"
    }, 
    "odbc_errormsg": {
        "description": "", 
        "name": "odbc_errormsg", 
        "overview": "string odbc_errormsg ([ resource $connection_id ] )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-errormsg", 
        "type": "Database"
    }, 
    "odbc_exec": {
        "description": "Sends an SQL statement to the database server.", 
        "name": "odbc_exec", 
        "overview": "resource odbc_exec ( resource $connection_id , string $query_string [, int $flags ] )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The SQL statement.", 
                "name": "query_string"
            }, 
            {
                "descr": "This parameter is currently not used.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.odbc-exec", 
        "type": "Database"
    }, 
    "odbc_execute": {
        "description": "Executes a statement prepared with odbc_prepare().", 
        "name": "odbc_execute", 
        "overview": "bool odbc_execute ( resource $result_id [, array $parameters_array ] )", 
        "parameters": [
            {
                "descr": "The result id resource, from odbc_prepare().", 
                "name": "result_id"
            }, 
            {
                "descr": "Parameters in parameter_array will be substituted for placeholders in the prepared statement in order. ", 
                "name": "parameters_array"
            }
        ], 
        "path": "php/function.odbc-execute", 
        "type": "Database"
    }, 
    "odbc_fetch_array": {
        "description": "Fetch an associative array from an ODBC query. See the changelog below for when this function is available.", 
        "name": "odbc_fetch_array", 
        "overview": "array odbc_fetch_array ( resource $result [, int $rownumber ] )", 
        "parameters": [
            {
                "descr": "The result resource from odbc_exec().", 
                "name": "result"
            }, 
            {
                "descr": "Optionally choose which row number to retrieve.", 
                "name": "rownumber"
            }
        ], 
        "path": "php/function.odbc-fetch-array", 
        "type": "Database"
    }, 
    "odbc_fetch_into": {
        "description": "Fetch one result row into array.", 
        "name": "odbc_fetch_into", 
        "overview": "int odbc_fetch_into ( resource $result_id , array &$result_array [, int $rownumber ] )", 
        "parameters": [
            {
                "descr": "The result resource.", 
                "name": "result_id"
            }, 
            {
                "descr": "The result array that can be of any type since it will be converted to type array. ", 
                "name": "result_array"
            }, 
            {
                "descr": "The row number.", 
                "name": "rownumber"
            }
        ], 
        "path": "php/function.odbc-fetch-into", 
        "type": "Database"
    }, 
    "odbc_fetch_object": {
        "description": "Fetch an object from an ODBC query. See the changelog below for when this function is available.", 
        "name": "odbc_fetch_object", 
        "overview": "object odbc_fetch_object ( resource $result [, int $rownumber ] )", 
        "parameters": [
            {
                "descr": "The result resource from odbc_exec().", 
                "name": "result"
            }, 
            {
                "descr": "Optionally choose which row number to retrieve.", 
                "name": "rownumber"
            }
        ], 
        "path": "php/function.odbc-fetch-object", 
        "type": "Database"
    }, 
    "odbc_fetch_row": {
        "description": "Fetches a row of the data that was returned by odbc_do() or odbc_exec(). After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result().", 
        "name": "odbc_fetch_row", 
        "overview": "bool odbc_fetch_row ( resource $result_id [, int $row_number ] )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "If row_number is not specified, odbc_fetch_row() will try to fetch the next row in the result set. ", 
                "name": "row_number"
            }
        ], 
        "path": "php/function.odbc-fetch-row", 
        "type": "Database"
    }, 
    "odbc_field_len": {
        "description": "Gets the length of the field referenced by number in the given result identifier.", 
        "name": "odbc_field_len", 
        "overview": "int odbc_field_len ( resource $result_id , int $field_number )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-len", 
        "type": "Database"
    }, 
    "odbc_field_name": {
        "description": "Gets the name of the field occupying the given column number in the given result identifier.", 
        "name": "odbc_field_name", 
        "overview": "string odbc_field_name ( resource $result_id , int $field_number )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-name", 
        "type": "Database"
    }, 
    "odbc_field_num": {
        "description": "Gets the number of the column slot that corresponds to the named field in the given result identifier.", 
        "name": "odbc_field_num", 
        "overview": "int odbc_field_num ( resource $result_id , string $field_name )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field name.", 
                "name": "field_name"
            }
        ], 
        "path": "php/function.odbc-field-num", 
        "type": "Database"
    }, 
    "odbc_field_scale": {
        "description": "Gets the scale of the field referenced by number in the given result identifier.", 
        "name": "odbc_field_scale", 
        "overview": "int odbc_field_scale ( resource $result_id , int $field_number )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-scale", 
        "type": "Database"
    }, 
    "odbc_field_type": {
        "description": "Gets the SQL type of the field referenced by number in the given result identifier.", 
        "name": "odbc_field_type", 
        "overview": "string odbc_field_type ( resource $result_id , int $field_number )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field number. Field numbering starts at 1.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.odbc-field-type", 
        "type": "Database"
    }, 
    "odbc_foreignkeys": {
        "description": "Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table", 
        "name": "odbc_foreignkeys", 
        "overview": "resource odbc_foreignkeys ( resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The primary key qualifier.", 
                "name": "pk_qualifier"
            }, 
            {
                "descr": "The primary key owner.", 
                "name": "pk_owner"
            }, 
            {
                "descr": "The primary key table.", 
                "name": "pk_table"
            }, 
            {
                "descr": "The foreign key qualifier.", 
                "name": "fk_qualifier"
            }, 
            {
                "descr": "The foreign key owner.", 
                "name": "fk_owner"
            }, 
            {
                "descr": "The foreign key table.", 
                "name": "fk_table"
            }
        ], 
        "path": "php/function.odbc-foreignkeys", 
        "type": "Database"
    }, 
    "odbc_free_result": {
        "description": "Free resources associated with a result.", 
        "name": "odbc_free_result", 
        "overview": "bool odbc_free_result ( resource $result_id )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-free-result", 
        "type": "Database"
    }, 
    "odbc_gettypeinfo": {
        "description": "Retrieves information about data types supported by the data source.", 
        "name": "odbc_gettypeinfo", 
        "overview": "resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The data type, which can be used to restrict the information to a single data type.", 
                "name": "data_type"
            }
        ], 
        "path": "php/function.odbc-gettypeinfo", 
        "type": "Database"
    }, 
    "odbc_longreadlen": {
        "description": "Enables handling of LONG and LONGVARBINARY columns.", 
        "name": "odbc_longreadlen", 
        "overview": "bool odbc_longreadlen ( resource $result_id , int $length )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "The number of bytes returned to PHP is controlled by the parameter length. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.odbc-longreadlen", 
        "type": "Database"
    }, 
    "odbc_next_result": {
        "description": "Checks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc.", 
        "name": "odbc_next_result", 
        "overview": "bool odbc_next_result ( resource $result_id )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-next-result", 
        "type": "Database"
    }, 
    "odbc_num_fields": {
        "description": "Gets the number of fields (columns) in an ODBC result.", 
        "name": "odbc_num_fields", 
        "overview": "int odbc_num_fields ( resource $result_id )", 
        "parameters": [
            {
                "descr": "The result identifier returned by odbc_exec().", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-num-fields", 
        "type": "Database"
    }, 
    "odbc_num_rows": {
        "description": "Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available.", 
        "name": "odbc_num_rows", 
        "overview": "int odbc_num_rows ( resource $result_id )", 
        "parameters": [
            {
                "descr": "The result identifier returned by odbc_exec().", 
                "name": "result_id"
            }
        ], 
        "path": "php/function.odbc-num-rows", 
        "type": "Database"
    }, 
    "odbc_pconnect": {
        "description": "Opens a persistent database connection.", 
        "name": "odbc_pconnect", 
        "overview": "resource odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] )", 
        "parameters": [], 
        "path": "php/function.odbc-pconnect", 
        "type": "Database"
    }, 
    "odbc_prepare": {
        "description": "Prepares a statement for execution. The result identifier can be used later to execute the statement with odbc_execute().", 
        "name": "odbc_prepare", 
        "overview": "resource odbc_prepare ( resource $connection_id , string $query_string )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The query string statement being prepared.", 
                "name": "query_string"
            }
        ], 
        "path": "php/function.odbc-prepare", 
        "type": "Database"
    }, 
    "odbc_primarykeys": {
        "description": "Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table.", 
        "name": "odbc_primarykeys", 
        "overview": "resource odbc_primarykeys ( resource $connection_id , string $qualifier , string $owner , string $table )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-primarykeys", 
        "type": "Database"
    }, 
    "odbc_procedurecolumns": {
        "description": "Retrieve information about parameters to procedures.", 
        "name": "odbc_procedurecolumns", 
        "overview": "resource odbc_procedurecolumns ( resource $connection_id )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "owner"
            }, 
            {
                "descr": "The proc. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "proc"
            }, 
            {
                "descr": "The column. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "column"
            }
        ], 
        "path": "php/function.odbc-procedurecolumns", 
        "type": "Database"
    }, 
    "odbc_procedures": {
        "description": "Lists all procedures in the requested range.", 
        "name": "odbc_procedures", 
        "overview": "resource odbc_procedures ( resource $connection_id )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "owner"
            }, 
            {
                "descr": "The name. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.", 
                "name": "name"
            }
        ], 
        "path": "php/function.odbc-procedures", 
        "type": "Database"
    }, 
    "odbc_result": {
        "description": "Get result data", 
        "name": "odbc_result", 
        "overview": "mixed odbc_result ( resource $result_id , mixed $field )", 
        "parameters": [
            {
                "descr": "The ODBC resource.", 
                "name": "result_id"
            }, 
            {
                "descr": "The field name being retrieved. ", 
                "name": "field"
            }
        ], 
        "path": "php/function.odbc-result", 
        "type": "Database"
    }, 
    "odbc_result_all": {
        "description": "Prints all rows from a result identifier produced by odbc_exec(). The result is printed in HTML table format.", 
        "name": "odbc_result_all", 
        "overview": "int odbc_result_all ( resource $result_id [, string $format ] )", 
        "parameters": [
            {
                "descr": "The result identifier.", 
                "name": "result_id"
            }, 
            {
                "descr": "Additional overall table formatting.", 
                "name": "format"
            }
        ], 
        "path": "php/function.odbc-result-all", 
        "type": "Database"
    }, 
    "odbc_rollback": {
        "description": "Rolls back all pending statements on the connection.", 
        "name": "odbc_rollback", 
        "overview": "bool odbc_rollback ( resource $connection_id )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }
        ], 
        "path": "php/function.odbc-rollback", 
        "type": "Database"
    }, 
    "odbc_setoption": {
        "description": "This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options.", 
        "name": "odbc_setoption", 
        "overview": "bool odbc_setoption ( resource $id , int $function , int $option , int $param )", 
        "parameters": [
            {
                "descr": "Is a connection id or result id on which to change the settings. ", 
                "name": "id"
            }, 
            {
                "descr": "Is the ODBC function to use. The value should be 1 for SQLSetConnectOption() and 2 for SQLSetStmtOption().", 
                "name": "function"
            }, 
            {
                "descr": "The option to set.", 
                "name": "option"
            }, 
            {
                "descr": "The value for the given option.", 
                "name": "param"
            }
        ], 
        "path": "php/function.odbc-setoption", 
        "type": "Database"
    }, 
    "odbc_specialcolumns": {
        "description": "Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction.", 
        "name": "odbc_specialcolumns", 
        "overview": "resource odbc_specialcolumns ( resource $connection_id , int $type , string $qualifier , string $owner , string $table , int $scope , int $nullable )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "When the type argument is SQL_BEST_ROWID, odbc_specialcolumns() returns the column or columns that uniquely identify each row in the table. ", 
                "name": "type"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "owner"
            }, 
            {
                "descr": "The table.", 
                "name": "table"
            }, 
            {
                "descr": "The scope, which orders the result set.", 
                "name": "scope"
            }, 
            {
                "descr": "The nullable option.", 
                "name": "nullable"
            }
        ], 
        "path": "php/function.odbc-specialcolumns", 
        "type": "Database"
    }, 
    "odbc_statistics": {
        "description": "Get statistics about a table and its indexes.", 
        "name": "odbc_statistics", 
        "overview": "resource odbc_statistics ( resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner.", 
                "name": "owner"
            }, 
            {
                "descr": "The table name.", 
                "name": "table_name"
            }, 
            {
                "descr": "The unique attribute.", 
                "name": "unique"
            }, 
            {
                "descr": "The accuracy.", 
                "name": "accuracy"
            }
        ], 
        "path": "php/function.odbc-statistics", 
        "type": "Database"
    }, 
    "odbc_tableprivileges": {
        "description": "Lists tables in the requested range and the privileges associated with each table.", 
        "name": "odbc_tableprivileges", 
        "overview": "resource odbc_tableprivileges ( resource $connection_id , string $qualifier , string $owner , string $name )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. Accepts the following search patterns: ('%' to match zero or more characters and '_' to match a single character)", 
                "name": "owner"
            }, 
            {
                "descr": "The name. Accepts the following search patterns: ('%' to match zero or more characters and '_' to match a single character)", 
                "name": "name"
            }
        ], 
        "path": "php/function.odbc-tableprivileges", 
        "type": "Database"
    }, 
    "odbc_tables": {
        "description": "Lists all tables in the requested range.", 
        "name": "odbc_tables", 
        "overview": "resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )", 
        "parameters": [
            {
                "descr": "The ODBC connection identifier, see odbc_connect() for details.", 
                "name": "connection_id"
            }, 
            {
                "descr": "The qualifier.", 
                "name": "qualifier"
            }, 
            {
                "descr": "The owner. Accepts search patterns ('%' to match zero or more characters and '_' to match a single character).", 
                "name": "owner"
            }, 
            {
                "descr": "The name. Accepts search patterns ('%' to match zero or more characters and '_' to match a single character).", 
                "name": "name"
            }, 
            {
                "descr": "If table_type is not an empty string, it must contain a list of comma-separated values for the types of interest; each value may be enclosed in single quotes (') or unquoted. ", 
                "name": "types"
            }
        ], 
        "path": "php/function.odbc-tables", 
        "type": "Database"
    }, 
    "opendir": {
        "description": "Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls.", 
        "name": "opendir", 
        "overview": "resource opendir ( string $path [, resource $context ] )", 
        "parameters": [
            {
                "descr": "The directory path that is to be opened", 
                "name": "path"
            }, 
            {
                "descr": "For a description of the context parameter, refer to the streams section of the manual.", 
                "name": "context"
            }
        ], 
        "path": "php/function.opendir", 
        "type": "File System"
    }, 
    "openlog": {
        "description": "openlog() opens a connection to the system logger for a program.", 
        "name": "openlog", 
        "overview": "bool openlog ( string $ident , int $option , int $facility )", 
        "parameters": [
            {
                "descr": "The string ident is added to each message.", 
                "name": "ident"
            }, 
            {
                "descr": "The option argument is used to indicate what logging options will be used when generating a log message. ", 
                "name": "option"
            }, 
            {
                "descr": "The facility argument is used to specify what type of program is logging the message. ", 
                "name": "facility"
            }
        ], 
        "path": "php/function.openlog", 
        "type": "Networking"
    }, 
    "openssl_cipher_iv_length": {
        "description": "Gets the cipher iv length.", 
        "name": "openssl_cipher_iv_length", 
        "overview": "int openssl_cipher_iv_length ( string $method )", 
        "parameters": [
            {
                "descr": "The method.", 
                "name": "method"
            }
        ], 
        "path": "php/function.openssl-cipher-iv-length", 
        "type": "Cryptography"
    }, 
    "openssl_csr_export": {
        "description": "openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference.", 
        "name": "openssl_csr_export", 
        "overview": "bool openssl_csr_export ( resource $csr , string &$out [, bool $notext = true ] )", 
        "parameters": [
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "csr   out   notext"
            }
        ], 
        "path": "php/function.openssl-csr-export", 
        "type": "Cryptography"
    }, 
    "openssl_csr_export_to_file": {
        "description": "openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename.", 
        "name": "openssl_csr_export_to_file", 
        "overview": "bool openssl_csr_export_to_file ( resource $csr , string $outfilename [, bool $notext = true ] )", 
        "parameters": [
            {
                "descr": "Path to the output file.", 
                "name": "csr   outfilename"
            }, 
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "notext"
            }
        ], 
        "path": "php/function.openssl-csr-export-to-file", 
        "type": "Cryptography"
    }, 
    "openssl_csr_get_public_key": {
        "description": "", 
        "name": "openssl_csr_get_public_key", 
        "overview": "resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )", 
        "parameters": [], 
        "path": "php/function.openssl-csr-get-public-key", 
        "type": "Cryptography"
    }, 
    "openssl_csr_get_subject": {
        "description": "", 
        "name": "openssl_csr_get_subject", 
        "overview": "array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )", 
        "parameters": [], 
        "path": "php/function.openssl-csr-get-subject", 
        "type": "Cryptography"
    }, 
    "openssl_csr_new": {
        "description": "openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate.", 
        "name": "openssl_csr_new", 
        "overview": "mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )", 
        "parameters": [
            {
                "descr": "The Distinguished Name to be used in the certificate.", 
                "name": "dn"
            }, 
            {
                "descr": "privkey should be set to a private key that was previously generated by openssl_pkey_new() (or otherwise obtained from the other openssl_pkey family of functions). ", 
                "name": "privkey"
            }, 
            {
                "descr": "By default, the information in your system openssl.conf is used to initialize the request; you can specify a configuration file section by setting the config_section_section key of configargs. ", 
                "name": "configargs"
            }, 
            {
                "descr": "extraattribs is used to specify additional configuration options for the CSR. ", 
                "name": "extraattribs"
            }
        ], 
        "path": "php/function.openssl-csr-new", 
        "type": "Cryptography"
    }, 
    "openssl_csr_sign": {
        "description": "openssl_csr_sign() generates an x509 certificate resource from the given CSR.", 
        "name": "openssl_csr_sign", 
        "overview": "resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]] )", 
        "parameters": [
            {
                "descr": "A CSR previously generated by openssl_csr_new(). ", 
                "name": "csr"
            }, 
            {
                "descr": "The generated certificate will be signed by cacert. ", 
                "name": "cacert"
            }, 
            {
                "descr": "priv_key is the private key that corresponds to cacert.", 
                "name": "priv_key"
            }, 
            {
                "descr": "days specifies the length of time for which the generated certificate will be valid, in days.", 
                "name": "days"
            }, 
            {
                "descr": "You can finetune the CSR signing by configargs. ", 
                "name": "configargs"
            }, 
            {
                "descr": "An optional the serial number of issued certificate. ", 
                "name": "serial"
            }
        ], 
        "path": "php/function.openssl-csr-sign", 
        "type": "Cryptography"
    }, 
    "openssl_decrypt": {
        "description": "Takes a raw or base64 encoded string and decrypts it using a given method and key.", 
        "name": "openssl_decrypt", 
        "overview": "string openssl_decrypt ( string $data , string $method , string $password [, int $options = 0 [, string $iv = \"\" ]] )", 
        "parameters": [
            {
                "descr": "The data.", 
                "name": "data"
            }, 
            {
                "descr": "The cipher method.", 
                "name": "method"
            }, 
            {
                "descr": "The password.", 
                "name": "password"
            }, 
            {
                "descr": "options can be one of OPENSSL_RAW_DATA, OPENSSL_ZERO_PADDING.", 
                "name": "options"
            }, 
            {
                "descr": "A non-NULL Initialization Vector.", 
                "name": "iv"
            }
        ], 
        "path": "php/function.openssl-decrypt", 
        "type": "Cryptography"
    }, 
    "openssl_dh_compute_key": {
        "description": "", 
        "name": "openssl_dh_compute_key", 
        "overview": "string openssl_dh_compute_key ( string $pub_key , resource $dh_key )", 
        "parameters": [
            {
                "descr": "Public key", 
                "name": "pub_key"
            }, 
            {
                "descr": "DH key", 
                "name": "dh_key"
            }
        ], 
        "path": "php/function.openssl-dh-compute-key", 
        "type": "Cryptography"
    }, 
    "openssl_digest": {
        "description": "Computes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string.", 
        "name": "openssl_digest", 
        "overview": "string openssl_digest ( string $data , string $method [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "The data.", 
                "name": "data"
            }, 
            {
                "descr": "The digest method.", 
                "name": "method"
            }, 
            {
                "descr": "Setting to TRUE will return as raw output data, otherwise the return value is binhex encoded.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.openssl-digest", 
        "type": "Cryptography"
    }, 
    "openssl_encrypt": {
        "description": "Encrypts given data with given method and key, returns a raw or base64 encoded string", 
        "name": "openssl_encrypt", 
        "overview": "string openssl_encrypt ( string $data , string $method , string $password [, int $options = 0 [, string $iv = \"\" ]] )", 
        "parameters": [
            {
                "descr": "The data.", 
                "name": "data"
            }, 
            {
                "descr": "The cipher method.", 
                "name": "method"
            }, 
            {
                "descr": "The password.", 
                "name": "password"
            }, 
            {
                "descr": "options can be one of OPENSSL_RAW_DATA, OPENSSL_ZERO_PADDING.", 
                "name": "options"
            }, 
            {
                "descr": "A non-NULL Initialization Vector.", 
                "name": "iv"
            }
        ], 
        "path": "php/function.openssl-encrypt", 
        "type": "Cryptography"
    }, 
    "openssl_error_string": {
        "description": "openssl_error_string() returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one.", 
        "name": "openssl_error_string", 
        "overview": "string openssl_error_string ( void )", 
        "parameters": [], 
        "path": "php/function.openssl-error-string", 
        "type": "Cryptography"
    }, 
    "openssl_free_key": {
        "description": "openssl_free_key() frees the key associated with the specified key_identifier from memory.", 
        "name": "openssl_free_key", 
        "overview": "void openssl_free_key ( resource $key_identifier )", 
        "parameters": [], 
        "path": "php/function.openssl-free-key", 
        "type": "Cryptography"
    }, 
    "openssl_get_cipher_methods": {
        "description": "Gets a list of available cipher methods.", 
        "name": "openssl_get_cipher_methods", 
        "overview": "array openssl_get_cipher_methods ([ bool $aliases = false ] )", 
        "parameters": [
            {
                "descr": "Set to TRUE if cipher aliases should be included within the returned array.", 
                "name": "aliases"
            }
        ], 
        "path": "php/function.openssl-get-cipher-methods", 
        "type": "Cryptography"
    }, 
    "openssl_get_md_methods": {
        "description": "Gets a list of available digest methods.", 
        "name": "openssl_get_md_methods", 
        "overview": "array openssl_get_md_methods ([ bool $aliases = false ] )", 
        "parameters": [
            {
                "descr": "Set to TRUE if digest aliases should be included within the returned array.", 
                "name": "aliases"
            }
        ], 
        "path": "php/function.openssl-get-md-methods", 
        "type": "Cryptography"
    }, 
    "openssl_open": {
        "description": "openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See openssl_seal() for more information.", 
        "name": "openssl_open", 
        "overview": "bool openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id [, string $method ] )", 
        "parameters": [
            {
                "descr": "If the call is successful the opened data is returned in this parameter.", 
                "name": "sealed_data   open_data"
            }
        ], 
        "path": "php/function.openssl-open", 
        "type": "Cryptography"
    }, 
    "openssl_pbkdf2": {
        "description": "", 
        "name": "openssl_pbkdf2", 
        "overview": "string openssl_pbkdf2 ( string $password , string $salt , int $key_length , int $iterations [, string $digest_algorithm ] )", 
        "parameters": [], 
        "path": "php/function.openssl-pbkdf2", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs12_export": {
        "description": "openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.", 
        "name": "openssl_pkcs12_export", 
        "overview": "bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] )", 
        "parameters": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "On success, this will hold the PKCS#12.", 
                "name": "out"
            }, 
            {
                "descr": "Private key component of PKCS#12 file.", 
                "name": "priv_key"
            }, 
            {
                "descr": "Encryption password for unlocking the PKCS#12 file.", 
                "name": "pass"
            }
        ], 
        "path": "php/function.openssl-pkcs12-export", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs12_export_to_file": {
        "description": "openssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format.", 
        "name": "openssl_pkcs12_export_to_file", 
        "overview": "bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] )", 
        "parameters": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "Path to the output file.", 
                "name": "filename"
            }, 
            {
                "descr": "Private key component of PKCS#12 file.", 
                "name": "priv_key"
            }, 
            {
                "descr": "Encryption password for unlocking the PKCS#12 file.", 
                "name": "pass"
            }
        ], 
        "path": "php/function.openssl-pkcs12-export-to-file", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs12_read": {
        "description": "openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs.", 
        "name": "openssl_pkcs12_read", 
        "overview": "bool openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass )", 
        "parameters": [
            {
                "descr": "On success, this will hold the Certificate Store Data.", 
                "name": "pkcs12   certs"
            }, 
            {
                "descr": "Encryption password for unlocking the PKCS#12 file.", 
                "name": "pass"
            }
        ], 
        "path": "php/function.openssl-pkcs12-read", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_decrypt": {
        "description": "Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey.", 
        "name": "openssl_pkcs7_decrypt", 
        "overview": "bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )", 
        "parameters": [
            {
                "descr": "The decrypted message is written to the file specified by outfilename.", 
                "name": "infilename   outfilename"
            }
        ], 
        "path": "php/function.openssl-pkcs7-decrypt", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_encrypt": {
        "description": "openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts.", 
        "name": "openssl_pkcs7_encrypt", 
        "overview": "bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )", 
        "parameters": [
            {
                "descr": "Either a lone X.509 certificate, or an array of X.509 certificates.", 
                "name": "infile   outfile   recipcerts"
            }, 
            {
                "descr": "headers is an array of headers that will be prepended to the data after it has been encrypted. ", 
                "name": "headers"
            }, 
            {
                "descr": "flags can be used to specify options that affect the encoding process - see PKCS7 constants.", 
                "name": "flags"
            }, 
            {
                "descr": "One of cipher constants.", 
                "name": "cipherid"
            }
        ], 
        "path": "php/function.openssl-pkcs7-encrypt", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_sign": {
        "description": "openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters.", 
        "name": "openssl_pkcs7_sign", 
        "overview": "bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )", 
        "parameters": [
            {
                "descr": "headers is an array of headers that will be prepended to the data after it has been signed (see openssl_pkcs7_encrypt() for more information about the format of this parameter).", 
                "name": "infilename   outfilename   signcert   privkey   headers"
            }, 
            {
                "descr": "flags can be used to alter the output - see PKCS7 constants.", 
                "name": "flags"
            }, 
            {
                "descr": "extracerts specifies the name of a file containing a bunch of extra certificates to include in the signature which can for example be used to help the recipient to verify the certificate that you used.", 
                "name": "extracerts"
            }
        ], 
        "path": "php/function.openssl-pkcs7-sign", 
        "type": "Cryptography"
    }, 
    "openssl_pkcs7_verify": {
        "description": "openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature.", 
        "name": "openssl_pkcs7_verify", 
        "overview": "mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )", 
        "parameters": [
            {
                "descr": "Path to the message.", 
                "name": "filename"
            }, 
            {
                "descr": "flags can be used to affect how the signature is verified - see PKCS7 constants for more information.", 
                "name": "flags"
            }, 
            {
                "descr": "If the outfilename is specified, it should be a string holding the name of a file into which the certificates of the persons that signed the messages will be stored in PEM format.", 
                "name": "outfilename"
            }, 
            {
                "descr": "If the cainfo is specified, it should hold information about the trusted CA certificates to use in the verification process - see certificate verification for more information about this parameter.", 
                "name": "cainfo"
            }, 
            {
                "descr": "If the extracerts is specified, it is the filename of a file containing a bunch of certificates to use as untrusted CAs.", 
                "name": "extracerts"
            }, 
            {
                "descr": "You can specify a filename with content that will be filled with the verified data, but with the signature information stripped.", 
                "name": "content"
            }
        ], 
        "path": "php/function.openssl-pkcs7-verify", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_export": {
        "description": "openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference).", 
        "name": "openssl_pkey_export", 
        "overview": "bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )", 
        "parameters": [
            {
                "descr": "The key is optionally protected by passphrase.", 
                "name": "key   out   passphrase"
            }, 
            {
                "descr": "configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file. ", 
                "name": "configargs"
            }
        ], 
        "path": "php/function.openssl-pkey-export", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_export_to_file": {
        "description": "openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename.", 
        "name": "openssl_pkey_export_to_file", 
        "overview": "bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )", 
        "parameters": [
            {
                "descr": "Path to the output file.", 
                "name": "key   outfilename"
            }, 
            {
                "descr": "The key can be optionally protected by a passphrase.", 
                "name": "passphrase"
            }, 
            {
                "descr": "configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file. ", 
                "name": "configargs"
            }
        ], 
        "path": "php/function.openssl-pkey-export-to-file", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_free": {
        "description": "This function frees a private key created by openssl_pkey_new().", 
        "name": "openssl_pkey_free", 
        "overview": "void openssl_pkey_free ( resource $key )", 
        "parameters": [
            {
                "descr": "Resource holding the key.", 
                "name": "key"
            }
        ], 
        "path": "php/function.openssl-pkey-free", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_get_details": {
        "description": "This function returns the key details (bits, key, type).", 
        "name": "openssl_pkey_get_details", 
        "overview": "array openssl_pkey_get_details ( resource $key )", 
        "parameters": [
            {
                "descr": "Resource holding the key.", 
                "name": "key"
            }
        ], 
        "path": "php/function.openssl-pkey-get-details", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_get_private": {
        "description": "openssl_get_privatekey() parses key and prepares it for use by other functions.", 
        "name": "openssl_pkey_get_private", 
        "overview": "resource openssl_pkey_get_private ( mixed $key [, string $passphrase = \"\" ] )", 
        "parameters": [
            {
                "descr": "key can be one of the following: a string having the format file://path/to/file.pem. ", 
                "name": "key"
            }, 
            {
                "descr": "The optional parameter passphrase must be used if the specified key is encrypted (protected by a passphrase).", 
                "name": "passphrase"
            }
        ], 
        "path": "php/function.openssl-pkey-get-private", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_get_public": {
        "description": "openssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions.", 
        "name": "openssl_pkey_get_public", 
        "overview": "resource openssl_pkey_get_public ( mixed $certificate )", 
        "parameters": [
            {
                "descr": "certificate can be one of the following: an X.509 certificate resource a string having the format file://path/to/file.pem. ", 
                "name": "certificate"
            }
        ], 
        "path": "php/function.openssl-pkey-get-public", 
        "type": "Cryptography"
    }, 
    "openssl_pkey_new": {
        "description": "openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public().", 
        "name": "openssl_pkey_new", 
        "overview": "resource openssl_pkey_new ([ array $configargs ] )", 
        "parameters": [
            {
                "descr": "You can finetune the key generation (such as specifying the number of bits) using configargs. ", 
                "name": "configargs"
            }
        ], 
        "path": "php/function.openssl-pkey-new", 
        "type": "Cryptography"
    }, 
    "openssl_private_decrypt": {
        "description": "openssl_private_decrypt() decrypts data that was previous encrypted via openssl_public_encrypt() and stores the result into decrypted.", 
        "name": "openssl_private_decrypt", 
        "overview": "bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "parameters": [
            {
                "descr": "key must be the private key corresponding that was used to encrypt the data.", 
                "name": "data   decrypted   key"
            }, 
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.", 
                "name": "padding"
            }
        ], 
        "path": "php/function.openssl-private-decrypt", 
        "type": "Cryptography"
    }, 
    "openssl_private_encrypt": {
        "description": "openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt().", 
        "name": "openssl_private_encrypt", 
        "overview": "bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "parameters": [
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.", 
                "name": "data   crypted   key   padding"
            }
        ], 
        "path": "php/function.openssl-private-encrypt", 
        "type": "Cryptography"
    }, 
    "openssl_public_decrypt": {
        "description": "openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted.", 
        "name": "openssl_public_decrypt", 
        "overview": "bool openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "parameters": [
            {
                "descr": "key must be the public key corresponding that was used to encrypt the data.", 
                "name": "data   decrypted   key"
            }, 
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.", 
                "name": "padding"
            }
        ], 
        "path": "php/function.openssl-public-decrypt", 
        "type": "Cryptography"
    }, 
    "openssl_public_encrypt": {
        "description": "openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt().", 
        "name": "openssl_public_encrypt", 
        "overview": "bool openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )", 
        "parameters": [
            {
                "descr": "This will hold the result of the encryption.", 
                "name": "data   crypted"
            }, 
            {
                "descr": "The public key.", 
                "name": "key"
            }, 
            {
                "descr": "padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.", 
                "name": "padding"
            }
        ], 
        "path": "php/function.openssl-public-encrypt", 
        "type": "Cryptography"
    }, 
    "openssl_random_pseudo_bytes": {
        "description": "Generates a string of pseudo-random bytes, with the number of bytes determined by the length parameter.", 
        "name": "openssl_random_pseudo_bytes", 
        "overview": "string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )", 
        "parameters": [
            {
                "descr": "The length of the desired string of bytes. ", 
                "name": "length"
            }, 
            {
                "descr": "If passed into the function, this will hold a boolean value that determines if the algorithm used was \"cryptographically strong\", e.g., safe for usage with GPG, passwords, etc. ", 
                "name": "crypto_strong"
            }
        ], 
        "path": "php/function.openssl-random-pseudo-bytes", 
        "type": "Cryptography"
    }, 
    "openssl_seal": {
        "description": "openssl_seal() seals (encrypts) data by using RC4 with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.", 
        "name": "openssl_seal", 
        "overview": "int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method ] )", 
        "parameters": [], 
        "path": "php/function.openssl-seal", 
        "type": "Cryptography"
    }, 
    "openssl_sign": {
        "description": "openssl_sign() computes a signature for the specified data by generating a cryptographic digital signature using the private key associated with priv_key_id. Note that the data itself is not encrypted.", 
        "name": "openssl_sign", 
        "overview": "bool openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )", 
        "parameters": [
            {
                "descr": "The string of data you wish to sign", 
                "name": "data"
            }, 
            {
                "descr": "If the call was successful the signature is returned in signature.", 
                "name": "signature"
            }, 
            {
                "descr": "resource - a key, returned by openssl_get_privatekey()   string - a PEM formatted key", 
                "name": "priv_key_id"
            }, 
            {
                "descr": "int - one of these Signature Algorithms. ", 
                "name": "signature_alg"
            }
        ], 
        "path": "php/function.openssl-sign", 
        "type": "Cryptography"
    }, 
    "openssl_verify": {
        "description": "openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing.", 
        "name": "openssl_verify", 
        "overview": "int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )", 
        "parameters": [
            {
                "descr": "The string of data used to generate the signature previously", 
                "name": "data"
            }, 
            {
                "descr": "A raw binary string, generated by openssl_sign() or similar means", 
                "name": "signature"
            }, 
            {
                "descr": "resource - a key, returned by openssl_get_publickey()   string - a PEM formatted key, example, \"-----BEGIN PUBLIC KEY----- MIIBCgK...\"", 
                "name": "pub_key_id"
            }, 
            {
                "descr": "int - one of these Signature Algorithms. ", 
                "name": "signature_alg"
            }
        ], 
        "path": "php/function.openssl-verify", 
        "type": "Cryptography"
    }, 
    "openssl_x509_check_private_key": {
        "description": "Checks whether the given key is the private key that corresponds to cert.", 
        "name": "openssl_x509_check_private_key", 
        "overview": "bool openssl_x509_check_private_key ( mixed $cert , mixed $key )", 
        "parameters": [
            {
                "descr": "The certificate.", 
                "name": "cert"
            }, 
            {
                "descr": "The private key.", 
                "name": "key"
            }
        ], 
        "path": "php/function.openssl-x509-check-private-key", 
        "type": "Cryptography"
    }, 
    "openssl_x509_checkpurpose": {
        "description": "openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose.", 
        "name": "openssl_x509_checkpurpose", 
        "overview": "int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )", 
        "parameters": [
            {
                "descr": "The examined certificate.", 
                "name": "x509cert"
            }, 
            {
                "descr": "openssl_x509_checkpurpose() purposes Constant Description X509_PURPOSE_SSL_CLIENT Can the certificate be used for the client side of an SSL connection? X509_PURPOSE_SSL_SERVER Can the certificate be used for the server side of an SSL connection? X509_PURPOSE_NS_SSL_SERVER Can the cert be used for Netscape SSL server? X509_PURPOSE_SMIME_SIGN Can the cert be used to sign S/MIME email? X509_PURPOSE_SMIME_ENCRYPT Can the cert be used to encrypt S/MIME email? X509_PURPOSE_CRL_SIGN Can the cert be used to sign a certificate revocation list (CRL)? X509_PURPOSE_ANY Can the cert be used for Any/All purposes?  These options are not bitfields - you may specify one only!", 
                "name": "purpose"
            }, 
            {
                "descr": "cainfo should be an array of trusted CA files/dirs as described in Certificate Verification.", 
                "name": "cainfo"
            }, 
            {
                "descr": "If specified, this should be the name of a PEM encoded file holding certificates that can be used to help verify the certificate, although no trust is placed in the certificates that come from that file.", 
                "name": "untrustedfile"
            }
        ], 
        "path": "php/function.openssl-x509-checkpurpose", 
        "type": "Cryptography"
    }, 
    "openssl_x509_export": {
        "description": "openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.", 
        "name": "openssl_x509_export", 
        "overview": "bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext = TRUE ] )", 
        "parameters": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "On success, this will hold the PEM.", 
                "name": "output"
            }, 
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "notext"
            }
        ], 
        "path": "php/function.openssl-x509-export", 
        "type": "Cryptography"
    }, 
    "openssl_x509_export_to_file": {
        "description": "openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.", 
        "name": "openssl_x509_export_to_file", 
        "overview": "bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext = TRUE ] )", 
        "parameters": [
            {
                "descr": "See Key/Certificate parameters for a list of valid values.", 
                "name": "x509"
            }, 
            {
                "descr": "Path to the output file.", 
                "name": "outfilename"
            }, 
            {
                "descr": "The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. ", 
                "name": "notext"
            }
        ], 
        "path": "php/function.openssl-x509-export-to-file", 
        "type": "Cryptography"
    }, 
    "openssl_x509_free": {
        "description": "openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.", 
        "name": "openssl_x509_free", 
        "overview": "void openssl_x509_free ( resource $x509cert )", 
        "parameters": [], 
        "path": "php/function.openssl-x509-free", 
        "type": "Cryptography"
    }, 
    "openssl_x509_parse": {
        "description": "openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.", 
        "name": "openssl_x509_parse", 
        "overview": "array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )", 
        "parameters": [
            {
                "descr": "shortnames controls how the data is indexed in the array - if shortnames is TRUE (the default) then fields will be indexed with the short name form, otherwise, the long name form will be used - e.g.: CN is the shortname form of commonName.", 
                "name": "x509cert   shortnames"
            }
        ], 
        "path": "php/function.openssl-x509-parse", 
        "type": "Cryptography"
    }, 
    "openssl_x509_read": {
        "description": "openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.", 
        "name": "openssl_x509_read", 
        "overview": "resource openssl_x509_read ( mixed $x509certdata )", 
        "parameters": [], 
        "path": "php/function.openssl-x509-read", 
        "type": "Cryptography"
    }, 
    "ord": {
        "description": "Returns the ASCII value of the first character of string.", 
        "name": "ord", 
        "overview": "int ord ( string $string )", 
        "parameters": [
            {
                "descr": "A character.", 
                "name": "string"
            }
        ], 
        "path": "php/function.ord", 
        "type": "String"
    }, 
    "output_add_rewrite_var": {
        "description": "This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with session.use_trans_sid. Please note that absolute URLs (http://example.com/..) aren't rewritten.", 
        "name": "output_add_rewrite_var", 
        "overview": "bool output_add_rewrite_var ( string $name , string $value )", 
        "parameters": [
            {
                "descr": "The variable name.", 
                "name": "name"
            }, 
            {
                "descr": "The variable value.", 
                "name": "value"
            }
        ], 
        "path": "php/function.output-add-rewrite-var", 
        "type": "Networking"
    }, 
    "output_reset_rewrite_vars": {
        "description": "This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function or the session mechanism (if session.use_trans_sid was set on session_start()).", 
        "name": "output_reset_rewrite_vars", 
        "overview": "bool output_reset_rewrite_vars ( void )", 
        "parameters": [], 
        "path": "php/function.output-reset-rewrite-vars", 
        "type": "Networking"
    }, 
    "pack": {
        "description": "Pack given arguments into a binary string according to format.", 
        "name": "pack", 
        "overview": "string pack ( string $format [, mixed $args [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The format string consists of format codes followed by an optional repeater argument. ", 
                "name": "format"
            }
        ], 
        "path": "php/function.pack", 
        "type": "Language"
    }, 
    "parse_ini_file": {
        "description": "parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array.", 
        "name": "parse_ini_file", 
        "overview": "array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )", 
        "parameters": [
            {
                "descr": "The filename of the ini file being parsed.", 
                "name": "filename"
            }, 
            {
                "descr": "By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. ", 
                "name": "process_sections"
            }, 
            {
                "descr": "Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. ", 
                "name": "scanner_mode"
            }
        ], 
        "path": "php/function.parse-ini-file", 
        "type": "File System"
    }, 
    "parse_ini_string": {
        "description": "parse_ini_string() returns the settings in string ini in an associative array.", 
        "name": "parse_ini_string", 
        "overview": "array parse_ini_string ( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )", 
        "parameters": [
            {
                "descr": "The contents of the ini file being parsed.", 
                "name": "ini"
            }, 
            {
                "descr": "By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. ", 
                "name": "process_sections"
            }, 
            {
                "descr": "Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. ", 
                "name": "scanner_mode"
            }
        ], 
        "path": "php/function.parse-ini-string", 
        "type": "File System"
    }, 
    "parse_str": {
        "description": "Parses str as if it were the query string passed via a URL and sets variables in the current scope.", 
        "name": "parse_str", 
        "overview": "void parse_str ( string $str [, array &$arr ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "If the second parameter arr is present, variables are stored in this variable as array elements instead.", 
                "name": "arr"
            }
        ], 
        "path": "php/function.parse-str", 
        "type": "String"
    }, 
    "parse_url": {
        "description": "This function parses a URL and returns an associative array containing any of the various components of the URL that are present.", 
        "name": "parse_url", 
        "overview": "mixed parse_url ( string $url [, int $component = -1 ] )", 
        "parameters": [
            {
                "descr": "The URL to parse. Invalid characters are replaced by _.", 
                "name": "url"
            }, 
            {
                "descr": "Specify one of PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY or PHP_URL_FRAGMENT to retrieve just a specific URL component as a string (except when PHP_URL_PORT is given, in which case the return value will be an integer).", 
                "name": "component"
            }
        ], 
        "path": "php/function.parse-url", 
        "type": "Networking"
    }, 
    "passthru": {
        "description": "The passthru() function is similar to the exec() function in that it executes a command. This function should be used in place of exec() or system() when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.", 
        "name": "passthru", 
        "overview": "void passthru ( string $command [, int &$return_var ] )", 
        "parameters": [
            {
                "descr": "The command that will be executed.", 
                "name": "command"
            }, 
            {
                "descr": "If the return_var argument is present, the return status of the Unix command will be placed here.", 
                "name": "return_var"
            }
        ], 
        "path": "php/function.passthru", 
        "type": "Process Control"
    }, 
    "password_get_info": {
        "description": "When passed in a valid hash created by an algorithm supported by password_hash(), this function will return an array of information about that hash.", 
        "name": "password_get_info", 
        "overview": "array password_get_info ( string $hash )", 
        "parameters": [
            {
                "descr": "A hash created by password_hash().", 
                "name": "hash"
            }
        ], 
        "path": "php/function.password-get-info", 
        "type": "Cryptography"
    }, 
    "password_hash": {
        "description": "password_hash() creates a new password hash using a strong one-way hashing algorithm. password_hash() is compatible with crypt(). Therefore, password hashes created by crypt() can be used with password_hash().", 
        "name": "password_hash", 
        "overview": "string password_hash ( string $password , integer $algo [, array $options ] )", 
        "parameters": [
            {
                "descr": "The user's password.  Caution  Using the PASSWORD_BCRYPT for the algo parameter, will result in the password parameter being truncated to a maximum length of 72 characters. ", 
                "name": "password"
            }, 
            {
                "descr": "A password algorithm constant denoting the algorithm to use when hashing the password.", 
                "name": "algo"
            }, 
            {
                "descr": "An associative array containing options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.password-hash", 
        "type": "Cryptography"
    }, 
    "password_needs_rehash": {
        "description": "This function checks to see if the supplied hash implements the algorithm and options provided. If not, it is assumed that the hash needs to be rehashed.", 
        "name": "password_needs_rehash", 
        "overview": "boolean password_needs_rehash ( string $hash , string $algo [, string $options ] )", 
        "parameters": [
            {
                "descr": "A hash created by password_hash().", 
                "name": "hash"
            }, 
            {
                "descr": "A password algorithm constant denoting the algorithm to use when hashing the password.", 
                "name": "algo"
            }, 
            {
                "descr": "An associative array containing options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.password-needs-rehash", 
        "type": "Cryptography"
    }, 
    "password_verify": {
        "description": "Verifies that the given hash matches the given password.", 
        "name": "password_verify", 
        "overview": "boolean password_verify ( string $password , string $hash )", 
        "parameters": [
            {
                "descr": "The user's password.", 
                "name": "password"
            }, 
            {
                "descr": "A hash created by password_hash().", 
                "name": "hash"
            }
        ], 
        "path": "php/function.password-verify", 
        "type": "Cryptography"
    }, 
    "pathinfo": {
        "description": "pathinfo() returns information about path: either an associative array or a string, depending on options.", 
        "name": "pathinfo", 
        "overview": "mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )", 
        "parameters": [
            {
                "descr": "The path to be parsed.", 
                "name": "path"
            }, 
            {
                "descr": "If present, specifies a specific element to be returned; one of PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION or PATHINFO_FILENAME. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pathinfo", 
        "type": "File System"
    }, 
    "pclose": {
        "description": "Closes a file pointer to a pipe opened by popen().", 
        "name": "pclose", 
        "overview": "int pclose ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must have been returned by a successful call to popen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.pclose", 
        "type": "File System"
    }, 
    "pfsockopen": {
        "description": "This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes. It is the persistent version of fsockopen().", 
        "name": "pfsockopen", 
        "overview": "resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(\"default_socket_timeout\") ]]]] )", 
        "parameters": [], 
        "path": "php/function.pfsockopen", 
        "type": "Networking"
    }, 
    "pg_affected_rows": {
        "description": "pg_affected_rows() returns the number of tuples (instances/records/rows) affected by INSERT, UPDATE, and DELETE queries.", 
        "name": "pg_affected_rows", 
        "overview": "int pg_affected_rows ( resource $result )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-affected-rows", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_cancel_query": {
        "description": "pg_cancel_query() cancels an asynchronous query sent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot cancel a query executed using pg_query().", 
        "name": "pg_cancel_query", 
        "overview": "bool pg_cancel_query ( resource $connection )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-cancel-query", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_client_encoding": {
        "description": "PostgreSQL supports automatic character set conversion between server and client for certain character sets. pg_client_encoding() returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers.", 
        "name": "pg_client_encoding", 
        "overview": "string pg_client_encoding ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-client-encoding", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_close": {
        "description": "pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource.", 
        "name": "pg_close", 
        "overview": "bool pg_close ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-close", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connect": {
        "description": "pg_connect() opens a connection to a PostgreSQL database specified by the connection_string.", 
        "name": "pg_connect", 
        "overview": "resource pg_connect ( string $connection_string [, int $connect_type ] )", 
        "parameters": [
            {
                "descr": "The connection_string can be empty to use all default parameters, or it can contain one or more parameter settings separated by whitespace. ", 
                "name": "connection_string"
            }, 
            {
                "descr": "If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection is created, even if the connection_string is identical to an existing connection.", 
                "name": "connect_type"
            }
        ], 
        "path": "php/function.pg-connect", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connection_busy": {
        "description": "pg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked.", 
        "name": "pg_connection_busy", 
        "overview": "bool pg_connection_busy ( resource $connection )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-connection-busy", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connection_reset": {
        "description": "pg_connection_reset() resets the connection. It is useful for error recovery.", 
        "name": "pg_connection_reset", 
        "overview": "bool pg_connection_reset ( resource $connection )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-connection-reset", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_connection_status": {
        "description": "pg_connection_status() returns the status of the specified connection.", 
        "name": "pg_connection_status", 
        "overview": "int pg_connection_status ( resource $connection )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-connection-status", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_convert": {
        "description": "pg_convert() checks and converts the values in assoc_array into suitable values for use in an SQL statement. Precondition for pg_convert() is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames in table_name must match the indices in assoc_array and the corresponding datatypes must be compatible. Returns an array with the converted values on success, FALSE otherwise.", 
        "name": "pg_convert", 
        "overview": "array pg_convert ( resource $connection , string $table_name , array $assoc_array [, int $options = 0 ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table against which to convert types.", 
                "name": "table_name"
            }, 
            {
                "descr": "Data to be converted.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_IGNORE_DEFAULT, PGSQL_CONV_FORCE_NULL or PGSQL_CONV_IGNORE_NOT_NULL, combined.", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-convert", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_copy_from": {
        "description": "pg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records.", 
        "name": "pg_copy_from", 
        "overview": "bool pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table into which to copy the rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array of data to be copied into table_name. ", 
                "name": "rows"
            }, 
            {
                "descr": "The token that separates values for each field in each element of rows. ", 
                "name": "delimiter"
            }, 
            {
                "descr": "How SQL NULL values are represented in the rows. ", 
                "name": "null_as"
            }
        ], 
        "path": "php/function.pg-copy-from", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_copy_to": {
        "description": "pg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records.", 
        "name": "pg_copy_to", 
        "overview": "array pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table from which to copy the data into rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "The token that separates values for each field in each element of rows. ", 
                "name": "delimiter"
            }, 
            {
                "descr": "How SQL NULL values are represented in the rows. ", 
                "name": "null_as"
            }
        ], 
        "path": "php/function.pg-copy-to", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_dbname": {
        "description": "pg_dbname() returns the name of the database that the given PostgreSQL connection resource.", 
        "name": "pg_dbname", 
        "overview": "string pg_dbname ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-dbname", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_delete": {
        "description": "pg_delete() deletes records from a table specified by the keys and values in assoc_array. If options is specified, pg_convert() is applied to assoc_array with the specified options.", 
        "name": "pg_delete", 
        "overview": "mixed pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table from which to delete rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the values of those fields that are to be deleted.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-delete", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_end_copy": {
        "description": "pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.", 
        "name": "pg_end_copy", 
        "overview": "bool pg_end_copy ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-end-copy", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_bytea": {
        "description": "pg_escape_bytea() escapes string for bytea datatype. It returns escaped string.", 
        "name": "pg_escape_bytea", 
        "overview": "string pg_escape_bytea ([ resource $connection ], string $data )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text or binary data to be inserted into a bytea column.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-bytea", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_identifier": {
        "description": "pg_escape_identifier() escapes a identifier (e.g. table, field names) for quering the database. It returns an escaped identifier string for PostgreSQL server. pg_escape_identifier() adds double quotes before and after data. Users should not add double quotes. Use of this function is recommended for identifier parameters in query. For SQL literals (i.e. parameters except bytea), pg_escape_literal() or pg_escape_string() muse be used. For bytea type fields, pg_escape_bytea() must be used instead.", 
        "name": "pg_escape_identifier", 
        "overview": "string pg_escape_identifier ([ resource $connection ], string $data )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text to be escaped.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-identifier", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_literal": {
        "description": "pg_escape_literal() escapes a literal for querying the PostgreSQL database. It returns an escaped literal in the PostgreSQL format. pg_escape_literal() adds quotes before and after data. Users should not add quotes. Use of this function is recommended instead of pg_escape_string(). If the type of the column is bytea, pg_escape_bytea() must be used instead. For escaping identifiers (e.g. table, field names), pg_escape_identifier() must be used.", 
        "name": "pg_escape_literal", 
        "overview": "string pg_escape_literal ([ resource $connection ], string $data )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text to be escaped.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-literal", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_escape_string": {
        "description": "pg_escape_string() escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes. pg_escape_literal() is more preferred way to escape SQL parameters for PostgreSQL. addslashes() must not be used with PostgreSQL. If the type of the column is bytea, pg_escape_bytea() must be used instead. pg_escape_identifier() must be used to escape identifiers (e.g. table names, field names)", 
        "name": "pg_escape_string", 
        "overview": "string pg_escape_string ([ resource $connection ], string $data )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A string containing text to be escaped.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-escape-string", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_execute": {
        "description": "Sends a request to execute a prepared statement with given parameters, and waits for the result.", 
        "name": "pg_execute", 
        "overview": "resource pg_execute ([ resource $connection ], string $stmtname , array $params )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name of the prepared statement to execute. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-execute", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_all": {
        "description": "pg_fetch_all() returns an array that contains all rows (records) in the result resource.", 
        "name": "pg_fetch_all", 
        "overview": "array pg_fetch_all ( resource $result )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-fetch-all", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_all_columns": {
        "description": "pg_fetch_all_columns() returns an array that contains all rows (records) in a particular column of the result resource.", 
        "name": "pg_fetch_all_columns", 
        "overview": "array pg_fetch_all_columns ( resource $result [, int $column = 0 ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Column number, zero-based, to be retrieved from the result resource. ", 
                "name": "column"
            }
        ], 
        "path": "php/function.pg-fetch-all-columns", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_array": {
        "description": "pg_fetch_array() returns an array that corresponds to the fetched row (record).", 
        "name": "pg_fetch_array", 
        "overview": "array pg_fetch_array ( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "An optional parameter that controls how the returned array is indexed. ", 
                "name": "result_type"
            }
        ], 
        "path": "php/function.pg-fetch-array", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_assoc": {
        "description": "pg_fetch_assoc() returns an associative array that corresponds to the fetched row (records).", 
        "name": "pg_fetch_assoc", 
        "overview": "array pg_fetch_assoc ( resource $result [, int $row ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }
        ], 
        "path": "php/function.pg-fetch-assoc", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_object": {
        "description": "pg_fetch_object() returns an object with properties that correspond to the fetched row's field names. It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor.", 
        "name": "pg_fetch_object", 
        "overview": "object pg_fetch_object ( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]] )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "Ignored and deprecated.", 
                "name": "result_type"
            }, 
            {
                "descr": "The name of the class to instantiate, set the properties of and return. ", 
                "name": "class_name"
            }, 
            {
                "descr": "An optional array of parameters to pass to the constructor for class_name objects.", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-fetch-object", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_result": {
        "description": "pg_fetch_result() returns the value of a particular row and field (column) in a PostgreSQL result resource.", 
        "name": "pg_fetch_result", 
        "overview": "string pg_fetch_result ( resource $result , int $row , mixed $field )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "A string representing the name of the field (column) to fetch, otherwise an int representing the field number to fetch. ", 
                "name": "field"
            }
        ], 
        "path": "php/function.pg-fetch-result", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_fetch_row": {
        "description": "pg_fetch_row() fetches one row of data from the result associated with the specified result resource.", 
        "name": "pg_fetch_row", 
        "overview": "array pg_fetch_row ( resource $result [, int $row ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }
        ], 
        "path": "php/function.pg-fetch-row", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_is_null": {
        "description": "pg_field_is_null() tests if a field in a PostgreSQL result resource is SQL NULL or not.", 
        "name": "pg_field_is_null", 
        "overview": "int pg_field_is_null ( resource $result , int $row , mixed $field )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result to fetch. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }, 
            {
                "descr": "Field number (starting from 0) as an integer or the field name as a string.", 
                "name": "field"
            }
        ], 
        "path": "php/function.pg-field-is-null", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_name": {
        "description": "pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource. Field numbering starts from 0.", 
        "name": "pg_field_name", 
        "overview": "string pg_field_name ( resource $result , int $field_number )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-name", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_num": {
        "description": "pg_field_num() will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource.", 
        "name": "pg_field_num", 
        "overview": "int pg_field_num ( resource $result , string $field_name )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "The name of the field.", 
                "name": "field_name"
            }
        ], 
        "path": "php/function.pg-field-num", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_prtlen": {
        "description": "pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result. Row numbering starts at 0. This function will return FALSE on an error.", 
        "name": "pg_field_prtlen", 
        "overview": "int pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row number in result. Rows are numbered from 0 upwards. ", 
                "name": "row"
            }
        ], 
        "path": "php/function.pg-field-prtlen", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_size": {
        "description": "pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result.", 
        "name": "pg_field_size", 
        "overview": "int pg_field_size ( resource $result , int $field_number )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-size", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_table": {
        "description": "pg_field_table() returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE.", 
        "name": "pg_field_table", 
        "overview": "mixed pg_field_table ( resource $result , int $field_number [, bool $oid_only = false ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }, 
            {
                "descr": "By default the tables name that field belongs to is returned but if oid_only is set to TRUE, then the oid will instead be returned.", 
                "name": "oid_only"
            }
        ], 
        "path": "php/function.pg-field-table", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_type": {
        "description": "pg_field_type() returns a string containing the base type name of the given field_number in the given PostgreSQL result resource.", 
        "name": "pg_field_type", 
        "overview": "string pg_field_type ( resource $result , int $field_number )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-type", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_field_type_oid": {
        "description": "pg_field_type_oid() returns an integer containing the OID of the base type of the given field_number in the given PostgreSQL result resource.", 
        "name": "pg_field_type_oid", 
        "overview": "int pg_field_type_oid ( resource $result , int $field_number )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Field number, starting from 0.", 
                "name": "field_number"
            }
        ], 
        "path": "php/function.pg-field-type-oid", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_free_result": {
        "description": "pg_free_result() frees the memory and data associated with the specified PostgreSQL query result resource.", 
        "name": "pg_free_result", 
        "overview": "bool pg_free_result ( resource $result )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-free-result", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_get_notify": {
        "description": "pg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued.", 
        "name": "pg_get_notify", 
        "overview": "array pg_get_notify ( resource $connection [, int $result_type ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "An optional parameter that controls how the returned array is indexed. ", 
                "name": "result_type"
            }
        ], 
        "path": "php/function.pg-get-notify", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_get_pid": {
        "description": "pg_get_pid() gets the backend's (database server process) PID. The PID is useful to determine whether or not a NOTIFY message received via pg_get_notify() is sent from another process or not.", 
        "name": "pg_get_pid", 
        "overview": "int pg_get_pid ( resource $connection )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-get-pid", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_get_result": {
        "description": "pg_get_result() gets the result resource from an asynchronous query executed by pg_send_query(), pg_send_query_params() or pg_send_execute().", 
        "name": "pg_get_result", 
        "overview": "resource pg_get_result ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-get-result", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_host": {
        "description": "pg_host() returns the host name of the given PostgreSQL connection resource is connected to.", 
        "name": "pg_host", 
        "overview": "string pg_host ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-host", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_insert": {
        "description": "pg_insert() inserts the values of assoc_array into the table specified by table_name. If options is specified, pg_convert() is applied to assoc_array with the specified options.", 
        "name": "pg_insert", 
        "overview": "mixed pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table into which to insert rows. ", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the values of those fields that are to be inserted.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-insert", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_last_error": {
        "description": "pg_last_error() returns the last error message for a given connection.", 
        "name": "pg_last_error", 
        "overview": "string pg_last_error ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-last-error", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_last_notice": {
        "description": "pg_last_notice() returns the last notice message from the PostgreSQL server on the specified connection. The PostgreSQL server sends notice messages in several cases, for instance when creating a SERIAL column in a table.", 
        "name": "pg_last_notice", 
        "overview": "string pg_last_notice ( resource $connection )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-last-notice", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_last_oid": {
        "description": "pg_last_oid() is used to retrieve the OID assigned to an inserted row.", 
        "name": "pg_last_oid", 
        "overview": "string pg_last_oid ( resource $result )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-last-oid", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_close": {
        "description": "pg_lo_close() closes a large object. large_object is a resource for the large object from pg_lo_open().", 
        "name": "pg_lo_close", 
        "overview": "bool pg_lo_close ( resource $large_object )", 
        "parameters": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-lo-close", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_create": {
        "description": "pg_lo_create() creates a large object and returns the OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above).", 
        "name": "pg_lo_create", 
        "overview": "int pg_lo_create ([ resource $connection [, mixed $object_id ]] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "If an object_id is given the function will try to create a large object with this id, else a free object id is assigned by the server. ", 
                "name": "object_id"
            }
        ], 
        "path": "php/function.pg-lo-create", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_export": {
        "description": "pg_lo_export() takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem.", 
        "name": "pg_lo_export", 
        "overview": "bool pg_lo_export ([ resource $connection ], int $oid , string $pathname )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The OID of the large object in the database.", 
                "name": "oid"
            }, 
            {
                "descr": "The full path and file name of the file in which to write the large object on the client filesystem.", 
                "name": "pathname"
            }
        ], 
        "path": "php/function.pg-lo-export", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_import": {
        "description": "pg_lo_import() creates a new large object in the database using a file on the filesystem as its data source.", 
        "name": "pg_lo_import", 
        "overview": "int pg_lo_import ([ resource $connection ], string $pathname [, mixed $object_id ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The full path and file name of the file on the client filesystem from which to read the large object data.", 
                "name": "pathname"
            }, 
            {
                "descr": "If an object_id is given the function will try to create a large object with this id, else a free object id is assigned by the server. ", 
                "name": "object_id"
            }
        ], 
        "path": "php/function.pg-lo-import", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_open": {
        "description": "pg_lo_open() opens a large object in the database and returns large object resource so that it can be manipulated.", 
        "name": "pg_lo_open", 
        "overview": "resource pg_lo_open ( resource $connection , int $oid , string $mode )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The OID of the large object in the database.", 
                "name": "oid"
            }, 
            {
                "descr": "Can be either \"r\" for read-only, \"w\" for write only or \"rw\" for read and write.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.pg-lo-open", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_read": {
        "description": "pg_lo_read() reads at most len bytes from a large object and returns it as a string.", 
        "name": "pg_lo_read", 
        "overview": "string pg_lo_read ( resource $large_object [, int $len = 8192 ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "An optional maximum number of bytes to return.", 
                "name": "len"
            }
        ], 
        "path": "php/function.pg-lo-read", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_read_all": {
        "description": "pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound.", 
        "name": "pg_lo_read_all", 
        "overview": "int pg_lo_read_all ( resource $large_object )", 
        "parameters": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }
        ], 
        "path": "php/function.pg-lo-read-all", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_seek": {
        "description": "pg_lo_seek() seeks a position within a large object resource.", 
        "name": "pg_lo_seek", 
        "overview": "bool pg_lo_seek ( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "The number of bytes to seek.", 
                "name": "offset"
            }, 
            {
                "descr": "One of the constants PGSQL_SEEK_SET (seek from object start), PGSQL_SEEK_CUR (seek from current position) or PGSQL_SEEK_END (seek from object end) .", 
                "name": "whence"
            }
        ], 
        "path": "php/function.pg-lo-seek", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_tell": {
        "description": "pg_lo_tell() returns the current position (offset from the beginning) of a large object.", 
        "name": "pg_lo_tell", 
        "overview": "int pg_lo_tell ( resource $large_object )", 
        "parameters": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }
        ], 
        "path": "php/function.pg-lo-tell", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_truncate": {
        "description": "pg_lo_truncate() truncates a a large object resource.", 
        "name": "pg_lo_truncate", 
        "overview": "bool pg_lo_truncate ( resource $large_object , int $size )", 
        "parameters": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "The number of bytes to truncate.", 
                "name": "size"
            }
        ], 
        "path": "php/function.pg-lo-truncate", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_unlink": {
        "description": "pg_lo_unlink() deletes a large object with the oid. Returns TRUE on success or FALSE on failure.", 
        "name": "pg_lo_unlink", 
        "overview": "bool pg_lo_unlink ( resource $connection , int $oid )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The OID of the large object in the database.", 
                "name": "oid"
            }
        ], 
        "path": "php/function.pg-lo-unlink", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_lo_write": {
        "description": "pg_lo_write() writes data into a large object at the current seek position.", 
        "name": "pg_lo_write", 
        "overview": "int pg_lo_write ( resource $large_object , string $data [, int $len ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL large object (LOB) resource, returned by pg_lo_open().", 
                "name": "large_object"
            }, 
            {
                "descr": "The data to be written to the large object. ", 
                "name": "data"
            }, 
            {
                "descr": "An optional maximum number of bytes to write. ", 
                "name": "len"
            }
        ], 
        "path": "php/function.pg-lo-write", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_meta_data": {
        "description": "pg_meta_data() returns table definition for table_name as an array.", 
        "name": "pg_meta_data", 
        "overview": "array pg_meta_data ( resource $connection , string $table_name )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "The name of the table.", 
                "name": "table_name"
            }
        ], 
        "path": "php/function.pg-meta-data", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_num_fields": {
        "description": "pg_num_fields() returns the number of fields (columns) in a PostgreSQL result resource.", 
        "name": "pg_num_fields", 
        "overview": "int pg_num_fields ( resource $result )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-num-fields", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_num_rows": {
        "description": "pg_num_rows() will return the number of rows in a PostgreSQL result resource.", 
        "name": "pg_num_rows", 
        "overview": "int pg_num_rows ( resource $result )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-num-rows", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_options": {
        "description": "pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.", 
        "name": "pg_options", 
        "overview": "string pg_options ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-options", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_parameter_status": {
        "description": "Looks up a current parameter setting of the server.", 
        "name": "pg_parameter_status", 
        "overview": "string pg_parameter_status ([ resource $connection ], string $param_name )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "Possible param_name values include server_version, server_encoding, client_encoding, is_superuser, session_authorization, DateStyle, TimeZone, and integer_datetimes.", 
                "name": "param_name"
            }
        ], 
        "path": "php/function.pg-parameter-status", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_pconnect": {
        "description": "pg_pconnect() opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions.", 
        "name": "pg_pconnect", 
        "overview": "resource pg_pconnect ( string $connection_string [, int $connect_type ] )", 
        "parameters": [
            {
                "descr": "The connection_string can be empty to use all default parameters, or it can contain one or more parameter settings separated by whitespace. ", 
                "name": "connection_string"
            }, 
            {
                "descr": "If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection is created, even if the connection_string is identical to an existing connection.", 
                "name": "connect_type"
            }
        ], 
        "path": "php/function.pg-pconnect", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_ping": {
        "description": "pg_ping() pings a database connection and tries to reconnect it if it is broken.", 
        "name": "pg_ping", 
        "overview": "bool pg_ping ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-ping", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_port": {
        "description": "pg_port() returns the port number that the given PostgreSQL connection resource is connected to.", 
        "name": "pg_port", 
        "overview": "int pg_port ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-port", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_prepare": {
        "description": "pg_prepare() creates a prepared statement for later execution with pg_execute() or pg_send_execute(). This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. pg_prepare() is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.", 
        "name": "pg_prepare", 
        "overview": "resource pg_prepare ([ resource $connection ], string $stmtname , string $query )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name to give the prepared statement. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-prepare", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_put_line": {
        "description": "pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL's COPY FROM command.", 
        "name": "pg_put_line", 
        "overview": "bool pg_put_line ([ resource $connection ], string $data )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "A line of text to be sent directly to the PostgreSQL backend. ", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-put-line", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_query": {
        "description": "pg_query() executes the query on the specified database connection. pg_query_params() should be preferred in most cases.", 
        "name": "pg_query", 
        "overview": "resource pg_query ([ resource $connection ], string $query )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The SQL statement or statements to be executed. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-query", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_query_params": {
        "description": "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.", 
        "name": "pg_query_params", 
        "overview": "resource pg_query_params ([ resource $connection ], string $query , array $params )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-query-params", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_error": {
        "description": "pg_result_error() returns any error message associated with the result resource. Therefore, the user has a better chance of getting the correct error message than with pg_last_error().", 
        "name": "pg_result_error", 
        "overview": "string pg_result_error ( resource $result )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }
        ], 
        "path": "php/function.pg-result-error", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_error_field": {
        "description": "pg_result_error_field() returns one of the detailed error message fields associated with result resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the fieldcode.", 
        "name": "pg_result_error_field", 
        "overview": "string pg_result_error_field ( resource $result , int $fieldcode )", 
        "parameters": [
            {
                "descr": "A PostgreSQL query result resource from a previously executed statement.", 
                "name": "result"
            }, 
            {
                "descr": "Possible fieldcode values are: PGSQL_DIAG_SEVERITY, PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY, PGSQL_DIAG_MESSAGE_DETAIL, PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION, PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only), PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only), PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE, PGSQL_DIAG_SOURCE_LINE or PGSQL_DIAG_SOURCE_FUNCTION.", 
                "name": "fieldcode"
            }
        ], 
        "path": "php/function.pg-result-error-field", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_seek": {
        "description": "pg_result_seek() sets the internal row offset in a result resource.", 
        "name": "pg_result_seek", 
        "overview": "bool pg_result_seek ( resource $result , int $offset )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Row to move the internal offset to in the result resource. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.pg-result-seek", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_result_status": {
        "description": "pg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result", 
        "name": "pg_result_status", 
        "overview": "mixed pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).", 
                "name": "result"
            }, 
            {
                "descr": "Either PGSQL_STATUS_LONG to return the numeric status of the result, or PGSQL_STATUS_STRING to return the command tag of the result. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.pg-result-status", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_select": {
        "description": "pg_select() selects records specified by assoc_array which has field=>value. For a successful query, it returns an array containing all records and fields that match the condition specified by assoc_array.", 
        "name": "pg_select", 
        "overview": "mixed pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table from which to select rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the conditions that a row must meet to be retrieved.", 
                "name": "assoc_array"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-select", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_execute": {
        "description": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).", 
        "name": "pg_send_execute", 
        "overview": "bool pg_send_execute ( resource $connection , string $stmtname , array $params )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name of the prepared statement to execute. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-send-execute", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_prepare": {
        "description": "Sends a request to create a prepared statement with the given parameters, without waiting for completion.", 
        "name": "pg_send_prepare", 
        "overview": "bool pg_send_prepare ( resource $connection , string $stmtname , string $query )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The name to give the prepared statement. ", 
                "name": "stmtname"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-send-prepare", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_query": {
        "description": "pg_send_query() sends a query or queries asynchronously to the connection. Unlike pg_query(), it can send multiple queries at once to PostgreSQL and get the results one by one using pg_get_result().", 
        "name": "pg_send_query", 
        "overview": "bool pg_send_query ( resource $connection , string $query )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "The SQL statement or statements to be executed. ", 
                "name": "query"
            }
        ], 
        "path": "php/function.pg-send-query", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_send_query_params": {
        "description": "Submits a command and separate parameters to the server without waiting for the result(s).", 
        "name": "pg_send_query_params", 
        "overview": "bool pg_send_query_params ( resource $connection , string $query , array $params )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "The parameterized SQL statement. ", 
                "name": "query"
            }, 
            {
                "descr": "An array of parameter values to substitute for the $1, $2, etc. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.pg-send-query-params", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_set_client_encoding": {
        "description": "pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error.", 
        "name": "pg_set_client_encoding", 
        "overview": "int pg_set_client_encoding ([ resource $connection ], string $encoding )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The required client encoding. One of SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE, MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5 or WIN1250. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.pg-set-client-encoding", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_set_error_verbosity": {
        "description": "Determines the verbosity of messages returned by pg_last_error() and pg_result_error().", 
        "name": "pg_set_error_verbosity", 
        "overview": "int pg_set_error_verbosity ([ resource $connection ], int $verbosity )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }, 
            {
                "descr": "The required verbosity: PGSQL_ERRORS_TERSE, PGSQL_ERRORS_DEFAULT or PGSQL_ERRORS_VERBOSE.", 
                "name": "verbosity"
            }
        ], 
        "path": "php/function.pg-set-error-verbosity", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_trace": {
        "description": "pg_trace() enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.", 
        "name": "pg_trace", 
        "overview": "bool pg_trace ( string $pathname [, string $mode = \"w\" [, resource $connection ]] )", 
        "parameters": [
            {
                "descr": "The full path and file name of the file in which to write the trace log. ", 
                "name": "pathname"
            }, 
            {
                "descr": "An optional file access mode, same as for fopen().", 
                "name": "mode"
            }, 
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-trace", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_transaction_status": {
        "description": "Returns the current in-transaction status of the server.", 
        "name": "pg_transaction_status", 
        "overview": "int pg_transaction_status ( resource $connection )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-transaction-status", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_tty": {
        "description": "pg_tty() returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource.", 
        "name": "pg_tty", 
        "overview": "string pg_tty ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-tty", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_unescape_bytea": {
        "description": "pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data.", 
        "name": "pg_unescape_bytea", 
        "overview": "string pg_unescape_bytea ( string $data )", 
        "parameters": [
            {
                "descr": "A string containing PostgreSQL bytea data to be converted into a PHP binary string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.pg-unescape-bytea", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_untrace": {
        "description": "Stop tracing started by pg_trace().", 
        "name": "pg_untrace", 
        "overview": "bool pg_untrace ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-untrace", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_update": {
        "description": "pg_update() updates records that matches condition with data. If options is specified, pg_convert() is applied to data with specified options.", 
        "name": "pg_update", 
        "overview": "mixed pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource.", 
                "name": "connection"
            }, 
            {
                "descr": "Name of the table into which to update rows.", 
                "name": "table_name"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are what matched rows are to be updated to.", 
                "name": "data"
            }, 
            {
                "descr": "An array whose keys are field names in the table table_name, and whose values are the conditions that a row must meet to be updated.", 
                "name": "condition"
            }, 
            {
                "descr": "Any number of PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC or PGSQL_DML_STRING combined. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.pg-update", 
        "type": "Database/PostgreSQL"
    }, 
    "pg_version": {
        "description": "pg_version() returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later.", 
        "name": "pg_version", 
        "overview": "array pg_version ([ resource $connection ] )", 
        "parameters": [
            {
                "descr": "PostgreSQL database connection resource. ", 
                "name": "connection"
            }
        ], 
        "path": "php/function.pg-version", 
        "type": "Database/PostgreSQL"
    }, 
    "php_check_syntax": {
        "description": "Performs a syntax (lint) check on the specified filename testing for scripting errors.", 
        "name": "php_check_syntax", 
        "overview": "bool php_check_syntax ( string $filename [, string &$error_message ] )", 
        "parameters": [
            {
                "descr": "The name of the file being checked.", 
                "name": "filename"
            }, 
            {
                "descr": "If the error_message parameter is used, it will contain the error message generated by the syntax check. ", 
                "name": "error_message"
            }
        ], 
        "path": "php/function.php-check-syntax", 
        "type": "Language"
    }, 
    "php_ini_loaded_file": {
        "description": "Check if a php.ini file is loaded, and retrieve its path.", 
        "name": "php_ini_loaded_file", 
        "overview": "string php_ini_loaded_file ( void )", 
        "parameters": [], 
        "path": "php/function.php-ini-loaded-file", 
        "type": "Language"
    }, 
    "php_ini_scanned_files": {
        "description": "php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. These files are found in a directory defined by the --with-config-file-scan-dir option which is set during compilation.", 
        "name": "php_ini_scanned_files", 
        "overview": "string php_ini_scanned_files ( void )", 
        "parameters": [], 
        "path": "php/function.php-ini-scanned-files", 
        "type": "Language"
    }, 
    "php_logo_guid": {
        "description": "This function returns the ID which can be used to display the PHP logo using the built-in image. Logo is displayed only if expose_php is On.", 
        "name": "php_logo_guid", 
        "overview": "string php_logo_guid ( void )", 
        "parameters": [], 
        "path": "php/function.php-logo-guid", 
        "type": "Language"
    }, 
    "php_sapi_name": {
        "description": "", 
        "name": "php_sapi_name", 
        "overview": "string php_sapi_name ( void )", 
        "parameters": [], 
        "path": "php/function.php-sapi-name", 
        "type": "Language"
    }, 
    "php_strip_whitespace": {
        "description": "Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using php -w from the commandline.", 
        "name": "php_strip_whitespace", 
        "overview": "string php_strip_whitespace ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the PHP file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.php-strip-whitespace", 
        "type": "Language"
    }, 
    "php_uname": {
        "description": "php_uname() returns a description of the operating system PHP is running on. This is the same string you see at the very top of the phpinfo() output. For the name of just the operating system, consider using the PHP_OS constant, but keep in mind this constant will contain the operating system PHP was built on.", 
        "name": "php_uname", 
        "overview": "string php_uname ([ string $mode = \"a\" ] )", 
        "parameters": [
            {
                "descr": "mode is a single character that defines what information is returned:   'a': This is the default. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.php-uname", 
        "type": "Language"
    }, 
    "php_user_filter": {
        "description": "", 
        "name": "php_user_filter", 
        "overview": "public int filter ( resource $in , resource $out , int &$consumed , bool $closing )", 
        "parameters": [], 
        "path": "php/class.php-user-filter", 
        "type": "Streams"
    }, 
    "php_user_filter::filter": {
        "description": "This method is called whenever data is read from or written to the attached stream (such as with fread() or fwrite()).", 
        "name": "php_user_filter::filter", 
        "overview": "public int php_user_filter::filter ( resource $in , resource $out , int &$consumed , bool $closing )", 
        "parameters": [
            {
                "descr": "in is a resource pointing to a bucket brigade which contains one or more bucket objects containing data to be filtered.", 
                "name": "in"
            }, 
            {
                "descr": "out is a resource pointing to a second bucket brigade into which your modified buckets should be placed.", 
                "name": "out"
            }, 
            {
                "descr": "consumed, which must always be declared by reference, should be incremented by the length of the data which your filter reads in and alters. ", 
                "name": "consumed"
            }, 
            {
                "descr": "If the stream is in the process of closing (and therefore this is the last pass through the filterchain), the closing parameter will be set to TRUE.", 
                "name": "closing"
            }
        ], 
        "path": "php/php-user-filter.filter", 
        "type": "Streams"
    }, 
    "php_user_filter::onClose": {
        "description": "This method is called upon filter shutdown (typically, this is also during stream shutdown), and is executed after the flush method is called. If any resources were allocated or initialized during onCreate() this would be the time to destroy or dispose of them.", 
        "name": "php_user_filter::onClose", 
        "overview": "public void php_user_filter::onClose ( void )", 
        "parameters": [], 
        "path": "php/php-user-filter.onclose", 
        "type": "Streams"
    }, 
    "php_user_filter::onCreate": {
        "description": "This method is called during instantiation of the filter class object. If your filter allocates or initializes any other resources (such as a buffer), this is the place to do it.", 
        "name": "php_user_filter::onCreate", 
        "overview": "public bool php_user_filter::onCreate ( void )", 
        "parameters": [], 
        "path": "php/php-user-filter.oncreate", 
        "type": "Streams"
    }, 
    "phpcredits": {
        "description": "This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.", 
        "name": "phpcredits", 
        "overview": "bool phpcredits ([ int $flag = CREDITS_ALL ] )", 
        "parameters": [
            {
                "descr": "To generate a custom credits page, you may want to use the flag parameter. ", 
                "name": "flag"
            }
        ], 
        "path": "php/function.phpcredits", 
        "type": "Language"
    }, 
    "phpinfo": {
        "description": "Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.", 
        "name": "phpinfo", 
        "overview": "bool phpinfo ([ int $what = INFO_ALL ] )", 
        "parameters": [
            {
                "descr": "The output may be customized by passing one or more of the following constants bitwise values summed together in the optional what parameter. ", 
                "name": "what"
            }
        ], 
        "path": "php/function.phpinfo", 
        "type": "Language"
    }, 
    "phpversion": {
        "description": "Returns a string containing the version of the currently running PHP parser or extension.", 
        "name": "phpversion", 
        "overview": "string phpversion ([ string $extension ] )", 
        "parameters": [
            {
                "descr": "An optional extension name.", 
                "name": "extension"
            }
        ], 
        "path": "php/function.phpversion", 
        "type": "Language"
    }, 
    "pi": {
        "description": "", 
        "name": "pi", 
        "overview": "float pi ( void )", 
        "parameters": [], 
        "path": "php/function.pi", 
        "type": "Mathematics"
    }, 
    "png2wbmp": {
        "description": "Converts a PNG file into a WBMP file.", 
        "name": "png2wbmp", 
        "overview": "bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )", 
        "parameters": [
            {
                "descr": "Path to PNG file.", 
                "name": "pngname"
            }, 
            {
                "descr": "Path to destination WBMP file.", 
                "name": "wbmpname"
            }, 
            {
                "descr": "Destination image height.", 
                "name": "dest_height"
            }, 
            {
                "descr": "Destination image width.", 
                "name": "dest_width"
            }, 
            {
                "descr": "Threshold value, between 0 and 8 (inclusive).", 
                "name": "threshold"
            }
        ], 
        "path": "php/function.png2wbmp", 
        "type": "Image"
    }, 
    "popen": {
        "description": "Opens a pipe to a process executed by forking the command given by command.", 
        "name": "popen", 
        "overview": "resource popen ( string $command , string $mode )", 
        "parameters": [
            {
                "descr": "The command", 
                "name": "command"
            }, 
            {
                "descr": "The mode", 
                "name": "mode"
            }
        ], 
        "path": "php/function.popen", 
        "type": "File System"
    }, 
    "posix_access": {
        "description": "posix_access() checks the user's permission of a file.", 
        "name": "posix_access", 
        "overview": "bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )", 
        "parameters": [
            {
                "descr": "The name of the file to be tested.", 
                "name": "file"
            }, 
            {
                "descr": "A mask consisting of one or more of POSIX_F_OK, POSIX_R_OK, POSIX_W_OK and POSIX_X_OK. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.posix-access", 
        "type": "Process Control"
    }, 
    "posix_ctermid": {
        "description": "Generates a string which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using posix_get_last_error()", 
        "name": "posix_ctermid", 
        "overview": "string posix_ctermid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-ctermid", 
        "type": "Process Control"
    }, 
    "posix_get_last_error": {
        "description": "Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with posix_strerror().", 
        "name": "posix_get_last_error", 
        "overview": "int posix_get_last_error ( void )", 
        "parameters": [], 
        "path": "php/function.posix-get-last-error", 
        "type": "Process Control"
    }, 
    "posix_getcwd": {
        "description": "Gets the absolute pathname of the script's current working directory. On error, it sets errno which can be checked using posix_get_last_error()", 
        "name": "posix_getcwd", 
        "overview": "string posix_getcwd ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getcwd", 
        "type": "Process Control"
    }, 
    "posix_getegid": {
        "description": "Return the numeric effective group ID of the current process.", 
        "name": "posix_getegid", 
        "overview": "int posix_getegid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getegid", 
        "type": "Process Control"
    }, 
    "posix_geteuid": {
        "description": "Return the numeric effective user ID of the current process. See also posix_getpwuid() for information on how to convert this into a useable username.", 
        "name": "posix_geteuid", 
        "overview": "int posix_geteuid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-geteuid", 
        "type": "Process Control"
    }, 
    "posix_getgid": {
        "description": "Return the numeric real group ID of the current process.", 
        "name": "posix_getgid", 
        "overview": "int posix_getgid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getgid", 
        "type": "Process Control"
    }, 
    "posix_getgrgid": {
        "description": "Gets information about a group provided its id.", 
        "name": "posix_getgrgid", 
        "overview": "array posix_getgrgid ( int $gid )", 
        "parameters": [
            {
                "descr": "The group id.", 
                "name": "gid"
            }
        ], 
        "path": "php/function.posix-getgrgid", 
        "type": "Process Control"
    }, 
    "posix_getgrnam": {
        "description": "Gets information about a group provided its name.", 
        "name": "posix_getgrnam", 
        "overview": "array posix_getgrnam ( string $name )", 
        "parameters": [
            {
                "descr": "The name of the group", 
                "name": "name"
            }
        ], 
        "path": "php/function.posix-getgrnam", 
        "type": "Process Control"
    }, 
    "posix_getgroups": {
        "description": "Gets the group set of the current process.", 
        "name": "posix_getgroups", 
        "overview": "array posix_getgroups ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getgroups", 
        "type": "Process Control"
    }, 
    "posix_getlogin": {
        "description": "Returns the login name of the user owning the current process.", 
        "name": "posix_getlogin", 
        "overview": "string posix_getlogin ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getlogin", 
        "type": "Process Control"
    }, 
    "posix_getpgid": {
        "description": "Returns the process group identifier of the process pid or FALSE on failure.", 
        "name": "posix_getpgid", 
        "overview": "int posix_getpgid ( int $pid )", 
        "parameters": [
            {
                "descr": "The process id.", 
                "name": "pid"
            }
        ], 
        "path": "php/function.posix-getpgid", 
        "type": "Process Control"
    }, 
    "posix_getpgrp": {
        "description": "Return the process group identifier of the current process.", 
        "name": "posix_getpgrp", 
        "overview": "int posix_getpgrp ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getpgrp", 
        "type": "Process Control"
    }, 
    "posix_getpid": {
        "description": "Return the process identifier of the current process.", 
        "name": "posix_getpid", 
        "overview": "int posix_getpid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getpid", 
        "type": "Process Control"
    }, 
    "posix_getppid": {
        "description": "Return the process identifier of the parent process of the current process.", 
        "name": "posix_getppid", 
        "overview": "int posix_getppid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getppid", 
        "type": "Process Control"
    }, 
    "posix_getpwnam": {
        "description": "Returns an array of information about the given user.", 
        "name": "posix_getpwnam", 
        "overview": "array posix_getpwnam ( string $username )", 
        "parameters": [
            {
                "descr": "An alphanumeric username.", 
                "name": "username"
            }
        ], 
        "path": "php/function.posix-getpwnam", 
        "type": "Process Control"
    }, 
    "posix_getpwuid": {
        "description": "Returns an array of information about the user referenced by the given user ID.", 
        "name": "posix_getpwuid", 
        "overview": "array posix_getpwuid ( int $uid )", 
        "parameters": [
            {
                "descr": "The user identifier.", 
                "name": "uid"
            }
        ], 
        "path": "php/function.posix-getpwuid", 
        "type": "Process Control"
    }, 
    "posix_getrlimit": {
        "description": "posix_getrlimit() returns an array of information about the current resource's soft and hard limits.", 
        "name": "posix_getrlimit", 
        "overview": "array posix_getrlimit ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getrlimit", 
        "type": "Process Control"
    }, 
    "posix_getsid": {
        "description": "Return the session id of the process pid. The session id of a process is the process group id of the session leader.", 
        "name": "posix_getsid", 
        "overview": "int posix_getsid ( int $pid )", 
        "parameters": [
            {
                "descr": "The process identifier. If set to 0, the current process is assumed. ", 
                "name": "pid"
            }
        ], 
        "path": "php/function.posix-getsid", 
        "type": "Process Control"
    }, 
    "posix_getuid": {
        "description": "Return the numeric real user ID of the current process.", 
        "name": "posix_getuid", 
        "overview": "int posix_getuid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-getuid", 
        "type": "Process Control"
    }, 
    "posix_initgroups": {
        "description": "Calculates the group access list for the user specified in name.", 
        "name": "posix_initgroups", 
        "overview": "bool posix_initgroups ( string $name , int $base_group_id )", 
        "parameters": [
            {
                "descr": "The user to calculate the list for.", 
                "name": "name"
            }, 
            {
                "descr": "Typically the group number from the password file.", 
                "name": "base_group_id"
            }
        ], 
        "path": "php/function.posix-initgroups", 
        "type": "Process Control"
    }, 
    "posix_isatty": {
        "description": "Determines if the file descriptor fd refers to a valid terminal type device.", 
        "name": "posix_isatty", 
        "overview": "bool posix_isatty ( int $fd )", 
        "parameters": [
            {
                "descr": "The file descriptor.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.posix-isatty", 
        "type": "Process Control"
    }, 
    "posix_kill": {
        "description": "Send the signal sig to the process with the process identifier pid.", 
        "name": "posix_kill", 
        "overview": "bool posix_kill ( int $pid , int $sig )", 
        "parameters": [
            {
                "descr": "The process identifier.", 
                "name": "pid"
            }, 
            {
                "descr": "One of the PCNTL signals constants.", 
                "name": "sig"
            }
        ], 
        "path": "php/function.posix-kill", 
        "type": "Process Control"
    }, 
    "posix_mkfifo": {
        "description": "posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.", 
        "name": "posix_mkfifo", 
        "overview": "bool posix_mkfifo ( string $pathname , int $mode )", 
        "parameters": [
            {
                "descr": "Path to the FIFO file.", 
                "name": "pathname"
            }, 
            {
                "descr": "The second parameter mode has to be given in octal notation (e.g. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.posix-mkfifo", 
        "type": "Process Control"
    }, 
    "posix_mknod": {
        "description": "Creates a special or ordinary file.", 
        "name": "posix_mknod", 
        "overview": "bool posix_mknod ( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]] )", 
        "parameters": [
            {
                "descr": "The file to create", 
                "name": "pathname"
            }, 
            {
                "descr": "This parameter is constructed by a bitwise OR between file type (one of the following constants: POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK, POSIX_S_IFIFO or POSIX_S_IFSOCK) and permissions.", 
                "name": "mode"
            }, 
            {
                "descr": "The major device kernel identifier (required to pass when using S_IFCHR or S_IFBLK).", 
                "name": "major"
            }, 
            {
                "descr": "The minor device kernel identifier.", 
                "name": "minor"
            }
        ], 
        "path": "php/function.posix-mknod", 
        "type": "Process Control"
    }, 
    "posix_setegid": {
        "description": "Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.", 
        "name": "posix_setegid", 
        "overview": "bool posix_setegid ( int $gid )", 
        "parameters": [
            {
                "descr": "The group id.", 
                "name": "gid"
            }
        ], 
        "path": "php/function.posix-setegid", 
        "type": "Process Control"
    }, 
    "posix_seteuid": {
        "description": "Set the real user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.", 
        "name": "posix_seteuid", 
        "overview": "bool posix_seteuid ( int $uid )", 
        "parameters": [
            {
                "descr": "The user id.", 
                "name": "uid"
            }
        ], 
        "path": "php/function.posix-seteuid", 
        "type": "Process Control"
    }, 
    "posix_setgid": {
        "description": "Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function. The appropriate order of function calls is posix_setgid() first, posix_setuid() last.", 
        "name": "posix_setgid", 
        "overview": "bool posix_setgid ( int $gid )", 
        "parameters": [
            {
                "descr": "The group id.", 
                "name": "gid"
            }
        ], 
        "path": "php/function.posix-setgid", 
        "type": "Process Control"
    }, 
    "posix_setpgid": {
        "description": "Let the process pid join the process group pgid.", 
        "name": "posix_setpgid", 
        "overview": "bool posix_setpgid ( int $pid , int $pgid )", 
        "parameters": [
            {
                "descr": "The process id.", 
                "name": "pid"
            }, 
            {
                "descr": "The process group id.", 
                "name": "pgid"
            }
        ], 
        "path": "php/function.posix-setpgid", 
        "type": "Process Control"
    }, 
    "posix_setsid": {
        "description": "Make the current process a session leader.", 
        "name": "posix_setsid", 
        "overview": "int posix_setsid ( void )", 
        "parameters": [], 
        "path": "php/function.posix-setsid", 
        "type": "Process Control"
    }, 
    "posix_setuid": {
        "description": "Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.", 
        "name": "posix_setuid", 
        "overview": "bool posix_setuid ( int $uid )", 
        "parameters": [
            {
                "descr": "The user id.", 
                "name": "uid"
            }
        ], 
        "path": "php/function.posix-setuid", 
        "type": "Process Control"
    }, 
    "posix_strerror": {
        "description": "Returns the POSIX system error message associated with the given errno. You may get the errno parameter by calling posix_get_last_error().", 
        "name": "posix_strerror", 
        "overview": "string posix_strerror ( int $errno )", 
        "parameters": [
            {
                "descr": "A POSIX error number, returned by posix_get_last_error(). ", 
                "name": "errno"
            }
        ], 
        "path": "php/function.posix-strerror", 
        "type": "Process Control"
    }, 
    "posix_times": {
        "description": "Gets information about the current CPU usage.", 
        "name": "posix_times", 
        "overview": "array posix_times ( void )", 
        "parameters": [], 
        "path": "php/function.posix-times", 
        "type": "Process Control"
    }, 
    "posix_ttyname": {
        "description": "Returns a string for the absolute path to the current terminal device that is open on the file descriptor fd.", 
        "name": "posix_ttyname", 
        "overview": "string posix_ttyname ( int $fd )", 
        "parameters": [
            {
                "descr": "The file descriptor.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.posix-ttyname", 
        "type": "Process Control"
    }, 
    "posix_uname": {
        "description": "Gets information about the system.", 
        "name": "posix_uname", 
        "overview": "array posix_uname ( void )", 
        "parameters": [], 
        "path": "php/function.posix-uname", 
        "type": "Process Control"
    }, 
    "pow": {
        "description": "Returns base raised to the power of exp.", 
        "name": "pow", 
        "overview": "number pow ( number $base , number $exp )", 
        "parameters": [
            {
                "descr": "The base to use", 
                "name": "base"
            }, 
            {
                "descr": "The exponent", 
                "name": "exp"
            }
        ], 
        "path": "php/function.pow", 
        "type": "Mathematics"
    }, 
    "preg_filter": {
        "description": "preg_filter() is identical to preg_replace() except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the preg_replace() documentation.", 
        "name": "preg_filter", 
        "overview": "mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )", 
        "parameters": [], 
        "path": "php/function.preg-filter", 
        "type": "String"
    }, 
    "preg_grep": {
        "description": "Returns the array consisting of the elements of the input array that match the given pattern.", 
        "name": "preg_grep", 
        "overview": "array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )", 
        "parameters": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input array.", 
                "name": "input"
            }, 
            {
                "descr": "If set to PREG_GREP_INVERT, this function returns the elements of the input array that do not match the given pattern.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.preg-grep", 
        "type": "String"
    }, 
    "preg_last_error": {
        "description": "Returns the error code of the last PCRE regex execution.", 
        "name": "preg_last_error", 
        "overview": "int preg_last_error ( void )", 
        "parameters": [], 
        "path": "php/function.preg-last-error", 
        "type": "String"
    }, 
    "preg_match": {
        "description": "Searches subject for a match to the regular expression given in pattern.", 
        "name": "preg_match", 
        "overview": "int preg_match ( string $pattern , string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "subject"
            }, 
            {
                "descr": "If matches is provided, then it is filled with the results of search. ", 
                "name": "matches"
            }, 
            {
                "descr": "flags can be the following flag:  PREG_OFFSET_CAPTURE   If this flag is passed, for every occurring match the appendant string offset will also be returned. ", 
                "name": "flags"
            }, 
            {
                "descr": "Normally, the search starts from the beginning of the subject string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.preg-match", 
        "type": "String"
    }, 
    "preg_match_all": {
        "description": "Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags.", 
        "name": "preg_match_all", 
        "overview": "int preg_match_all ( string $pattern , string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )", 
        "parameters": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "subject"
            }, 
            {
                "descr": "Array of all matches in multi-dimensional array ordered according to flags.", 
                "name": "matches"
            }, 
            {
                "descr": "Can be a combination of the following flags (note that it doesn't make sense to use PREG_PATTERN_ORDER together with PREG_SET_ORDER):  PREG_PATTERN_ORDER   Orders results so that $matches[0] is an array of full pattern matches, $matches[1] is an array of strings matched by the first parenthesized subpattern, and so on.    <?phppreg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\",\u00a0\u00a0\u00a0\u00a0\"<b>example:\u00a0</b><div\u00a0align=left>this\u00a0is\u00a0a\u00a0test</div>\",\u00a0\u00a0\u00a0\u00a0$out,\u00a0PREG_PATTERN_ORDER);echo\u00a0$out[0][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[0][1]\u00a0.\u00a0\"\\n\";echo\u00a0$out[1][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[1][1]\u00a0.\u00a0\"\\n\";?>  The above example will output:  <b>example: </b>, <div align=left>this is a test</div>example: , this is a test   So, $out[0] contains array of strings that matched full pattern, and $out[1] contains array of strings enclosed by tags.", 
                "name": "flags"
            }, 
            {
                "descr": "Orders results so that $matches[0] is an array of first set of matches, $matches[1] is an array of second set of matches, and so on. ", 
                "name": "PREG_SET_ORDER"
            }, 
            {
                "descr": "If this flag is passed, for every occurring match the appendant string offset will also be returned. ", 
                "name": "PREG_OFFSET_CAPTURE"
            }, 
            {
                "descr": "Normally, the search starts from the beginning of the subject string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.preg-match-all", 
        "type": "String"
    }, 
    "preg_quote": {
        "description": "preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.", 
        "name": "preg_quote", 
        "overview": "string preg_quote ( string $str [, string $delimiter = NULL ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "If the optional delimiter is specified, it will also be escaped. ", 
                "name": "delimiter"
            }
        ], 
        "path": "php/function.preg-quote", 
        "type": "String"
    }, 
    "preg_replace": {
        "description": "Searches subject for matches to pattern and replaces them with replacement.", 
        "name": "preg_replace", 
        "overview": "mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )", 
        "parameters": [
            {
                "descr": "The pattern to search for. It can be either a string or an array with strings. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The string or an array with strings to replace. ", 
                "name": "replacement"
            }, 
            {
                "descr": "The string or an array with strings to search and replace. ", 
                "name": "subject"
            }, 
            {
                "descr": "The maximum possible replacements for each pattern in each subject string. ", 
                "name": "limit"
            }, 
            {
                "descr": "If specified, this variable will be filled with the number of replacements done.", 
                "name": "count"
            }
        ], 
        "path": "php/function.preg-replace", 
        "type": "String"
    }, 
    "preg_replace_callback": {
        "description": "The behavior of this function is almost identical to preg_replace(), except for the fact that instead of replacement parameter, one should specify a callback.", 
        "name": "preg_replace_callback", 
        "overview": "mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &$count ]] )", 
        "parameters": [
            {
                "descr": "The pattern to search for. It can be either a string or an array with strings.", 
                "name": "pattern"
            }, 
            {
                "descr": "A callback that will be called and passed an array of matched elements in the subject string. ", 
                "name": "callback"
            }, 
            {
                "descr": "The string or an array with strings to search and replace.", 
                "name": "subject"
            }, 
            {
                "descr": "The maximum possible replacements for each pattern in each subject string. ", 
                "name": "limit"
            }, 
            {
                "descr": "If specified, this variable will be filled with the number of replacements done.", 
                "name": "count"
            }
        ], 
        "path": "php/function.preg-replace-callback", 
        "type": "String"
    }, 
    "preg_split": {
        "description": "Split the given string by a regular expression.", 
        "name": "preg_split", 
        "overview": "array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )", 
        "parameters": [
            {
                "descr": "The pattern to search for, as a string.", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "subject"
            }, 
            {
                "descr": "If specified, then only substrings up to limit are returned with the rest of the string being placed in the last substring. ", 
                "name": "limit"
            }, 
            {
                "descr": "flags can be any combination of the following flags (combined with the | bitwise operator):  PREG_SPLIT_NO_EMPTY   If this flag is set, only non-empty pieces will be returned by preg_split().", 
                "name": "flags"
            }, 
            {
                "descr": "If this flag is set, parenthesized expression in the delimiter pattern will be captured and returned as well.", 
                "name": "PREG_SPLIT_DELIM_CAPTURE"
            }, 
            {
                "descr": "If this flag is set, for every occurring match the appendant string offset will also be returned. ", 
                "name": "PREG_SPLIT_OFFSET_CAPTURE"
            }
        ], 
        "path": "php/function.preg-split", 
        "type": "String"
    }, 
    "prev": {
        "description": "Rewind the internal array pointer.", 
        "name": "prev", 
        "overview": "mixed prev ( array &$array )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.prev", 
        "type": "Array"
    }, 
    "print": {
        "description": "Outputs arg.", 
        "name": "print", 
        "overview": "int print ( string $arg )", 
        "parameters": [
            {
                "descr": "The input data.", 
                "name": "arg"
            }
        ], 
        "path": "php/function.print", 
        "type": "String"
    }, 
    "print_r": {
        "description": "print_r() displays information about a variable in a way that's readable by humans.", 
        "name": "print_r", 
        "overview": "mixed print_r ( mixed $expression [, bool $return = false ] )", 
        "parameters": [
            {
                "descr": "The expression to be printed.", 
                "name": "expression"
            }, 
            {
                "descr": "If you would like to capture the output of print_r(), use the return parameter. ", 
                "name": "return"
            }
        ], 
        "path": "php/function.print-r", 
        "type": "Variables"
    }, 
    "printf": {
        "description": "", 
        "name": "printf", 
        "overview": "int printf ( string $format [, mixed $args [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.printf", 
        "type": "String"
    }, 
    "proc_close": {
        "description": "proc_close() is similar to pclose() except that it only works on processes opened by proc_open(). proc_close() waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should fclose() them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.", 
        "name": "proc_close", 
        "overview": "int proc_close ( resource $process )", 
        "parameters": [
            {
                "descr": "The proc_open() resource that will be closed.", 
                "name": "process"
            }
        ], 
        "path": "php/function.proc-close", 
        "type": "Process Control"
    }, 
    "proc_get_status": {
        "description": "proc_get_status() fetches data about a process opened using proc_open().", 
        "name": "proc_get_status", 
        "overview": "array proc_get_status ( resource $process )", 
        "parameters": [
            {
                "descr": "The proc_open() resource that will be evaluated.", 
                "name": "process"
            }
        ], 
        "path": "php/function.proc-get-status", 
        "type": "Process Control"
    }, 
    "proc_nice": {
        "description": "proc_nice() changes the priority of the current process by the amount specified in increment. A positive increment will lower the priority of the current process, whereas a negative increment will raise the priority.", 
        "name": "proc_nice", 
        "overview": "bool proc_nice ( int $increment )", 
        "parameters": [
            {
                "descr": "The increment value of the priority change.", 
                "name": "increment"
            }
        ], 
        "path": "php/function.proc-nice", 
        "type": "Process Control"
    }, 
    "proc_open": {
        "description": "proc_open() is similar to popen() but provides a much greater degree of control over the program execution.", 
        "name": "proc_open", 
        "overview": "resource proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )", 
        "parameters": [
            {
                "descr": "The command to execute", 
                "name": "cmd"
            }, 
            {
                "descr": "An indexed array where the key represents the descriptor number and the value represents how PHP will pass that descriptor to the child process. ", 
                "name": "descriptorspec"
            }, 
            {
                "descr": "Will be set to an indexed array of file pointers that correspond to PHP's end of any pipes that are created.", 
                "name": "pipes"
            }, 
            {
                "descr": "The initial working dir for the command. ", 
                "name": "cwd"
            }, 
            {
                "descr": "An array with the environment variables for the command that will be run, or NULL to use the same environment as the current PHP process", 
                "name": "env"
            }, 
            {
                "descr": "Allows you to specify additional options. ", 
                "name": "other_options"
            }
        ], 
        "path": "php/function.proc-open", 
        "type": "Process Control"
    }, 
    "proc_terminate": {
        "description": "Signals a process (created using proc_open()) that it should terminate. proc_terminate() returns immediately and does not wait for the process to terminate.", 
        "name": "proc_terminate", 
        "overview": "bool proc_terminate ( resource $process [, int $signal = 15 ] )", 
        "parameters": [
            {
                "descr": "The proc_open() resource that will be closed.", 
                "name": "process"
            }, 
            {
                "descr": "This optional parameter is only useful on POSIX operating systems; you may specify a signal to send to the process using the kill(2) system call. ", 
                "name": "signal"
            }
        ], 
        "path": "php/function.proc-terminate", 
        "type": "Process Control"
    }, 
    "property_exists": {
        "description": "This function checks if the given property exists in the specified class.", 
        "name": "property_exists", 
        "overview": "bool property_exists ( mixed $class , string $property )", 
        "parameters": [
            {
                "descr": "The class name or an object of the class to test for", 
                "name": "class"
            }, 
            {
                "descr": "The name of the property", 
                "name": "property"
            }
        ], 
        "path": "php/function.property-exists", 
        "type": "Classes and Functions"
    }, 
    "putenv": {
        "description": "Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state.", 
        "name": "putenv", 
        "overview": "bool putenv ( string $setting )", 
        "parameters": [
            {
                "descr": "The setting, like \"FOO=BAR\"", 
                "name": "setting"
            }
        ], 
        "path": "php/function.putenv", 
        "type": "Language"
    }, 
    "quoted_printable_decode": {
        "description": "This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to \u00bb RFC2045, section 6.7, not \u00bb RFC2821, section 4.5.2, so additional periods are not stripped from the beginning of line).", 
        "name": "quoted_printable_decode", 
        "overview": "string quoted_printable_decode ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.quoted-printable-decode", 
        "type": "String"
    }, 
    "quoted_printable_encode": {
        "description": "Returns a quoted printable string created according to \u00bb RFC2045, section 6.7.", 
        "name": "quoted_printable_encode", 
        "overview": "string quoted_printable_encode ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.quoted-printable-encode", 
        "type": "String"
    }, 
    "quotemeta": {
        "description": "Returns a version of str with a backslash character (\\) before every character that is among these:", 
        "name": "quotemeta", 
        "overview": "string quotemeta ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.quotemeta", 
        "type": "String"
    }, 
    "rad2deg": {
        "description": "This function converts number from radian to degrees.", 
        "name": "rad2deg", 
        "overview": "float rad2deg ( float $number )", 
        "parameters": [
            {
                "descr": "A radian value", 
                "name": "number"
            }
        ], 
        "path": "php/function.rad2deg", 
        "type": "Mathematics"
    }, 
    "rand": {
        "description": "", 
        "name": "rand", 
        "overview": "int rand ( void )", 
        "parameters": [
            {
                "descr": "The lowest value to return (default: 0)", 
                "name": "min"
            }, 
            {
                "descr": "The highest value to return (default: getrandmax())", 
                "name": "max"
            }
        ], 
        "path": "php/function.rand", 
        "type": "Mathematics"
    }, 
    "range": {
        "description": "Create an array containing a range of elements.", 
        "name": "range", 
        "overview": "array range ( mixed $start , mixed $end [, number $step = 1 ] )", 
        "parameters": [
            {
                "descr": "First value of the sequence.", 
                "name": "start"
            }, 
            {
                "descr": "The sequence is ended upon reaching the end value.", 
                "name": "end"
            }, 
            {
                "descr": "If a step value is given, it will be used as the increment between elements in the sequence. ", 
                "name": "step"
            }
        ], 
        "path": "php/function.range", 
        "type": "Array"
    }, 
    "rawurldecode": {
        "description": "Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.", 
        "name": "rawurldecode", 
        "overview": "string rawurldecode ( string $str )", 
        "parameters": [
            {
                "descr": "The URL to be decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.rawurldecode", 
        "type": "Networking"
    }, 
    "rawurlencode": {
        "description": "Encodes the given string according to \u00bb RFC 3986.", 
        "name": "rawurlencode", 
        "overview": "string rawurlencode ( string $str )", 
        "parameters": [
            {
                "descr": "The URL to be encoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.rawurlencode", 
        "type": "Networking"
    }, 
    "readdir": {
        "description": "Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem.", 
        "name": "readdir", 
        "overview": "string readdir ([ resource $dir_handle ] )", 
        "parameters": [
            {
                "descr": "The directory handle resource previously opened with opendir(). ", 
                "name": "dir_handle"
            }
        ], 
        "path": "php/function.readdir", 
        "type": "File System"
    }, 
    "readfile": {
        "description": "Reads a file and writes it to the output buffer.", 
        "name": "readfile", 
        "overview": "int readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] )", 
        "parameters": [
            {
                "descr": "The filename being read.", 
                "name": "filename"
            }, 
            {
                "descr": "You can use the optional second parameter and set it to TRUE, if you want to search for the file in the include_path, too.", 
                "name": "use_include_path"
            }, 
            {
                "descr": "A context stream resource.", 
                "name": "context"
            }
        ], 
        "path": "php/function.readfile", 
        "type": "File System"
    }, 
    "readgzfile": {
        "description": "Reads a file, decompresses it and writes it to standard output.", 
        "name": "readgzfile", 
        "overview": "int readgzfile ( string $filename [, int $use_include_path = 0 ] )", 
        "parameters": [
            {
                "descr": "The file name. This file will be opened from the filesystem and its contents written to standard output.", 
                "name": "filename"
            }, 
            {
                "descr": "You can set this optional parameter to 1, if you want to search for the file in the include_path too.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/function.readgzfile", 
        "type": "Compression"
    }, 
    "readlink": {
        "description": "readlink() does the same as the readlink C function.", 
        "name": "readlink", 
        "overview": "string readlink ( string $path )", 
        "parameters": [
            {
                "descr": "The symbolic link path.", 
                "name": "path"
            }
        ], 
        "path": "php/function.readlink", 
        "type": "File System"
    }, 
    "realpath": {
        "description": "realpath() expands all symbolic links and resolves references to '/./', '/../' and extra '/' characters in the input path and returns the canonicalized absolute pathname.", 
        "name": "realpath", 
        "overview": "string realpath ( string $path )", 
        "parameters": [
            {
                "descr": "The path being checked. Note:  Whilst a path must be supplied, the value can be blank or NULL In these cases, the value is interpreted as the current directory.", 
                "name": "path"
            }
        ], 
        "path": "php/function.realpath", 
        "type": "File System"
    }, 
    "realpath_cache_get": {
        "description": "Get the contents of the realpath cache.", 
        "name": "realpath_cache_get", 
        "overview": "array realpath_cache_get ( void )", 
        "parameters": [], 
        "path": "php/function.realpath-cache-get", 
        "type": "File System"
    }, 
    "realpath_cache_size": {
        "description": "Get the amount of memory used by the realpath cache.", 
        "name": "realpath_cache_size", 
        "overview": "int realpath_cache_size ( void )", 
        "parameters": [], 
        "path": "php/function.realpath-cache-size", 
        "type": "File System"
    }, 
    "register_shutdown_function": {
        "description": "Registers a callback to be executed after script execution finishes or exit() is called.", 
        "name": "register_shutdown_function", 
        "overview": "void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The shutdown callback to register. ", 
                "name": "callback"
            }, 
            {
                "descr": "It is possible to pass parameters to the shutdown function by passing additional parameters.", 
                "name": "parameter"
            }
        ], 
        "path": "php/function.register-shutdown-function", 
        "type": "Classes and Functions"
    }, 
    "register_tick_function": {
        "description": "", 
        "name": "register_tick_function", 
        "overview": "bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The function name as a string, or an array consisting of an object and a method.", 
                "name": "function"
            }
        ], 
        "path": "php/function.register-tick-function", 
        "type": "Classes and Functions"
    }, 
    "rename": {
        "description": "Attempts to rename oldname to newname, moving it between directories if necessary. If newname exists, it will be overwritten.", 
        "name": "rename", 
        "overview": "bool rename ( string $oldname , string $newname [, resource $context ] )", 
        "parameters": [
            {
                "descr": "Note:  The old name. The wrapper used in oldname must match the wrapper used in newname.", 
                "name": "oldname"
            }, 
            {
                "descr": "The new name.", 
                "name": "newname"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.rename", 
        "type": "File System"
    }, 
    "reset": {
        "description": "reset() rewinds array's internal pointer to the first element and returns the value of the first array element.", 
        "name": "reset", 
        "overview": "mixed reset ( array &$array )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.reset", 
        "type": "Array"
    }, 
    "restore_error_handler": {
        "description": "Used after changing the error handler function using set_error_handler(), to revert to the previous error handler (which could be the built-in or a user defined function).", 
        "name": "restore_error_handler", 
        "overview": "bool restore_error_handler ( void )", 
        "parameters": [], 
        "path": "php/function.restore-error-handler", 
        "type": "Errors"
    }, 
    "restore_exception_handler": {
        "description": "Used after changing the exception handler function using set_exception_handler(), to revert to the previous exception handler (which could be the built-in or a user defined function).", 
        "name": "restore_exception_handler", 
        "overview": "bool restore_exception_handler ( void )", 
        "parameters": [], 
        "path": "php/function.restore-exception-handler", 
        "type": "Errors"
    }, 
    "restore_include_path": {
        "description": "", 
        "name": "restore_include_path", 
        "overview": "void restore_include_path ( void )", 
        "parameters": [], 
        "path": "php/function.restore-include-path", 
        "type": "Language"
    }, 
    "rewind": {
        "description": "Sets the file position indicator for handle to the beginning of the file stream.", 
        "name": "rewind", 
        "overview": "bool rewind ( resource $handle )", 
        "parameters": [
            {
                "descr": "The file pointer must be valid, and must point to a file successfully opened by fopen().", 
                "name": "handle"
            }
        ], 
        "path": "php/function.rewind", 
        "type": "File System"
    }, 
    "rewinddir": {
        "description": "Resets the directory stream indicated by dir_handle to the beginning of the directory.", 
        "name": "rewinddir", 
        "overview": "void rewinddir ([ resource $dir_handle ] )", 
        "parameters": [
            {
                "descr": "The directory handle resource previously opened with opendir(). ", 
                "name": "dir_handle"
            }
        ], 
        "path": "php/function.rewinddir", 
        "type": "File System"
    }, 
    "rmdir": {
        "description": "Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. A E_WARNING level error will be generated on failure.", 
        "name": "rmdir", 
        "overview": "bool rmdir ( string $dirname [, resource $context ] )", 
        "parameters": [
            {
                "descr": "Path to the directory.", 
                "name": "dirname"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.rmdir", 
        "type": "File System"
    }, 
    "round": {
        "description": "Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default).", 
        "name": "round", 
        "overview": "float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )", 
        "parameters": [
            {
                "descr": "The value to round", 
                "name": "val"
            }, 
            {
                "descr": "The optional number of decimal digits to round to.", 
                "name": "precision"
            }, 
            {
                "descr": "Use one of the following constants to specify the mode in which rounding occurs. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.round", 
        "type": "Mathematics"
    }, 
    "rsort": {
        "description": "This function sorts an array in reverse order (highest to lowest).", 
        "name": "rsort", 
        "overview": "bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.rsort", 
        "type": "Array"
    }, 
    "rtrim": {
        "description": "This function returns a string with whitespace stripped from the end of str.", 
        "name": "rtrim", 
        "overview": "string rtrim ( string $str [, string $character_mask ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "You can also specify the characters you want to strip, by means of the character_mask parameter. ", 
                "name": "character_mask"
            }
        ], 
        "path": "php/function.rtrim", 
        "type": "String"
    }, 
    "runkit_class_adopt": {
        "description": "", 
        "name": "runkit_class_adopt", 
        "overview": "bool runkit_class_adopt ( string $classname , string $parentname )", 
        "parameters": [
            {
                "descr": "Name of class to be adopted", 
                "name": "classname"
            }, 
            {
                "descr": "Parent class which child class is extending", 
                "name": "parentname"
            }
        ], 
        "path": "php/function.runkit-class-adopt", 
        "type": "Classes and Functions"
    }, 
    "runkit_class_emancipate": {
        "description": "", 
        "name": "runkit_class_emancipate", 
        "overview": "bool runkit_class_emancipate ( string $classname )", 
        "parameters": [
            {
                "descr": "Name of class to emancipate", 
                "name": "classname"
            }
        ], 
        "path": "php/function.runkit-class-emancipate", 
        "type": "Classes and Functions"
    }, 
    "runkit_constant_add": {
        "description": "", 
        "name": "runkit_constant_add", 
        "overview": "bool runkit_constant_add ( string $constname , mixed $value )", 
        "parameters": [
            {
                "descr": "Name of constant to declare. Either a string to indicate a global constant, or classname::constname to indicate a class constant.", 
                "name": "constname"
            }, 
            {
                "descr": "NULL, Bool, Long, Double, String, or Resource value to store in the new constant.", 
                "name": "value"
            }
        ], 
        "path": "php/function.runkit-constant-add", 
        "type": "Classes and Functions"
    }, 
    "runkit_constant_redefine": {
        "description": "", 
        "name": "runkit_constant_redefine", 
        "overview": "bool runkit_constant_redefine ( string $constname , mixed $newvalue )", 
        "parameters": [
            {
                "descr": "Constant to redefine. Either string indicating global constant, or classname::constname indicating class constant.", 
                "name": "constname"
            }, 
            {
                "descr": "New value to assign to constant.", 
                "name": "newvalue"
            }
        ], 
        "path": "php/function.runkit-constant-redefine", 
        "type": "Classes and Functions"
    }, 
    "runkit_constant_remove": {
        "description": "", 
        "name": "runkit_constant_remove", 
        "overview": "bool runkit_constant_remove ( string $constname )", 
        "parameters": [
            {
                "descr": "Name of constant to remove. Either a string indicating a global constant, or classname::constname indicating a class constant.", 
                "name": "constname"
            }
        ], 
        "path": "php/function.runkit-constant-remove", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_add": {
        "description": "", 
        "name": "runkit_function_add", 
        "overview": "bool runkit_function_add ( string $funcname , string $arglist , string $code )", 
        "parameters": [
            {
                "descr": "Name of function to be created", 
                "name": "funcname"
            }, 
            {
                "descr": "Comma separated argument list", 
                "name": "arglist"
            }, 
            {
                "descr": "Code making up the function", 
                "name": "code"
            }
        ], 
        "path": "php/function.runkit-function-add", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_copy": {
        "description": "", 
        "name": "runkit_function_copy", 
        "overview": "bool runkit_function_copy ( string $funcname , string $targetname )", 
        "parameters": [
            {
                "descr": "Name of existing function", 
                "name": "funcname"
            }, 
            {
                "descr": "Name of new function to copy definition to", 
                "name": "targetname"
            }
        ], 
        "path": "php/function.runkit-function-copy", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_redefine": {
        "description": "", 
        "name": "runkit_function_redefine", 
        "overview": "bool runkit_function_redefine ( string $funcname , string $arglist , string $code )", 
        "parameters": [
            {
                "descr": "Name of function to redefine", 
                "name": "funcname"
            }, 
            {
                "descr": "New list of arguments to be accepted by function", 
                "name": "arglist"
            }, 
            {
                "descr": "New code implementation", 
                "name": "code"
            }
        ], 
        "path": "php/function.runkit-function-redefine", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_remove": {
        "description": "", 
        "name": "runkit_function_remove", 
        "overview": "bool runkit_function_remove ( string $funcname )", 
        "parameters": [
            {
                "descr": "Name of function to be deleted", 
                "name": "funcname"
            }
        ], 
        "path": "php/function.runkit-function-remove", 
        "type": "Classes and Functions"
    }, 
    "runkit_function_rename": {
        "description": "", 
        "name": "runkit_function_rename", 
        "overview": "bool runkit_function_rename ( string $funcname , string $newname )", 
        "parameters": [
            {
                "descr": "Current function name", 
                "name": "funcname"
            }, 
            {
                "descr": "New function name", 
                "name": "newname"
            }
        ], 
        "path": "php/function.runkit-function-rename", 
        "type": "Classes and Functions"
    }, 
    "runkit_import": {
        "description": "Similar to include however any code residing outside of a function or class is simply ignored. Additionally, depending on the value of flags, any functions or classes which already exist in the currently running environment will be automatically overwritten by their new definitions.", 
        "name": "runkit_import", 
        "overview": "bool runkit_import ( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ] )", 
        "parameters": [
            {
                "descr": "Filename to import function and class definitions from", 
                "name": "filename"
            }, 
            {
                "descr": "Bitwise OR of the RUNKIT_IMPORT_* family of constants.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.runkit-import", 
        "type": "Classes and Functions"
    }, 
    "runkit_lint": {
        "description": "The runkit_lint() function performs a syntax (lint) check on the specified php code testing for scripting errors. This is similar to using php -l from the command line except runkit_lint() accepts actual code rather than a filename.", 
        "name": "runkit_lint", 
        "overview": "bool runkit_lint ( string $code )", 
        "parameters": [
            {
                "descr": "PHP Code to be lint checked", 
                "name": "code"
            }
        ], 
        "path": "php/function.runkit-lint", 
        "type": "Classes and Functions"
    }, 
    "runkit_lint_file": {
        "description": "The runkit_lint_file() function performs a syntax (lint) check on the specified filename testing for scripting errors. This is similar to using php -l from the commandline.", 
        "name": "runkit_lint_file", 
        "overview": "bool runkit_lint_file ( string $filename )", 
        "parameters": [
            {
                "descr": "File containing PHP Code to be lint checked", 
                "name": "filename"
            }
        ], 
        "path": "php/function.runkit-lint-file", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_add": {
        "description": "", 
        "name": "runkit_method_add", 
        "overview": "bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )", 
        "parameters": [
            {
                "descr": "The class to which this method will be added", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to add", 
                "name": "methodname"
            }, 
            {
                "descr": "Comma-delimited list of arguments for the newly-created method", 
                "name": "args"
            }, 
            {
                "descr": "The code to be evaluated when methodname is called", 
                "name": "code"
            }, 
            {
                "descr": "The type of method to create, can be RUNKIT_ACC_PUBLIC, RUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE  Note:  This parameter is only used as of PHP 5, because, prior to this, all methods were public.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.runkit-method-add", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_copy": {
        "description": "", 
        "name": "runkit_method_copy", 
        "overview": "bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )", 
        "parameters": [
            {
                "descr": "Destination class for copied method", 
                "name": "dClass"
            }, 
            {
                "descr": "Destination method name", 
                "name": "dMethod"
            }, 
            {
                "descr": "Source class of the method to copy", 
                "name": "sClass"
            }, 
            {
                "descr": "Name of the method to copy from the source class. ", 
                "name": "sMethod"
            }
        ], 
        "path": "php/function.runkit-method-copy", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_redefine": {
        "description": "", 
        "name": "runkit_method_redefine", 
        "overview": "bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )", 
        "parameters": [
            {
                "descr": "The class in which to redefine the method", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to redefine", 
                "name": "methodname"
            }, 
            {
                "descr": "Comma-delimited list of arguments for the redefined method", 
                "name": "args"
            }, 
            {
                "descr": "The new code to be evaluated when methodname is called", 
                "name": "code"
            }, 
            {
                "descr": "The redefined method can be RUNKIT_ACC_PUBLIC, RUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE  Note:  This parameter is only used as of PHP 5, because, prior to this, all methods were public.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.runkit-method-redefine", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_remove": {
        "description": "", 
        "name": "runkit_method_remove", 
        "overview": "bool runkit_method_remove ( string $classname , string $methodname )", 
        "parameters": [
            {
                "descr": "The class in which to remove the method", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to remove", 
                "name": "methodname"
            }
        ], 
        "path": "php/function.runkit-method-remove", 
        "type": "Classes and Functions"
    }, 
    "runkit_method_rename": {
        "description": "", 
        "name": "runkit_method_rename", 
        "overview": "bool runkit_method_rename ( string $classname , string $methodname , string $newname )", 
        "parameters": [
            {
                "descr": "The class in which to rename the method", 
                "name": "classname"
            }, 
            {
                "descr": "The name of the method to rename", 
                "name": "methodname"
            }, 
            {
                "descr": "The new name to give to the renamed method", 
                "name": "newname"
            }
        ], 
        "path": "php/function.runkit-method-rename", 
        "type": "Classes and Functions"
    }, 
    "runkit_return_value_used": {
        "description": "", 
        "name": "runkit_return_value_used", 
        "overview": "bool runkit_return_value_used ( void )", 
        "parameters": [], 
        "path": "php/function.runkit-return-value-used", 
        "type": "Classes and Functions"
    }, 
    "runkit_sandbox_output_handler": {
        "description": "Ordinarily, anything output (such as with echo or print) will be output as though it were printed from the parent's scope. Using runkit_sandbox_output_handler() however, output generated by the sandbox (including errors), can be captured by a function outside of the sandbox.", 
        "name": "runkit_sandbox_output_handler", 
        "overview": "mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )", 
        "parameters": [
            {
                "descr": "Object instance of Runkit_Sandbox class on which to set output handling.", 
                "name": "sandbox"
            }, 
            {
                "descr": "Name of a function which expects one parameter. ", 
                "name": "callback"
            }
        ], 
        "path": "php/function.runkit-sandbox-output-handler", 
        "type": "Classes and Functions"
    }, 
    "runkit_superglobals": {
        "description": "", 
        "name": "runkit_superglobals", 
        "overview": "array runkit_superglobals ( void )", 
        "parameters": [], 
        "path": "php/function.runkit-superglobals", 
        "type": "Classes and Functions"
    }, 
    "scandir": {
        "description": "Returns an array of files and directories from the directory.", 
        "name": "scandir", 
        "overview": "array scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] )", 
        "parameters": [
            {
                "descr": "The directory that will be scanned.", 
                "name": "directory"
            }, 
            {
                "descr": "By default, the sorted order is alphabetical in ascending order. ", 
                "name": "sorting_order"
            }, 
            {
                "descr": "For a description of the context parameter, refer to the streams section of the manual.", 
                "name": "context"
            }
        ], 
        "path": "php/function.scandir", 
        "type": "File System"
    }, 
    "serialize": {
        "description": "Generates a storable representation of a value.", 
        "name": "serialize", 
        "overview": "string serialize ( mixed $value )", 
        "parameters": [
            {
                "descr": "The value to be serialized. serialize() handles all types, except the resource-type. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.serialize", 
        "type": "Variables"
    }, 
    "session_cache_expire": {
        "description": "session_cache_expire() returns the current setting of session.cache_expire.", 
        "name": "session_cache_expire", 
        "overview": "int session_cache_expire ([ string $new_cache_expire ] )", 
        "parameters": [
            {
                "descr": "If new_cache_expire is given, the current cache expire is replaced with new_cache_expire. ", 
                "name": "new_cache_expire"
            }
        ], 
        "path": "php/function.session-cache-expire", 
        "type": "Sessions"
    }, 
    "session_cache_limiter": {
        "description": "session_cache_limiter() returns the name of the current cache limiter.", 
        "name": "session_cache_limiter", 
        "overview": "string session_cache_limiter ([ string $cache_limiter ] )", 
        "parameters": [
            {
                "descr": "If cache_limiter is specified, the name of the current cache limiter is changed to the new value. ", 
                "name": "cache_limiter"
            }
        ], 
        "path": "php/function.session-cache-limiter", 
        "type": "Sessions"
    }, 
    "session_decode": {
        "description": "session_decode() decodes the serialized session data provided in $data, and populates the $_SESSION superglobal with the result.", 
        "name": "session_decode", 
        "overview": "bool session_decode ( string $data )", 
        "parameters": [
            {
                "descr": "The encoded data to be stored.", 
                "name": "data"
            }
        ], 
        "path": "php/function.session-decode", 
        "type": "Sessions"
    }, 
    "session_destroy": {
        "description": "", 
        "name": "session_destroy", 
        "overview": "bool session_destroy ( void )", 
        "parameters": [], 
        "path": "php/function.session-destroy", 
        "type": "Sessions"
    }, 
    "session_encode": {
        "description": "session_encode() returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal.", 
        "name": "session_encode", 
        "overview": "string session_encode ( void )", 
        "parameters": [], 
        "path": "php/function.session-encode", 
        "type": "Sessions"
    }, 
    "session_get_cookie_params": {
        "description": "Gets the session cookie parameters.", 
        "name": "session_get_cookie_params", 
        "overview": "array session_get_cookie_params ( void )", 
        "parameters": [], 
        "path": "php/function.session-get-cookie-params", 
        "type": "Sessions"
    }, 
    "session_id": {
        "description": "session_id() is used to get or set the session id for the current session.", 
        "name": "session_id", 
        "overview": "string session_id ([ string $id ] )", 
        "parameters": [
            {
                "descr": "If id is specified, it will replace the current session id. ", 
                "name": "id"
            }
        ], 
        "path": "php/function.session-id", 
        "type": "Sessions"
    }, 
    "session_is_registered": {
        "description": "Finds out whether a global variable is registered in a session.", 
        "name": "session_is_registered", 
        "overview": "bool session_is_registered ( string $name )", 
        "parameters": [
            {
                "descr": "The variable name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-is-registered", 
        "type": "Sessions"
    }, 
    "session_module_name": {
        "description": "session_module_name() gets the name of the current session module.", 
        "name": "session_module_name", 
        "overview": "string session_module_name ([ string $module ] )", 
        "parameters": [
            {
                "descr": "If module is specified, that module will be used instead.", 
                "name": "module"
            }
        ], 
        "path": "php/function.session-module-name", 
        "type": "Sessions"
    }, 
    "session_name": {
        "description": "session_name() returns the name of the current session. If name is given, session_name() will update the session name and return the old session name.", 
        "name": "session_name", 
        "overview": "string session_name ([ string $name ] )", 
        "parameters": [
            {
                "descr": "The session name references the name of the session, which is used in cookies and URLs (e.g. ", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-name", 
        "type": "Sessions"
    }, 
    "session_pgsql_add_error": {
        "description": "", 
        "name": "session_pgsql_add_error", 
        "overview": "bool session_pgsql_add_error ( int $error_level [, string $error_message ] )", 
        "parameters": [], 
        "path": "php/function.session-pgsql-add-error", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_get_error": {
        "description": "Get the number of errors and optional the error messages.", 
        "name": "session_pgsql_get_error", 
        "overview": "array session_pgsql_get_error ([ bool $with_error_message = false ] )", 
        "parameters": [
            {
                "descr": "Set to TRUE the literal error message for each error is also returned.", 
                "name": "with_error_message"
            }
        ], 
        "path": "php/function.session-pgsql-get-error", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_get_field": {
        "description": "", 
        "name": "session_pgsql_get_field", 
        "overview": "string session_pgsql_get_field ( void )", 
        "parameters": [], 
        "path": "php/function.session-pgsql-get-field", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_reset": {
        "description": "Reset the connection to the session database servers.", 
        "name": "session_pgsql_reset", 
        "overview": "bool session_pgsql_reset ( void )", 
        "parameters": [], 
        "path": "php/function.session-pgsql-reset", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_set_field": {
        "description": "", 
        "name": "session_pgsql_set_field", 
        "overview": "bool session_pgsql_set_field ( string $value )", 
        "parameters": [], 
        "path": "php/function.session-pgsql-set-field", 
        "type": "Database/PostgreSQL"
    }, 
    "session_pgsql_status": {
        "description": "", 
        "name": "session_pgsql_status", 
        "overview": "array session_pgsql_status ( void )", 
        "parameters": [], 
        "path": "php/function.session-pgsql-status", 
        "type": "Database/PostgreSQL"
    }, 
    "session_regenerate_id": {
        "description": "session_regenerate_id() will replace the current session id with a new one, and keep the current session information.", 
        "name": "session_regenerate_id", 
        "overview": "bool session_regenerate_id ([ bool $delete_old_session = false ] )", 
        "parameters": [
            {
                "descr": "Whether to delete the old associated session file or not.", 
                "name": "delete_old_session"
            }
        ], 
        "path": "php/function.session-regenerate-id", 
        "type": "Sessions"
    }, 
    "session_register": {
        "description": "session_register() accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register() registers the global variable with that name in the current session.", 
        "name": "session_register", 
        "overview": "bool session_register ( mixed $name [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "A string holding the name of a variable or an array consisting of variable names or other arrays.", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-register", 
        "type": "Sessions"
    }, 
    "session_register_shutdown": {
        "description": "Registers session_write_close() as a shutdown function.", 
        "name": "session_register_shutdown", 
        "overview": "void session_register_shutdown ( void )", 
        "parameters": [], 
        "path": "php/function.session-register-shutdown", 
        "type": "Sessions"
    }, 
    "session_save_path": {
        "description": "session_save_path() returns the path of the current directory used to save session data.", 
        "name": "session_save_path", 
        "overview": "string session_save_path ([ string $path ] )", 
        "parameters": [
            {
                "descr": "Session data path. If specified, the path to which data is saved will be changed. ", 
                "name": "path"
            }
        ], 
        "path": "php/function.session-save-path", 
        "type": "Sessions"
    }, 
    "session_set_cookie_params": {
        "description": "Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params() for every request and before session_start() is called.", 
        "name": "session_set_cookie_params", 
        "overview": "void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )", 
        "parameters": [
            {
                "descr": "Lifetime of the session cookie, defined in seconds.", 
                "name": "lifetime"
            }, 
            {
                "descr": "Path on the domain where the cookie will work. ", 
                "name": "path"
            }, 
            {
                "descr": "Cookie domain, for example 'www.php.net'. ", 
                "name": "domain"
            }, 
            {
                "descr": "If TRUE cookie will only be sent over secure connections.", 
                "name": "secure"
            }, 
            {
                "descr": "If set to TRUE then PHP will attempt to send the httponly flag when setting the session cookie.", 
                "name": "httponly"
            }
        ], 
        "path": "php/function.session-set-cookie-params", 
        "type": "Sessions"
    }, 
    "session_set_save_handler": {
        "description": "session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database.", 
        "name": "session_set_save_handler", 
        "overview": "bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc )", 
        "parameters": [
            {
                "descr": "An instance of a class implementing SessionHandlerInterface, such as SessionHandler, to register as the session handler. ", 
                "name": "sessionhandler"
            }, 
            {
                "descr": "Register session_write_close() as a register_shutdown_function() function.", 
                "name": "register_shutdown"
            }, 
            {
                "descr": "The open callback works like a constructor in classes and is executed when the session is being opened. ", 
                "name": "open(string $savePath, string $sessionName)"
            }, 
            {
                "descr": "The close callback works like a destructor in classes and is executed after the session write callback has been called. ", 
                "name": "close()"
            }, 
            {
                "descr": "The read callback must always return a session encoded (serialized) string, or an empty string if there is no data to read. ", 
                "name": "read(string $sessionId)"
            }, 
            {
                "descr": "The write callback is called when the session needs to be saved and closed. ", 
                "name": "write(string $sessionId, string $data)"
            }, 
            {
                "descr": "This callback is executed when a session is destroyed with session_destroy() or with session_regenerate_id() with the destroy parameter set to TRUE. ", 
                "name": "destroy($sessionId)"
            }, 
            {
                "descr": "The garbage collector callback is invoked internally by PHP periodically in order to purge old session data. ", 
                "name": "gc($lifetime)"
            }
        ], 
        "path": "php/function.session-set-save-handler", 
        "type": "Sessions"
    }, 
    "session_start": {
        "description": "session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.", 
        "name": "session_start", 
        "overview": "bool session_start ( void )", 
        "parameters": [], 
        "path": "php/function.session-start", 
        "type": "Sessions"
    }, 
    "session_status": {
        "description": "session_status() is used to return the current session status.", 
        "name": "session_status", 
        "overview": "int session_status ( void )", 
        "parameters": [], 
        "path": "php/function.session-status", 
        "type": "Sessions"
    }, 
    "session_unregister": {
        "description": "session_unregister() unregisters the global variable named name from the current session.", 
        "name": "session_unregister", 
        "overview": "bool session_unregister ( string $name )", 
        "parameters": [
            {
                "descr": "The variable name.", 
                "name": "name"
            }
        ], 
        "path": "php/function.session-unregister", 
        "type": "Sessions"
    }, 
    "session_unset": {
        "description": "The session_unset() function frees all session variables currently registered.", 
        "name": "session_unset", 
        "overview": "void session_unset ( void )", 
        "parameters": [], 
        "path": "php/function.session-unset", 
        "type": "Sessions"
    }, 
    "session_write_close": {
        "description": "End the current session and store session data.", 
        "name": "session_write_close", 
        "overview": "void session_write_close ( void )", 
        "parameters": [], 
        "path": "php/function.session-write-close", 
        "type": "Sessions"
    }, 
    "set_error_handler": {
        "description": "Sets a user function (error_handler) to handle errors in a script.", 
        "name": "set_error_handler", 
        "overview": "mixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )", 
        "parameters": [
            {
                "descr": "A callback with the following signature. ", 
                "name": "error_handler"
            }, 
            {
                "descr": "The second parameter, errstr, contains the error message, as a string.", 
                "name": "errstr"
            }, 
            {
                "descr": "The third parameter is optional, errfile, which contains the filename that the error was raised in, as a string.", 
                "name": "errfile"
            }, 
            {
                "descr": "The fourth parameter is optional, errline, which contains the line number the error was raised at, as an integer.", 
                "name": "errline"
            }, 
            {
                "descr": "The fifth parameter is optional, errcontext, which is an array that points to the active symbol table at the point the error occurred. ", 
                "name": "errcontext"
            }, 
            {
                "descr": "Can be used to mask the triggering of the error_handler function just like the error_reporting ini setting controls which errors are shown. ", 
                "name": "error_types"
            }
        ], 
        "path": "php/function.set-error-handler", 
        "type": "Errors"
    }, 
    "set_exception_handler": {
        "description": "Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called.", 
        "name": "set_exception_handler", 
        "overview": "callable set_exception_handler ( callable $exception_handler )", 
        "parameters": [
            {
                "descr": "Name of the function to be called when an uncaught exception occurs. ", 
                "name": "exception_handler"
            }
        ], 
        "path": "php/function.set-exception-handler", 
        "type": "Errors"
    }, 
    "set_include_path": {
        "description": "Sets the include_path configuration option for the duration of the script.", 
        "name": "set_include_path", 
        "overview": "string set_include_path ( string $new_include_path )", 
        "parameters": [
            {
                "descr": "The new value for the include_path", 
                "name": "new_include_path"
            }
        ], 
        "path": "php/function.set-include-path", 
        "type": "Language"
    }, 
    "set_magic_quotes_runtime": {
        "description": "Set the current active configuration setting of magic_quotes_runtime.", 
        "name": "set_magic_quotes_runtime", 
        "overview": "bool set_magic_quotes_runtime ( bool $new_setting )", 
        "parameters": [
            {
                "descr": "FALSE for off, TRUE for on.", 
                "name": "new_setting"
            }
        ], 
        "path": "php/function.set-magic-quotes-runtime", 
        "type": "Language"
    }, 
    "set_time_limit": {
        "description": "Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini.", 
        "name": "set_time_limit", 
        "overview": "void set_time_limit ( int $seconds )", 
        "parameters": [
            {
                "descr": "The maximum execution time, in seconds. ", 
                "name": "seconds"
            }
        ], 
        "path": "php/function.set-time-limit", 
        "type": "Language"
    }, 
    "setcookie": {
        "description": "setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including <html> and <head> tags as well as any whitespace.", 
        "name": "setcookie", 
        "overview": "bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )", 
        "parameters": [
            {
                "descr": "The name of the cookie.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the cookie. This value is stored on the clients computer; do not store sensitive information. ", 
                "name": "value"
            }, 
            {
                "descr": "The time the cookie expires. This is a Unix timestamp so is in number of seconds since the epoch. ", 
                "name": "expire"
            }, 
            {
                "descr": "The path on the server in which the cookie will be available on. ", 
                "name": "path"
            }, 
            {
                "descr": "The domain that the cookie is available to. ", 
                "name": "domain"
            }, 
            {
                "descr": "Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client. ", 
                "name": "secure"
            }, 
            {
                "descr": "When TRUE the cookie will be made accessible only through the HTTP protocol. ", 
                "name": "httponly"
            }
        ], 
        "path": "php/function.setcookie", 
        "type": "Networking"
    }, 
    "setlocale": {
        "description": "Sets locale information.", 
        "name": "setlocale", 
        "overview": "string setlocale ( int $category , string $locale [, string $... ] )", 
        "parameters": [
            {
                "descr": "category is a named constant specifying the category of the functions affected by the locale setting:   LC_ALL for all of the below     LC_COLLATE for string comparison, see strcoll()     LC_CTYPE for character classification and conversion, for example strtoupper()     LC_MONETARY for localeconv()     LC_NUMERIC for decimal separator (See also localeconv())     LC_TIME for date and time formatting with strftime()     LC_MESSAGES for system responses (available if PHP was compiled with libintl)", 
                "name": "category"
            }, 
            {
                "descr": "If locale is NULL or the empty string \"\", the locale names will be set from the values of environment variables with the same names as the above categories, or from \"LANG\". ", 
                "name": "locale"
            }, 
            {
                "descr": "(Optional string or array parameters to try as locale settings until success.)", 
                "name": "..."
            }
        ], 
        "path": "php/function.setlocale", 
        "type": "String"
    }, 
    "setrawcookie": {
        "description": "setrawcookie() is exactly the same as setcookie() except that the cookie value will not be automatically urlencoded when sent to the browser.", 
        "name": "setrawcookie", 
        "overview": "bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )", 
        "parameters": [], 
        "path": "php/function.setrawcookie", 
        "type": "Networking"
    }, 
    "settype": {
        "description": "Set the type of variable var to type.", 
        "name": "settype", 
        "overview": "bool settype ( mixed &$var , string $type )", 
        "parameters": [
            {
                "descr": "The variable being converted.", 
                "name": "var"
            }, 
            {
                "descr": "Possibles values of type are:   \"boolean\" (or, since PHP 4.2.0, \"bool\")     \"integer\" (or, since PHP 4.2.0, \"int\")     \"float\" (only possible since PHP 4.2.0, for older versions use the deprecated variant \"double\")     \"string\"     \"array\"     \"object\"     \"null\" (since PHP 4.2.0)", 
                "name": "type"
            }
        ], 
        "path": "php/function.settype", 
        "type": "Variables"
    }, 
    "sha1": {
        "description": "", 
        "name": "sha1", 
        "overview": "string sha1 ( string $str [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "If the optional raw_output is set to TRUE, then the sha1 digest is instead returned in raw binary format with a length of 20, otherwise the returned value is a 40-character hexadecimal number.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.sha1", 
        "type": "String"
    }, 
    "sha1_file": {
        "description": "", 
        "name": "sha1_file", 
        "overview": "string sha1_file ( string $filename [, bool $raw_output = false ] )", 
        "parameters": [
            {
                "descr": "The filename of the file to hash.", 
                "name": "filename"
            }, 
            {
                "descr": "When TRUE, returns the digest in raw binary format with a length of 20.", 
                "name": "raw_output"
            }
        ], 
        "path": "php/function.sha1-file", 
        "type": "String"
    }, 
    "shell_exec": {
        "description": "This function is identical to the backtick operator.", 
        "name": "shell_exec", 
        "overview": "string shell_exec ( string $cmd )", 
        "parameters": [
            {
                "descr": "The command that will be executed.", 
                "name": "cmd"
            }
        ], 
        "path": "php/function.shell-exec", 
        "type": "Process Control"
    }, 
    "shuffle": {
        "description": "This function shuffles (randomizes the order of the elements in) an array.", 
        "name": "shuffle", 
        "overview": "bool shuffle ( array &$array )", 
        "parameters": [
            {
                "descr": "The array.", 
                "name": "array"
            }
        ], 
        "path": "php/function.shuffle", 
        "type": "Array"
    }, 
    "similar_text": {
        "description": "This calculates the similarity between two strings as described in Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.", 
        "name": "similar_text", 
        "overview": "int similar_text ( string $first , string $second [, float &$percent ] )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "first"
            }, 
            {
                "descr": "The second string.", 
                "name": "second"
            }, 
            {
                "descr": "By passing a reference as third argument, similar_text() will calculate the similarity in percent for you.", 
                "name": "percent"
            }
        ], 
        "path": "php/function.similar-text", 
        "type": "String"
    }, 
    "simplexml_import_dom": {
        "description": "This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element.", 
        "name": "simplexml_import_dom", 
        "overview": "SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = \"SimpleXMLElement\" ] )", 
        "parameters": [
            {
                "descr": "A DOM Element node", 
                "name": "node"
            }, 
            {
                "descr": "You may use this optional parameter so that simplexml_import_dom() will return an object of the specified class. ", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.simplexml-import-dom", 
        "type": "XML"
    }, 
    "simplexml_load_file": {
        "description": "Convert the well-formed XML document in the given file to an object.", 
        "name": "simplexml_load_file", 
        "overview": "SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = \"SimpleXMLElement\" [, int $options = 0 [, string $ns = \"\" [, bool $is_prefix = false ]]]] )", 
        "parameters": [
            {
                "descr": "Path to the XML file  Note:  Libxml 2 unescapes the URI, so if you want to pass e.g. ", 
                "name": "filename"
            }, 
            {
                "descr": "You may use this optional parameter so that simplexml_load_file() will return an object of the specified class. ", 
                "name": "class_name"
            }, 
            {
                "descr": "Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }, 
            {
                "descr": "Namespace prefix or URI.", 
                "name": "ns"
            }, 
            {
                "descr": "TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/function.simplexml-load-file", 
        "type": "XML"
    }, 
    "simplexml_load_string": {
        "description": "Takes a well-formed XML string and returns it as an object.", 
        "name": "simplexml_load_string", 
        "overview": "SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = \"SimpleXMLElement\" [, int $options = 0 [, string $ns = \"\" [, bool $is_prefix = false ]]]] )", 
        "parameters": [
            {
                "descr": "A well-formed XML string", 
                "name": "data"
            }, 
            {
                "descr": "You may use this optional parameter so that simplexml_load_string() will return an object of the specified class. ", 
                "name": "class_name"
            }, 
            {
                "descr": "Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.", 
                "name": "options"
            }, 
            {
                "descr": "Namespace prefix or URI.", 
                "name": "ns"
            }, 
            {
                "descr": "TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.", 
                "name": "is_prefix"
            }
        ], 
        "path": "php/function.simplexml-load-string", 
        "type": "XML"
    }, 
    "sin": {
        "description": "sin() returns the sine of the arg parameter. The arg parameter is in radians.", 
        "name": "sin", 
        "overview": "float sin ( float $arg )", 
        "parameters": [
            {
                "descr": "A value in radians", 
                "name": "arg"
            }
        ], 
        "path": "php/function.sin", 
        "type": "Mathematics"
    }, 
    "sinh": {
        "description": "Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2.", 
        "name": "sinh", 
        "overview": "float sinh ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.sinh", 
        "type": "Mathematics"
    }, 
    "sleep": {
        "description": "", 
        "name": "sleep", 
        "overview": "int sleep ( int $seconds )", 
        "parameters": [
            {
                "descr": "Halt time in seconds.", 
                "name": "seconds"
            }
        ], 
        "path": "php/function.sleep", 
        "type": "Language"
    }, 
    "socket_accept": {
        "description": "After the socket socket has been created using socket_create(), bound to a name with socket_bind(), and told to listen for connections with socket_listen(), this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, socket_accept() will block until a connection becomes present. If socket has been made non-blocking using socket_set_blocking() or socket_set_nonblock(), FALSE will be returned.", 
        "name": "socket_accept", 
        "overview": "resource socket_accept ( resource $socket )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-accept", 
        "type": "Networking"
    }, 
    "socket_bind": {
        "description": "Binds the name given in address to the socket described by socket. This has to be done before a connection is be established using socket_connect() or socket_listen().", 
        "name": "socket_bind", 
        "overview": "bool socket_bind ( resource $socket , string $address [, int $port = 0 ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "If the socket is of the AF_INET family, the address is an IP in dotted-quad notation (e.g. ", 
                "name": "address"
            }, 
            {
                "descr": "The port parameter is only used when binding an AF_INET socket, and designates the port on which to listen for connections.", 
                "name": "port (Optional)"
            }
        ], 
        "path": "php/function.socket-bind", 
        "type": "Networking"
    }, 
    "socket_clear_error": {
        "description": "This function clears the error code on the given socket or the global last socket error if no socket is specified.", 
        "name": "socket_clear_error", 
        "overview": "void socket_clear_error ([ resource $socket ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-clear-error", 
        "type": "Networking"
    }, 
    "socket_close": {
        "description": "socket_close() closes the socket resource given by socket. This function is specific to sockets and cannot be used on any other type of resources.", 
        "name": "socket_close", 
        "overview": "void socket_close ( resource $socket )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-close", 
        "type": "Networking"
    }, 
    "socket_cmsg_space": {
        "description": "Calculates the size of the buffer that should be allocated for receiving the ancillary data.", 
        "name": "socket_cmsg_space", 
        "overview": "int socket_cmsg_space ( int $level , int $type )", 
        "parameters": [], 
        "path": "php/function.socket-cmsg-space", 
        "type": "Networking"
    }, 
    "socket_connect": {
        "description": "Initiate a connection to address using the socket resource socket, which must be a valid socket resource created with socket_create().", 
        "name": "socket_connect", 
        "overview": "bool socket_connect ( resource $socket , string $address [, int $port = 0 ] )", 
        "parameters": [
            {
                "descr": "The address parameter is either an IPv4 address in dotted-quad notation (e.g. ", 
                "name": "socket   address"
            }, 
            {
                "descr": "The port parameter is only used and is mandatory when connecting to an AF_INET or an AF_INET6 socket, and designates the port on the remote host to which a connection should be made.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-connect", 
        "type": "Networking"
    }, 
    "socket_create": {
        "description": "Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server.", 
        "name": "socket_create", 
        "overview": "resource socket_create ( int $domain , int $type , int $protocol )", 
        "parameters": [
            {
                "descr": "The domain parameter specifies the protocol family to be used by the socket. ", 
                "name": "domain"
            }, 
            {
                "descr": "The type parameter selects the type of communication to be used by the socket. ", 
                "name": "type"
            }, 
            {
                "descr": "The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. ", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.socket-create", 
        "type": "Networking"
    }, 
    "socket_create_listen": {
        "description": "socket_create_listen() creates a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections.", 
        "name": "socket_create_listen", 
        "overview": "resource socket_create_listen ( int $port [, int $backlog = 128 ] )", 
        "parameters": [
            {
                "descr": "The port on which to listen on all interfaces.", 
                "name": "port"
            }, 
            {
                "descr": "The backlog parameter defines the maximum length the queue of pending connections may grow to. ", 
                "name": "backlog"
            }
        ], 
        "path": "php/function.socket-create-listen", 
        "type": "Networking"
    }, 
    "socket_create_pair": {
        "description": "socket_create_pair() creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication).", 
        "name": "socket_create_pair", 
        "overview": "bool socket_create_pair ( int $domain , int $type , int $protocol , array &$fd )", 
        "parameters": [
            {
                "descr": "The domain parameter specifies the protocol family to be used by the socket. ", 
                "name": "domain"
            }, 
            {
                "descr": "The type parameter selects the type of communication to be used by the socket. ", 
                "name": "type"
            }, 
            {
                "descr": "The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. ", 
                "name": "protocol"
            }, 
            {
                "descr": "Reference to an array in which the two socket resources will be inserted.", 
                "name": "fd"
            }
        ], 
        "path": "php/function.socket-create-pair", 
        "type": "Networking"
    }, 
    "socket_get_option": {
        "description": "The socket_get_option() function retrieves the value for the option specified by the optname parameter for the specified socket.", 
        "name": "socket_get_option", 
        "overview": "mixed socket_get_option ( resource $socket , int $level , int $optname )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "The level parameter specifies the protocol level at which the option resides. ", 
                "name": "level"
            }, 
            {
                "descr": "Available Socket Options Option Description Type SO_DEBUG  Reports whether debugging information is being recorded. ", 
                "name": "optname"
            }
        ], 
        "path": "php/function.socket-get-option", 
        "type": "Networking"
    }, 
    "socket_getpeername": {
        "description": "Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.", 
        "name": "socket_getpeername", 
        "overview": "bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "If the given socket is of type AF_INET or AF_INET6, socket_getpeername() will return the peers (remote) IP address in appropriate notation (e.g. ", 
                "name": "address"
            }, 
            {
                "descr": "If given, this will hold the port associated to address.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-getpeername", 
        "type": "Networking"
    }, 
    "socket_getsockname": {
        "description": "", 
        "name": "socket_getsockname", 
        "overview": "bool socket_getsockname ( resource $socket , string &$addr [, int &$port ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "If the given socket is of type AF_INET or AF_INET6, socket_getsockname() will return the local IP address in appropriate notation (e.g. ", 
                "name": "addr"
            }, 
            {
                "descr": "If provided, this will hold the associated port.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-getsockname", 
        "type": "Networking"
    }, 
    "socket_import_stream": {
        "description": "Imports a stream that encapsulates a socket into a socket extension resource.", 
        "name": "socket_import_stream", 
        "overview": "resource socket_import_stream ( resource $stream )", 
        "parameters": [
            {
                "descr": "The stream resource to import.", 
                "name": "stream"
            }
        ], 
        "path": "php/function.socket-import-stream", 
        "type": "Networking"
    }, 
    "socket_last_error": {
        "description": "If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned. The latter is particularly helpful for functions like socket_create() which don't return a socket on failure and socket_select() which can fail for reasons not directly tied to a particular socket. The error code is suitable to be fed to socket_strerror() which returns a string describing the given error code.", 
        "name": "socket_last_error", 
        "overview": "int socket_last_error ([ resource $socket ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-last-error", 
        "type": "Networking"
    }, 
    "socket_listen": {
        "description": "After the socket socket has been created using socket_create() and bound to a name with socket_bind(), it may be told to listen for incoming connections on socket.", 
        "name": "socket_listen", 
        "overview": "bool socket_listen ( resource $socket [, int $backlog = 0 ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "A maximum of backlog incoming connections will be queued for processing. ", 
                "name": "backlog"
            }
        ], 
        "path": "php/function.socket-listen", 
        "type": "Networking"
    }, 
    "socket_read": {
        "description": "The function socket_read() reads from the socket resource socket created by the socket_create() or socket_accept() functions.", 
        "name": "socket_read", 
        "overview": "string socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "The maximum number of bytes read is specified by the length parameter. ", 
                "name": "length"
            }, 
            {
                "descr": "Optional type parameter is a named constant:   PHP_BINARY_READ (Default) - use the system recv() function. ", 
                "name": "type"
            }
        ], 
        "path": "php/function.socket-read", 
        "type": "Networking"
    }, 
    "socket_recv": {
        "description": "The socket_recv() function receives len bytes of data in buf from socket. socket_recv() can be used to gather data from connected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.", 
        "name": "socket_recv", 
        "overview": "int socket_recv ( resource $socket , string &$buf , int $len , int $flags )", 
        "parameters": [
            {
                "descr": "The socket must be a socket resource previously created by socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The data received will be fetched to the variable specified with buf. ", 
                "name": "buf"
            }, 
            {
                "descr": "Up to len bytes will be fetched from remote host.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.socket-recv", 
        "type": "Networking"
    }, 
    "socket_recvfrom": {
        "description": "The socket_recvfrom() function receives len bytes of data in buf from name on port port (if the socket is not of type AF_UNIX) using socket. socket_recvfrom() can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.", 
        "name": "socket_recvfrom", 
        "overview": "int socket_recvfrom ( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ] )", 
        "parameters": [
            {
                "descr": "The socket must be a socket resource previously created by socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The data received will be fetched to the variable specified with buf.", 
                "name": "buf"
            }, 
            {
                "descr": "Up to len bytes will be fetched from remote host.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }, 
            {
                "descr": "If the socket is of the type AF_UNIX type, name is the path to the file. ", 
                "name": "name"
            }, 
            {
                "descr": "This argument only applies to AF_INET and AF_INET6 sockets, and specifies the remote port from which the data is received. ", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-recvfrom", 
        "type": "Networking"
    }, 
    "socket_recvmsg": {
        "description": "", 
        "name": "socket_recvmsg", 
        "overview": "int socket_recvmsg ( resource $socket , string $message [, int $flags ] )", 
        "parameters": [], 
        "path": "php/function.socket-recvmsg", 
        "type": "Networking"
    }, 
    "socket_select": {
        "description": "socket_select() accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.", 
        "name": "socket_select", 
        "overview": "int socket_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )", 
        "parameters": [
            {
                "descr": "The sockets listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a socket resource is also ready on end-of-file, in which case a socket_read() will return a zero length string).", 
                "name": "read"
            }, 
            {
                "descr": "The sockets listed in the write array will be watched to see if a write will not block.", 
                "name": "write"
            }, 
            {
                "descr": "The sockets listed in the except array will be watched for exceptions.", 
                "name": "except"
            }, 
            {
                "descr": "The tv_sec and tv_usec together form the timeout parameter. ", 
                "name": "tv_sec"
            }
        ], 
        "path": "php/function.socket-select", 
        "type": "Networking"
    }, 
    "socket_send": {
        "description": "The function socket_send() sends len bytes to the socket socket from buf.", 
        "name": "socket_send", 
        "overview": "int socket_send ( resource $socket , string $buf , int $len , int $flags )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "A buffer containing the data that will be sent to the remote host.", 
                "name": "buf"
            }, 
            {
                "descr": "The number of bytes that will be sent to the remote host from buf.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.socket-send", 
        "type": "Networking"
    }, 
    "socket_sendmsg": {
        "description": "", 
        "name": "socket_sendmsg", 
        "overview": "int socket_sendmsg ( resource $socket , array $message , int $flags )", 
        "parameters": [], 
        "path": "php/function.socket-sendmsg", 
        "type": "Networking"
    }, 
    "socket_sendto": {
        "description": "The function socket_sendto() sends len bytes from buf through the socket socket to the port at the address addr.", 
        "name": "socket_sendto", 
        "overview": "int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port = 0 ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created using socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The sent data will be taken from buffer buf.", 
                "name": "buf"
            }, 
            {
                "descr": "len bytes from buf will be sent.", 
                "name": "len"
            }, 
            {
                "descr": "The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. ", 
                "name": "flags"
            }, 
            {
                "descr": "IP address of the remote host.", 
                "name": "addr"
            }, 
            {
                "descr": "port is the remote port number at which the data will be sent.", 
                "name": "port"
            }
        ], 
        "path": "php/function.socket-sendto", 
        "type": "Networking"
    }, 
    "socket_set_block": {
        "description": "The socket_set_block() function removes the O_NONBLOCK flag on the socket specified by the socket parameter.", 
        "name": "socket_set_block", 
        "overview": "bool socket_set_block ( resource $socket )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-set-block", 
        "type": "Networking"
    }, 
    "socket_set_nonblock": {
        "description": "The socket_set_nonblock() function sets the O_NONBLOCK flag on the socket specified by the socket parameter.", 
        "name": "socket_set_nonblock", 
        "overview": "bool socket_set_nonblock ( resource $socket )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }
        ], 
        "path": "php/function.socket-set-nonblock", 
        "type": "Networking"
    }, 
    "socket_set_option": {
        "description": "The socket_set_option() function sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket.", 
        "name": "socket_set_option", 
        "overview": "bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create() or socket_accept().", 
                "name": "socket"
            }, 
            {
                "descr": "The level parameter specifies the protocol level at which the option resides. ", 
                "name": "level"
            }, 
            {
                "descr": "The available socket options are the same as those for the socket_get_option() function.", 
                "name": "optname"
            }, 
            {
                "descr": "The option value.", 
                "name": "optval"
            }
        ], 
        "path": "php/function.socket-set-option", 
        "type": "Networking"
    }, 
    "socket_shutdown": {
        "description": "The socket_shutdown() function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket", 
        "name": "socket_shutdown", 
        "overview": "bool socket_shutdown ( resource $socket [, int $how = 2 ] )", 
        "parameters": [
            {
                "descr": "A valid socket resource created with socket_create().", 
                "name": "socket"
            }, 
            {
                "descr": "The value of how can be one of the following: possible values for how 0  Shutdown socket reading  1  Shutdown socket writing  2  Shutdown socket reading and writing", 
                "name": "how"
            }
        ], 
        "path": "php/function.socket-shutdown", 
        "type": "Networking"
    }, 
    "socket_strerror": {
        "description": "socket_strerror() takes as its errno parameter a socket error code as returned by socket_last_error() and returns the corresponding explanatory text.", 
        "name": "socket_strerror", 
        "overview": "string socket_strerror ( int $errno )", 
        "parameters": [
            {
                "descr": "A valid socket error number, likely produced by socket_last_error().", 
                "name": "errno"
            }
        ], 
        "path": "php/function.socket-strerror", 
        "type": "Networking"
    }, 
    "socket_write": {
        "description": "The function socket_write() writes to the socket from the given buffer.", 
        "name": "socket_write", 
        "overview": "int socket_write ( resource $socket , string $buffer [, int $length = 0 ] )", 
        "parameters": [
            {
                "descr": "The buffer to be written.", 
                "name": "socket   buffer"
            }, 
            {
                "descr": "The optional parameter length can specify an alternate length of bytes written to the socket. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.socket-write", 
        "type": "Networking"
    }, 
    "solr_get_version": {
        "description": "This function returns the current version of the extension as a string.", 
        "name": "solr_get_version", 
        "overview": "string solr_get_version ( void )", 
        "parameters": [], 
        "path": "php/function.solr-get-version", 
        "type": "Solr"
    }, 
    "sort": {
        "description": "This function sorts an array. Elements will be arranged from lowest to highest when this function has completed.", 
        "name": "sort", 
        "overview": "bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The optional second parameter sort_flags may be used to modify the sorting behavior using these values:   Sorting type flags:  SORT_REGULAR - compare items normally (don't change types)   SORT_NUMERIC - compare items numerically   SORT_STRING - compare items as strings    SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale()     SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort()     SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively", 
                "name": "sort_flags"
            }
        ], 
        "path": "php/function.sort", 
        "type": "Array"
    }, 
    "soundex": {
        "description": "Calculates the soundex key of str.", 
        "name": "soundex", 
        "overview": "string soundex ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.soundex", 
        "type": "String"
    }, 
    "spl_autoload": {
        "description": "This function is intended to be used as a default implementation for __autoload(). If nothing else is specified and spl_autoload_register() is called without any parameters then this function will be used for any later call to __autoload().", 
        "name": "spl_autoload", 
        "overview": "void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )", 
        "parameters": [
            {
                "descr": "The lowercased name of the class (and namespace) being instantiated.", 
                "name": "class_name"
            }, 
            {
                "descr": "By default it checks all include paths to contain filenames built up by the lowercase class name appended by the filename extensions .inc and .php.", 
                "name": "file_extensions"
            }
        ], 
        "path": "php/function.spl-autoload", 
        "type": "SPL"
    }, 
    "spl_autoload_call": {
        "description": "This function can be used to manually search for a class or interface using the registered __autoload functions.", 
        "name": "spl_autoload_call", 
        "overview": "void spl_autoload_call ( string $class_name )", 
        "parameters": [
            {
                "descr": "The class name being searched.", 
                "name": "class_name"
            }
        ], 
        "path": "php/function.spl-autoload-call", 
        "type": "SPL"
    }, 
    "spl_autoload_extensions": {
        "description": "This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using.", 
        "name": "spl_autoload_extensions", 
        "overview": "string spl_autoload_extensions ([ string $file_extensions ] )", 
        "parameters": [
            {
                "descr": "When calling without an argument, it simply returns the current list of extensions each separated by comma. ", 
                "name": "file_extensions"
            }
        ], 
        "path": "php/function.spl-autoload-extensions", 
        "type": "SPL"
    }, 
    "spl_autoload_functions": {
        "description": "Get all registered __autoload() functions.", 
        "name": "spl_autoload_functions", 
        "overview": "array spl_autoload_functions ( void )", 
        "parameters": [], 
        "path": "php/function.spl-autoload-functions", 
        "type": "SPL"
    }, 
    "spl_autoload_register": {
        "description": "Register a function with the spl provided __autoload stack. If the stack is not yet activated it will be activated.", 
        "name": "spl_autoload_register", 
        "overview": "bool spl_autoload_register ([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]] )", 
        "parameters": [
            {
                "descr": "The autoload function being registered. ", 
                "name": "autoload_function"
            }, 
            {
                "descr": "This parameter specifies whether spl_autoload_register() should throw exceptions when the autoload_function cannot be registered.", 
                "name": "throw"
            }, 
            {
                "descr": "If true, spl_autoload_register() will prepend the autoloader on the autoload stack instead of appending it.", 
                "name": "prepend"
            }
        ], 
        "path": "php/function.spl-autoload-register", 
        "type": "SPL"
    }, 
    "spl_autoload_unregister": {
        "description": "Unregister a function from the spl provided __autoload stack. If the stack is activated and empty after unregistering the given function then it will be deactivated.", 
        "name": "spl_autoload_unregister", 
        "overview": "bool spl_autoload_unregister ( mixed $autoload_function )", 
        "parameters": [
            {
                "descr": "The autoload function being unregistered.", 
                "name": "autoload_function"
            }
        ], 
        "path": "php/function.spl-autoload-unregister", 
        "type": "SPL"
    }, 
    "spl_classes": {
        "description": "This function returns an array with the current available SPL classes.", 
        "name": "spl_classes", 
        "overview": "array spl_classes ( void )", 
        "parameters": [], 
        "path": "php/function.spl-classes", 
        "type": "SPL"
    }, 
    "spl_object_hash": {
        "description": "This function returns a unique identifier for the object. This id can be used as a hash key for storing objects or for identifying an object.", 
        "name": "spl_object_hash", 
        "overview": "string spl_object_hash ( object $obj )", 
        "parameters": [
            {
                "descr": "Any object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.spl-object-hash", 
        "type": "SPL"
    }, 
    "split": {
        "description": "Splits a string into array by regular expression.", 
        "name": "split", 
        "overview": "array split ( string $pattern , string $string [, int $limit = -1 ] )", 
        "parameters": [
            {
                "descr": "Case sensitive regular expression. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If limit is set, the returned array will contain a maximum of limit elements with the last element containing the whole rest of string.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.split", 
        "type": "String"
    }, 
    "spliti": {
        "description": "Splits a string into array by regular expression.", 
        "name": "spliti", 
        "overview": "array spliti ( string $pattern , string $string [, int $limit = -1 ] )", 
        "parameters": [
            {
                "descr": "Case insensitive regular expression. ", 
                "name": "pattern"
            }, 
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "If limit is set, the returned array will contain a maximum of limit elements with the last element containing the whole rest of string.", 
                "name": "limit"
            }
        ], 
        "path": "php/function.spliti", 
        "type": "String"
    }, 
    "sprintf": {
        "description": "Returns a string produced according to the formatting string format.", 
        "name": "sprintf", 
        "overview": "string sprintf ( string $format [, mixed $args [, mixed $... ]] )", 
        "parameters": [
            {
                "descr": "The format string is composed of zero or more directives: ordinary characters (excluding %) that are copied directly to the result, and conversion specifications, each of which results in fetching its own parameter. This applies to both sprintf() and printf().   Each conversion specification consists of a percent sign (%), followed by one or more of these elements, in order:   An optional sign specifier that forces a sign (- or +) to be used on a number. By default, only the - sign is used on a number if it's negative. This specifier forces positive numbers to have the + sign attached as well, and was added in PHP 4.3.0.     An optional padding specifier that says what character will be used for padding the results to the right string size. This may be a space character or a 0 (zero character). The default is to pad with spaces. An alternate padding character can be specified by prefixing it with a single quote ('). See the examples below.     An optional alignment specifier that says if the result should be left-justified or right-justified. The default is right-justified; a - character here will make it left-justified.     An optional number, a width specifier that says how many characters (minimum) this conversion should result in.     An optional precision specifier in the form of a period (`.') followed by an optional decimal digit string that says how many decimal digits should be displayed for floating-point numbers. When using this specifier on a string, it acts as a cutoff point, setting a maximum character limit to the string.     A type specifier that says what type the argument data should be treated as. Possible types:  % - a literal percent character. No argument is required.   b - the argument is treated as an integer, and presented as a binary number.   c - the argument is treated as an integer, and presented as the character with that ASCII value.   d - the argument is treated as an integer, and presented as a (signed) decimal number.   e - the argument is treated as scientific notation (e.g. 1.2e+2). The precision specifier stands for the number of digits after the decimal point since PHP 5.2.1. In earlier versions, it was taken as number of significant digits (one less).   E - like %e but uses uppercase letter (e.g. 1.2E+2).   f - the argument is treated as a float, and presented as a floating-point number (locale aware).   F - the argument is treated as a float, and presented as a floating-point number (non-locale aware). Available since PHP 4.3.10 and PHP 5.0.3.   g - shorter of %e and %f.   G - shorter of %E and %f.   o - the argument is treated as an integer, and presented as an octal number.   s - the argument is treated as and presented as a string.   u - the argument is treated as an integer, and presented as an unsigned decimal number.   x - the argument is treated as an integer and presented as a hexadecimal number (with lowercase letters).   X - the argument is treated as an integer and presented as a hexadecimal number (with uppercase letters).    Variables will be co-erced to a suitable type for the specifier: Type Handling Type Specifiers string s integer  d, u, c, o, x, X, b  double  g, G, e, E, f, F  Warning  Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results    The format string supports argument numbering/swapping. Here is an example:  Example #1 Argument swapping  <?php$num\u00a0=\u00a05;$location\u00a0=\u00a0'tree';$format\u00a0=\u00a0'There\u00a0are\u00a0%d\u00a0monkeys\u00a0in\u00a0the\u00a0%s';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   This will output \"There are 5 monkeys in the tree\". But imagine we are creating a format string in a separate file, commonly because we would like to internationalize it and we rewrite it as:  Example #2 Argument swapping  <?php$format\u00a0=\u00a0'The\u00a0%s\u00a0contains\u00a0%d\u00a0monkeys';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   We now have a problem. The order of the placeholders in the format string does not match the order of the arguments in the code. We would like to leave the code as is and simply indicate in the format string which arguments the placeholders refer to. We would write the format string like this instead:  Example #3 Argument swapping  <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   An added benefit here is that you can repeat the placeholders without adding more arguments in the code. For example:  Example #4 Argument swapping  <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0That\\'s\u00a0a\u00a0nice\u00a0%2$s\u00a0full\u00a0of\u00a0%1$d\u00a0monkeys.';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>   When using argument swapping, the n$ position specifier must come immediately after the percent sign (%), before any other specifiers, as shown in the example below.  Example #5 Position specifier with other specifiers  <?php$format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$04d\u00a0monkeys';echo\u00a0sprintf($format,\u00a0$num,\u00a0$location);?>  The above example will output:  The tree contains 0005 monkeys   Note:  Attempting to use a position specifier greater than PHP_INT_MAX will result in sprintf() generating warnings.   Warning  The c type specifier ignores padding and width", 
                "name": "format"
            }
        ], 
        "path": "php/function.sprintf", 
        "type": "String"
    }, 
    "sql_regcase": {
        "description": "Creates a regular expression for a case insensitive match.", 
        "name": "sql_regcase", 
        "overview": "string sql_regcase ( string $string )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.sql-regcase", 
        "type": "String"
    }, 
    "sqlsrv_begin_transaction": {
        "description": "The transaction begun by sqlsrv_begin_transaction() includes all statements that were executed after the call to sqlsrv_begin_transaction() and before calls to sqlsrv_rollback() or sqlsrv_commit(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see \u00bb SQLSRV Transactions.", 
        "name": "sqlsrv_begin_transaction", 
        "overview": "bool sqlsrv_begin_transaction ( resource $conn )", 
        "parameters": [
            {
                "descr": "The connection resource returned by a call to sqlsrv_connect().", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-begin-transaction", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_cancel": {
        "description": "Cancels a statement. Any results associated with the statement that have not been consumed are deleted. After sqlsrv_cancel() has been called, the specified statement can be re-executed if it was created with sqlsrv_prepare(). Calling sqlsrv_cancel() is not necessary if all the results associated with the statement have been consumed.", 
        "name": "sqlsrv_cancel", 
        "overview": "bool sqlsrv_cancel ( resource $stmt )", 
        "parameters": [
            {
                "descr": "The statement resource to be cancelled.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-cancel", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_client_info": {
        "description": "Returns information about the client and specified connection", 
        "name": "sqlsrv_client_info", 
        "overview": "array sqlsrv_client_info ( resource $conn )", 
        "parameters": [
            {
                "descr": "The connection about which information is returned.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-client-info", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_close": {
        "description": "Closes an open connection and releases resourses associated with the connection.", 
        "name": "sqlsrv_close", 
        "overview": "bool sqlsrv_close ( resource $conn )", 
        "parameters": [
            {
                "descr": "The connection to be closed.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-close", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_commit": {
        "description": "Commits a transaction that was begun with sqlsrv_begin_transaction(). The connection is returned to auto-commit mode after sqlsrv_commit() is called. The transaction that is committed includes all statements that were executed after the call to sqlsrv_begin_transaction(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see \u00bb SQLSRV Transactions.", 
        "name": "sqlsrv_commit", 
        "overview": "bool sqlsrv_commit ( resource $conn )", 
        "parameters": [
            {
                "descr": "The connection on which the transaction is to be committed.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-commit", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_configure": {
        "description": "Changes the driver error handling and logging configurations.", 
        "name": "sqlsrv_configure", 
        "overview": "bool sqlsrv_configure ( string $setting , mixed $value )", 
        "parameters": [
            {
                "descr": "The name of the setting to set. ", 
                "name": "setting"
            }, 
            {
                "descr": "The value of the specified setting. ", 
                "name": "value"
            }
        ], 
        "path": "php/function.sqlsrv-configure", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_connect": {
        "description": "Opens a connection to a Microsoft SQL Server database. By default, the connection is attempted using Windows Authentication. To connect using SQL Server Authentication, include \"UID\" and \"PWD\" in the connection options array.", 
        "name": "sqlsrv_connect", 
        "overview": "resource sqlsrv_connect ( string $serverName [, array $connectionInfo ] )", 
        "parameters": [
            {
                "descr": "The name of the server to which a connection is established. ", 
                "name": "serverName"
            }, 
            {
                "descr": "An associative array that specifies options for connecting to the server. ", 
                "name": "connectionInfo"
            }
        ], 
        "path": "php/function.sqlsrv-connect", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_errors": {
        "description": "Returns error and warning information about the last SQLSRV operation performed.", 
        "name": "sqlsrv_errors", 
        "overview": "mixed sqlsrv_errors ([ int $errorsOrWarnings ] )", 
        "parameters": [
            {
                "descr": "Determines whether error information, warning information, or both are returned. ", 
                "name": "errorsOrWarnings"
            }
        ], 
        "path": "php/function.sqlsrv-errors", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_execute": {
        "description": "Executes a statement prepared with sqlsrv_prepare(). This function is ideal for executing a prepared statement multiple times with different parameter values.", 
        "name": "sqlsrv_execute", 
        "overview": "bool sqlsrv_execute ( resource $stmt )", 
        "parameters": [
            {
                "descr": "A statement resource returned by sqlsrv_prepare().", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-execute", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_fetch": {
        "description": "Makes the next row in a result set available for reading. Use sqlsrv_get_field() to read the fields of the row.", 
        "name": "sqlsrv_fetch", 
        "overview": "mixed sqlsrv_fetch ( resource $stmt [, int $row [, int $offset ]] )", 
        "parameters": [
            {
                "descr": "A statement resource created by executing sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }, 
            {
                "descr": "The row to be accessed. This parameter can only be used if the specified statement was prepared with a scrollable cursor. ", 
                "name": "row"
            }, 
            {
                "descr": "Specifies the row to be accessed if the row parameter is set to SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.sqlsrv-fetch", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_fetch_array": {
        "description": "Returns the next available row of data as an associative array, a numeric array, or both (the default).", 
        "name": "sqlsrv_fetch_array", 
        "overview": "array sqlsrv_fetch_array ( resource $stmt [, int $fetchType [, int $row [, int $offset ]]] )", 
        "parameters": [
            {
                "descr": "A statement resource returned by sqlsrv_query or sqlsrv_prepare.", 
                "name": "stmt"
            }, 
            {
                "descr": "A predefined constant specifying the type of array to return. ", 
                "name": "fetchType"
            }, 
            {
                "descr": "Specifies the row to access in a result set that uses a scrollable cursor. ", 
                "name": "row"
            }, 
            {
                "descr": "Specifies the row to be accessed if the row parameter is set to SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.sqlsrv-fetch-array", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_fetch_object": {
        "description": "Retrieves the next row of data in a result set as an instance of the specified class with properties that match the row field names and values that correspond to the row field values.", 
        "name": "sqlsrv_fetch_object", 
        "overview": "mixed sqlsrv_fetch_object ( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]] )", 
        "parameters": [
            {
                "descr": "A statement resource created by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }, 
            {
                "descr": "The name of the class to instantiate. ", 
                "name": "className"
            }, 
            {
                "descr": "Values passed to the constructor of the specified class. ", 
                "name": "ctorParams"
            }, 
            {
                "descr": "The row to be accessed. This parameter can only be used if the specified statement was prepared with a scrollable cursor. ", 
                "name": "row"
            }, 
            {
                "descr": "Specifies the row to be accessed if the row parameter is set to SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.sqlsrv-fetch-object", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_field_metadata": {
        "description": "Retrieves metadata for the fields of a statement prepared by sqlsrv_prepare() or sqlsrv_query(). sqlsrv_field_metadata() can be called on a statement before or after statement execution.", 
        "name": "sqlsrv_field_metadata", 
        "overview": "mixed sqlsrv_field_metadata ( resource $stmt )", 
        "parameters": [
            {
                "descr": "The statment resource for which metadata is returned.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-field-metadata", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_free_stmt": {
        "description": "Frees all resources for the specified statement. The statement cannot be used after sqlsrv_free_stmt() has been called on it. If sqlsrv_free_stmt() is called on an in-progress statement that alters server state, statement execution is terminated and the statement is rolled back.", 
        "name": "sqlsrv_free_stmt", 
        "overview": "bool sqlsrv_free_stmt ( resource $stmt )", 
        "parameters": [
            {
                "descr": "The statment for which resources are freed. ", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-free-stmt", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_get_config": {
        "description": "Returns the value of the specified configuration setting.", 
        "name": "sqlsrv_get_config", 
        "overview": "mixed sqlsrv_get_config ( string $setting )", 
        "parameters": [
            {
                "descr": "The name of the setting for which the value is returned. ", 
                "name": "setting"
            }
        ], 
        "path": "php/function.sqlsrv-get-config", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_get_field": {
        "description": "Gets field data from the currently selected row. Fields must be accessed in order. Field indices start at 0.", 
        "name": "sqlsrv_get_field", 
        "overview": "mixed sqlsrv_get_field ( resource $stmt , int $fieldIndex [, int $getAsType ] )", 
        "parameters": [
            {
                "descr": "A statement resource returned by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }, 
            {
                "descr": "The index of the field to be retrieved. ", 
                "name": "fieldIndex"
            }, 
            {
                "descr": "The PHP data type for the returned field data. ", 
                "name": "getAsType"
            }
        ], 
        "path": "php/function.sqlsrv-get-field", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_has_rows": {
        "description": "Indicates whether the specified statement has rows.", 
        "name": "sqlsrv_has_rows", 
        "overview": "bool sqlsrv_has_rows ( resource $stmt )", 
        "parameters": [
            {
                "descr": "A statement resource returned by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-has-rows", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_next_result": {
        "description": "Makes the next result of the specified statement active. Results include result sets, row counts, and output parameters.", 
        "name": "sqlsrv_next_result", 
        "overview": "mixed sqlsrv_next_result ( resource $stmt )", 
        "parameters": [
            {
                "descr": "The statment on which the next result is being called.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-next-result", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_num_fields": {
        "description": "Retrieves the number of fields (columns) on a statement.", 
        "name": "sqlsrv_num_fields", 
        "overview": "mixed sqlsrv_num_fields ( resource $stmt )", 
        "parameters": [
            {
                "descr": "The statment for which the number of fields is returned. ", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-num-fields", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_num_rows": {
        "description": "Retrieves the number of rows in a result set. This function requires that the statment resource be created with a static or keyset cursor. For more information, see sqlsrv_query(), sqlsrv_prepare(), or \u00bb Specifying a Cursor Type and Selecting Rows in the Microsoft SQLSRV documentation.", 
        "name": "sqlsrv_num_rows", 
        "overview": "mixed sqlsrv_num_rows ( resource $stmt )", 
        "parameters": [
            {
                "descr": "The statement for which the row count is returned. ", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-num-rows", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_prepare": {
        "description": "Prepares a query for execution. This function is ideal for preparing a query that will be executed multiple times with different parameter values.", 
        "name": "sqlsrv_prepare", 
        "overview": "mixed sqlsrv_prepare ( resource $conn , string $sql [, array $params [, array $options ]] )", 
        "parameters": [
            {
                "descr": "A connection resource returned by sqlsrv_connect().", 
                "name": "conn"
            }, 
            {
                "descr": "The string that defines the query to be prepared and executed.", 
                "name": "sql"
            }, 
            {
                "descr": "An array specifying parameter information when executing a parameterized query. ", 
                "name": "params"
            }, 
            {
                "descr": "An array specifing query property options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.sqlsrv-prepare", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_query": {
        "description": "Prepares and executes a query.", 
        "name": "sqlsrv_query", 
        "overview": "mixed sqlsrv_query ( resource $conn , string $sql [, array $params [, array $options ]] )", 
        "parameters": [
            {
                "descr": "A connection resource returned by sqlsrv_connect().", 
                "name": "conn"
            }, 
            {
                "descr": "The string that defines the query to be prepared and executed.", 
                "name": "sql"
            }, 
            {
                "descr": "An array specifying parameter information when executing a parameterized query. ", 
                "name": "params"
            }, 
            {
                "descr": "An array specifing query property options. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.sqlsrv-query", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_rollback": {
        "description": "Rolls back a transaction that was begun with sqlsrv_begin_transaction() and returns the connection to auto-commit mode.", 
        "name": "sqlsrv_rollback", 
        "overview": "bool sqlsrv_rollback ( resource $conn )", 
        "parameters": [
            {
                "descr": "The connection resource returned by a call to sqlsrv_connect().", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-rollback", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_rows_affected": {
        "description": "Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed. For information about the number of rows returned by a SELECT query, see sqlsrv_num_rows().", 
        "name": "sqlsrv_rows_affected", 
        "overview": "int sqlsrv_rows_affected ( resource $stmt )", 
        "parameters": [
            {
                "descr": "The executed statement resource for which the number of affected rows is returned.", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-rows-affected", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_send_stream_data": {
        "description": "Send data from parameter streams to the server. Up to 8 KB of data is sent with each call.", 
        "name": "sqlsrv_send_stream_data", 
        "overview": "bool sqlsrv_send_stream_data ( resource $stmt )", 
        "parameters": [
            {
                "descr": "A statement resource returned by sqlsrv_query() or sqlsrv_execute().", 
                "name": "stmt"
            }
        ], 
        "path": "php/function.sqlsrv-send-stream-data", 
        "type": "Database/SQL Server"
    }, 
    "sqlsrv_server_info": {
        "description": "Returns information about the server.", 
        "name": "sqlsrv_server_info", 
        "overview": "array sqlsrv_server_info ( resource $conn )", 
        "parameters": [
            {
                "descr": "The connection resource that connects the client and the server.", 
                "name": "conn"
            }
        ], 
        "path": "php/function.sqlsrv-server-info", 
        "type": "Database/SQL Server"
    }, 
    "sqrt": {
        "description": "Returns the square root of arg.", 
        "name": "sqrt", 
        "overview": "float sqrt ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.sqrt", 
        "type": "Mathematics"
    }, 
    "srand": {
        "description": "Seeds the random number generator with seed or with a random value if no seed is given.", 
        "name": "srand", 
        "overview": "void srand ([ int $seed ] )", 
        "parameters": [
            {
                "descr": "Optional seed value", 
                "name": "seed"
            }
        ], 
        "path": "php/function.srand", 
        "type": "Mathematics"
    }, 
    "sscanf": {
        "description": "The function sscanf() is the input analog of printf(). sscanf() reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf().", 
        "name": "sscanf", 
        "overview": "mixed sscanf ( string $str , string $format [, mixed &$... ] )", 
        "parameters": [
            {
                "descr": "The input string being parsed.", 
                "name": "str"
            }, 
            {
                "descr": "The interpreted format for str, which is described in the documentation for sprintf() with following differences:  Function is not locale-aware. ", 
                "name": "format"
            }, 
            {
                "descr": "Optionally pass in variables by reference that will contain the parsed values.", 
                "name": "..."
            }
        ], 
        "path": "php/function.sscanf", 
        "type": "String"
    }, 
    "ssh2_auth_agent": {
        "description": "Authenticate over SSH using the ssh agent", 
        "name": "ssh2_auth_agent", 
        "overview": "bool ssh2_auth_agent ( resource $session , string $username )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Remote user name.", 
                "name": "username"
            }
        ], 
        "path": "php/function.ssh2-auth-agent", 
        "type": "Networking"
    }, 
    "ssh2_auth_hostbased_file": {
        "description": "Authenticate using a public hostkey read from a file.", 
        "name": "ssh2_auth_hostbased_file", 
        "overview": "bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "If privkeyfile is encrypted (which it should be), the passphrase must be provided.", 
                "name": "username   hostname   pubkeyfile   privkeyfile   passphrase"
            }, 
            {
                "descr": "If local_username is omitted, then the value for username will be used for it.", 
                "name": "local_username"
            }
        ], 
        "path": "php/function.ssh2-auth-hostbased-file", 
        "type": "Networking"
    }, 
    "ssh2_auth_none": {
        "description": "Attempt \"none\" authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods.", 
        "name": "ssh2_auth_none", 
        "overview": "mixed ssh2_auth_none ( resource $session , string $username )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Remote user name.", 
                "name": "username"
            }
        ], 
        "path": "php/function.ssh2-auth-none", 
        "type": "Networking"
    }, 
    "ssh2_auth_password": {
        "description": "Authenticate over SSH using a plain password. Since version 0.12 this function also supports keyboard_interactive method.", 
        "name": "ssh2_auth_password", 
        "overview": "bool ssh2_auth_password ( resource $session , string $username , string $password )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Remote user name.", 
                "name": "username"
            }, 
            {
                "descr": "Password for username", 
                "name": "password"
            }
        ], 
        "path": "php/function.ssh2-auth-password", 
        "type": "Networking"
    }, 
    "ssh2_auth_pubkey_file": {
        "description": "Authenticate using a public key read from a file.", 
        "name": "ssh2_auth_pubkey_file", 
        "overview": "bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "The public key file needs to be in OpenSSH's format. ", 
                "name": "username   pubkeyfile"
            }, 
            {
                "descr": "If privkeyfile is encrypted (which it should be), the passphrase must be provided.", 
                "name": "privkeyfile   passphrase"
            }
        ], 
        "path": "php/function.ssh2-auth-pubkey-file", 
        "type": "Networking"
    }, 
    "ssh2_connect": {
        "description": "Establish a connection to a remote SSH server.", 
        "name": "ssh2_connect", 
        "overview": "resource ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] )", 
        "parameters": [
            {
                "descr": "methods may be an associative array with up to four parameters as described below. ", 
                "name": "host   port   methods"
            }, 
            {
                "descr": "callbacks may be an associative array with any or all of the following parameters. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.ssh2-connect", 
        "type": "Networking"
    }, 
    "ssh2_exec": {
        "description": "Execute a command at the remote end and allocate a channel for it.", 
        "name": "ssh2_exec", 
        "overview": "resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "env may be passed as an associative array of name/value pairs to set in the target environment.", 
                "name": "command   pty   env"
            }, 
            {
                "descr": "Width of the virtual terminal.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the virtual terminal.", 
                "name": "height"
            }, 
            {
                "descr": "width_height_type should be one of SSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.", 
                "name": "width_height_type"
            }
        ], 
        "path": "php/function.ssh2-exec", 
        "type": "Networking"
    }, 
    "ssh2_fetch_stream": {
        "description": "Fetches an alternate substream associated with an SSH2 channel stream. The SSH2 protocol currently defines only one substream, STDERR, which has a substream ID of SSH2_STREAM_STDERR (defined as 1).", 
        "name": "ssh2_fetch_stream", 
        "overview": "resource ssh2_fetch_stream ( resource $channel , int $streamid )", 
        "parameters": [
            {
                "descr": "An SSH2 channel stream.", 
                "name": "channel   streamid"
            }
        ], 
        "path": "php/function.ssh2-fetch-stream", 
        "type": "Networking"
    }, 
    "ssh2_fingerprint": {
        "description": "Returns a server hostkey hash from an active session.", 
        "name": "ssh2_fingerprint", 
        "overview": "string ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "flags may be either of SSH2_FINGERPRINT_MD5 or SSH2_FINGERPRINT_SHA1 logically ORed with SSH2_FINGERPRINT_HEX or SSH2_FINGERPRINT_RAW.", 
                "name": "flags"
            }
        ], 
        "path": "php/function.ssh2-fingerprint", 
        "type": "Networking"
    }, 
    "ssh2_methods_negotiated": {
        "description": "Returns list of negotiated methods.", 
        "name": "ssh2_methods_negotiated", 
        "overview": "array ssh2_methods_negotiated ( resource $session )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }
        ], 
        "path": "php/function.ssh2-methods-negotiated", 
        "type": "Networking"
    }, 
    "ssh2_publickey_add": {
        "description": "", 
        "name": "ssh2_publickey_add", 
        "overview": "bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite = false [, array $attributes ]] )", 
        "parameters": [
            {
                "descr": "Publickey Subsystem resource created by ssh2_publickey_init().", 
                "name": "pkey"
            }, 
            {
                "descr": "Publickey algorithm (e.g.): ssh-dss, ssh-rsa", 
                "name": "algoname"
            }, 
            {
                "descr": "Publickey blob as raw binary data", 
                "name": "blob"
            }, 
            {
                "descr": "If the specified key already exists, should it be overwritten?", 
                "name": "overwrite"
            }, 
            {
                "descr": "Associative array of attributes to assign to this public key. ", 
                "name": "attributes"
            }
        ], 
        "path": "php/function.ssh2-publickey-add", 
        "type": "Networking"
    }, 
    "ssh2_publickey_init": {
        "description": "Request the Publickey subsystem from an already connected SSH2 server.", 
        "name": "ssh2_publickey_init", 
        "overview": "resource ssh2_publickey_init ( resource $session )", 
        "parameters": [], 
        "path": "php/function.ssh2-publickey-init", 
        "type": "Networking"
    }, 
    "ssh2_publickey_list": {
        "description": "List currently authorized publickeys.", 
        "name": "ssh2_publickey_list", 
        "overview": "array ssh2_publickey_list ( resource $pkey )", 
        "parameters": [
            {
                "descr": "Publickey Subsystem resource", 
                "name": "pkey"
            }
        ], 
        "path": "php/function.ssh2-publickey-list", 
        "type": "Networking"
    }, 
    "ssh2_publickey_remove": {
        "description": "Removes an authorized publickey.", 
        "name": "ssh2_publickey_remove", 
        "overview": "bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob )", 
        "parameters": [
            {
                "descr": "Publickey Subsystem Resource", 
                "name": "pkey"
            }, 
            {
                "descr": "Publickey algorithm (e.g.): ssh-dss, ssh-rsa", 
                "name": "algoname"
            }, 
            {
                "descr": "Publickey blob as raw binary data", 
                "name": "blob"
            }
        ], 
        "path": "php/function.ssh2-publickey-remove", 
        "type": "Networking"
    }, 
    "ssh2_scp_recv": {
        "description": "Copy a file from the remote server to the local filesystem using the SCP protocol.", 
        "name": "ssh2_scp_recv", 
        "overview": "bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Path to the remote file.", 
                "name": "remote_file"
            }, 
            {
                "descr": "Path to the local file.", 
                "name": "local_file"
            }
        ], 
        "path": "php/function.ssh2-scp-recv", 
        "type": "Networking"
    }, 
    "ssh2_scp_send": {
        "description": "Copy a file from the local filesystem to the remote server using the SCP protocol.", 
        "name": "ssh2_scp_send", 
        "overview": "bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ] )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "Path to the local file.", 
                "name": "local_file"
            }, 
            {
                "descr": "Path to the remote file.", 
                "name": "remote_file"
            }, 
            {
                "descr": "The file will be created with the mode specified by create_mode.", 
                "name": "create_mode"
            }
        ], 
        "path": "php/function.ssh2-scp-send", 
        "type": "Networking"
    }, 
    "ssh2_sftp": {
        "description": "Request the SFTP subsystem from an already connected SSH2 server.", 
        "name": "ssh2_sftp", 
        "overview": "resource ssh2_sftp ( resource $session )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }
        ], 
        "path": "php/function.ssh2-sftp", 
        "type": "Networking"
    }, 
    "ssh2_sftp_chmod": {
        "description": "Attempts to change the mode of the specified file to that given in mode.", 
        "name": "ssh2_sftp_chmod", 
        "overview": "bool ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Permissions on the file. See the chmod() for more details on this parameter.", 
                "name": "mode"
            }
        ], 
        "path": "php/function.ssh2-sftp-chmod", 
        "type": "Networking"
    }, 
    "ssh2_sftp_lstat": {
        "description": "Stats a symbolic link on the remote filesystem without following the link.", 
        "name": "ssh2_sftp_lstat", 
        "overview": "array ssh2_sftp_lstat ( resource $sftp , string $path )", 
        "parameters": [
            {
                "descr": "Path to the remote symbolic link.", 
                "name": "sftp   path"
            }
        ], 
        "path": "php/function.ssh2-sftp-lstat", 
        "type": "Networking"
    }, 
    "ssh2_sftp_mkdir": {
        "description": "Creates a directory on the remote file server with permissions set to mode.", 
        "name": "ssh2_sftp_mkdir", 
        "overview": "bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode = 0777 [, bool $recursive = false ]] )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Path of the new directory.", 
                "name": "dirname"
            }, 
            {
                "descr": "Permissions on the new directory.", 
                "name": "mode"
            }, 
            {
                "descr": "If recursive is TRUE any parent directories required for dirname will be automatically created as well.", 
                "name": "recursive"
            }
        ], 
        "path": "php/function.ssh2-sftp-mkdir", 
        "type": "Networking"
    }, 
    "ssh2_sftp_readlink": {
        "description": "Returns the target of a symbolic link.", 
        "name": "ssh2_sftp_readlink", 
        "overview": "string ssh2_sftp_readlink ( resource $sftp , string $link )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Path of the symbolic link.", 
                "name": "link"
            }
        ], 
        "path": "php/function.ssh2-sftp-readlink", 
        "type": "Networking"
    }, 
    "ssh2_sftp_realpath": {
        "description": "Translates filename into the effective real path on the remote filesystem.", 
        "name": "ssh2_sftp_realpath", 
        "overview": "string ssh2_sftp_realpath ( resource $sftp , string $filename )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-realpath", 
        "type": "Networking"
    }, 
    "ssh2_sftp_rename": {
        "description": "Renames a file on the remote filesystem.", 
        "name": "ssh2_sftp_rename", 
        "overview": "bool ssh2_sftp_rename ( resource $sftp , string $from , string $to )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "The current file that is being renamed.", 
                "name": "from"
            }, 
            {
                "descr": "The new file name that replaces from.", 
                "name": "to"
            }
        ], 
        "path": "php/function.ssh2-sftp-rename", 
        "type": "Networking"
    }, 
    "ssh2_sftp_rmdir": {
        "description": "Removes a directory from the remote file server.", 
        "name": "ssh2_sftp_rmdir", 
        "overview": "bool ssh2_sftp_rmdir ( resource $sftp , string $dirname )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-rmdir", 
        "type": "Networking"
    }, 
    "ssh2_sftp_stat": {
        "description": "Stats a file on the remote filesystem following any symbolic links.", 
        "name": "ssh2_sftp_stat", 
        "overview": "array ssh2_sftp_stat ( resource $sftp , string $path )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-stat", 
        "type": "Networking"
    }, 
    "ssh2_sftp_symlink": {
        "description": "Creates a symbolic link named link on the remote filesystem pointing to target.", 
        "name": "ssh2_sftp_symlink", 
        "overview": "bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }, 
            {
                "descr": "Target of the symbolic link.", 
                "name": "target"
            }
        ], 
        "path": "php/function.ssh2-sftp-symlink", 
        "type": "Networking"
    }, 
    "ssh2_sftp_unlink": {
        "description": "Deletes a file on the remote filesystem.", 
        "name": "ssh2_sftp_unlink", 
        "overview": "bool ssh2_sftp_unlink ( resource $sftp , string $filename )", 
        "parameters": [
            {
                "descr": "An SSH2 SFTP resource opened by ssh2_sftp().", 
                "name": "sftp"
            }
        ], 
        "path": "php/function.ssh2-sftp-unlink", 
        "type": "Networking"
    }, 
    "ssh2_shell": {
        "description": "Open a shell at the remote end and allocate a stream for it.", 
        "name": "ssh2_shell", 
        "overview": "resource ssh2_shell ( resource $session [, string $term_type = \"vanilla\" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }, 
            {
                "descr": "term_type should correspond to one of the entries in the target system's /etc/termcap file.", 
                "name": "term_type"
            }, 
            {
                "descr": "env may be passed as an associative array of name/value pairs to set in the target environment.", 
                "name": "env"
            }, 
            {
                "descr": "Width of the virtual terminal.", 
                "name": "width"
            }, 
            {
                "descr": "Height of the virtual terminal.", 
                "name": "height"
            }, 
            {
                "descr": "width_height_type should be one of SSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.", 
                "name": "width_height_type"
            }
        ], 
        "path": "php/function.ssh2-shell", 
        "type": "Networking"
    }, 
    "ssh2_tunnel": {
        "description": "Open a socket stream to an arbitrary host/port by way of the currently connected SSH server.", 
        "name": "ssh2_tunnel", 
        "overview": "resource ssh2_tunnel ( resource $session , string $host , int $port )", 
        "parameters": [
            {
                "descr": "An SSH connection link identifier, obtained from a call to ssh2_connect().", 
                "name": "session"
            }
        ], 
        "path": "php/function.ssh2-tunnel", 
        "type": "Networking"
    }, 
    "stat": {
        "description": "Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink.", 
        "name": "stat", 
        "overview": "array stat ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.stat", 
        "type": "File System"
    }, 
    "stats_absolute_deviation": {
        "description": "", 
        "name": "stats_absolute_deviation", 
        "overview": "float stats_absolute_deviation ( array $a )", 
        "parameters": [], 
        "path": "php/function.stats-absolute-deviation", 
        "type": "Mathematics"
    }, 
    "stats_cdf_beta": {
        "description": "Method Cumulative distribution function (P) is calculated directly by code associated with the following reference. DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit Computation of the Incomplete Beta Function Ratios. ACM Trans. Math. Softw. 18 (1993), 360-373. Computation of other parameters involve a search for a value that produces the desired value of P. The search relies on the monotonicity of P with the other parameter. Note The beta density is proportional to t^(A-1) * (1-t)^(B-1) Arguments P -- The integral from 0 to X of the chi-square distribution. Input range: [0, 1]. Q -- 1-P. Input range: [0, 1]. P + Q = 1.0. X -- Upper limit of integration of beta density. Input range: [0,1]. Search range: [0,1] Y -- 1-X. Input range: [0,1]. Search range: [0,1] X + Y = 1.0. A -- The first parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] B -- The second parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] STATUS -- 0 if calculation completed correctly -I if input parameter number I is out of range 1 if answer appears to be lower than lowest search bound 2 if answer appears to be higher than greatest search bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1 BOUND -- Undefined if STATUS is 0 Bound exceeded by parameter number I if STATUS is negative. Lower search bound if STATUS is 1. Upper search bound if STATUS is 2.", 
        "name": "stats_cdf_beta", 
        "overview": "float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [
            {
                "descr": "Integer indicating which of the next four argument values is to be calculated from the others. ", 
                "name": "par1   par2   par3   which"
            }
        ], 
        "path": "php/function.stats-cdf-beta", 
        "type": "Mathematics"
    }, 
    "stats_cdf_binomial": {
        "description": "", 
        "name": "stats_cdf_binomial", 
        "overview": "float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-binomial", 
        "type": "Mathematics"
    }, 
    "stats_cdf_cauchy": {
        "description": "", 
        "name": "stats_cdf_cauchy", 
        "overview": "float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-cauchy", 
        "type": "Mathematics"
    }, 
    "stats_cdf_chisquare": {
        "description": "", 
        "name": "stats_cdf_chisquare", 
        "overview": "float stats_cdf_chisquare ( float $par1 , float $par2 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-chisquare", 
        "type": "Mathematics"
    }, 
    "stats_cdf_exponential": {
        "description": "", 
        "name": "stats_cdf_exponential", 
        "overview": "float stats_cdf_exponential ( float $par1 , float $par2 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-exponential", 
        "type": "Mathematics"
    }, 
    "stats_cdf_f": {
        "description": "", 
        "name": "stats_cdf_f", 
        "overview": "float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-f", 
        "type": "Mathematics"
    }, 
    "stats_cdf_gamma": {
        "description": "", 
        "name": "stats_cdf_gamma", 
        "overview": "float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-gamma", 
        "type": "Mathematics"
    }, 
    "stats_cdf_laplace": {
        "description": "", 
        "name": "stats_cdf_laplace", 
        "overview": "float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-laplace", 
        "type": "Mathematics"
    }, 
    "stats_cdf_logistic": {
        "description": "", 
        "name": "stats_cdf_logistic", 
        "overview": "float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-logistic", 
        "type": "Mathematics"
    }, 
    "stats_cdf_negative_binomial": {
        "description": "", 
        "name": "stats_cdf_negative_binomial", 
        "overview": "float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-negative-binomial", 
        "type": "Mathematics"
    }, 
    "stats_cdf_noncentral_chisquare": {
        "description": "", 
        "name": "stats_cdf_noncentral_chisquare", 
        "overview": "float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-noncentral-chisquare", 
        "type": "Mathematics"
    }, 
    "stats_cdf_noncentral_f": {
        "description": "", 
        "name": "stats_cdf_noncentral_f", 
        "overview": "float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-noncentral-f", 
        "type": "Mathematics"
    }, 
    "stats_cdf_poisson": {
        "description": "", 
        "name": "stats_cdf_poisson", 
        "overview": "float stats_cdf_poisson ( float $par1 , float $par2 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-poisson", 
        "type": "Mathematics"
    }, 
    "stats_cdf_t": {
        "description": "", 
        "name": "stats_cdf_t", 
        "overview": "float stats_cdf_t ( float $par1 , float $par2 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-t", 
        "type": "Mathematics"
    }, 
    "stats_cdf_uniform": {
        "description": "", 
        "name": "stats_cdf_uniform", 
        "overview": "float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-uniform", 
        "type": "Mathematics"
    }, 
    "stats_cdf_weibull": {
        "description": "", 
        "name": "stats_cdf_weibull", 
        "overview": "float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-cdf-weibull", 
        "type": "Mathematics"
    }, 
    "stats_covariance": {
        "description": "", 
        "name": "stats_covariance", 
        "overview": "float stats_covariance ( array $a , array $b )", 
        "parameters": [], 
        "path": "php/function.stats-covariance", 
        "type": "Mathematics"
    }, 
    "stats_den_uniform": {
        "description": "", 
        "name": "stats_den_uniform", 
        "overview": "float stats_den_uniform ( float $x , float $a , float $b )", 
        "parameters": [], 
        "path": "php/function.stats-den-uniform", 
        "type": "Mathematics"
    }, 
    "stats_dens_beta": {
        "description": "", 
        "name": "stats_dens_beta", 
        "overview": "float stats_dens_beta ( float $x , float $a , float $b )", 
        "parameters": [], 
        "path": "php/function.stats-dens-beta", 
        "type": "Mathematics"
    }, 
    "stats_dens_cauchy": {
        "description": "", 
        "name": "stats_dens_cauchy", 
        "overview": "float stats_dens_cauchy ( float $x , float $ave , float $stdev )", 
        "parameters": [], 
        "path": "php/function.stats-dens-cauchy", 
        "type": "Mathematics"
    }, 
    "stats_dens_chisquare": {
        "description": "", 
        "name": "stats_dens_chisquare", 
        "overview": "float stats_dens_chisquare ( float $x , float $dfr )", 
        "parameters": [], 
        "path": "php/function.stats-dens-chisquare", 
        "type": "Mathematics"
    }, 
    "stats_dens_exponential": {
        "description": "", 
        "name": "stats_dens_exponential", 
        "overview": "float stats_dens_exponential ( float $x , float $scale )", 
        "parameters": [], 
        "path": "php/function.stats-dens-exponential", 
        "type": "Mathematics"
    }, 
    "stats_dens_f": {
        "description": "", 
        "name": "stats_dens_f", 
        "overview": "float stats_dens_f ( float $x , float $dfr1 , float $dfr2 )", 
        "parameters": [], 
        "path": "php/function.stats-dens-f", 
        "type": "Mathematics"
    }, 
    "stats_dens_gamma": {
        "description": "", 
        "name": "stats_dens_gamma", 
        "overview": "float stats_dens_gamma ( float $x , float $shape , float $scale )", 
        "parameters": [], 
        "path": "php/function.stats-dens-gamma", 
        "type": "Mathematics"
    }, 
    "stats_dens_laplace": {
        "description": "", 
        "name": "stats_dens_laplace", 
        "overview": "float stats_dens_laplace ( float $x , float $ave , float $stdev )", 
        "parameters": [], 
        "path": "php/function.stats-dens-laplace", 
        "type": "Mathematics"
    }, 
    "stats_dens_logistic": {
        "description": "", 
        "name": "stats_dens_logistic", 
        "overview": "float stats_dens_logistic ( float $x , float $ave , float $stdev )", 
        "parameters": [], 
        "path": "php/function.stats-dens-logistic", 
        "type": "Mathematics"
    }, 
    "stats_dens_negative_binomial": {
        "description": "", 
        "name": "stats_dens_negative_binomial", 
        "overview": "float stats_dens_negative_binomial ( float $x , float $n , float $pi )", 
        "parameters": [], 
        "path": "php/function.stats-dens-negative-binomial", 
        "type": "Mathematics"
    }, 
    "stats_dens_normal": {
        "description": "", 
        "name": "stats_dens_normal", 
        "overview": "float stats_dens_normal ( float $x , float $ave , float $stdev )", 
        "parameters": [], 
        "path": "php/function.stats-dens-normal", 
        "type": "Mathematics"
    }, 
    "stats_dens_pmf_binomial": {
        "description": "", 
        "name": "stats_dens_pmf_binomial", 
        "overview": "float stats_dens_pmf_binomial ( float $x , float $n , float $pi )", 
        "parameters": [], 
        "path": "php/function.stats-dens-pmf-binomial", 
        "type": "Mathematics"
    }, 
    "stats_dens_pmf_hypergeometric": {
        "description": "", 
        "name": "stats_dens_pmf_hypergeometric", 
        "overview": "float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 )", 
        "parameters": [], 
        "path": "php/function.stats-dens-pmf-hypergeometric", 
        "type": "Mathematics"
    }, 
    "stats_dens_pmf_poisson": {
        "description": "", 
        "name": "stats_dens_pmf_poisson", 
        "overview": "float stats_dens_pmf_poisson ( float $x , float $lb )", 
        "parameters": [], 
        "path": "php/function.stats-dens-pmf-poisson", 
        "type": "Mathematics"
    }, 
    "stats_dens_t": {
        "description": "", 
        "name": "stats_dens_t", 
        "overview": "float stats_dens_t ( float $x , float $dfr )", 
        "parameters": [], 
        "path": "php/function.stats-dens-t", 
        "type": "Mathematics"
    }, 
    "stats_dens_weibull": {
        "description": "", 
        "name": "stats_dens_weibull", 
        "overview": "float stats_dens_weibull ( float $x , float $a , float $b )", 
        "parameters": [], 
        "path": "php/function.stats-dens-weibull", 
        "type": "Mathematics"
    }, 
    "stats_harmonic_mean": {
        "description": "", 
        "name": "stats_harmonic_mean", 
        "overview": "number stats_harmonic_mean ( array $a )", 
        "parameters": [], 
        "path": "php/function.stats-harmonic-mean", 
        "type": "Mathematics"
    }, 
    "stats_kurtosis": {
        "description": "", 
        "name": "stats_kurtosis", 
        "overview": "float stats_kurtosis ( array $a )", 
        "parameters": [], 
        "path": "php/function.stats-kurtosis", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_beta": {
        "description": "Returns a random deviate from the beta distribution with parameters A and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0 < x <. Method R. C. H. Cheng.", 
        "name": "stats_rand_gen_beta", 
        "overview": "float stats_rand_gen_beta ( float $a , float $b )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-beta", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_chisquare": {
        "description": "", 
        "name": "stats_rand_gen_chisquare", 
        "overview": "float stats_rand_gen_chisquare ( float $df )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-chisquare", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_exponential": {
        "description": "", 
        "name": "stats_rand_gen_exponential", 
        "overview": "float stats_rand_gen_exponential ( float $av )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-exponential", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_f": {
        "description": "Generates a random deviate from the F (variance ratio) distribution with \"dfn\" degrees of freedom in the numerator and \"dfd\" degrees of freedom in the denominator. Method : directly generates ratio of chisquare variates.", 
        "name": "stats_rand_gen_f", 
        "overview": "float stats_rand_gen_f ( float $dfn , float $dfd )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-f", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_funiform": {
        "description": "", 
        "name": "stats_rand_gen_funiform", 
        "overview": "float stats_rand_gen_funiform ( float $low , float $high )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-funiform", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_gamma": {
        "description": "Generates random deviates from the gamma distribution whose density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).", 
        "name": "stats_rand_gen_gamma", 
        "overview": "float stats_rand_gen_gamma ( float $a , float $r )", 
        "parameters": [
            {
                "descr": "location parameter of Gamma distribution (a > 0).", 
                "name": "a"
            }, 
            {
                "descr": "shape parameter of Gamma distribution (r > 0).", 
                "name": "r"
            }
        ], 
        "path": "php/function.stats-rand-gen-gamma", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_ibinomial": {
        "description": "", 
        "name": "stats_rand_gen_ibinomial", 
        "overview": "int stats_rand_gen_ibinomial ( int $n , float $pp )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-ibinomial", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_ibinomial_negative": {
        "description": "", 
        "name": "stats_rand_gen_ibinomial_negative", 
        "overview": "int stats_rand_gen_ibinomial_negative ( int $n , float $p )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-ibinomial-negative", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_int": {
        "description": "", 
        "name": "stats_rand_gen_int", 
        "overview": "int stats_rand_gen_int ( void )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-int", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_ipoisson": {
        "description": "", 
        "name": "stats_rand_gen_ipoisson", 
        "overview": "int stats_rand_gen_ipoisson ( float $mu )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-ipoisson", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_iuniform": {
        "description": "", 
        "name": "stats_rand_gen_iuniform", 
        "overview": "int stats_rand_gen_iuniform ( int $low , int $high )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-iuniform", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_noncenral_chisquare": {
        "description": "", 
        "name": "stats_rand_gen_noncenral_chisquare", 
        "overview": "float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-noncenral-chisquare", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_noncentral_f": {
        "description": "", 
        "name": "stats_rand_gen_noncentral_f", 
        "overview": "float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-noncentral-f", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_noncentral_t": {
        "description": "", 
        "name": "stats_rand_gen_noncentral_t", 
        "overview": "float stats_rand_gen_noncentral_t ( float $df , float $xnonc )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-noncentral-t", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_normal": {
        "description": "", 
        "name": "stats_rand_gen_normal", 
        "overview": "float stats_rand_gen_normal ( float $av , float $sd )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-normal", 
        "type": "Mathematics"
    }, 
    "stats_rand_gen_t": {
        "description": "", 
        "name": "stats_rand_gen_t", 
        "overview": "float stats_rand_gen_t ( float $df )", 
        "parameters": [], 
        "path": "php/function.stats-rand-gen-t", 
        "type": "Mathematics"
    }, 
    "stats_rand_get_seeds": {
        "description": "", 
        "name": "stats_rand_get_seeds", 
        "overview": "array stats_rand_get_seeds ( void )", 
        "parameters": [], 
        "path": "php/function.stats-rand-get-seeds", 
        "type": "Mathematics"
    }, 
    "stats_rand_phrase_to_seeds": {
        "description": "", 
        "name": "stats_rand_phrase_to_seeds", 
        "overview": "array stats_rand_phrase_to_seeds ( string $phrase )", 
        "parameters": [], 
        "path": "php/function.stats-rand-phrase-to-seeds", 
        "type": "Mathematics"
    }, 
    "stats_rand_ranf": {
        "description": "", 
        "name": "stats_rand_ranf", 
        "overview": "float stats_rand_ranf ( void )", 
        "parameters": [], 
        "path": "php/function.stats-rand-ranf", 
        "type": "Mathematics"
    }, 
    "stats_rand_setall": {
        "description": "", 
        "name": "stats_rand_setall", 
        "overview": "void stats_rand_setall ( int $iseed1 , int $iseed2 )", 
        "parameters": [], 
        "path": "php/function.stats-rand-setall", 
        "type": "Mathematics"
    }, 
    "stats_skew": {
        "description": "", 
        "name": "stats_skew", 
        "overview": "float stats_skew ( array $a )", 
        "parameters": [], 
        "path": "php/function.stats-skew", 
        "type": "Mathematics"
    }, 
    "stats_standard_deviation": {
        "description": "", 
        "name": "stats_standard_deviation", 
        "overview": "float stats_standard_deviation ( array $a [, bool $sample = false ] )", 
        "parameters": [], 
        "path": "php/function.stats-standard-deviation", 
        "type": "Mathematics"
    }, 
    "stats_stat_binomial_coef": {
        "description": "", 
        "name": "stats_stat_binomial_coef", 
        "overview": "float stats_stat_binomial_coef ( int $x , int $n )", 
        "parameters": [], 
        "path": "php/function.stats-stat-binomial-coef", 
        "type": "Mathematics"
    }, 
    "stats_stat_correlation": {
        "description": "", 
        "name": "stats_stat_correlation", 
        "overview": "float stats_stat_correlation ( array $arr1 , array $arr2 )", 
        "parameters": [], 
        "path": "php/function.stats-stat-correlation", 
        "type": "Mathematics"
    }, 
    "stats_stat_gennch": {
        "description": "", 
        "name": "stats_stat_gennch", 
        "overview": "float stats_stat_gennch ( int $n )", 
        "parameters": [], 
        "path": "php/function.stats-stat-gennch", 
        "type": "Mathematics"
    }, 
    "stats_stat_independent_t": {
        "description": "", 
        "name": "stats_stat_independent_t", 
        "overview": "float stats_stat_independent_t ( array $arr1 , array $arr2 )", 
        "parameters": [], 
        "path": "php/function.stats-stat-independent-t", 
        "type": "Mathematics"
    }, 
    "stats_stat_innerproduct": {
        "description": "", 
        "name": "stats_stat_innerproduct", 
        "overview": "float stats_stat_innerproduct ( array $arr1 , array $arr2 )", 
        "parameters": [], 
        "path": "php/function.stats-stat-innerproduct", 
        "type": "Mathematics"
    }, 
    "stats_stat_noncentral_t": {
        "description": "", 
        "name": "stats_stat_noncentral_t", 
        "overview": "float stats_stat_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which )", 
        "parameters": [], 
        "path": "php/function.stats-stat-noncentral-t", 
        "type": "Mathematics"
    }, 
    "stats_stat_paired_t": {
        "description": "", 
        "name": "stats_stat_paired_t", 
        "overview": "float stats_stat_paired_t ( array $arr1 , array $arr2 )", 
        "parameters": [], 
        "path": "php/function.stats-stat-paired-t", 
        "type": "Mathematics"
    }, 
    "stats_stat_percentile": {
        "description": "", 
        "name": "stats_stat_percentile", 
        "overview": "float stats_stat_percentile ( float $df , float $xnonc )", 
        "parameters": [], 
        "path": "php/function.stats-stat-percentile", 
        "type": "Mathematics"
    }, 
    "stats_stat_powersum": {
        "description": "", 
        "name": "stats_stat_powersum", 
        "overview": "float stats_stat_powersum ( array $arr , float $power )", 
        "parameters": [], 
        "path": "php/function.stats-stat-powersum", 
        "type": "Mathematics"
    }, 
    "stats_variance": {
        "description": "", 
        "name": "stats_variance", 
        "overview": "float stats_variance ( array $a [, bool $sample = false ] )", 
        "parameters": [], 
        "path": "php/function.stats-variance", 
        "type": "Mathematics"
    }, 
    "str_getcsv": {
        "description": "Parses a string input for fields in CSV format and returns an array containing the fields read.", 
        "name": "str_getcsv", 
        "overview": "array str_getcsv ( string $input [, string $delimiter = ',' [, string $enclosure = '\"' [, string $escape = '\\\\' ]]] )", 
        "parameters": [
            {
                "descr": "The string to parse.", 
                "name": "input"
            }, 
            {
                "descr": "Set the field delimiter (one character only).", 
                "name": "delimiter"
            }, 
            {
                "descr": "Set the field enclosure character (one character only).", 
                "name": "enclosure"
            }, 
            {
                "descr": "Set the escape character (one character only). ", 
                "name": "escape"
            }
        ], 
        "path": "php/function.str-getcsv", 
        "type": "String"
    }, 
    "str_ireplace": {
        "description": "This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. If you don't need fancy replacing rules, you should generally use this function instead of preg_replace() with the i modifier.", 
        "name": "str_ireplace", 
        "overview": "mixed str_ireplace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )", 
        "parameters": [
            {
                "descr": "The value being searched for, otherwise known as the needle. ", 
                "name": "search"
            }, 
            {
                "descr": "The replacement value that replaces found search values. ", 
                "name": "replace"
            }, 
            {
                "descr": "The string or array being searched and replaced on, otherwise known as the haystack. ", 
                "name": "subject"
            }, 
            {
                "descr": "If passed, this will be set to the number of replacements performed.", 
                "name": "count"
            }
        ], 
        "path": "php/function.str-ireplace", 
        "type": "String"
    }, 
    "str_pad": {
        "description": "This functions returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.", 
        "name": "str_pad", 
        "overview": "string str_pad ( string $input , int $pad_length [, string $pad_string = \" \" [, int $pad_type = STR_PAD_RIGHT ]] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "input"
            }, 
            {
                "descr": "If the value of pad_length is negative, less than, or equal to the length of the input string, no padding takes place.", 
                "name": "pad_length"
            }, 
            {
                "descr": "Note:  The pad_string may be truncated if the required number of padding characters can't be evenly divided by the pad_string's length.", 
                "name": "pad_string"
            }, 
            {
                "descr": "Optional argument pad_type can be STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH. ", 
                "name": "pad_type"
            }
        ], 
        "path": "php/function.str-pad", 
        "type": "String"
    }, 
    "str_repeat": {
        "description": "Returns input repeated multiplier times.", 
        "name": "str_repeat", 
        "overview": "string str_repeat ( string $input , int $multiplier )", 
        "parameters": [
            {
                "descr": "The string to be repeated.", 
                "name": "input"
            }, 
            {
                "descr": "Number of time the input string should be repeated. ", 
                "name": "multiplier"
            }
        ], 
        "path": "php/function.str-repeat", 
        "type": "String"
    }, 
    "str_replace": {
        "description": "This function returns a string or an array with all occurrences of search in subject replaced with the given replace value.", 
        "name": "str_replace", 
        "overview": "mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )", 
        "parameters": [
            {
                "descr": "The value being searched for, otherwise known as the needle. ", 
                "name": "search"
            }, 
            {
                "descr": "The replacement value that replaces found search values. ", 
                "name": "replace"
            }, 
            {
                "descr": "The string or array being searched and replaced on, otherwise known as the haystack. ", 
                "name": "subject"
            }, 
            {
                "descr": "If passed, this will be set to the number of replacements performed.", 
                "name": "count"
            }
        ], 
        "path": "php/function.str-replace", 
        "type": "String"
    }, 
    "str_rot13": {
        "description": "Performs the ROT13 encoding on the str argument and returns the resulting string.", 
        "name": "str_rot13", 
        "overview": "string str_rot13 ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.str-rot13", 
        "type": "String"
    }, 
    "str_shuffle": {
        "description": "", 
        "name": "str_shuffle", 
        "overview": "string str_shuffle ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.str-shuffle", 
        "type": "String"
    }, 
    "str_split": {
        "description": "Converts a string to an array.", 
        "name": "str_split", 
        "overview": "array str_split ( string $string [, int $split_length = 1 ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "string"
            }, 
            {
                "descr": "Maximum length of the chunk.", 
                "name": "split_length"
            }
        ], 
        "path": "php/function.str-split", 
        "type": "String"
    }, 
    "str_word_count": {
        "description": "Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below.", 
        "name": "str_word_count", 
        "overview": "mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )", 
        "parameters": [
            {
                "descr": "The string", 
                "name": "string"
            }, 
            {
                "descr": "Specify the return value of this function. ", 
                "name": "format"
            }, 
            {
                "descr": "A list of additional characters which will be considered as 'word'", 
                "name": "charlist"
            }
        ], 
        "path": "php/function.str-word-count", 
        "type": "String"
    }, 
    "strcasecmp": {
        "description": "Binary safe case-insensitive string comparison.", 
        "name": "strcasecmp", 
        "overview": "int strcasecmp ( string $str1 , string $str2 )", 
        "parameters": [
            {
                "descr": "The first string", 
                "name": "str1"
            }, 
            {
                "descr": "The second string", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strcasecmp", 
        "type": "String"
    }, 
    "strcmp": {
        "description": "", 
        "name": "strcmp", 
        "overview": "int strcmp ( string $str1 , string $str2 )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strcmp", 
        "type": "String"
    }, 
    "strcoll": {
        "description": "Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe.", 
        "name": "strcoll", 
        "overview": "int strcoll ( string $str1 , string $str2 )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strcoll", 
        "type": "String"
    }, 
    "strcspn": {
        "description": "Returns the length of the initial segment of str1 which does not contain any of the characters in str2.", 
        "name": "strcspn", 
        "overview": "int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }, 
            {
                "descr": "The start position of the string to examine.", 
                "name": "start"
            }, 
            {
                "descr": "The length of the string to examine.", 
                "name": "length"
            }
        ], 
        "path": "php/function.strcspn", 
        "type": "String"
    }, 
    "streamWrapper": {
        "description": "", 
        "name": "streamWrapper", 
        "overview": "__construct ( void )", 
        "parameters": [], 
        "path": "php/class.streamwrapper", 
        "type": "Streams"
    }, 
    "streamWrapper::__construct": {
        "description": "Called when opening the stream wrapper, right before streamWrapper::stream_open().", 
        "name": "streamWrapper::__construct", 
        "overview": "streamWrapper::__construct ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.construct", 
        "type": "Streams"
    }, 
    "streamWrapper::__destruct": {
        "description": "Called when closing the stream wrapper, right before streamWrapper::stream_flush().", 
        "name": "streamWrapper::__destruct", 
        "overview": "streamWrapper::__destruct ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.destruct", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_closedir": {
        "description": "This method is called in response to closedir().", 
        "name": "streamWrapper::dir_closedir", 
        "overview": "public bool streamWrapper::dir_closedir ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.dir-closedir", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_opendir": {
        "description": "This method is called in response to opendir().", 
        "name": "streamWrapper::dir_opendir", 
        "overview": "public bool streamWrapper::dir_opendir ( string $path , int $options )", 
        "parameters": [
            {
                "descr": "Specifies the URL that was passed to opendir(). ", 
                "name": "path"
            }, 
            {
                "descr": "Whether or not to enforce safe_mode (0x04).", 
                "name": "options"
            }
        ], 
        "path": "php/streamwrapper.dir-opendir", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_readdir": {
        "description": "This method is called in response to readdir().", 
        "name": "streamWrapper::dir_readdir", 
        "overview": "public string streamWrapper::dir_readdir ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.dir-readdir", 
        "type": "Streams"
    }, 
    "streamWrapper::dir_rewinddir": {
        "description": "This method is called in response to rewinddir().", 
        "name": "streamWrapper::dir_rewinddir", 
        "overview": "public bool streamWrapper::dir_rewinddir ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.dir-rewinddir", 
        "type": "Streams"
    }, 
    "streamWrapper::mkdir": {
        "description": "This method is called in response to mkdir().", 
        "name": "streamWrapper::mkdir", 
        "overview": "public bool streamWrapper::mkdir ( string $path , int $mode , int $options )", 
        "parameters": [
            {
                "descr": "Directory which should be created.", 
                "name": "path"
            }, 
            {
                "descr": "The value passed to mkdir().", 
                "name": "mode"
            }, 
            {
                "descr": "A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.", 
                "name": "options"
            }
        ], 
        "path": "php/streamwrapper.mkdir", 
        "type": "Streams"
    }, 
    "streamWrapper::rename": {
        "description": "This method is called in response to rename().", 
        "name": "streamWrapper::rename", 
        "overview": "public bool streamWrapper::rename ( string $path_from , string $path_to )", 
        "parameters": [
            {
                "descr": "The URL to the current file.", 
                "name": "path_from"
            }, 
            {
                "descr": "The URL which the path_from should be renamed to.", 
                "name": "path_to"
            }
        ], 
        "path": "php/streamwrapper.rename", 
        "type": "Streams"
    }, 
    "streamWrapper::rmdir": {
        "description": "This method is called in response to rmdir().", 
        "name": "streamWrapper::rmdir", 
        "overview": "public bool streamWrapper::rmdir ( string $path , int $options )", 
        "parameters": [
            {
                "descr": "The directory URL which should be removed.", 
                "name": "path"
            }, 
            {
                "descr": "A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.", 
                "name": "options"
            }
        ], 
        "path": "php/streamwrapper.rmdir", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_cast": {
        "description": "This method is called in response to stream_select().", 
        "name": "streamWrapper::stream_cast", 
        "overview": "public resource streamWrapper::stream_cast ( int $cast_as )", 
        "parameters": [
            {
                "descr": "Can be STREAM_CAST_FOR_SELECT when stream_select() is calling stream_cast() or STREAM_CAST_AS_STREAM when stream_cast() is called for other uses.", 
                "name": "cast_as"
            }
        ], 
        "path": "php/streamwrapper.stream-cast", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_close": {
        "description": "This method is called in response to fclose().", 
        "name": "streamWrapper::stream_close", 
        "overview": "public void streamWrapper::stream_close ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.stream-close", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_eof": {
        "description": "This method is called in response to feof().", 
        "name": "streamWrapper::stream_eof", 
        "overview": "public bool streamWrapper::stream_eof ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.stream-eof", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_flush": {
        "description": "This method is called in response to fflush().", 
        "name": "streamWrapper::stream_flush", 
        "overview": "public bool streamWrapper::stream_flush ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.stream-flush", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_lock": {
        "description": "This method is called in response to flock(), when file_put_contents() (when flags contains LOCK_EX), stream_set_blocking() and when closing the stream (LOCK_UN).", 
        "name": "streamWrapper::stream_lock", 
        "overview": "public bool streamWrapper::stream_lock ( int $operation )", 
        "parameters": [
            {
                "descr": "operation is one of the following:   LOCK_SH to acquire a shared lock (reader). ", 
                "name": "operation"
            }
        ], 
        "path": "php/streamwrapper.stream-lock", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_metadata": {
        "description": "This method is called to set metadata on the stream. It is called when one of the following functions is called on a stream URL:", 
        "name": "streamWrapper::stream_metadata", 
        "overview": "public bool streamWrapper::stream_metadata ( string $path , int $option , mixed $value )", 
        "parameters": [
            {
                "descr": "The file path or URL to set metadata. ", 
                "name": "path"
            }, 
            {
                "descr": "One of: STREAM_META_TOUCH (The method was called in response to touch()) STREAM_META_OWNER_NAME (The method was called in response to chown() with string parameter) STREAM_META_OWNER (The method was called in response to chown()) STREAM_META_GROUP_NAME (The method was called in response to chgrp()) STREAM_META_GROUP (The method was called in response to chgrp()) STREAM_META_ACCESS (The method was called in response to chmod())", 
                "name": "option"
            }, 
            {
                "descr": "If option is STREAM_META_TOUCH: Array consisting of two arguments of the touch() function. ", 
                "name": "value"
            }
        ], 
        "path": "php/streamwrapper.stream-metadata", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_open": {
        "description": "This method is called immediately after the wrapper is initialized (f.e. by fopen() and file_get_contents()).", 
        "name": "streamWrapper::stream_open", 
        "overview": "public bool streamWrapper::stream_open ( string $path , string $mode , int $options , string &$opened_path )", 
        "parameters": [
            {
                "descr": "Specifies the URL that was passed to the original function. ", 
                "name": "path"
            }, 
            {
                "descr": "The mode used to open the file, as detailed for fopen(). ", 
                "name": "mode"
            }, 
            {
                "descr": "Holds additional flags set by the streams API. ", 
                "name": "options"
            }, 
            {
                "descr": "If the path is opened successfully, and STREAM_USE_PATH is set in options, opened_path should be set to the full path of the file/resource that was actually opened.", 
                "name": "opened_path"
            }
        ], 
        "path": "php/streamwrapper.stream-open", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_read": {
        "description": "This method is called in response to fread() and fgets().", 
        "name": "streamWrapper::stream_read", 
        "overview": "public string streamWrapper::stream_read ( int $count )", 
        "parameters": [
            {
                "descr": "How many bytes of data from the current position should be returned.", 
                "name": "count"
            }
        ], 
        "path": "php/streamwrapper.stream-read", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_seek": {
        "description": "This method is called in response to fseek().", 
        "name": "streamWrapper::stream_seek", 
        "overview": "public bool streamWrapper::stream_seek ( int $offset , int $whence  = SEEK_SET )", 
        "parameters": [
            {
                "descr": "The stream offset to seek to.", 
                "name": "offset"
            }, 
            {
                "descr": "Possible values: SEEK_SET - Set position equal to offset bytes. ", 
                "name": "whence"
            }
        ], 
        "path": "php/streamwrapper.stream-seek", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_set_option": {
        "description": "This method is called to set options on the stream.", 
        "name": "streamWrapper::stream_set_option", 
        "overview": "public bool streamWrapper::stream_set_option ( int $option , int $arg1 , int $arg2 )", 
        "parameters": [
            {
                "descr": "One of: STREAM_OPTION_BLOCKING (The method was called in response to stream_set_blocking()) STREAM_OPTION_READ_TIMEOUT (The method was called in response to stream_set_timeout()) STREAM_OPTION_WRITE_BUFFER (The method was called in response to stream_set_write_buffer())", 
                "name": "option"
            }, 
            {
                "descr": "If option is STREAM_OPTION_BLOCKING: requested blocking mode (1 meaning block 0 not blocking). ", 
                "name": "arg1"
            }, 
            {
                "descr": "If option is STREAM_OPTION_BLOCKING: This option is not set. ", 
                "name": "arg2"
            }
        ], 
        "path": "php/streamwrapper.stream-set-option", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_stat": {
        "description": "This method is called in response to fstat().", 
        "name": "streamWrapper::stream_stat", 
        "overview": "public array streamWrapper::stream_stat ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.stream-stat", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_tell": {
        "description": "This method is called in response to fseek() to determine the current position.", 
        "name": "streamWrapper::stream_tell", 
        "overview": "public int streamWrapper::stream_tell ( void )", 
        "parameters": [], 
        "path": "php/streamwrapper.stream-tell", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_truncate": {
        "description": "Will respond to truncation, e.g., through ftruncate().", 
        "name": "streamWrapper::stream_truncate", 
        "overview": "public bool streamWrapper::stream_truncate ( int $new_size )", 
        "parameters": [
            {
                "descr": "The new size.", 
                "name": "new_size"
            }
        ], 
        "path": "php/streamwrapper.stream-truncate", 
        "type": "Streams"
    }, 
    "streamWrapper::stream_write": {
        "description": "This method is called in response to fwrite().", 
        "name": "streamWrapper::stream_write", 
        "overview": "public int streamWrapper::stream_write ( string $data )", 
        "parameters": [
            {
                "descr": "Should be stored into the underlying stream. ", 
                "name": "data"
            }
        ], 
        "path": "php/streamwrapper.stream-write", 
        "type": "Streams"
    }, 
    "streamWrapper::unlink": {
        "description": "This method is called in response to unlink().", 
        "name": "streamWrapper::unlink", 
        "overview": "public bool streamWrapper::unlink ( string $path )", 
        "parameters": [
            {
                "descr": "The file URL which should be deleted.", 
                "name": "path"
            }
        ], 
        "path": "php/streamwrapper.unlink", 
        "type": "Streams"
    }, 
    "streamWrapper::url_stat": {
        "description": "This method is called in response to all stat() related functions, such as:", 
        "name": "streamWrapper::url_stat", 
        "overview": "public array streamWrapper::url_stat ( string $path , int $flags )", 
        "parameters": [
            {
                "descr": "The file path or URL to stat. Note that in the case of a URL, it must be a :// delimited URL. ", 
                "name": "path"
            }, 
            {
                "descr": "Holds additional flags set by the streams API. ", 
                "name": "flags"
            }
        ], 
        "path": "php/streamwrapper.url-stat", 
        "type": "Streams"
    }, 
    "stream_bucket_append": {
        "description": "", 
        "name": "stream_bucket_append", 
        "overview": "void stream_bucket_append ( resource $brigade , resource $bucket )", 
        "parameters": [], 
        "path": "php/function.stream-bucket-append", 
        "type": "Streams"
    }, 
    "stream_bucket_make_writeable": {
        "description": "", 
        "name": "stream_bucket_make_writeable", 
        "overview": "object stream_bucket_make_writeable ( resource $brigade )", 
        "parameters": [], 
        "path": "php/function.stream-bucket-make-writeable", 
        "type": "Streams"
    }, 
    "stream_bucket_new": {
        "description": "", 
        "name": "stream_bucket_new", 
        "overview": "object stream_bucket_new ( resource $stream , string $buffer )", 
        "parameters": [], 
        "path": "php/function.stream-bucket-new", 
        "type": "Streams"
    }, 
    "stream_bucket_prepend": {
        "description": "This function can be called to prepend a bucket to a bucket brigade. It is typically called from php_user_filter::filter().", 
        "name": "stream_bucket_prepend", 
        "overview": "void stream_bucket_prepend ( resource $brigade , resource $bucket )", 
        "parameters": [
            {
                "descr": "brigade is a resource pointing to a bucket brigade which contains one or more bucket objects.", 
                "name": "brigade"
            }, 
            {
                "descr": "A bucket object.", 
                "name": "bucket"
            }
        ], 
        "path": "php/function.stream-bucket-prepend", 
        "type": "Streams"
    }, 
    "stream_context_create": {
        "description": "Creates and returns a stream context with any options supplied in options preset.", 
        "name": "stream_context_create", 
        "overview": "resource stream_context_create ([ array $options [, array $params ]] )", 
        "parameters": [
            {
                "descr": "Must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. ", 
                "name": "options"
            }, 
            {
                "descr": "Must be an associative array in the format $arr['parameter'] = $value. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-context-create", 
        "type": "Streams"
    }, 
    "stream_context_get_default": {
        "description": "", 
        "name": "stream_context_get_default", 
        "overview": "resource stream_context_get_default ([ array $options ] )", 
        "parameters": [
            {
                "descr": "options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.stream-context-get-default", 
        "type": "Streams"
    }, 
    "stream_context_get_options": {
        "description": "", 
        "name": "stream_context_get_options", 
        "overview": "array stream_context_get_options ( resource $stream_or_context )", 
        "parameters": [
            {
                "descr": "The stream or context to get options from", 
                "name": "stream_or_context"
            }
        ], 
        "path": "php/function.stream-context-get-options", 
        "type": "Streams"
    }, 
    "stream_context_get_params": {
        "description": "Retrieves parameter and options information from the stream or context.", 
        "name": "stream_context_get_params", 
        "overview": "array stream_context_get_params ( resource $stream_or_context )", 
        "parameters": [
            {
                "descr": "A stream resource or a context resource", 
                "name": "stream_or_context"
            }
        ], 
        "path": "php/function.stream-context-get-params", 
        "type": "Streams"
    }, 
    "stream_context_set_default": {
        "description": "", 
        "name": "stream_context_set_default", 
        "overview": "resource stream_context_set_default ( array $options )", 
        "parameters": [
            {
                "descr": "The options to set for the default context. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.stream-context-set-default", 
        "type": "Streams"
    }, 
    "stream_context_set_option": {
        "description": "", 
        "name": "stream_context_set_option", 
        "overview": "bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )", 
        "parameters": [
            {
                "descr": "The stream or context resource to apply the options to.", 
                "name": "stream_or_context"
            }, 
            {
                "descr": "The options to set for the default context. ", 
                "name": "options"
            }
        ], 
        "path": "php/function.stream-context-set-option", 
        "type": "Streams"
    }, 
    "stream_context_set_params": {
        "description": "Sets parameters on the specified context.", 
        "name": "stream_context_set_params", 
        "overview": "bool stream_context_set_params ( resource $stream_or_context , array $params )", 
        "parameters": [
            {
                "descr": "The stream or context to apply the parameters too.", 
                "name": "stream_or_context"
            }, 
            {
                "descr": "An array of parameters to set.  Note:  params should be an associative array of the structure: $params['paramname'] = \"paramvalue\";.", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-context-set-params", 
        "type": "Streams"
    }, 
    "stream_copy_to_stream": {
        "description": "Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. If maxlength is not specified, all remaining content in source will be copied.", 
        "name": "stream_copy_to_stream", 
        "overview": "int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )", 
        "parameters": [
            {
                "descr": "The source stream", 
                "name": "source"
            }, 
            {
                "descr": "The destination stream", 
                "name": "dest"
            }, 
            {
                "descr": "Maximum bytes to copy", 
                "name": "maxlength"
            }, 
            {
                "descr": "The offset where to start to copy data", 
                "name": "offset"
            }
        ], 
        "path": "php/function.stream-copy-to-stream", 
        "type": "Streams"
    }, 
    "stream_encoding": {
        "description": "", 
        "name": "stream_encoding", 
        "overview": "bool stream_encoding ( resource $stream [, string $encoding ] )", 
        "parameters": [], 
        "path": "php/function.stream-encoding", 
        "type": "Streams"
    }, 
    "stream_filter_append": {
        "description": "Adds filtername to the list of filters attached to stream.", 
        "name": "stream_filter_append", 
        "overview": "resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )", 
        "parameters": [
            {
                "descr": "The target stream.", 
                "name": "stream"
            }, 
            {
                "descr": "The filter name.", 
                "name": "filtername"
            }, 
            {
                "descr": "By default, stream_filter_append() will attach the filter to the read filter chain if the file was opened for reading (i.e. ", 
                "name": "read_write"
            }, 
            {
                "descr": "This filter will be added with the specified params to the end of the list and will therefore be called last during stream operations. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-filter-append", 
        "type": "Streams"
    }, 
    "stream_filter_prepend": {
        "description": "Adds filtername to the list of filters attached to stream.", 
        "name": "stream_filter_prepend", 
        "overview": "resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )", 
        "parameters": [
            {
                "descr": "The target stream.", 
                "name": "stream"
            }, 
            {
                "descr": "The filter name.", 
                "name": "filtername"
            }, 
            {
                "descr": "By default, stream_filter_prepend() will attach the filter to the read filter chain if the file was opened for reading (i.e. ", 
                "name": "read_write"
            }, 
            {
                "descr": "This filter will be added with the specified params to the beginning of the list and will therefore be called first during stream operations. ", 
                "name": "params"
            }
        ], 
        "path": "php/function.stream-filter-prepend", 
        "type": "Streams"
    }, 
    "stream_filter_register": {
        "description": "stream_filter_register() allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen(), fread() etc.).", 
        "name": "stream_filter_register", 
        "overview": "bool stream_filter_register ( string $filtername , string $classname )", 
        "parameters": [
            {
                "descr": "The filter name to be registered.", 
                "name": "filtername"
            }, 
            {
                "descr": "To implement a filter, you need to define a class as an extension of php_user_filter with a number of member functions. ", 
                "name": "classname"
            }
        ], 
        "path": "php/function.stream-filter-register", 
        "type": "Streams"
    }, 
    "stream_filter_remove": {
        "description": "Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append(). Any data remaining in the filter's internal buffer will be flushed through to the next filter before removing it.", 
        "name": "stream_filter_remove", 
        "overview": "bool stream_filter_remove ( resource $stream_filter )", 
        "parameters": [
            {
                "descr": "The stream filter to be removed.", 
                "name": "stream_filter"
            }
        ], 
        "path": "php/function.stream-filter-remove", 
        "type": "Streams"
    }, 
    "stream_get_contents": {
        "description": "Identical to file_get_contents(), except that stream_get_contents() operates on an already open stream resource and returns the remaining contents in a string, up to maxlength bytes and starting at the specified offset.", 
        "name": "stream_get_contents", 
        "overview": "string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )", 
        "parameters": [
            {
                "descr": "A stream resource (e.g. returned from fopen())", 
                "name": "handle (resource)"
            }, 
            {
                "descr": "The maximum bytes to read. Defaults to -1 (read all the remaining buffer).", 
                "name": "maxlength (integer)"
            }, 
            {
                "descr": "Seek to the specified offset before reading. ", 
                "name": "offset (integer)"
            }
        ], 
        "path": "php/function.stream-get-contents", 
        "type": "Streams"
    }, 
    "stream_get_filters": {
        "description": "", 
        "name": "stream_get_filters", 
        "overview": "array stream_get_filters ( void )", 
        "parameters": [], 
        "path": "php/function.stream-get-filters", 
        "type": "Streams"
    }, 
    "stream_get_line": {
        "description": "Gets a line from the given handle.", 
        "name": "stream_get_line", 
        "overview": "string stream_get_line ( resource $handle , int $length [, string $ending ] )", 
        "parameters": [
            {
                "descr": "A valid file handle.", 
                "name": "handle"
            }, 
            {
                "descr": "The number of bytes to read from the handle.", 
                "name": "length"
            }, 
            {
                "descr": "An optional string delimiter.", 
                "name": "ending"
            }
        ], 
        "path": "php/function.stream-get-line", 
        "type": "Streams"
    }, 
    "stream_get_meta_data": {
        "description": "Returns information about an existing stream.", 
        "name": "stream_get_meta_data", 
        "overview": "array stream_get_meta_data ( resource $stream )", 
        "parameters": [
            {
                "descr": "The stream can be any stream created by fopen(), fsockopen() and pfsockopen().", 
                "name": "stream"
            }
        ], 
        "path": "php/function.stream-get-meta-data", 
        "type": "Streams"
    }, 
    "stream_get_transports": {
        "description": "", 
        "name": "stream_get_transports", 
        "overview": "array stream_get_transports ( void )", 
        "parameters": [], 
        "path": "php/function.stream-get-transports", 
        "type": "Streams"
    }, 
    "stream_get_wrappers": {
        "description": "Retrieve list of registered streams available on the running system.", 
        "name": "stream_get_wrappers", 
        "overview": "array stream_get_wrappers ( void )", 
        "parameters": [], 
        "path": "php/function.stream-get-wrappers", 
        "type": "Streams"
    }, 
    "stream_is_local": {
        "description": "Checks if a stream, or a URL, is a local one or not.", 
        "name": "stream_is_local", 
        "overview": "bool stream_is_local ( mixed $stream_or_url )", 
        "parameters": [
            {
                "descr": "The stream resource or URL to check.", 
                "name": "stream_or_url"
            }
        ], 
        "path": "php/function.stream-is-local", 
        "type": "Streams"
    }, 
    "stream_notification_callback": {
        "description": "A callable function, used by the notification context parameter, called during an event.", 
        "name": "stream_notification_callback", 
        "overview": "void stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )", 
        "parameters": [
            {
                "descr": "One of the STREAM_NOTIFY_* notification constants.", 
                "name": "notification_code"
            }, 
            {
                "descr": "One of the STREAM_NOTIFY_SEVERITY_* notification constants.", 
                "name": "severity"
            }, 
            {
                "descr": "Passed if a descriptive message is available for the event.", 
                "name": "message"
            }, 
            {
                "descr": "Passed if a descriptive message code is available for the event. ", 
                "name": "message_code"
            }, 
            {
                "descr": "If applicable, the bytes_transferred will be populated.", 
                "name": "bytes_transferred"
            }, 
            {
                "descr": "If applicable, the bytes_max will be populated.", 
                "name": "bytes_max"
            }
        ], 
        "path": "php/function.stream-notification-callback", 
        "type": "Streams"
    }, 
    "stream_resolve_include_path": {
        "description": "Resolve filename against the include path according to the same rules as fopen()/include.", 
        "name": "stream_resolve_include_path", 
        "overview": "string stream_resolve_include_path ( string $filename )", 
        "parameters": [
            {
                "descr": "The filename to resolve.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.stream-resolve-include-path", 
        "type": "Streams"
    }, 
    "stream_select": {
        "description": "The stream_select() function accepts arrays of streams and waits for them to change status. Its operation is equivalent to that of the socket_select() function except in that it acts on streams.", 
        "name": "stream_select", 
        "overview": "int stream_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )", 
        "parameters": [
            {
                "descr": "The streams listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a stream resource is also ready on end-of-file, in which case an fread() will return a zero length string).", 
                "name": "read"
            }, 
            {
                "descr": "The streams listed in the write array will be watched to see if a write will not block.", 
                "name": "write"
            }, 
            {
                "descr": "The streams listed in the except array will be watched for high priority exceptional (\"out-of-band\") data arriving. ", 
                "name": "except"
            }, 
            {
                "descr": "The tv_sec and tv_usec together form the timeout parameter, tv_sec specifies the number of seconds while tv_usec the number of microseconds. ", 
                "name": "tv_sec"
            }, 
            {
                "descr": "See tv_sec description.", 
                "name": "tv_usec"
            }
        ], 
        "path": "php/function.stream-select", 
        "type": "Streams"
    }, 
    "stream_set_blocking": {
        "description": "Sets blocking or non-blocking mode on a stream.", 
        "name": "stream_set_blocking", 
        "overview": "bool stream_set_blocking ( resource $stream , int $mode )", 
        "parameters": [
            {
                "descr": "The stream.", 
                "name": "stream"
            }, 
            {
                "descr": "If mode is 0, the given stream will be switched to non-blocking mode, and if 1, it will be switched to blocking mode. ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.stream-set-blocking", 
        "type": "Streams"
    }, 
    "stream_set_chunk_size": {
        "description": "Set the stream chunk size.", 
        "name": "stream_set_chunk_size", 
        "overview": "int stream_set_chunk_size ( resource $fp , int $chunk_size )", 
        "parameters": [
            {
                "descr": "The target stream.", 
                "name": "fp"
            }, 
            {
                "descr": "The desired new chunk size.", 
                "name": "chunk_size"
            }
        ], 
        "path": "php/function.stream-set-chunk-size", 
        "type": "Streams"
    }, 
    "stream_set_read_buffer": {
        "description": "Sets the read buffer. It's the equivalent of stream_set_write_buffer(), but for read operations.", 
        "name": "stream_set_read_buffer", 
        "overview": "int stream_set_read_buffer ( resource $stream , int $buffer )", 
        "parameters": [
            {
                "descr": "The file pointer.", 
                "name": "stream"
            }, 
            {
                "descr": "The number of bytes to buffer. If buffer is 0 then read operations are unbuffered. ", 
                "name": "buffer"
            }
        ], 
        "path": "php/function.stream-set-read-buffer", 
        "type": "Streams"
    }, 
    "stream_set_timeout": {
        "description": "Sets the timeout value on stream, expressed in the sum of seconds and microseconds.", 
        "name": "stream_set_timeout", 
        "overview": "bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] )", 
        "parameters": [
            {
                "descr": "The target stream.", 
                "name": "stream"
            }, 
            {
                "descr": "The seconds part of the timeout to be set.", 
                "name": "seconds"
            }, 
            {
                "descr": "The microseconds part of the timeout to be set.", 
                "name": "microseconds"
            }
        ], 
        "path": "php/function.stream-set-timeout", 
        "type": "Streams"
    }, 
    "stream_set_write_buffer": {
        "description": "Sets the buffering for write operations on the given stream to buffer bytes.", 
        "name": "stream_set_write_buffer", 
        "overview": "int stream_set_write_buffer ( resource $stream , int $buffer )", 
        "parameters": [
            {
                "descr": "The file pointer.", 
                "name": "stream"
            }, 
            {
                "descr": "The number of bytes to buffer. If buffer is 0 then write operations are unbuffered. ", 
                "name": "buffer"
            }
        ], 
        "path": "php/function.stream-set-write-buffer", 
        "type": "Streams"
    }, 
    "stream_socket_accept": {
        "description": "Accept a connection on a socket previously created by stream_socket_server().", 
        "name": "stream_socket_accept", 
        "overview": "resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get(\"default_socket_timeout\") [, string &$peername ]] )", 
        "parameters": [
            {
                "descr": "The server socket to accept a connection from.", 
                "name": "server_socket"
            }, 
            {
                "descr": "Override the default socket accept timeout. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Will be set to the name (address) of the client which connected, if included and available from the selected transport. ", 
                "name": "peername"
            }
        ], 
        "path": "php/function.stream-socket-accept", 
        "type": "Streams"
    }, 
    "stream_socket_client": {
        "description": "Initiates a stream or datagram connection to the destination specified by remote_socket. The type of socket created is determined by the transport specified using standard URL formatting: transport://target. For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the target portion should point to the socket file on the filesystem.", 
        "name": "stream_socket_client", 
        "overview": "resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get(\"default_socket_timeout\") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )", 
        "parameters": [
            {
                "descr": "Address to the socket to connect to.", 
                "name": "remote_socket"
            }, 
            {
                "descr": "Will be set to the system level error number if connection fails.", 
                "name": "errno"
            }, 
            {
                "descr": "Will be set to the system level error message if the connection fails.", 
                "name": "errstr"
            }, 
            {
                "descr": "Number of seconds until the connect() system call should timeout. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Bitmask field which may be set to any combination of connection flags. ", 
                "name": "flags"
            }, 
            {
                "descr": "A valid context resource created with stream_context_create().", 
                "name": "context"
            }
        ], 
        "path": "php/function.stream-socket-client", 
        "type": "Streams"
    }, 
    "stream_socket_enable_crypto": {
        "description": "", 
        "name": "stream_socket_enable_crypto", 
        "overview": "mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )", 
        "parameters": [
            {
                "descr": "The stream resource.", 
                "name": "stream"
            }, 
            {
                "descr": "Enable/disable cryptography on the stream.", 
                "name": "enable"
            }, 
            {
                "descr": "Setup encryption on the stream. ", 
                "name": "crypto_type"
            }, 
            {
                "descr": "Seed the stream with settings from session_stream.", 
                "name": "session_stream"
            }
        ], 
        "path": "php/function.stream-socket-enable-crypto", 
        "type": "Streams"
    }, 
    "stream_socket_get_name": {
        "description": "Returns the local or remote name of a given socket connection.", 
        "name": "stream_socket_get_name", 
        "overview": "string stream_socket_get_name ( resource $handle , bool $want_peer )", 
        "parameters": [
            {
                "descr": "The socket to get the name of.", 
                "name": "handle"
            }, 
            {
                "descr": "If set to TRUE the remote socket name will be returned, if set to FALSE the local socket name will be returned.", 
                "name": "want_peer"
            }
        ], 
        "path": "php/function.stream-socket-get-name", 
        "type": "Streams"
    }, 
    "stream_socket_pair": {
        "description": "stream_socket_pair() creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).", 
        "name": "stream_socket_pair", 
        "overview": "array stream_socket_pair ( int $domain , int $type , int $protocol )", 
        "parameters": [
            {
                "descr": "The protocol family to be used: STREAM_PF_INET, STREAM_PF_INET6 or STREAM_PF_UNIX", 
                "name": "domain"
            }, 
            {
                "descr": "The type of communication to be used: STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM, STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM", 
                "name": "type"
            }, 
            {
                "descr": "The protocol to be used: STREAM_IPPROTO_ICMP, STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW, STREAM_IPPROTO_TCP or STREAM_IPPROTO_UDP", 
                "name": "protocol"
            }
        ], 
        "path": "php/function.stream-socket-pair", 
        "type": "Streams"
    }, 
    "stream_socket_recvfrom": {
        "description": "stream_socket_recvfrom() accepts data from a remote socket up to length bytes.", 
        "name": "stream_socket_recvfrom", 
        "overview": "string stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, string &$address ]] )", 
        "parameters": [
            {
                "descr": "The remote socket.", 
                "name": "socket"
            }, 
            {
                "descr": "The number of bytes to receive from the socket.", 
                "name": "length"
            }, 
            {
                "descr": "The value of flags can be any combination of the following: Possible values for flags STREAM_OOB  Process OOB (out-of-band) data. ", 
                "name": "flags"
            }, 
            {
                "descr": "If address is provided it will be populated with the address of the remote socket.", 
                "name": "address"
            }
        ], 
        "path": "php/function.stream-socket-recvfrom", 
        "type": "Streams"
    }, 
    "stream_socket_sendto": {
        "description": "Sends the specified data through the socket.", 
        "name": "stream_socket_sendto", 
        "overview": "int stream_socket_sendto ( resource $socket , string $data [, int $flags = 0 [, string $address ]] )", 
        "parameters": [
            {
                "descr": "The socket to send data to.", 
                "name": "socket"
            }, 
            {
                "descr": "The data to be sent.", 
                "name": "data"
            }, 
            {
                "descr": "The value of flags can be any combination of the following: possible values for flags STREAM_OOB  Process OOB (out-of-band) data.", 
                "name": "flags"
            }, 
            {
                "descr": "The address specified when the socket stream was created will be used unless an alternate address is specified in address. ", 
                "name": "address"
            }
        ], 
        "path": "php/function.stream-socket-sendto", 
        "type": "Streams"
    }, 
    "stream_socket_server": {
        "description": "Creates a stream or datagram socket on the specified local_socket.", 
        "name": "stream_socket_server", 
        "overview": "resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )", 
        "parameters": [
            {
                "descr": "The type of socket created is determined by the transport specified using standard URL formatting: transport://target. ", 
                "name": "local_socket"
            }, 
            {
                "descr": "If the optional errno and errstr arguments are present they will be set to indicate the actual system level error that occurred in the system-level socket(), bind(), and listen() calls. ", 
                "name": "errno"
            }, 
            {
                "descr": "See errno description.", 
                "name": "errstr"
            }, 
            {
                "descr": "A bitmask field which may be set to any combination of socket creation flags. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.stream-socket-server", 
        "type": "Streams"
    }, 
    "stream_socket_shutdown": {
        "description": "Shutdowns (partially or not) a full-duplex connection.", 
        "name": "stream_socket_shutdown", 
        "overview": "bool stream_socket_shutdown ( resource $stream , int $how )", 
        "parameters": [
            {
                "descr": "An open stream (opened with stream_socket_client(), for example)", 
                "name": "stream"
            }, 
            {
                "descr": "One of the following constants: STREAM_SHUT_RD (disable further receptions), STREAM_SHUT_WR (disable further transmissions) or STREAM_SHUT_RDWR (disable further receptions and transmissions).", 
                "name": "how"
            }
        ], 
        "path": "php/function.stream-socket-shutdown", 
        "type": "Streams"
    }, 
    "stream_supports_lock": {
        "description": "Tells whether the stream supports locking through flock().", 
        "name": "stream_supports_lock", 
        "overview": "bool stream_supports_lock ( resource $stream )", 
        "parameters": [
            {
                "descr": "The stream to check.", 
                "name": "stream"
            }
        ], 
        "path": "php/function.stream-supports-lock", 
        "type": "Streams"
    }, 
    "stream_wrapper_register": {
        "description": "Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen(), fread() etc.).", 
        "name": "stream_wrapper_register", 
        "overview": "bool stream_wrapper_register ( string $protocol , string $classname [, int $flags  = 0 ] )", 
        "parameters": [
            {
                "descr": "The wrapper name to be registered.", 
                "name": "protocol"
            }, 
            {
                "descr": "The classname which implements the protocol.", 
                "name": "classname"
            }, 
            {
                "descr": "Should be set to STREAM_IS_URL if protocol is a URL protocol. ", 
                "name": "flags"
            }
        ], 
        "path": "php/function.stream-wrapper-register", 
        "type": "Streams"
    }, 
    "stream_wrapper_restore": {
        "description": "Restores a built-in wrapper previously unregistered with stream_wrapper_unregister().", 
        "name": "stream_wrapper_restore", 
        "overview": "bool stream_wrapper_restore ( string $protocol )", 
        "parameters": [], 
        "path": "php/function.stream-wrapper-restore", 
        "type": "Streams"
    }, 
    "stream_wrapper_unregister": {
        "description": "Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or reenable it later on with stream_wrapper_restore().", 
        "name": "stream_wrapper_unregister", 
        "overview": "bool stream_wrapper_unregister ( string $protocol )", 
        "parameters": [], 
        "path": "php/function.stream-wrapper-unregister", 
        "type": "Streams"
    }, 
    "strftime": {
        "description": "Format the time and/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with setlocale().", 
        "name": "strftime", 
        "overview": "string strftime ( string $format [, int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "The following characters are recognized in the format parameter string format Description Example returned values Day --- --- %a An abbreviated textual representation of the day Sun through Sat %A A full textual representation of the day Sunday through Saturday %d Two-digit day of the month (with leading zeros) 01 to 31 %e  Day of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information.   1 to 31 %j Day of the year, 3 digits with leading zeros 001 to 366 %u ISO-8601 numeric representation of the day of the week 1 (for Monday) though 7 (for Sunday) %w Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday) Week --- --- %U Week number of the given year, starting with the first Sunday as the first week 13 (for the 13th full week of the year) %V ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week 01 through 53 (where 53 accounts for an overlapping week) %W A numeric representation of the week of the year, starting with the first Monday as the first week 46 (for the 46th week of the year beginning with a Monday) Month --- --- %b Abbreviated month name, based on the locale Jan through Dec %B Full month name, based on the locale January through December %h Abbreviated month name, based on the locale (an alias of %b) Jan through Dec %m Two digit representation of the month 01 (for January) through 12 (for December) Year --- --- %C Two digit representation of the century (year divided by 100, truncated to an integer) 19 for the 20th Century %g Two digit representation of the year going by ISO-8601:1988 standards (see %V) Example: 09 for the week of January 6, 2009 %G The full four-digit version of %g Example: 2008 for the week of January 3, 2009 %y Two digit representation of the year Example: 09 for 2009, 79 for 1979 %Y Four digit representation for the year Example: 2038 Time --- --- %H Two digit representation of the hour in 24-hour format 00 through 23 %k Two digit representation of the hour in 24-hour format, with a space preceding single digits  0 through 23 %I Two digit representation of the hour in 12-hour format 01 through 12 %l (lower-case 'L') Hour in 12-hour format, with a space preceding single digits  1 through 12 %M Two digit representation of the minute 00 through 59 %p UPPER-CASE 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23 %P lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23 %r Same as \"%I:%M:%S %p\" Example: 09:34:17 PM for 21:34:17 %R Same as \"%H:%M\" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM %S Two digit representation of the second 00 through 59 %T Same as \"%H:%M:%S\" Example: 21:34:17 for 09:34:17 PM %X Preferred time representation based on locale, without the date Example: 03:59:16 or 15:59:16 %z The time zone offset. Not implemented as described on Windows. See below for more information. Example: -0500 for US Eastern Time %Z The time zone abbreviation. Not implemented as described on Windows. See below for more information. Example: EST for Eastern Time Time and Date Stamps --- --- %c Preferred date and time stamp based on locale Example: Tue Feb 5 00:45:10 2009 for February 5, 2009 at 12:45:10 AM %D Same as \"%m/%d/%y\" Example: 02/05/09 for February 5, 2009 %F Same as \"%Y-%m-%d\" (commonly used in database datestamps) Example: 2009-02-05 for February 5, 2009 %s Unix Epoch Time timestamp (same as the time() function) Example: 305815200 for September 10, 1979 08:40:00 AM %x Preferred date representation based on locale, without the time Example: 02/05/09 for February 5, 2009 Miscellaneous --- --- %n A newline character (\"\\n\") --- %t A Tab character (\"\\t\") --- %% A literal percentage character (\"%\") ---  Maximum length of this parameter is 1023 characters.  Warning  Contrary to ISO-9899:1999, Sun Solaris starts with Sunday as 1. As a result, %u may not function as described in this manual.   Warning  Windows only:   The %e modifier is not supported in the Windows implementation of this function. To achieve this value, the %#d modifier can be used instead. The example below illustrates how to write a cross platform compatible function.   The %z and %Z modifiers both return the time zone name instead of the offset or abbreviation.   Warning  Mac OS X only: The %P modifier is not supported in the Mac OS X implementation of this function.", 
                "name": "format"
            }, 
            {
                "descr": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. ", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.strftime", 
        "type": "Date and Time"
    }, 
    "strip_tags": {
        "description": "This function tries to return a string with all NULL bytes, HTML and PHP tags stripped from a given str. It uses the same tag stripping state machine as the fgetss() function.", 
        "name": "strip_tags", 
        "overview": "string strip_tags ( string $str [, string $allowable_tags ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "You can use the optional second parameter to specify tags which should not be stripped. ", 
                "name": "allowable_tags"
            }
        ], 
        "path": "php/function.strip-tags", 
        "type": "String"
    }, 
    "stripcslashes": {
        "description": "Returns a string with backslashes stripped off. Recognizes C-like \\n, \\r ..., octal and hexadecimal representation.", 
        "name": "stripcslashes", 
        "overview": "string stripcslashes ( string $str )", 
        "parameters": [
            {
                "descr": "The string to be unescaped.", 
                "name": "str"
            }
        ], 
        "path": "php/function.stripcslashes", 
        "type": "String"
    }, 
    "stripos": {
        "description": "Find the numeric position of the first occurrence of needle in the haystack string.", 
        "name": "stripos", 
        "overview": "int stripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "Note that the needle may be a string of one or more characters. ", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.stripos", 
        "type": "String"
    }, 
    "stripslashes": {
        "description": "Un-quotes a quoted string.", 
        "name": "stripslashes", 
        "overview": "string stripslashes ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.stripslashes", 
        "type": "String"
    }, 
    "stristr": {
        "description": "Returns all of haystack starting from and including the first occurrence of needle to the end.", 
        "name": "stristr", 
        "overview": "string stristr ( string $haystack , mixed $needle [, bool $before_needle = false ] )", 
        "parameters": [
            {
                "descr": "The string to search in", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, stristr() returns the part of the haystack before the first occurrence of the needle (excluding needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.stristr", 
        "type": "String"
    }, 
    "strlen": {
        "description": "Returns the length of the given string.", 
        "name": "strlen", 
        "overview": "int strlen ( string $string )", 
        "parameters": [
            {
                "descr": "The string being measured for length.", 
                "name": "string"
            }
        ], 
        "path": "php/function.strlen", 
        "type": "String"
    }, 
    "strnatcasecmp": {
        "description": "This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to strnatcmp(), except that the comparison is not case sensitive. For more information see: Martin Pool's \u00bb Natural Order String Comparison page.", 
        "name": "strnatcasecmp", 
        "overview": "int strnatcasecmp ( string $str1 , string $str2 )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strnatcasecmp", 
        "type": "String"
    }, 
    "strnatcmp": {
        "description": "This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a \"natural ordering\". Note that this comparison is case sensitive.", 
        "name": "strnatcmp", 
        "overview": "int strnatcmp ( string $str1 , string $str2 )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }
        ], 
        "path": "php/function.strnatcmp", 
        "type": "String"
    }, 
    "strncasecmp": {
        "description": "This function is similar to strcasecmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.", 
        "name": "strncasecmp", 
        "overview": "int strncasecmp ( string $str1 , string $str2 , int $len )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }, 
            {
                "descr": "The length of strings to be used in the comparison.", 
                "name": "len"
            }
        ], 
        "path": "php/function.strncasecmp", 
        "type": "String"
    }, 
    "strncmp": {
        "description": "This function is similar to strcmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.", 
        "name": "strncmp", 
        "overview": "int strncmp ( string $str1 , string $str2 , int $len )", 
        "parameters": [
            {
                "descr": "The first string.", 
                "name": "str1"
            }, 
            {
                "descr": "The second string.", 
                "name": "str2"
            }, 
            {
                "descr": "Number of characters to use in the comparison.", 
                "name": "len"
            }
        ], 
        "path": "php/function.strncmp", 
        "type": "String"
    }, 
    "strpbrk": {
        "description": "strpbrk() searches the haystack string for a char_list.", 
        "name": "strpbrk", 
        "overview": "string strpbrk ( string $haystack , string $char_list )", 
        "parameters": [
            {
                "descr": "The string where char_list is looked for.", 
                "name": "haystack"
            }, 
            {
                "descr": "This parameter is case sensitive.", 
                "name": "char_list"
            }
        ], 
        "path": "php/function.strpbrk", 
        "type": "String"
    }, 
    "strpos": {
        "description": "Find the numeric position of the first occurrence of needle in the haystack string.", 
        "name": "strpos", 
        "overview": "mixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.strpos", 
        "type": "String"
    }, 
    "strptime": {
        "description": "strptime() returns an array with the date parsed, or FALSE on error.", 
        "name": "strptime", 
        "overview": "array strptime ( string $date , string $format )", 
        "parameters": [
            {
                "descr": "The string to parse (e.g. returned from strftime()).", 
                "name": "date (string)"
            }, 
            {
                "descr": "The format used in date (e.g. the same as used in strftime()). ", 
                "name": "format (string)"
            }
        ], 
        "path": "php/function.strptime", 
        "type": "Date and Time"
    }, 
    "strrchr": {
        "description": "This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.", 
        "name": "strrchr", 
        "overview": "string strrchr ( string $haystack , mixed $needle )", 
        "parameters": [
            {
                "descr": "The string to search in", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle contains more than one character, only the first is used. ", 
                "name": "needle"
            }
        ], 
        "path": "php/function.strrchr", 
        "type": "String"
    }, 
    "strrev": {
        "description": "Returns string, reversed.", 
        "name": "strrev", 
        "overview": "string strrev ( string $string )", 
        "parameters": [
            {
                "descr": "The string to be reversed.", 
                "name": "string"
            }
        ], 
        "path": "php/function.strrev", 
        "type": "String"
    }, 
    "strripos": {
        "description": "Find the numeric position of the last occurrence of needle in the haystack string.", 
        "name": "strripos", 
        "overview": "int strripos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.strripos", 
        "type": "String"
    }, 
    "strrpos": {
        "description": "Find the numeric position of the last occurrence of needle in the haystack string.", 
        "name": "strrpos", 
        "overview": "int strrpos ( string $haystack , string $needle [, int $offset = 0 ] )", 
        "parameters": [
            {
                "descr": "The string to search in.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If specified, search will start this number of characters counted from the beginning of the string. ", 
                "name": "offset"
            }
        ], 
        "path": "php/function.strrpos", 
        "type": "String"
    }, 
    "strspn": {
        "description": "Finds the length of the initial segment of subject that contains only characters from mask.", 
        "name": "strspn", 
        "overview": "int strspn ( string $subject , string $mask [, int $start [, int $length ]] )", 
        "parameters": [
            {
                "descr": "The string to examine.", 
                "name": "subject"
            }, 
            {
                "descr": "The list of allowable characters.", 
                "name": "mask"
            }, 
            {
                "descr": "The position in subject to start searching. ", 
                "name": "start"
            }, 
            {
                "descr": "The length of the segment from subject to examine. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.strspn", 
        "type": "String"
    }, 
    "strstr": {
        "description": "Returns part of haystack string starting from and including the first occurrence of needle to the end of haystack.", 
        "name": "strstr", 
        "overview": "string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "haystack"
            }, 
            {
                "descr": "If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.", 
                "name": "needle"
            }, 
            {
                "descr": "If TRUE, strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle).", 
                "name": "before_needle"
            }
        ], 
        "path": "php/function.strstr", 
        "type": "String"
    }, 
    "strtok": {
        "description": "strtok() splits a string (str) into smaller strings (tokens), with each token being delimited by any character from token. That is, if you have a string like \"This is an example string\" you could tokenize this string into its individual words by using the space character as the token.", 
        "name": "strtok", 
        "overview": "string strtok ( string $str , string $token )", 
        "parameters": [
            {
                "descr": "The string being split up into smaller strings (tokens).", 
                "name": "str"
            }, 
            {
                "descr": "The delimiter used when splitting up str.", 
                "name": "token"
            }
        ], 
        "path": "php/function.strtok", 
        "type": "String"
    }, 
    "strtolower": {
        "description": "Returns string with all alphabetic characters converted to lowercase.", 
        "name": "strtolower", 
        "overview": "string strtolower ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.strtolower", 
        "type": "String"
    }, 
    "strtotime": {
        "description": "", 
        "name": "strtotime", 
        "overview": "int strtotime ( string $time [, int $now = time() ] )", 
        "parameters": [
            {
                "descr": "A date/time string. Valid formats are explained in Date and Time Formats.", 
                "name": "time"
            }, 
            {
                "descr": "The timestamp which is used as a base for the calculation of relative dates.", 
                "name": "now"
            }
        ], 
        "path": "php/function.strtotime", 
        "type": "Date and Time"
    }, 
    "strtoupper": {
        "description": "Returns string with all alphabetic characters converted to uppercase.", 
        "name": "strtoupper", 
        "overview": "string strtoupper ( string $string )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "string"
            }
        ], 
        "path": "php/function.strtoupper", 
        "type": "String"
    }, 
    "strtr": {
        "description": "If given three arguments, this function returns a copy of str where all occurrences of each (single-byte) character in from have been translated to the corresponding character in to, i.e., every occurrence of $from[$n] has been replaced with $to[$n], where $n is a valid offset in both arguments.", 
        "name": "strtr", 
        "overview": "string strtr ( string $str , string $from , string $to )", 
        "parameters": [
            {
                "descr": "The string being translated.", 
                "name": "str"
            }, 
            {
                "descr": "The string being translated to to.", 
                "name": "from"
            }, 
            {
                "descr": "The string replacing from.", 
                "name": "to"
            }, 
            {
                "descr": "The replace_pairs parameter may be used instead of to and from, in which case it's an array in the form array('from' => 'to', ...).", 
                "name": "replace_pairs"
            }
        ], 
        "path": "php/function.strtr", 
        "type": "String"
    }, 
    "strval": {
        "description": "", 
        "name": "strval", 
        "overview": "string strval ( mixed $var )", 
        "parameters": [
            {
                "descr": "The variable that is being converted to a string. ", 
                "name": "var"
            }
        ], 
        "path": "php/function.strval", 
        "type": "Variables"
    }, 
    "substr": {
        "description": "Returns the portion of string specified by the start and length parameters.", 
        "name": "substr", 
        "overview": "string substr ( string $string , int $start [, int $length ] )", 
        "parameters": [
            {
                "descr": "The input string. Must be one character or longer.", 
                "name": "string"
            }, 
            {
                "descr": "If start is non-negative, the returned string will start at the start'th position in string, counting from zero. ", 
                "name": "start"
            }, 
            {
                "descr": "If length is given and is positive, the string returned will contain at most length characters beginning from start (depending on the length of string). ", 
                "name": "length"
            }
        ], 
        "path": "php/function.substr", 
        "type": "String"
    }, 
    "substr_compare": {
        "description": "substr_compare() compares main_str from position offset with str up to length characters.", 
        "name": "substr_compare", 
        "overview": "int substr_compare ( string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity = false ]] )", 
        "parameters": [
            {
                "descr": "The main string being compared.", 
                "name": "main_str"
            }, 
            {
                "descr": "The secondary string being compared.", 
                "name": "str"
            }, 
            {
                "descr": "The start position for the comparison. ", 
                "name": "offset"
            }, 
            {
                "descr": "The length of the comparison. The default value is the largest of the length of the str compared to the length of main_str less the offset.", 
                "name": "length"
            }, 
            {
                "descr": "If case_insensitivity is TRUE, comparison is case insensitive.", 
                "name": "case_insensitivity"
            }
        ], 
        "path": "php/function.substr-compare", 
        "type": "String"
    }, 
    "substr_count": {
        "description": "substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive.", 
        "name": "substr_count", 
        "overview": "int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )", 
        "parameters": [
            {
                "descr": "The string to search in", 
                "name": "haystack"
            }, 
            {
                "descr": "The substring to search for", 
                "name": "needle"
            }, 
            {
                "descr": "The offset where to start counting", 
                "name": "offset"
            }, 
            {
                "descr": "The maximum length after the specified offset to search for the substring. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.substr-count", 
        "type": "String"
    }, 
    "substr_replace": {
        "description": "substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.", 
        "name": "substr_replace", 
        "overview": "mixed substr_replace ( mixed $string , mixed $replacement , mixed $start [, mixed $length ] )", 
        "parameters": [
            {
                "descr": "The input string.   An array of strings can be provided, in which case the replacements will occur on each string in turn. ", 
                "name": "string"
            }, 
            {
                "descr": "The replacement string.", 
                "name": "replacement"
            }, 
            {
                "descr": "If start is positive, the replacing will begin at the start'th offset into string. ", 
                "name": "start"
            }, 
            {
                "descr": "If given and is positive, it represents the length of the portion of string which is to be replaced. ", 
                "name": "length"
            }
        ], 
        "path": "php/function.substr-replace", 
        "type": "String"
    }, 
    "symlink": {
        "description": "symlink() creates a symbolic link to the existing target with the specified name link.", 
        "name": "symlink", 
        "overview": "bool symlink ( string $target , string $link )", 
        "parameters": [
            {
                "descr": "Target of the link.", 
                "name": "target"
            }, 
            {
                "descr": "The link name.", 
                "name": "link"
            }
        ], 
        "path": "php/function.symlink", 
        "type": "File System"
    }, 
    "sys_get_temp_dir": {
        "description": "Returns the path of the directory PHP stores temporary files in by default.", 
        "name": "sys_get_temp_dir", 
        "overview": "string sys_get_temp_dir ( void )", 
        "parameters": [], 
        "path": "php/function.sys-get-temp-dir", 
        "type": "Language"
    }, 
    "sys_getloadavg": {
        "description": "Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.", 
        "name": "sys_getloadavg", 
        "overview": "array sys_getloadavg ( void )", 
        "parameters": [], 
        "path": "php/function.sys-getloadavg", 
        "type": "Language"
    }, 
    "syslog": {
        "description": "syslog() generates a log message that will be distributed by the system logger.", 
        "name": "syslog", 
        "overview": "bool syslog ( int $priority , string $message )", 
        "parameters": [
            {
                "descr": "priority is a combination of the facility and the level. ", 
                "name": "priority"
            }, 
            {
                "descr": "The message to send, except that the two characters %m will be replaced by the error message string (strerror) corresponding to the present value of errno.", 
                "name": "message"
            }
        ], 
        "path": "php/function.syslog", 
        "type": "Networking"
    }, 
    "system": {
        "description": "system() is just like the C version of the function in that it executes the given command and outputs the result.", 
        "name": "system", 
        "overview": "string system ( string $command [, int &$return_var ] )", 
        "parameters": [
            {
                "descr": "The command that will be executed.", 
                "name": "command"
            }, 
            {
                "descr": "If the return_var argument is present, then the return status of the executed command will be written to this variable.", 
                "name": "return_var"
            }
        ], 
        "path": "php/function.system", 
        "type": "Process Control"
    }, 
    "taint": {
        "description": "Make a string tainted. This is used for testing purpose only.", 
        "name": "taint", 
        "overview": "bool taint ( string &$string [, string $... ] )", 
        "parameters": [], 
        "path": "php/function.taint", 
        "type": "String"
    }, 
    "tan": {
        "description": "tan() returns the tangent of the arg parameter. The arg parameter is in radians.", 
        "name": "tan", 
        "overview": "float tan ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process in radians", 
                "name": "arg"
            }
        ], 
        "path": "php/function.tan", 
        "type": "Mathematics"
    }, 
    "tanh": {
        "description": "Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).", 
        "name": "tanh", 
        "overview": "float tanh ( float $arg )", 
        "parameters": [
            {
                "descr": "The argument to process", 
                "name": "arg"
            }
        ], 
        "path": "php/function.tanh", 
        "type": "Mathematics"
    }, 
    "tempnam": {
        "description": "Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist, tempnam() may generate a file in the system's temporary directory, and return the name of that.", 
        "name": "tempnam", 
        "overview": "string tempnam ( string $dir , string $prefix )", 
        "parameters": [
            {
                "descr": "The directory where the temporary filename will be created.", 
                "name": "dir"
            }, 
            {
                "descr": "The prefix of the generated temporary filename. ", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.tempnam", 
        "type": "File System"
    }, 
    "textdomain": {
        "description": "This function sets the domain to search within when calls are made to gettext(), usually the named after an application.", 
        "name": "textdomain", 
        "overview": "string textdomain ( string $text_domain )", 
        "parameters": [
            {
                "descr": "The new message domain, or NULL to get the current setting without changing it", 
                "name": "text_domain"
            }
        ], 
        "path": "php/function.textdomain", 
        "type": "Encoding"
    }, 
    "tidy": {
        "description": "", 
        "name": "tidy", 
        "overview": "tidyNode body ( void )", 
        "parameters": [], 
        "path": "php/class.tidy", 
        "type": "HTML"
    }, 
    "tidy::$errorBuffer": {
        "description": "Returns warnings and errors which occurred parsing the specified document.", 
        "name": "tidy::$errorBuffer", 
        "overview": "string tidy_get_error_buffer ( tidy $tidy )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "tidy"
            }
        ], 
        "path": "php/tidy.props.errorbuffer", 
        "type": "HTML"
    }, 
    "tidy::__construct": {
        "description": "Constructs a new tidy object.", 
        "name": "tidy::__construct", 
        "overview": "tidy::__construct ([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]] )", 
        "parameters": [
            {
                "descr": "If the filename parameter is given, this function will also read that file and initialize the object with the file, acting like tidy_parse_file().", 
                "name": "filename"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }, 
            {
                "descr": "Search for the file in the include_path.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/tidy.construct", 
        "type": "HTML"
    }, 
    "tidy::body": {
        "description": "Returns a tidyNode object starting from the <body> tag of the tidy parse tree.", 
        "name": "tidy::body", 
        "overview": "tidyNode tidy::body ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.body", 
        "type": "HTML"
    }, 
    "tidy::cleanRepair": {
        "description": "This function cleans and repairs the given tidy object.", 
        "name": "tidy::cleanRepair", 
        "overview": "bool tidy::cleanRepair ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.cleanrepair", 
        "type": "HTML"
    }, 
    "tidy::diagnose": {
        "description": "Runs diagnostic tests on the given tidy object, adding some more information about the document in the error buffer.", 
        "name": "tidy::diagnose", 
        "overview": "bool tidy::diagnose ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.diagnose", 
        "type": "HTML"
    }, 
    "tidy::getConfig": {
        "description": "Gets the list of the configuration options in use by the given tidy object.", 
        "name": "tidy::getConfig", 
        "overview": "array tidy::getConfig ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.getconfig", 
        "type": "HTML"
    }, 
    "tidy::getHtmlVer": {
        "description": "Returns the detected HTML version for the specified tidy object.", 
        "name": "tidy::getHtmlVer", 
        "overview": "int tidy::getHtmlVer ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.gethtmlver", 
        "type": "HTML"
    }, 
    "tidy::getOpt": {
        "description": "Returns the value of the specified option for the specified tidy object.", 
        "name": "tidy::getOpt", 
        "overview": "mixed tidy::getOpt ( string $option )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }, 
            {
                "descr": "You will find a list with each configuration option and their types at: \u00bb http://tidy.sourceforge.net/docs/quickref.html.", 
                "name": "option"
            }
        ], 
        "path": "php/tidy.getopt", 
        "type": "HTML"
    }, 
    "tidy::getOptDoc": {
        "description": "tidy_get_opt_doc() returns the documentation for the given option name.", 
        "name": "tidy::getOptDoc", 
        "overview": "string tidy::getOptDoc ( string $optname )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }, 
            {
                "descr": "The option name", 
                "name": "optname"
            }
        ], 
        "path": "php/tidy.getoptdoc", 
        "type": "HTML"
    }, 
    "tidy::getRelease": {
        "description": "Gets the release date of the Tidy library.", 
        "name": "tidy::getRelease", 
        "overview": "string tidy::getRelease ( void )", 
        "parameters": [], 
        "path": "php/tidy.getrelease", 
        "type": "HTML"
    }, 
    "tidy::getStatus": {
        "description": "Returns the status for the specified tidy object.", 
        "name": "tidy::getStatus", 
        "overview": "int tidy::getStatus ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.getstatus", 
        "type": "HTML"
    }, 
    "tidy::head": {
        "description": "Returns a tidyNode object starting from the <head> tag of the tidy parse tree.", 
        "name": "tidy::head", 
        "overview": "tidyNode tidy::head ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.head", 
        "type": "HTML"
    }, 
    "tidy::html": {
        "description": "Returns a tidyNode object starting from the <head> tag of the tidy parse tree.", 
        "name": "tidy::html", 
        "overview": "tidyNode tidy::head ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.html", 
        "type": "HTML"
    }, 
    "tidy::isXhtml": {
        "description": "Tells if the document is a XHTML document.", 
        "name": "tidy::isXhtml", 
        "overview": "bool tidy::isXhtml ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.isxhtml", 
        "type": "HTML"
    }, 
    "tidy::isXml": {
        "description": "Tells if the document is a generic (non HTML/XHTML) XML document.", 
        "name": "tidy::isXml", 
        "overview": "bool tidy::isXml ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.isxml", 
        "type": "HTML"
    }, 
    "tidy::parseFile": {
        "description": "Parses the given file.", 
        "name": "tidy::parseFile", 
        "overview": "bool tidy::parseFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]] )", 
        "parameters": [
            {
                "descr": "If the filename parameter is given, this function will also read that file and initialize the object with the file, acting like tidy_parse_file().", 
                "name": "filename"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }, 
            {
                "descr": "Search for the file in the include_path.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/tidy.parsefile", 
        "type": "HTML"
    }, 
    "tidy::parseString": {
        "description": "Parses a document stored in a string.", 
        "name": "tidy::parseString", 
        "overview": "bool tidy::parseString ( string $input [, mixed $config [, string $encoding ]] )", 
        "parameters": [
            {
                "descr": "The data to be parsed.", 
                "name": "input"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/tidy.parsestring", 
        "type": "HTML"
    }, 
    "tidy::repairFile": {
        "description": "Repairs the given file and returns it as a string.", 
        "name": "tidy::repairFile", 
        "overview": "string tidy::repairFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]] )", 
        "parameters": [
            {
                "descr": "The file to be repaired.", 
                "name": "filename"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }, 
            {
                "descr": "Search for the file in the include_path.", 
                "name": "use_include_path"
            }
        ], 
        "path": "php/tidy.repairfile", 
        "type": "HTML"
    }, 
    "tidy::repairString": {
        "description": "Repairs the given string.", 
        "name": "tidy::repairString", 
        "overview": "string tidy::repairString ( string $data [, mixed $config [, string $encoding ]] )", 
        "parameters": [
            {
                "descr": "The data to be repaired.", 
                "name": "data"
            }, 
            {
                "descr": "The config config can be passed either as an array or as a string. ", 
                "name": "config"
            }, 
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/tidy.repairstring", 
        "type": "HTML"
    }, 
    "tidy::root": {
        "description": "Returns a tidyNode object representing the root of the tidy parse tree.", 
        "name": "tidy::root", 
        "overview": "tidyNode tidy::root ( void )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/tidy.root", 
        "type": "HTML"
    }, 
    "tidyNode": {
        "description": "", 
        "name": "tidyNode", 
        "overview": "tidyNode getParent ( void )", 
        "parameters": [], 
        "path": "php/class.tidynode", 
        "type": "HTML"
    }, 
    "tidyNode::getParent": {
        "description": "Returns the parent node of the current node.", 
        "name": "tidyNode::getParent", 
        "overview": "tidyNode tidyNode::getParent ( void )", 
        "parameters": [], 
        "path": "php/tidynode.getparent", 
        "type": "HTML"
    }, 
    "tidyNode::hasChildren": {
        "description": "Tells if the node has children.", 
        "name": "tidyNode::hasChildren", 
        "overview": "bool tidyNode::hasChildren ( void )", 
        "parameters": [], 
        "path": "php/tidynode.haschildren", 
        "type": "HTML"
    }, 
    "tidyNode::hasSiblings": {
        "description": "Tells if the node has siblings.", 
        "name": "tidyNode::hasSiblings", 
        "overview": "bool tidyNode::hasSiblings ( void )", 
        "parameters": [], 
        "path": "php/tidynode.hassiblings", 
        "type": "HTML"
    }, 
    "tidyNode::isAsp": {
        "description": "Tells whether the current node is ASP.", 
        "name": "tidyNode::isAsp", 
        "overview": "bool tidyNode::isAsp ( void )", 
        "parameters": [], 
        "path": "php/tidynode.isasp", 
        "type": "HTML"
    }, 
    "tidyNode::isComment": {
        "description": "Tells if the node is a comment.", 
        "name": "tidyNode::isComment", 
        "overview": "bool tidyNode::isComment ( void )", 
        "parameters": [], 
        "path": "php/tidynode.iscomment", 
        "type": "HTML"
    }, 
    "tidyNode::isHtml": {
        "description": "Tells if the node is part of HTML document.", 
        "name": "tidyNode::isHtml", 
        "overview": "bool tidyNode::isHtml ( void )", 
        "parameters": [], 
        "path": "php/tidynode.ishtml", 
        "type": "HTML"
    }, 
    "tidyNode::isJste": {
        "description": "Tells if the node is JSTE.", 
        "name": "tidyNode::isJste", 
        "overview": "bool tidyNode::isJste ( void )", 
        "parameters": [], 
        "path": "php/tidynode.isjste", 
        "type": "HTML"
    }, 
    "tidyNode::isPhp": {
        "description": "Tells if the node is PHP.", 
        "name": "tidyNode::isPhp", 
        "overview": "bool tidyNode::isPhp ( void )", 
        "parameters": [], 
        "path": "php/tidynode.isphp", 
        "type": "HTML"
    }, 
    "tidyNode::isText": {
        "description": "Tells if the node represents a text (without any markup).", 
        "name": "tidyNode::isText", 
        "overview": "bool tidyNode::isText ( void )", 
        "parameters": [], 
        "path": "php/tidynode.istext", 
        "type": "HTML"
    }, 
    "tidy_access_count": {
        "description": "tidy_access_count() returns the number of accessibility warnings found for the specified document.", 
        "name": "tidy_access_count", 
        "overview": "int tidy_access_count ( tidy $object )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-access-count", 
        "type": "HTML"
    }, 
    "tidy_config_count": {
        "description": "Returns the number of errors encountered in the configuration of the specified tidy object.", 
        "name": "tidy_config_count", 
        "overview": "int tidy_config_count ( tidy $object )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-config-count", 
        "type": "HTML"
    }, 
    "tidy_error_count": {
        "description": "Returns the number of Tidy errors encountered for the specified document.", 
        "name": "tidy_error_count", 
        "overview": "int tidy_error_count ( tidy $object )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-error-count", 
        "type": "HTML"
    }, 
    "tidy_get_output": {
        "description": "Gets a string with the repaired html.", 
        "name": "tidy_get_output", 
        "overview": "string tidy_get_output ( tidy $object )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-get-output", 
        "type": "HTML"
    }, 
    "tidy_load_config": {
        "description": "Loads a Tidy configuration file, with the specified encoding.", 
        "name": "tidy_load_config", 
        "overview": "void tidy_load_config ( string $filename , string $encoding )", 
        "parameters": [], 
        "path": "php/function.tidy-load-config", 
        "type": "HTML"
    }, 
    "tidy_reset_config": {
        "description": "This function restores the Tidy configuration to the default values.", 
        "name": "tidy_reset_config", 
        "overview": "bool tidy_reset_config ( void )", 
        "parameters": [], 
        "path": "php/function.tidy-reset-config", 
        "type": "HTML"
    }, 
    "tidy_save_config": {
        "description": "Saves current settings to the specified file. Only non-default values are written.", 
        "name": "tidy_save_config", 
        "overview": "bool tidy_save_config ( string $filename )", 
        "parameters": [
            {
                "descr": "Path to the config file.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.tidy-save-config", 
        "type": "HTML"
    }, 
    "tidy_set_encoding": {
        "description": "Sets the encoding for input/output documents.", 
        "name": "tidy_set_encoding", 
        "overview": "bool tidy_set_encoding ( string $encoding )", 
        "parameters": [
            {
                "descr": "The encoding parameter sets the encoding for input/output documents. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.tidy-set-encoding", 
        "type": "HTML"
    }, 
    "tidy_setopt": {
        "description": "tidy_setopt() updates the specified option with a new value.", 
        "name": "tidy_setopt", 
        "overview": "bool tidy_setopt ( string $option , mixed $value )", 
        "parameters": [
            {
                "descr": "The tidy option name. A list of available configuration options may be found at: \u00bb http://tidy.sourceforge.net/docs/quickref.html.", 
                "name": "option"
            }, 
            {
                "descr": "The tidy option name.", 
                "name": "value"
            }
        ], 
        "path": "php/function.tidy-setopt", 
        "type": "HTML"
    }, 
    "tidy_warning_count": {
        "description": "Returns the number of Tidy warnings encountered for the specified document.", 
        "name": "tidy_warning_count", 
        "overview": "int tidy_warning_count ( tidy $object )", 
        "parameters": [
            {
                "descr": "The Tidy object.", 
                "name": "object"
            }
        ], 
        "path": "php/function.tidy-warning-count", 
        "type": "HTML"
    }, 
    "time": {
        "description": "Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).", 
        "name": "time", 
        "overview": "int time ( void )", 
        "parameters": [], 
        "path": "php/function.time", 
        "type": "Date and Time"
    }, 
    "time_nanosleep": {
        "description": "Delays program execution for the given number of seconds and nanoseconds.", 
        "name": "time_nanosleep", 
        "overview": "mixed time_nanosleep ( int $seconds , int $nanoseconds )", 
        "parameters": [
            {
                "descr": "Must be a non-negative integer.", 
                "name": "seconds"
            }, 
            {
                "descr": "Must be a non-negative integer less than 1 billion.", 
                "name": "nanoseconds"
            }
        ], 
        "path": "php/function.time-nanosleep", 
        "type": "Language"
    }, 
    "time_sleep_until": {
        "description": "Makes the script sleep until the specified timestamp.", 
        "name": "time_sleep_until", 
        "overview": "bool time_sleep_until ( float $timestamp )", 
        "parameters": [
            {
                "descr": "The timestamp when the script should wake.", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.time-sleep-until", 
        "type": "Language"
    }, 
    "timezone_name_from_abbr": {
        "description": "", 
        "name": "timezone_name_from_abbr", 
        "overview": "string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )", 
        "parameters": [
            {
                "descr": "Time zone abbreviation.", 
                "name": "abbr"
            }, 
            {
                "descr": "Offset from GMT in seconds. Defaults to -1 which means that first found time zone corresponding to abbr is returned. ", 
                "name": "gmtOffset"
            }, 
            {
                "descr": "Daylight saving time indicator. ", 
                "name": "isdst"
            }
        ], 
        "path": "php/function.timezone-name-from-abbr", 
        "type": "Date and Time"
    }, 
    "timezone_version_get": {
        "description": "Returns the current version of the timezonedb.", 
        "name": "timezone_version_get", 
        "overview": "string timezone_version_get ( void )", 
        "parameters": [], 
        "path": "php/function.timezone-version-get", 
        "type": "Date and Time"
    }, 
    "tmpfile": {
        "description": "Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle .", 
        "name": "tmpfile", 
        "overview": "resource tmpfile ( void )", 
        "parameters": [], 
        "path": "php/function.tmpfile", 
        "type": "File System"
    }, 
    "touch": {
        "description": "Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters.", 
        "name": "touch", 
        "overview": "bool touch ( string $filename [, int $time = time() [, int $atime ]] )", 
        "parameters": [
            {
                "descr": "The name of the file being touched.", 
                "name": "filename"
            }, 
            {
                "descr": "The touch time. If time is not supplied, the current system time is used.", 
                "name": "time"
            }, 
            {
                "descr": "If present, the access time of the given filename is set to the value of atime. ", 
                "name": "atime"
            }
        ], 
        "path": "php/function.touch", 
        "type": "File System"
    }, 
    "trait_exists": {
        "description": "", 
        "name": "trait_exists", 
        "overview": "bool trait_exists ( string $traitname [, bool $autoload ] )", 
        "parameters": [
            {
                "descr": "Name of the trait to check", 
                "name": "traitname"
            }, 
            {
                "descr": "Whether to autoload if not already loaded.", 
                "name": "autoload"
            }
        ], 
        "path": "php/function.trait-exists", 
        "type": "Classes and Functions"
    }, 
    "trigger_error": {
        "description": "Used to trigger a user error condition, it can be used in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (set_error_handler()).", 
        "name": "trigger_error", 
        "overview": "bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )", 
        "parameters": [
            {
                "descr": "The designated error message for this error. ", 
                "name": "error_msg"
            }, 
            {
                "descr": "The designated error type for this error. ", 
                "name": "error_type"
            }
        ], 
        "path": "php/function.trigger-error", 
        "type": "Errors"
    }, 
    "trim": {
        "description": "This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim() will strip these characters:", 
        "name": "trim", 
        "overview": "string trim ( string $str [, string $character_mask = \" \\t\\n\\r\\0\\x0B\" ] )", 
        "parameters": [
            {
                "descr": "The string that will be trimmed.", 
                "name": "str"
            }, 
            {
                "descr": "Optionally, the stripped characters can also be specified using the character_mask parameter. ", 
                "name": "character_mask"
            }
        ], 
        "path": "php/function.trim", 
        "type": "String"
    }, 
    "uasort": {
        "description": "This function sorts an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function.", 
        "name": "uasort", 
        "overview": "bool uasort ( array &$array , callable $value_compare_func )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "See usort() and uksort() for examples of user-defined comparison functions.", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.uasort", 
        "type": "Array"
    }, 
    "ucfirst": {
        "description": "Returns a string with the first character of str capitalized, if that character is alphabetic.", 
        "name": "ucfirst", 
        "overview": "string ucfirst ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.ucfirst", 
        "type": "String"
    }, 
    "ucwords": {
        "description": "Returns a string with the first character of each word in str capitalized, if that character is alphabetic.", 
        "name": "ucwords", 
        "overview": "string ucwords ( string $str )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }
        ], 
        "path": "php/function.ucwords", 
        "type": "String"
    }, 
    "uksort": {
        "description": "uksort() will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.", 
        "name": "uksort", 
        "overview": "bool uksort ( array &$array , callable $key_compare_func )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "key_compare_func"
            }
        ], 
        "path": "php/function.uksort", 
        "type": "Array"
    }, 
    "umask": {
        "description": "umask() sets PHP's umask to mask & 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.", 
        "name": "umask", 
        "overview": "int umask ([ int $mask ] )", 
        "parameters": [
            {
                "descr": "The new umask.", 
                "name": "mask"
            }
        ], 
        "path": "php/function.umask", 
        "type": "File System"
    }, 
    "uniqid": {
        "description": "Gets a prefixed unique identifier based on the current time in microseconds.", 
        "name": "uniqid", 
        "overview": "string uniqid ([ string $prefix = \"\" [, bool $more_entropy = false ]] )", 
        "parameters": [
            {
                "descr": "Can be useful, for instance, if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond. ", 
                "name": "prefix"
            }, 
            {
                "descr": "If set to TRUE, uniqid() will add additional entropy (using the combined linear congruential generator) at the end of the return value, which increases the likelihood that the result will be unique.", 
                "name": "more_entropy"
            }
        ], 
        "path": "php/function.uniqid", 
        "type": "Language"
    }, 
    "unixtojd": {
        "description": "Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given.", 
        "name": "unixtojd", 
        "overview": "int unixtojd ([ int $timestamp = time() ] )", 
        "parameters": [
            {
                "descr": "A unix timestamp to convert.", 
                "name": "timestamp"
            }
        ], 
        "path": "php/function.unixtojd", 
        "type": "Date and Time"
    }, 
    "unlink": {
        "description": "Deletes filename. Similar to the Unix C unlink() function. A E_WARNING level error will be generated on failure.", 
        "name": "unlink", 
        "overview": "bool unlink ( string $filename [, resource $context ] )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Note: Context support was added with PHP 5.0.0. ", 
                "name": "context"
            }
        ], 
        "path": "php/function.unlink", 
        "type": "File System"
    }, 
    "unpack": {
        "description": "Unpacks from a binary string into an array according to the given format.", 
        "name": "unpack", 
        "overview": "array unpack ( string $format , string $data )", 
        "parameters": [
            {
                "descr": "See pack() for an explanation of the format codes.", 
                "name": "format"
            }, 
            {
                "descr": "The packed data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.unpack", 
        "type": "Language"
    }, 
    "unregister_tick_function": {
        "description": "", 
        "name": "unregister_tick_function", 
        "overview": "void unregister_tick_function ( string $function_name )", 
        "parameters": [
            {
                "descr": "The function name, as a string.", 
                "name": "function_name"
            }
        ], 
        "path": "php/function.unregister-tick-function", 
        "type": "Classes and Functions"
    }, 
    "unserialize": {
        "description": "", 
        "name": "unserialize", 
        "overview": "mixed unserialize ( string $str )", 
        "parameters": [
            {
                "descr": "The serialized string.   If the variable being unserialized is an object, after successfully reconstructing the object PHP will automatically attempt to call the __wakeup() member function (if it exists).  Note: unserialize_callback_func directive It's possible to set a callback-function which will be called, if an undefined class should be instantiated during unserializing. (to prevent getting an incomplete object \"__PHP_Incomplete_Class\".) Use your php.ini, ini_set() or .htaccess to define 'unserialize_callback_func'. Everytime an undefined class should be instantiated, it'll be called. To disable this feature just empty this setting.", 
                "name": "str"
            }
        ], 
        "path": "php/function.unserialize", 
        "type": "Variables"
    }, 
    "unset": {
        "description": "unset() destroys the specified variables.", 
        "name": "unset", 
        "overview": "void unset ( mixed $var [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The variable to be unset.", 
                "name": "var"
            }, 
            {
                "descr": "Another variable ...", 
                "name": "..."
            }
        ], 
        "path": "php/function.unset", 
        "type": "Variables"
    }, 
    "untaint": {
        "description": "Untaint strings", 
        "name": "untaint", 
        "overview": "bool untaint ( string &$string [, string $... ] )", 
        "parameters": [], 
        "path": "php/function.untaint", 
        "type": "String"
    }, 
    "urldecode": {
        "description": "Decodes any %## encoding in the given string. Plus symbols ('+') are decoded to a space character.", 
        "name": "urldecode", 
        "overview": "string urldecode ( string $str )", 
        "parameters": [
            {
                "descr": "The string to be decoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.urldecode", 
        "type": "Networking"
    }, 
    "urlencode": {
        "description": "This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.", 
        "name": "urlencode", 
        "overview": "string urlencode ( string $str )", 
        "parameters": [
            {
                "descr": "The string to be encoded.", 
                "name": "str"
            }
        ], 
        "path": "php/function.urlencode", 
        "type": "Networking"
    }, 
    "use_soap_error_handler": {
        "description": "This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value. If set to TRUE, details of errors in a SoapServer application will be sent to the client as a SOAP fault message. If FALSE, the standard PHP error handler is used. The default is to use the standard PHP error handler.", 
        "name": "use_soap_error_handler", 
        "overview": "bool use_soap_error_handler ([ bool $handler = true ] )", 
        "parameters": [
            {
                "descr": "Set to TRUE to send error details to clients.", 
                "name": "handler"
            }
        ], 
        "path": "php/function.use-soap-error-handler", 
        "type": "SOAP"
    }, 
    "usleep": {
        "description": "Delays program execution for the given number of micro seconds.", 
        "name": "usleep", 
        "overview": "void usleep ( int $micro_seconds )", 
        "parameters": [
            {
                "descr": "Halt time in micro seconds. A micro second is one millionth of a second.", 
                "name": "micro_seconds"
            }
        ], 
        "path": "php/function.usleep", 
        "type": "Language"
    }, 
    "usort": {
        "description": "This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.", 
        "name": "usort", 
        "overview": "bool usort ( array &$array , callable $value_compare_func )", 
        "parameters": [
            {
                "descr": "The input array.", 
                "name": "array"
            }, 
            {
                "descr": "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. ", 
                "name": "value_compare_func"
            }
        ], 
        "path": "php/function.usort", 
        "type": "Array"
    }, 
    "utf8_decode": {
        "description": "This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.", 
        "name": "utf8_decode", 
        "overview": "string utf8_decode ( string $data )", 
        "parameters": [
            {
                "descr": "An UTF-8 encoded string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.utf8-decode", 
        "type": "XML"
    }, 
    "utf8_encode": {
        "description": "This function encodes the string data to UTF-8, and returns the encoded version. UTF-8 is a standard mechanism used by Unicode for encoding wide character values into a byte stream. UTF-8 is transparent to plain ASCII characters, is self-synchronized (meaning it is possible for a program to figure out where in the bytestream characters start) and can be used with normal string comparison functions for sorting and such. PHP encodes UTF-8 characters in up to four bytes, like this:", 
        "name": "utf8_encode", 
        "overview": "string utf8_encode ( string $data )", 
        "parameters": [
            {
                "descr": "An ISO-8859-1 string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.utf8-encode", 
        "type": "XML"
    }, 
    "var_dump": {
        "description": "", 
        "name": "var_dump", 
        "overview": "void var_dump ( mixed $expression [, mixed $... ] )", 
        "parameters": [
            {
                "descr": "The variable you want to dump.", 
                "name": "expression"
            }
        ], 
        "path": "php/function.var-dump", 
        "type": "Variables"
    }, 
    "var_export": {
        "description": "", 
        "name": "var_export", 
        "overview": "mixed var_export ( mixed $expression [, bool $return = false ] )", 
        "parameters": [
            {
                "descr": "The variable you want to export.", 
                "name": "expression"
            }, 
            {
                "descr": "If used and set to TRUE, var_export() will return the variable representation instead of outputting it.", 
                "name": "return"
            }
        ], 
        "path": "php/function.var-export", 
        "type": "Variables"
    }, 
    "version_compare": {
        "description": "version_compare() compares two \"PHP-standardized\" version number strings. This is useful if you would like to write programs working only on some versions of PHP.", 
        "name": "version_compare", 
        "overview": "mixed version_compare ( string $version1 , string $version2 [, string $operator ] )", 
        "parameters": [
            {
                "descr": "First version number.", 
                "name": "version1"
            }, 
            {
                "descr": "Second version number.", 
                "name": "version2"
            }, 
            {
                "descr": "If you specify the third optional operator argument, you can test for a particular relationship. ", 
                "name": "operator"
            }
        ], 
        "path": "php/function.version-compare", 
        "type": "Language"
    }, 
    "vfprintf": {
        "description": "Write a string produced according to format to the stream resource specified by handle.", 
        "name": "vfprintf", 
        "overview": "int vfprintf ( resource $handle , string $format , array $args )", 
        "parameters": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "handle   format"
            }
        ], 
        "path": "php/function.vfprintf", 
        "type": "String"
    }, 
    "virtual": {
        "description": "virtual() is an Apache-specific function which is similar to <!--#include virtual...--> in mod_include. It performs an Apache sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a Content-Type header.", 
        "name": "virtual", 
        "overview": "bool virtual ( string $filename )", 
        "parameters": [
            {
                "descr": "The file that the virtual command will be performed on.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.virtual", 
        "type": "Apache"
    }, 
    "vprintf": {
        "description": "Display array values as a formatted string according to format (which is described in the documentation for sprintf()).", 
        "name": "vprintf", 
        "overview": "int vprintf ( string $format , array $args )", 
        "parameters": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.vprintf", 
        "type": "String"
    }, 
    "vsprintf": {
        "description": "Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments.", 
        "name": "vsprintf", 
        "overview": "string vsprintf ( string $format , array $args )", 
        "parameters": [
            {
                "descr": "See sprintf() for a description of format.", 
                "name": "format"
            }
        ], 
        "path": "php/function.vsprintf", 
        "type": "String"
    }, 
    "wordwrap": {
        "description": "Wraps a string to a given number of characters using a string break character.", 
        "name": "wordwrap", 
        "overview": "string wordwrap ( string $str [, int $width = 75 [, string $break = \"\\n\" [, bool $cut = false ]]] )", 
        "parameters": [
            {
                "descr": "The input string.", 
                "name": "str"
            }, 
            {
                "descr": "The number of characters at which the string will be wrapped.", 
                "name": "width"
            }, 
            {
                "descr": "The line is broken using the optional break parameter.", 
                "name": "break"
            }, 
            {
                "descr": "If the cut is set to TRUE, the string is always wrapped at or before the specified width. ", 
                "name": "cut"
            }
        ], 
        "path": "php/function.wordwrap", 
        "type": "String"
    }, 
    "xml_error_string": {
        "description": "Gets the XML parser error string associated with the given code.", 
        "name": "xml_error_string", 
        "overview": "string xml_error_string ( int $code )", 
        "parameters": [
            {
                "descr": "An error code from xml_get_error_code().", 
                "name": "code"
            }
        ], 
        "path": "php/function.xml-error-string", 
        "type": "XML"
    }, 
    "xml_get_current_byte_index": {
        "description": "Gets the current byte index of the given XML parser.", 
        "name": "xml_get_current_byte_index", 
        "overview": "int xml_get_current_byte_index ( resource $parser )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to get byte index from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-current-byte-index", 
        "type": "XML"
    }, 
    "xml_get_current_column_number": {
        "description": "Gets the current column number of the given XML parser.", 
        "name": "xml_get_current_column_number", 
        "overview": "int xml_get_current_column_number ( resource $parser )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to get column number from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-current-column-number", 
        "type": "XML"
    }, 
    "xml_get_current_line_number": {
        "description": "Gets the current line number for the given XML parser.", 
        "name": "xml_get_current_line_number", 
        "overview": "int xml_get_current_line_number ( resource $parser )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to get line number from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-current-line-number", 
        "type": "XML"
    }, 
    "xml_get_error_code": {
        "description": "Gets the XML parser error code.", 
        "name": "xml_get_error_code", 
        "overview": "int xml_get_error_code ( resource $parser )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to get error code from.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-get-error-code", 
        "type": "XML"
    }, 
    "xml_parse": {
        "description": "xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary.", 
        "name": "xml_parse", 
        "overview": "int xml_parse ( resource $parser , string $data [, bool $is_final = false ] )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to use.", 
                "name": "parser"
            }, 
            {
                "descr": "Chunk of data to parse. A document may be parsed piece-wise by calling xml_parse() several times with new data, as long as the is_final parameter is set and TRUE when the last data is parsed.", 
                "name": "data"
            }, 
            {
                "descr": "If set and TRUE, data is the last piece of data sent in this parse.", 
                "name": "is_final"
            }
        ], 
        "path": "php/function.xml-parse", 
        "type": "XML"
    }, 
    "xml_parse_into_struct": {
        "description": "This function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference.", 
        "name": "xml_parse_into_struct", 
        "overview": "int xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser.", 
                "name": "parser"
            }, 
            {
                "descr": "A string containing the XML data.", 
                "name": "data"
            }, 
            {
                "descr": "An array containing the values of the XML data", 
                "name": "values"
            }, 
            {
                "descr": "An array containing pointers to the location of the appropriate values in the $values.", 
                "name": "index"
            }
        ], 
        "path": "php/function.xml-parse-into-struct", 
        "type": "XML"
    }, 
    "xml_parser_create": {
        "description": "xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.", 
        "name": "xml_parser_create", 
        "overview": "resource xml_parser_create ([ string $encoding ] )", 
        "parameters": [
            {
                "descr": "The optional encoding specifies the character encoding for the input/output in PHP 4. ", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.xml-parser-create", 
        "type": "XML"
    }, 
    "xml_parser_create_ns": {
        "description": "xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.", 
        "name": "xml_parser_create_ns", 
        "overview": "resource xml_parser_create_ns ([ string $encoding [, string $separator = ':' ]] )", 
        "parameters": [
            {
                "descr": "The optional encoding specifies the character encoding for the input/output in PHP 4. ", 
                "name": "encoding"
            }, 
            {
                "descr": "With a namespace aware parser tag parameters passed to the various handler functions will consist of namespace and tag name separated by the string specified in separator.", 
                "name": "separator"
            }
        ], 
        "path": "php/function.xml-parser-create-ns", 
        "type": "XML"
    }, 
    "xml_parser_free": {
        "description": "Frees the given XML parser.", 
        "name": "xml_parser_free", 
        "overview": "bool xml_parser_free ( resource $parser )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to free.", 
                "name": "parser"
            }
        ], 
        "path": "php/function.xml-parser-free", 
        "type": "XML"
    }, 
    "xml_parser_get_option": {
        "description": "Gets an option value from an XML parser.", 
        "name": "xml_parser_get_option", 
        "overview": "mixed xml_parser_get_option ( resource $parser , int $option )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to get an option from.", 
                "name": "parser"
            }, 
            {
                "descr": "Which option to fetch. XML_OPTION_CASE_FOLDING and XML_OPTION_TARGET_ENCODING are available. ", 
                "name": "option"
            }
        ], 
        "path": "php/function.xml-parser-get-option", 
        "type": "XML"
    }, 
    "xml_parser_set_option": {
        "description": "Sets an option in an XML parser.", 
        "name": "xml_parser_set_option", 
        "overview": "bool xml_parser_set_option ( resource $parser , int $option , mixed $value )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set an option in.", 
                "name": "parser"
            }, 
            {
                "descr": "Which option to set. See below. ", 
                "name": "option"
            }, 
            {
                "descr": "The option's new value.", 
                "name": "value"
            }
        ], 
        "path": "php/function.xml-parser-set-option", 
        "type": "XML"
    }, 
    "xml_set_character_data_handler": {
        "description": "Sets the character data handler function for the XML parser parser.", 
        "name": "xml_set_character_data_handler", 
        "overview": "bool xml_set_character_data_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set up character data handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, data, contains the character data as a string.", 
                "name": "data"
            }
        ], 
        "path": "php/function.xml-set-character-data-handler", 
        "type": "XML"
    }, 
    "xml_set_default_handler": {
        "description": "Sets the default handler function for the XML parser parser.", 
        "name": "xml_set_default_handler", 
        "overview": "bool xml_set_default_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set up default handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, data, contains the character data.This may be the XML declaration, document type declaration, entities or other data for which no other handler exists.", 
                "name": "data"
            }
        ], 
        "path": "php/function.xml-set-default-handler", 
        "type": "XML"
    }, 
    "xml_set_element_handler": {
        "description": "Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser.", 
        "name": "xml_set_element_handler", 
        "overview": "bool xml_set_element_handler ( resource $parser , callable $start_element_handler , callable $end_element_handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set up start and end element handler functions.", 
                "name": "parser"
            }, 
            {
                "descr": "The function named by start_element_handler must accept three parameters:  start_element_handler ( resource $parser , string $name , array $attribs )  parser   The first parameter, parser, is a reference to the XML parser calling the handler.", 
                "name": "start_element_handler"
            }, 
            {
                "descr": "The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters.", 
                "name": "name"
            }, 
            {
                "descr": "The third parameter, attribs, contains an associative array with the element's attributes (if any).The keys of this array are the attribute names, the values are the attribute values.Attribute names are case-folded on the same criteria as element names.Attribute values are not case-folded.   The original order of the attributes can be retrieved by walking through attribs the normal way, using each().The first key in the array was the first attribute, and so on.", 
                "name": "attribs"
            }, 
            {
                "descr": "The function named by end_element_handler must accept two parameters:  end_element_handler ( resource $parser , string $name )  parser   The first parameter, parser, is a reference to the XML parser calling the handler.", 
                "name": "end_element_handler"
            }, 
            {
                "descr": "The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters.", 
                "name": "name"
            }
        ], 
        "path": "php/function.xml-set-element-handler", 
        "type": "XML"
    }, 
    "xml_set_end_namespace_decl_handler": {
        "description": "Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.", 
        "name": "xml_set_end_namespace_decl_handler", 
        "overview": "bool xml_set_end_namespace_decl_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The prefix is a string used to reference the namespace within an XML object.", 
                "name": "prefix"
            }
        ], 
        "path": "php/function.xml-set-end-namespace-decl-handler", 
        "type": "XML"
    }, 
    "xml_set_external_entity_ref_handler": {
        "description": "Sets the external entity reference handler function for the XML parser parser.", 
        "name": "xml_set_external_entity_ref_handler", 
        "overview": "bool xml_set_external_entity_ref_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set up external entity reference handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, open_entity_names, is a space-separated list of the names of the entities that are open for the parse of this entity (including the name of the referenced entity).", 
                "name": "open_entity_names"
            }, 
            {
                "descr": "This is the base for resolving the system identifier (system_id) of the external entity.Currently this parameter will always be set to an empty string.", 
                "name": "base"
            }, 
            {
                "descr": "The fourth parameter, system_id, is the system identifier as specified in the entity declaration.", 
                "name": "system_id"
            }, 
            {
                "descr": "The fifth parameter, public_id, is the public identifier as specified in the entity declaration, or an empty string if none was specified; the whitespace in the public identifier will have been normalized as required by the XML spec.", 
                "name": "public_id"
            }
        ], 
        "path": "php/function.xml-set-external-entity-ref-handler", 
        "type": "XML"
    }, 
    "xml_set_notation_decl_handler": {
        "description": "Sets the notation declaration handler function for the XML parser parser.", 
        "name": "xml_set_notation_decl_handler", 
        "overview": "bool xml_set_notation_decl_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set up notation declaration handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "This is the notation's name, as per the notation format described above.", 
                "name": "notation_name"
            }, 
            {
                "descr": "This is the base for resolving the system identifier (system_id) of the notation declaration. ", 
                "name": "base"
            }, 
            {
                "descr": "System identifier of the external notation declaration.", 
                "name": "system_id"
            }, 
            {
                "descr": "Public identifier of the external notation declaration.", 
                "name": "public_id"
            }
        ], 
        "path": "php/function.xml-set-notation-decl-handler", 
        "type": "XML"
    }, 
    "xml_set_object": {
        "description": "This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.", 
        "name": "xml_set_object", 
        "overview": "bool xml_set_object ( resource $parser , object &$object )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to use inside the object.", 
                "name": "parser"
            }, 
            {
                "descr": "The object where to use the XML parser.", 
                "name": "object"
            }
        ], 
        "path": "php/function.xml-set-object", 
        "type": "XML"
    }, 
    "xml_set_processing_instruction_handler": {
        "description": "Sets the processing instruction (PI) handler function for the XML parser parser.", 
        "name": "xml_set_processing_instruction_handler", 
        "overview": "bool xml_set_processing_instruction_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set up processing instruction (PI) handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The second parameter, target, contains the PI target.", 
                "name": "target"
            }, 
            {
                "descr": "The third parameter, data, contains the PI data.", 
                "name": "data"
            }
        ], 
        "path": "php/function.xml-set-processing-instruction-handler", 
        "type": "XML"
    }, 
    "xml_set_start_namespace_decl_handler": {
        "description": "Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag.", 
        "name": "xml_set_start_namespace_decl_handler", 
        "overview": "bool xml_set_start_namespace_decl_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The prefix is a string used to reference the namespace within an XML object.", 
                "name": "prefix"
            }, 
            {
                "descr": "Uniform Resource Identifier (URI) of namespace.", 
                "name": "uri"
            }
        ], 
        "path": "php/function.xml-set-start-namespace-decl-handler", 
        "type": "XML"
    }, 
    "xml_set_unparsed_entity_decl_handler": {
        "description": "Sets the unparsed entity declaration handler function for the XML parser parser.", 
        "name": "xml_set_unparsed_entity_decl_handler", 
        "overview": "bool xml_set_unparsed_entity_decl_handler ( resource $parser , callable $handler )", 
        "parameters": [
            {
                "descr": "A reference to the XML parser to set up unparsed entity declaration handler function.", 
                "name": "parser"
            }, 
            {
                "descr": "handler is a string containing the name of a function that must exist when xml_parse() is called for parser. ", 
                "name": "handler"
            }, 
            {
                "descr": "The name of the entity that is about to be defined.", 
                "name": "entity_name"
            }, 
            {
                "descr": "This is the base for resolving the system identifier (systemId) of the external entity.Currently this parameter will always be set to an empty string.", 
                "name": "base"
            }, 
            {
                "descr": "System identifier for the external entity.", 
                "name": "system_id"
            }, 
            {
                "descr": "Public identifier for the external entity.", 
                "name": "public_id"
            }, 
            {
                "descr": "Name of the notation of this entity (see xml_set_notation_decl_handler()).", 
                "name": "notation_name"
            }
        ], 
        "path": "php/function.xml-set-unparsed-entity-decl-handler", 
        "type": "XML"
    }, 
    "xmlrpc_decode": {
        "description": "", 
        "name": "xmlrpc_decode", 
        "overview": "mixed xmlrpc_decode ( string $xml [, string $encoding = \"iso-8859-1\" ] )", 
        "parameters": [
            {
                "descr": "XML response returned by XMLRPC method.", 
                "name": "xml"
            }, 
            {
                "descr": "Input encoding supported by iconv.", 
                "name": "encoding"
            }
        ], 
        "path": "php/function.xmlrpc-decode", 
        "type": "XML"
    }, 
    "xmlrpc_decode_request": {
        "description": "", 
        "name": "xmlrpc_decode_request", 
        "overview": "mixed xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-decode-request", 
        "type": "XML"
    }, 
    "xmlrpc_encode": {
        "description": "", 
        "name": "xmlrpc_encode", 
        "overview": "string xmlrpc_encode ( mixed $value )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-encode", 
        "type": "XML"
    }, 
    "xmlrpc_encode_request": {
        "description": "", 
        "name": "xmlrpc_encode_request", 
        "overview": "string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )", 
        "parameters": [
            {
                "descr": "Name of the method to call.", 
                "name": "method"
            }, 
            {
                "descr": "Method parameters compatible with method signature.", 
                "name": "params"
            }, 
            {
                "descr": "Array specifying output options may contain (default values are emphasised): output_type: php, xml verbosity: no_white_space, newlines_only, pretty escaping: cdata, non-ascii, non-print, markup (may be a string with one value or an array with multiple values) version: simple, xmlrpc, soap 1.1, auto encoding: iso-8859-1, other character set supported by iconv", 
                "name": "output_options"
            }
        ], 
        "path": "php/function.xmlrpc-encode-request", 
        "type": "XML"
    }, 
    "xmlrpc_get_type": {
        "description": "", 
        "name": "xmlrpc_get_type", 
        "overview": "string xmlrpc_get_type ( mixed $value )", 
        "parameters": [
            {
                "descr": "PHP value", 
                "name": "value"
            }
        ], 
        "path": "php/function.xmlrpc-get-type", 
        "type": "XML"
    }, 
    "xmlrpc_is_fault": {
        "description": "", 
        "name": "xmlrpc_is_fault", 
        "overview": "bool xmlrpc_is_fault ( array $arg )", 
        "parameters": [
            {
                "descr": "Array returned by xmlrpc_decode().", 
                "name": "arg"
            }
        ], 
        "path": "php/function.xmlrpc-is-fault", 
        "type": "XML"
    }, 
    "xmlrpc_parse_method_descriptions": {
        "description": "", 
        "name": "xmlrpc_parse_method_descriptions", 
        "overview": "array xmlrpc_parse_method_descriptions ( string $xml )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-parse-method-descriptions", 
        "type": "XML"
    }, 
    "xmlrpc_server_add_introspection_data": {
        "description": "", 
        "name": "xmlrpc_server_add_introspection_data", 
        "overview": "int xmlrpc_server_add_introspection_data ( resource $server , array $desc )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-server-add-introspection-data", 
        "type": "XML"
    }, 
    "xmlrpc_server_call_method": {
        "description": "", 
        "name": "xmlrpc_server_call_method", 
        "overview": "string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-server-call-method", 
        "type": "XML"
    }, 
    "xmlrpc_server_create": {
        "description": "", 
        "name": "xmlrpc_server_create", 
        "overview": "resource xmlrpc_server_create ( void )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-server-create", 
        "type": "XML"
    }, 
    "xmlrpc_server_destroy": {
        "description": "", 
        "name": "xmlrpc_server_destroy", 
        "overview": "int xmlrpc_server_destroy ( resource $server )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-server-destroy", 
        "type": "XML"
    }, 
    "xmlrpc_server_register_introspection_callback": {
        "description": "", 
        "name": "xmlrpc_server_register_introspection_callback", 
        "overview": "bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-server-register-introspection-callback", 
        "type": "XML"
    }, 
    "xmlrpc_server_register_method": {
        "description": "", 
        "name": "xmlrpc_server_register_method", 
        "overview": "bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )", 
        "parameters": [], 
        "path": "php/function.xmlrpc-server-register-method", 
        "type": "XML"
    }, 
    "xmlrpc_set_type": {
        "description": "Sets xmlrpc type, base64 or datetime, for a PHP string value.", 
        "name": "xmlrpc_set_type", 
        "overview": "bool xmlrpc_set_type ( string &$value , string $type )", 
        "parameters": [
            {
                "descr": "Value to set the type", 
                "name": "value"
            }, 
            {
                "descr": "'base64' or 'datetime'", 
                "name": "type"
            }
        ], 
        "path": "php/function.xmlrpc-set-type", 
        "type": "XML"
    }, 
    "yaml_emit": {
        "description": "Generate a YAML representation of the provided data.", 
        "name": "yaml_emit", 
        "overview": "string yaml_emit ( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )", 
        "parameters": [
            {
                "descr": "The data being encoded. Can be any type except a resource.", 
                "name": "data"
            }, 
            {
                "descr": "Output character encoding chosen from YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING.", 
                "name": "encoding"
            }, 
            {
                "descr": "Output linebreak style chosen from YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK.", 
                "name": "linebreak"
            }, 
            {
                "descr": "Content handlers for emitting YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-emit", 
        "type": "YAML"
    }, 
    "yaml_emit_file": {
        "description": "Generate a YAML representation of the provided data in the filename.", 
        "name": "yaml_emit_file", 
        "overview": "bool yaml_emit_file ( string $filename , mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "The data being encoded. Can be any type except a resource.", 
                "name": "data"
            }, 
            {
                "descr": "Output character encoding chosen from YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING.", 
                "name": "encoding"
            }, 
            {
                "descr": "Output linebreak style chosen from YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK.", 
                "name": "linebreak"
            }, 
            {
                "descr": "Content handlers for emitting YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-emit-file", 
        "type": "YAML"
    }, 
    "yaml_parse": {
        "description": "Convert all or part of a YAML document stream to a PHP variable.", 
        "name": "yaml_parse", 
        "overview": "mixed yaml_parse ( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )", 
        "parameters": [
            {
                "descr": "The string to parse as a YAML document stream.", 
                "name": "input"
            }, 
            {
                "descr": "Document to extract from stream (-1 for all documents, 0 for first document, ...).", 
                "name": "pos"
            }, 
            {
                "descr": "If ndocs is provided, then it is filled with the number of documents found in stream.", 
                "name": "ndocs"
            }, 
            {
                "descr": "Content handlers for YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-parse", 
        "type": "YAML"
    }, 
    "yaml_parse_file": {
        "description": "Convert all or part of a YAML document stream read from a file to a PHP variable.", 
        "name": "yaml_parse_file", 
        "overview": "mixed yaml_parse_file ( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )", 
        "parameters": [
            {
                "descr": "Path to the file.", 
                "name": "filename"
            }, 
            {
                "descr": "Document to extract from stream (-1 for all documents, 0 for first document, ...).", 
                "name": "pos"
            }, 
            {
                "descr": "If ndocs is provided, then it is filled with the number of documents found in stream.", 
                "name": "ndocs"
            }, 
            {
                "descr": "Content handlers for YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-parse-file", 
        "type": "YAML"
    }, 
    "yaml_parse_url": {
        "description": "Convert all or part of a YAML document stream read from a URL to a PHP variable.", 
        "name": "yaml_parse_url", 
        "overview": "mixed yaml_parse_url ( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )", 
        "parameters": [
            {
                "descr": "url should be of the form \"scheme://...\". ", 
                "name": "url"
            }, 
            {
                "descr": "Document to extract from stream (-1 for all documents, 0 for first document, ...).", 
                "name": "pos"
            }, 
            {
                "descr": "If ndocs is provided, then it is filled with the number of documents found in stream.", 
                "name": "ndocs"
            }, 
            {
                "descr": "Content handlers for YAML nodes. ", 
                "name": "callbacks"
            }
        ], 
        "path": "php/function.yaml-parse-url", 
        "type": "YAML"
    }, 
    "zend_logo_guid": {
        "description": "This function returns the ID which can be used to display the Zend logo using the built-in image.", 
        "name": "zend_logo_guid", 
        "overview": "string zend_logo_guid ( void )", 
        "parameters": [], 
        "path": "php/function.zend-logo-guid", 
        "type": "Language"
    }, 
    "zend_thread_id": {
        "description": "This function returns a unique identifier for the current thread.", 
        "name": "zend_thread_id", 
        "overview": "int zend_thread_id ( void )", 
        "parameters": [], 
        "path": "php/function.zend-thread-id", 
        "type": "Language"
    }, 
    "zend_version": {
        "description": "Returns a string containing the version of the currently running Zend Engine.", 
        "name": "zend_version", 
        "overview": "string zend_version ( void )", 
        "parameters": [], 
        "path": "php/function.zend-version", 
        "type": "Language"
    }, 
    "zip_close": {
        "description": "Closes the given ZIP file archive.", 
        "name": "zip_close", 
        "overview": "void zip_close ( resource $zip )", 
        "parameters": [
            {
                "descr": "A ZIP file previously opened with zip_open().", 
                "name": "zip"
            }
        ], 
        "path": "php/function.zip-close", 
        "type": "Compression"
    }, 
    "zip_entry_close": {
        "description": "Closes the specified directory entry.", 
        "name": "zip_entry_close", 
        "overview": "bool zip_entry_close ( resource $zip_entry )", 
        "parameters": [
            {
                "descr": "A directory entry previously opened zip_entry_open().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-close", 
        "type": "Compression"
    }, 
    "zip_entry_compressedsize": {
        "description": "Returns the compressed size of the specified directory entry.", 
        "name": "zip_entry_compressedsize", 
        "overview": "int zip_entry_compressedsize ( resource $zip_entry )", 
        "parameters": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-compressedsize", 
        "type": "Compression"
    }, 
    "zip_entry_compressionmethod": {
        "description": "Returns the compression method of the directory entry specified by zip_entry.", 
        "name": "zip_entry_compressionmethod", 
        "overview": "string zip_entry_compressionmethod ( resource $zip_entry )", 
        "parameters": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-compressionmethod", 
        "type": "Compression"
    }, 
    "zip_entry_filesize": {
        "description": "Returns the actual size of the specified directory entry.", 
        "name": "zip_entry_filesize", 
        "overview": "int zip_entry_filesize ( resource $zip_entry )", 
        "parameters": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-filesize", 
        "type": "Compression"
    }, 
    "zip_entry_name": {
        "description": "Returns the name of the specified directory entry.", 
        "name": "zip_entry_name", 
        "overview": "string zip_entry_name ( resource $zip_entry )", 
        "parameters": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }
        ], 
        "path": "php/function.zip-entry-name", 
        "type": "Compression"
    }, 
    "zip_entry_open": {
        "description": "Opens a directory entry in a zip file for reading.", 
        "name": "zip_entry_open", 
        "overview": "bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )", 
        "parameters": [
            {
                "descr": "A valid resource handle returned by zip_open().", 
                "name": "zip"
            }, 
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }, 
            {
                "descr": "Any of the modes specified in the documentation of fopen(). ", 
                "name": "mode"
            }
        ], 
        "path": "php/function.zip-entry-open", 
        "type": "Compression"
    }, 
    "zip_entry_read": {
        "description": "Reads from an open directory entry.", 
        "name": "zip_entry_read", 
        "overview": "string zip_entry_read ( resource $zip_entry [, int $length = 1024 ] )", 
        "parameters": [
            {
                "descr": "A directory entry returned by zip_read().", 
                "name": "zip_entry"
            }, 
            {
                "descr": "The number of bytes to return.  Note:  This should be the uncompressed length you wish to read.", 
                "name": "length"
            }
        ], 
        "path": "php/function.zip-entry-read", 
        "type": "Compression"
    }, 
    "zip_open": {
        "description": "Opens a new zip archive for reading.", 
        "name": "zip_open", 
        "overview": "resource zip_open ( string $filename )", 
        "parameters": [
            {
                "descr": "The file name of the ZIP archive to open.", 
                "name": "filename"
            }
        ], 
        "path": "php/function.zip-open", 
        "type": "Compression"
    }, 
    "zip_read": {
        "description": "Reads the next entry in a zip file archive.", 
        "name": "zip_read", 
        "overview": "resource zip_read ( resource $zip )", 
        "parameters": [
            {
                "descr": "A ZIP file previously opened with zip_open().", 
                "name": "zip"
            }
        ], 
        "path": "php/function.zip-read", 
        "type": "Compression"
    }, 
    "zlib_decode": {
        "description": "Uncompress any raw/gzip/zlib encoded data.", 
        "name": "zlib_decode", 
        "overview": "string zlib_decode ( string $data [, string $max_decoded_len ] )", 
        "parameters": [], 
        "path": "php/function.zlib-decode", 
        "type": "Compression"
    }, 
    "zlib_encode": {
        "description": "Compress data with the specified encoding.", 
        "name": "zlib_encode", 
        "overview": "string zlib_encode ( string $data , string $encoding [, string $level = -1 ] )", 
        "parameters": [], 
        "path": "php/function.zlib-encode", 
        "type": "Compression"
    }, 
    "zlib_get_coding_type": {
        "description": "Returns the coding type used for output compression.", 
        "name": "zlib_get_coding_type", 
        "overview": "string zlib_get_coding_type ( void )", 
        "parameters": [], 
        "path": "php/function.zlib-get-coding-type", 
        "type": "Compression"
    }
}